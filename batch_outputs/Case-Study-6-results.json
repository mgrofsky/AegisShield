[
{
    "case_number": "6",
    "batch_number": "2",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker disguises themselves as a legitimate user to gain unauthorized access to user profiles.",
            "Assumptions": [
                {
                    "Assumption": "Weak or no authentication mechanisms in place",
                    "Role": "Application Designer",
                    "Condition": "Authentication is not enforced or is easily bypassed."
                },
                {
                    "Assumption": "Insufficient session management",
                    "Role": "Security Architect",
                    "Condition": "Sessions are not properly managed or invalidated after use."
                },
                {
                    "Assumption": "Presence of phishing vulnerabilities",
                    "Role": "End User",
                    "Condition": "Users can be tricked into revealing credentials via phishing."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user profile data.",
            "MITRE ATT&CK Keywords": [
                "Spoofing",
                "Authentication Bypass",
                "Phishing"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses compromised third-party application credentials to access linked user accounts.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications have weak security controls",
                    "Role": "Third-Party App Developer",
                    "Condition": "Third-party applications do not enforce strong authentication or secure data sharing practices."
                },
                {
                    "Assumption": "Data sharing between platforms is not encrypted",
                    "Role": "Security Engineer",
                    "Condition": "Data is transmitted in plaintext between social media platform and third-party apps."
                },
                {
                    "Assumption": "Lack of monitoring and anomaly detection",
                    "Role": "SOC Analyst",
                    "Condition": "No mechanisms in place to detect unusual access patterns."
                }
            ],
            "Potential Impact": "Compromise of multiple user accounts through third-party integrations.",
            "MITRE ATT&CK Keywords": [
                "Third-Party Compromise",
                "Credential Abuse",
                "APIs"
            ],
            "mitre_technique": {
                "name": "Application Access Token",
                "description": "Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.\n",
                "id": "attack-pattern--27960489-4e7f-461d-a62a-f5c0cb521e4a",
                "technique_id": "T1527"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate service to trick users into providing sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "Absence of user education on phishing",
                    "Role": "Compliance Officer",
                    "Condition": "Users are not regularly educated about phishing threats."
                },
                {
                    "Assumption": "Lack of multi-factor authentication (MFA)",
                    "Role": "IT Security Administrator",
                    "Condition": "MFA is not enforced on user accounts."
                },
                {
                    "Assumption": "Insecure email communication",
                    "Role": "IT Administrator",
                    "Condition": "Emails are not protected with proper anti-spoofing measures like DKIM, SPF, and DMARC."
                }
            ],
            "Potential Impact": "Users inadvertently disclose sensitive data to attackers.",
            "MITRE ATT&CK Keywords": [
                "Impersonation",
                "Phishing",
                "Social Engineering"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies user content or posts.",
            "Assumptions": [
                {
                    "Assumption": "Lack of input validation",
                    "Role": "Web Developer",
                    "Condition": "User inputs are not properly validated or sanitized."
                },
                {
                    "Assumption": "Insecure direct object references (IDOR)",
                    "Role": "Developer",
                    "Condition": "Application does not properly secure direct access to objects by references."
                },
                {
                    "Assumption": "Weak permissions management",
                    "Role": "IT Security Officer",
                    "Condition": "Permissions are not strictly enforced or defined."
                }
            ],
            "Potential Impact": "Integrity of user content is compromised and trust in the platform is diminished.",
            "MITRE ATT&CK Keywords": [
                "Data Tampering",
                "Web Application",
                "Privilege Manipulation"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits vulnerabilities in the backend servers to alter stored data.",
            "Assumptions": [
                {
                    "Assumption": "Unpatched vulnerabilities in server software",
                    "Role": "System Administrator",
                    "Condition": "Servers run outdated software with known vulnerabilities."
                },
                {
                    "Assumption": "Lack of proper logging and monitoring",
                    "Role": "SOC Analyst",
                    "Condition": "Server activities are not adequately monitored or logged."
                },
                {
                    "Assumption": "Insufficient access controls",
                    "Role": "Security Engineer",
                    "Condition": "Role-based access controls are not implemented properly."
                }
            ],
            "Potential Impact": "Loss of data integrity and potential data corruption.",
            "MITRE ATT&CK Keywords": [
                "Server Exploitation",
                "Vulnerability Exploitation",
                "Data Manipulation"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious third-party applications alter user data due to overly permissive access.",
            "Assumptions": [
                {
                    "Assumption": "Overly permissive app permissions",
                    "Role": "App Developer",
                    "Condition": "Third-party apps request and receive excessive permissions."
                },
                {
                    "Assumption": "No detailed audit of third-party apps",
                    "Role": "Compliance Officer",
                    "Condition": "Third-party apps are not thoroughly vetted or audited."
                },
                {
                    "Assumption": "Lack of user awareness",
                    "Role": "End User",
                    "Condition": "Users are not aware of the permissions they grant to third-party apps."
                }
            ],
            "Potential Impact": "Unauthorized modification of user data.",
            "MITRE ATT&CK Keywords": [
                "Third-Party App",
                "Data Tampering",
                "Permissions Abuse"
            ],
            "mitre_technique": {
                "name": "Steal Application Access Token",
                "description": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019)  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.(Citation: Kubernetes Service Accounts)  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment.(Citation: Cider Security Top 10 CICD Security Risks) If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017) The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens(Citation: Auth0 Understanding Refresh Tokens), allowing them to obtain new access tokens without prompting the user.  \n\n",
                "id": "attack-pattern--890c9858-598c-401d-a4d5-c67ebcdd703a",
                "technique_id": "T1528"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user claims they did not post certain content that appears on their profile.",
            "Assumptions": [
                {
                    "Assumption": "Weak authentication mechanisms",
                    "Role": "Software Engineer",
                    "Condition": "Unable to definitively tie actions to a specific user."
                },
                {
                    "Assumption": "No logs of user actions",
                    "Role": "System Admin",
                    "Condition": "User actions are not adequately logged or traceable."
                },
                {
                    "Assumption": "Shared account usage",
                    "Role": "End User",
                    "Condition": "Multiple individuals have access to the same account."
                }
            ],
            "Potential Impact": "Loss of non-repudiation, problematic for dispute resolution.",
            "MITRE ATT&CK Keywords": [
                "Log Tampering",
                "Account Abuse",
                "Action Attribution"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A third-party claims they did not cause certain actions after gaining unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "Lack of session management",
                    "Role": "Security Architect",
                    "Condition": "Sessions are not logged or monitored effectively."
                },
                {
                    "Assumption": "No anomaly detection mechanisms",
                    "Role": "SOC Analyst",
                    "Condition": "System does not detect abnormal behaviors or access patterns."
                },
                {
                    "Assumption": "Weak forensic capabilities",
                    "Role": "Incident Responder",
                    "Condition": "System lacks the means to collect and analyze forensic evidence."
                }
            ],
            "Potential Impact": "Difficulty in attributing actions to responsible parties.",
            "MITRE ATT&CK Keywords": [
                "Unauthorized Access",
                "Attribution",
                "Session Management"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies performing malicious activities by altering log files.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient log protection",
                    "Role": "System Admin",
                    "Condition": "Logs are not tamper-resistant or encrypted."
                },
                {
                    "Assumption": "Privilege escalation allows log modification",
                    "Role": "Threat Actor",
                    "Condition": "Attacker gains higher privileges, enabling log access."
                },
                {
                    "Assumption": "No centralized logging",
                    "Role": "Network Engineer",
                    "Condition": "Logs are stored locally without replication to a secure location."
                }
            ],
            "Potential Impact": "Loss of event traceability and accountability.",
            "MITRE ATT&CK Keywords": [
                "Log Manipulation",
                "Privilege Escalation",
                "Evidence Tampering"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted communication to steal sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "Data in transit is unencrypted",
                    "Role": "Network Engineer",
                    "Condition": "Data between user devices and servers is not encrypted."
                },
                {
                    "Assumption": "Insufficient network monitoring",
                    "Role": "SOC Analyst",
                    "Condition": "No mechanisms to detect and alert on unusual network traffic."
                },
                {
                    "Assumption": "Weak network segmentation",
                    "Role": "Network Architect",
                    "Condition": "Network and servers are not properly segmented."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data in transit.",
            "MITRE ATT&CK Keywords": [
                "Sniffing",
                "Network Interception",
                "Data in Transit"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A vulnerability in third-party integrations exposes user data.",
            "Assumptions": [
                {
                    "Assumption": "Third-party apps have security flaws",
                    "Role": "Third-Party Developer",
                    "Condition": "Integrations have unpatched security vulnerabilities."
                },
                {
                    "Assumption": "Overprivileged access granted",
                    "Role": "End User",
                    "Condition": "Users unknowingly grant excessive permissions to third-party apps."
                },
                {
                    "Assumption": "No security reviews of third-party apps",
                    "Role": "Compliance Officer",
                    "Condition": "Third-party apps are not periodically reviewed for security compliance."
                }
            ],
            "Potential Impact": "Sensitive data exposed through compromised third-party apps.",
            "MITRE ATT&CK Keywords": [
                "Third-Party Vulnerability",
                "Data Leak",
                "Application Vulnerability"
            ],
            "mitre_technique": {
                "name": "Exploitation for Defense Evasion",
                "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\n\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001). The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.\n\nThere have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries (Citation: Salesforce zero-day in facebook phishing attack), evade security logs (Citation: Bypassing CloudTrail in AWS Service Catalog), or deploy hidden infrastructure.(Citation: GhostToken GCP flaw)",
                "id": "attack-pattern--fe926152-f431-4baf-956c-4ad3cb0bf23b",
                "technique_id": "T1211"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Misconfigured privacy settings lead to unintentional data exposure.",
            "Assumptions": [
                {
                    "Assumption": "Complex privacy settings",
                    "Role": "UI/UX Designer",
                    "Condition": "Privacy controls are not intuitive or easy to use."
                },
                {
                    "Assumption": "Default settings are overly permissive",
                    "Role": "Application Developer",
                    "Condition": "Default privacy settings allow broad data access."
                },
                {
                    "Assumption": "Lack of user awareness",
                    "Role": "End User",
                    "Condition": "Users are not fully aware of their privacy settings."
                }
            ],
            "Potential Impact": "Unintentional exposure of personal information.",
            "MITRE ATT&CK Keywords": [
                "Privacy Misconfiguration",
                "Data Exposure",
                "User Settings"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overwhelms the backend servers with excessive traffic.",
            "Assumptions": [
                {
                    "Assumption": "No DDoS protection",
                    "Role": "Network Engineer",
                    "Condition": "The infrastructure lacks effective DDoS mitigation strategies."
                },
                {
                    "Assumption": "System lacks scalability",
                    "Role": "System Architect",
                    "Condition": "Servers are not designed to scale under high traffic loads."
                },
                {
                    "Assumption": "Insufficient traffic monitoring",
                    "Role": "SOC Analyst",
                    "Condition": "Traffic patterns are not actively monitored for anomalies."
                }
            ],
            "Potential Impact": "Service outage, preventing users from accessing the platform.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "Flooding",
                "Traffic Overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Abuse of resource-intensive features to degrade system performance.",
            "Assumptions": [
                {
                    "Assumption": "Resource-intensive features are vulnerable to misuse",
                    "Role": "Application Developer",
                    "Condition": "Features like video uploading or processing do not have rate limits."
                },
                {
                    "Assumption": "No load balancing",
                    "Role": "Network Architect",
                    "Condition": "System lacks load balancing to distribute heavy load across servers."
                },
                {
                    "Assumption": "Lack of input rate limiting",
                    "Role": "Security Engineer",
                    "Condition": "No controls to limit the rate of resource requests."
                }
            ],
            "Potential Impact": "Degradation in system performance impacting user experience.",
            "MITRE ATT&CK Keywords": [
                "Resource Exhaustion",
                "Load Degradation",
                "Rate Limiting"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits specific vulnerabilities to crash backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Unpatched software vulnerabilities",
                    "Role": "System Admin",
                    "Condition": "Servers run outdated or unpatched software."
                },
                {
                    "Assumption": "No vulnerability management program",
                    "Role": "Security Officer",
                    "Condition": "No effective program to identify and mitigate vulnerabilities."
                },
                {
                    "Assumption": "Lack of redundancy",
                    "Role": "IT Architect",
                    "Condition": "Critical services lack redundancy and failover mechanisms."
                }
            ],
            "Potential Impact": "Backend server crashes causing downtime.",
            "MITRE ATT&CK Keywords": [
                "Exploitation",
                "Software Vulnerability",
                "Crash"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains administrative access through privilege escalation.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient privilege isolation",
                    "Role": "System Admin",
                    "Condition": "System does not enforce strict privilege separation."
                },
                {
                    "Assumption": "Unpatched privilege escalation vulnerabilities",
                    "Role": "Security Engineer",
                    "Condition": "Known privilege escalation vulnerabilities are not patched."
                },
                {
                    "Assumption": "Weak access controls",
                    "Role": "Application Developer",
                    "Condition": "Access controls do not enforce the principle of least privilege."
                }
            ],
            "Potential Impact": "Complete control over user accounts and backend systems.",
            "MITRE ATT&CK Keywords": [
                "Privilege Escalation",
                "Administrative Access",
                "Access Control"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A user exploits a vulnerability in third-party integrations to gain elevated access rights.",
            "Assumptions": [
                {
                    "Assumption": "Third-party integrations are not secured",
                    "Role": "Third-Party Developer",
                    "Condition": "Integrations do not enforce proper access controls."
                },
                {
                    "Assumption": "Insufficient API security",
                    "Role": "API Developer",
                    "Condition": "APIs expose functionality that can be exploited for privilege escalation."
                },
                {
                    "Assumption": "No regular security assessments of integrations",
                    "Role": "Compliance Officer",
                    "Condition": "Third-party integrations are not regularly assessed for security."
                }
            ],
            "Potential Impact": "Elevated access rights leading to unauthorized actions and data breaches.",
            "MITRE ATT&CK Keywords": [
                "Third-Party Integration",
                "API Security",
                "Access Rights"
            ],
            "mitre_technique": {
                "name": "Parent PID Spoofing",
                "description": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess</code> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe</code> or <code>consent.exe</code>) rather than the current user context.(Citation: Microsoft UAC Nov 2018)\n\nAdversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of [PowerShell](https://attack.mitre.org/techniques/T1059/001)/[Rundll32](https://attack.mitre.org/techniques/T1218/011) to be <code>explorer.exe</code> rather than an Office document delivered as part of [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001).(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via [Visual Basic](https://attack.mitre.org/techniques/T1059/005) within a malicious Office document or any code that can perform [Native API](https://attack.mitre.org/techniques/T1106).(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)\n\nExplicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe</code>), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017)",
                "id": "attack-pattern--93591901-3172-4e94-abf8-6034ab26f44a",
                "technique_id": "T1134.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a misconfigured user role to perform unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "Role misconfiguration",
                    "Role": "IT Admin",
                    "Condition": "User roles are configured with excessive privileges."
                },
                {
                    "Assumption": "No role auditing",
                    "Role": "Compliance Officer",
                    "Condition": "No regular audit of roles and associated permissions."
                },
                {
                    "Assumption": "Lack of granular access control",
                    "Role": "Security Engineer",
                    "Condition": "System does not implement fine-grained access control."
                }
            ],
            "Potential Impact": "Unauthorized actions and potential compromise of sensitive data.",
            "MITRE ATT&CK Keywords": [
                "Role Misconfiguration",
                "Access Control",
                "Privilege Abuse"
            ],
            "mitre_technique": {
                "name": "Additional Container Cluster Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled user or service account to maintain persistent access to a container orchestration system. For example, an adversary with sufficient permissions may create a RoleBinding or a ClusterRoleBinding to bind a Role or ClusterRole to a Kubernetes account.(Citation: Kubernetes RBAC)(Citation: Aquasec Kubernetes Attack 2023) Where attribute-based access control (ABAC) is in use, an adversary with sufficient permissions may modify a Kubernetes ABAC policy to give the target account additional permissions.(Citation: Kuberentes ABAC)\n \nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised.  \n\nNote that where container orchestration systems are deployed in cloud environments, as with Google Kubernetes Engine, Amazon Elastic Kubernetes Service, and Azure Kubernetes Service, cloud-based  role-based access control (RBAC) assignments or ABAC policies can often be used in place of or in addition to local permission assignments.(Citation: Google Cloud Kubernetes IAM)(Citation: AWS EKS IAM Roles for Service Accounts)(Citation: Microsoft Azure Kubernetes Service Service Accounts) In these cases, this technique may be used in conjunction with [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003).",
                "id": "attack-pattern--35d30338-5bfa-41b0-a170-ec06dfd75f64",
                "technique_id": "T1098.006"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "1",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake social media profile to impersonate a legitimate user and engage with their contacts.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can create accounts without strong identity verification.",
                    "Role": "Attacker",
                    "Condition": "Identity verification is weak or non-existent."
                },
                {
                    "Assumption": "Users do not consistently verify the identities of their contacts.",
                    "Role": "User",
                    "Condition": "Users trust profile appearances without additional checks."
                },
                {
                    "Assumption": "Privacy settings allow new contacts to see or interact with sensitive data.",
                    "Role": "User",
                    "Condition": "Privacy settings are not properly configured."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "impersonation",
                "identity fraud",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
                "id": "attack-pattern--6aac77c4-eaf2-4366-8c13-ce50ab951f38",
                "technique_id": "T1193"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Phishing emails redirect users to a fake login page mimicking the social media platform to steal credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users receive deceptive emails that mimic legitimate platform communications.",
                    "Role": "User",
                    "Condition": "Email security filters do not block phishing attempts."
                },
                {
                    "Assumption": "The fake login page is indistinguishable from the real login page by average users.",
                    "Role": "Attacker",
                    "Condition": "The fake login page is convincingly designed."
                },
                {
                    "Assumption": "Users enter their credentials into the fake login page.",
                    "Role": "User",
                    "Condition": "Users are not aware of phishing indicators."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential theft",
                "spoofing"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses stolen credentials from a data breach to log in as legitimate users.",
            "Assumptions": [
                {
                    "Assumption": "User credentials have been compromised in a data breach.",
                    "Role": "Attacker",
                    "Condition": "The attacker has access to breached credential databases."
                },
                {
                    "Assumption": "The platform does not enforce multi-factor authentication (MFA).",
                    "Role": "Application",
                    "Condition": "Users can log in using only usernames and passwords."
                },
                {
                    "Assumption": "Users reuse passwords across multiple platforms.",
                    "Role": "User",
                    "Condition": "Users do not use unique passwords for different accounts."
                }
            ],
            "Potential Impact": "Unauthorized access and potential data tampering.",
            "MITRE ATT&CK Keywords": [
                "credential stuffing",
                "password reuse",
                "account hijacking"
            ],
            "mitre_technique": {
                "name": "Credential Stuffing",
                "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.\n\nCredential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.\n\nTypically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)",
                "id": "attack-pattern--b2d03cea-aec1-45ca-9744-9ee583c1e1cc",
                "technique_id": "T1110.004"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a vulnerability in the backend server to alter user profile data.",
            "Assumptions": [
                {
                    "Assumption": "The backend server contains exploitable vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "There are unpatched or zero-day vulnerabilities in the server software."
                },
                {
                    "Assumption": "Attackers can gain unauthorized access to the backend.",
                    "Role": "Attacker",
                    "Condition": "The attackers have necessary skills and tools."
                },
                {
                    "Assumption": "Admins do not detect or log unauthorized changes quickly.",
                    "Role": "Admin",
                    "Condition": "Monitoring and alerting are deficient."
                }
            ],
            "Potential Impact": "Compromised data integrity.",
            "MITRE ATT&CK Keywords": [
                "server exploitation",
                "data manipulation",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious third-party applications modify or delete user data via linked accounts.",
            "Assumptions": [
                {
                    "Assumption": "Users link their account to less secure third-party applications.",
                    "Role": "User",
                    "Condition": "Users trust third-party applications without verifying their security."
                },
                {
                    "Assumption": "Third-party applications request excessive permissions.",
                    "Role": "Application",
                    "Condition": "Users grant permissions without scrutinizing the requirement."
                },
                {
                    "Assumption": "Third-party application have vulnerabilities that can be exploited.",
                    "Role": "Attacker",
                    "Condition": "Attackers know and exploit these vulnerabilities."
                }
            ],
            "Potential Impact": "Loss or corruption of user data.",
            "MITRE ATT&CK Keywords": [
                "third-party risk",
                "application exploitation",
                "data corruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker uses session hijacking to gain access to a user\u2019s account and modify their content.",
            "Assumptions": [
                {
                    "Assumption": "Users' sessions can be intercepted or hijacked.",
                    "Role": "Attacker",
                    "Condition": "There is inadequate session security like HTTP without TLS."
                },
                {
                    "Assumption": "The platform does not properly validate session tokens.",
                    "Role": "Application",
                    "Condition": "Session token security mechanisms are weak or poorly implemented."
                },
                {
                    "Assumption": "Users remain logged in for extended periods.",
                    "Role": "User",
                    "Condition": "Users frequently use 'Remember Me' features or do not log out regularly."
                }
            ],
            "Potential Impact": "Unauthorized data modifications and potential data leakage.",
            "MITRE ATT&CK Keywords": [
                "session hijacking",
                "man-in-the-middle",
                "account manipulation"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users dispute actions taken on their accounts, claiming they did not perform them.",
            "Assumptions": [
                {
                    "Assumption": "Logs of user actions are not securely stored or are tampered with.",
                    "Role": "Application",
                    "Condition": "Log integrity mechanisms are weak or absent."
                },
                {
                    "Assumption": "Actions can be performed without strong authentication mechanisms.",
                    "Role": "User",
                    "Condition": "Lack of non-repudiation controls like digital signatures."
                },
                {
                    "Assumption": "There is a lack of evidence to prove user actions definitively.",
                    "Role": "Admin",
                    "Condition": "Insufficient logging or forensic capabilities."
                }
            ],
            "Potential Impact": "Disputes over account activities can cause operational disruptions.",
            "MITRE ATT&CK Keywords": [
                "activity tampering",
                "log manipulation",
                "dispute resolution"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes activity logs to cover their tracks after compromising an account.",
            "Assumptions": [
                {
                    "Assumption": "Attackers have access to administrative functions or elevated privileges.",
                    "Role": "Attacker",
                    "Condition": "Backend server or database access can be elevated or misused."
                },
                {
                    "Assumption": "Logging mechanisms are easily tampered with or bypassed.",
                    "Role": "Application",
                    "Condition": "No proper log integrity checks in place."
                },
                {
                    "Assumption": "Regular log reviews and backups are not in place.",
                    "Role": "Admin",
                    "Condition": "Admins do not have routine log monitoring or backup procedures."
                }
            ],
            "Potential Impact": "Loss of audit trails and difficulty in incident investigation.",
            "MITRE ATT&CK Keywords": [
                "log deletion",
                "covering tracks",
                "incident obfuscation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny sending messages or posts that were made while their account was compromised.",
            "Assumptions": [
                {
                    "Assumption": "Compromised account actions are indistinguishable from legitimate user actions.",
                    "Role": "Application",
                    "Condition": "Lack of differentiation for actions taken during compromise."
                },
                {
                    "Assumption": "There is insufficient logging of user activity.",
                    "Role": "Application",
                    "Condition": "Detailed activity logs are not maintained."
                },
                {
                    "Assumption": "Users have not enabled enhanced security features like MFA.",
                    "Role": "User",
                    "Condition": "Users rely only on basic credentials (username/password)."
                }
            ],
            "Potential Impact": "Users can repudiate harmful actions attributed to their accounts.",
            "MITRE ATT&CK Keywords": [
                "activity denial",
                "message repudiation",
                "log insufficiency"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A vulnerability in the server allows the attacker to access all user profiles and personal data.",
            "Assumptions": [
                {
                    "Assumption": "The server software has vulnerabilities enabling unauthorized data access.",
                    "Role": "Attacker",
                    "Condition": "Exploitable vulnerabilities present in the server software."
                },
                {
                    "Assumption": "Access control mechanisms are not properly implemented or enforced.",
                    "Role": "Application",
                    "Condition": "Insufficient or incorrect access controls."
                },
                {
                    "Assumption": "Sensitive data is not encrypted at rest or in transit.",
                    "Role": "Application",
                    "Condition": "Data encryption practices are poorly implemented."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of all users' personal information.",
            "MITRE ATT&CK Keywords": [
                "data breach",
                "server vulnerability",
                "personal data exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted communications between users and the server, gaining access to sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels between users and the server are not encrypted.",
                    "Role": "Application",
                    "Condition": "No use of TLS/SSL for data in transit."
                },
                {
                    "Assumption": "Attackers have the capability to perform man-in-the-middle attacks.",
                    "Role": "Attacker",
                    "Condition": "Attackers can intercept and read plain text data."
                },
                {
                    "Assumption": "Users are unaware their communications could be intercepted.",
                    "Role": "User",
                    "Condition": "Users believe the platform is secure without additional precautions."
                }
            ],
            "Potential Impact": "Disclosure of sensitive user communications and personal data.",
            "MITRE ATT&CK Keywords": [
                "unencrypted communication",
                "man-in-the-middle",
                "data interception"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Improper access controls in third-party integrations expose user data to unauthorized parties.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications access more data than necessary.",
                    "Role": "Application",
                    "Condition": "Over-permissive access rights given to third-party apps."
                },
                {
                    "Assumption": "Access controls are not granular enough to limit data exposure.",
                    "Role": "Application",
                    "Condition": "Weak or broad access control policies in place."
                },
                {
                    "Assumption": "Users are unaware of data sharing practices with third parties.",
                    "Role": "User",
                    "Condition": "Users do not review or understand terms of data sharing."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of user data through third-party integrations.",
            "MITRE ATT&CK Keywords": [
                "third-party disclosure",
                "access control",
                "data exposure"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Attackers flood the platform with excessive requests, causing service disruption.",
            "Assumptions": [
                {
                    "Assumption": "There are no effective rate-limiting or throttling mechanisms.",
                    "Role": "Application",
                    "Condition": "Requests are not adequately controlled or limited."
                },
                {
                    "Assumption": "Attackers have the means to launch large-scale distributed attacks.",
                    "Role": "Attacker",
                    "Condition": "Botnets or distributed networks can be leveraged."
                },
                {
                    "Assumption": "Infrastructure cannot scale to handle excessive load.",
                    "Role": "System",
                    "Condition": "Lack of scalable resources to handle traffic spikes."
                }
            ],
            "Potential Impact": "Disruption in service availability for legitimate users.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "flood attack",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious content uploads cause server overload and operational issues.",
            "Assumptions": [
                {
                    "Assumption": "Users can upload large or malicious files without limitations.",
                    "Role": "User",
                    "Condition": "No content upload restrictions in place."
                },
                {
                    "Assumption": "No effective malware scanning for uploaded content.",
                    "Role": "Application",
                    "Condition": "Uploaded content is not scanned or filtered."
                },
                {
                    "Assumption": "Resource consumption is not controlled or monitored.",
                    "Role": "Application",
                    "Condition": "Lack of resource management for content processing."
                }
            ],
            "Potential Impact": "Service degradation affecting user experience and system availability.",
            "MITRE ATT&CK Keywords": [
                "malicious file upload",
                "server overload",
                "content abuse"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploiting application vulnerabilities to crash the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "The application has unpatched vulnerabilities susceptible to exploits.",
                    "Role": "Application",
                    "Condition": "There are known or zero-day vulnerabilities."
                },
                {
                    "Assumption": "Attackers have the capability to exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Technical knowledge and resources are adequate."
                },
                {
                    "Assumption": "Monitoring and mitigation mechanisms are insufficient.",
                    "Role": "Admin",
                    "Condition": "There is a lack of proactive detection and response."
                }
            ],
            "Potential Impact": "Complete or partial disruption of service availability.",
            "MITRE ATT&CK Keywords": [
                "application crash",
                "server exploitation",
                "service outage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attackers exploit application vulnerabilities to gain administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "The application has privilege escalation vulnerabilities.",
                    "Role": "Application",
                    "Condition": "There are flaws in the privilege management system."
                },
                {
                    "Assumption": "Attackers have the capability and knowledge to exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Access to necessary tools and expertise."
                },
                {
                    "Assumption": "No effective privilege separation or escalation prevention mechanisms.",
                    "Role": "Application",
                    "Condition": "Privilege boundaries are poorly enforced."
                }
            ],
            "Potential Impact": "Unauthorized access to administrative functions and sensitive data.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "server exploitation",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker compromises a third-party application with access to sensitive operations.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications can access sensitive operations or data.",
                    "Role": "Application",
                    "Condition": "Inadequate access segregation for third-party apps."
                },
                {
                    "Assumption": "The third-party application has exploitable vulnerabilities.",
                    "Role": "Third-Party Application",
                    "Condition": "The third-party software is not secure or outdated."
                },
                {
                    "Assumption": "Security assessments are not regularly conducted on third-party applications.",
                    "Role": "Admin",
                    "Condition": "No proper security review procedures in place."
                }
            ],
            "Potential Impact": "Unauthorized actions performed through third-party integration.",
            "MITRE ATT&CK Keywords": [
                "third-party compromise",
                "access privilege",
                "sensitive operation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Through social engineering, an attacker convinces support staff to escalate their privileges.",
            "Assumptions": [
                {
                    "Assumption": "Support staff can manually escalate user privileges.",
                    "Role": "Staff",
                    "Condition": "Support procedures allow manual privilege changes."
                },
                {
                    "Assumption": "Staff is not adequately trained to identify social engineering attacks.",
                    "Role": "Admin",
                    "Condition": "Lack of regular security training for staff."
                },
                {
                    "Assumption": "Verification steps for privilege escalation are weak or non-existent.",
                    "Role": "Application",
                    "Condition": "Processes for privilege changes are not stringent."
                }
            ],
            "Potential Impact": "Unauthorized privilege escalation leading to potential data misuse.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "staff manipulation",
                "privilege misuse"
            ],
            "mitre_technique": {
                "name": "Impersonation",
                "description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary\u2019s ultimate goals, possibly against multiple victims. \n \nIn many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables [Financial Theft](https://attack.mitre.org/techniques/T1657).\n\nAdversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as `payment`, `request`, or `urgent` to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary\u2019s goal.\u202f\u202f \n \nImpersonation is typically preceded by reconnaissance techniques such as [Gather Victim Identity Information](https://attack.mitre.org/techniques/T1589) and [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591) as well as acquiring infrastructure such as email domains (i.e. [Domains](https://attack.mitre.org/techniques/T1583/001)) to substantiate their false identity.(Citation: CrowdStrike-BEC)\n \nThere is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may [Compromise Accounts](https://attack.mitre.org/techniques/T1586) targeting one organization which can then be used to support impersonation against other entities.(Citation: VEC)",
                "id": "attack-pattern--c9e0c59e-162e-40a4-b8b1-78fab4329ada",
                "technique_id": "T1656"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "3",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake profile to impersonate a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can create accounts with minimal verification.",
                    "Role": "Attacker",
                    "Condition": "Account creation process lacks strong verification mechanisms."
                },
                {
                    "Assumption": "Other users accept connection requests without rigorous validation.",
                    "Role": "Users",
                    "Condition": "Users are not cautious in verifying connection requests."
                },
                {
                    "Assumption": "There are insufficient monitoring and detection mechanisms for detecting fake profiles.",
                    "Role": "Platform Security",
                    "Condition": "Real-time monitoring and anomaly detection are weak or non-existent."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information, reputational damage, and potential phishing attacks.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "account manipulation",
                "phishing",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
                "technique_id": "T1586.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts and takes over an existing session using stolen session cookies.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can steal session cookies from a compromised device.",
                    "Role": "Attacker",
                    "Condition": "User's device is compromised or lacks adequate security measures."
                },
                {
                    "Assumption": "The platform does not enforce session binding to specific devices/IP addresses.",
                    "Role": "Platform Security",
                    "Condition": "Weak session management mechanisms."
                },
                {
                    "Assumption": "Session cookies are not encrypted or have insufficient protection.",
                    "Role": "Platform Security",
                    "Condition": "Cookies lack encryption or secure flags."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts and exposure of personal messages and shared content.",
            "MITRE ATT&CK Keywords": [
                "session hijacking",
                "cookie theft",
                "account takeover",
                "network manipulation"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a phishing page that mimics the social media login page to capture user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users are susceptible to phishing attacks.",
                    "Role": "Users",
                    "Condition": "Insufficient user training on phishing risks."
                },
                {
                    "Assumption": "The attacker can create a convincing spoofed login page.",
                    "Role": "Attacker",
                    "Condition": "HTML and CSS resources are freely accessible."
                },
                {
                    "Assumption": "The platform's anti-phishing measures are insufficient.",
                    "Role": "Platform Security",
                    "Condition": "Weak detection and response mechanisms for phishing sites."
                }
            ],
            "Potential Impact": "Compromise of user credentials leading to unauthorized access and data breaches.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential theft",
                "fake login page",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters user-generated content to spread misinformation.",
            "Assumptions": [
                {
                    "Assumption": "The attacker gains access to the user's account.",
                    "Role": "Attacker",
                    "Condition": "Credentials are obtained via phishing or brute force."
                },
                {
                    "Assumption": "There are inadequate content validation checks on the platform.",
                    "Role": "Platform Security",
                    "Condition": "Content posted isn't thoroughly validated."
                },
                {
                    "Assumption": "Users do not verify content origin critically.",
                    "Role": "Users",
                    "Condition": "Users trust the content appearing legitimate."
                }
            ],
            "Potential Impact": "Degradation of data integrity and misinformation spreading through the network.",
            "MITRE ATT&CK Keywords": [
                "data manipulation",
                "content tampering",
                "misinformation",
                "integrity attack"
            ],
            "mitre_technique": {
                "name": "Transmitted Data Manipulation",
                "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--cc1e737c-236c-4e3b-83ba-32039a626ef8",
                "technique_id": "T1493"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies backend server configurations to disrupt service or provide backdoor access.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has compromised credentials of privileged accounts.",
                    "Role": "Attacker",
                    "Condition": "Privileged credentials are exposed or stolen."
                },
                {
                    "Assumption": "There are insufficient monitoring and alerting of configuration changes.",
                    "Role": "Platform Security",
                    "Condition": "Weak or absent change management processes."
                },
                {
                    "Assumption": "Log files are not adequately protected or monitored.",
                    "Role": "Platform Security",
                    "Condition": "Log files can be edited or deleted."
                }
            ],
            "Potential Impact": "Severe disruption of service functionality and creation of backdoors for future attacks.",
            "MITRE ATT&CK Keywords": [
                "server configuration tampering",
                "backdoor installation",
                "service disruption",
                "privileged access misuse"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code into the profile information or content shared on the platform.",
            "Assumptions": [
                {
                    "Assumption": "The platform allows the input of HTML or JavaScript in user profile fields.",
                    "Role": "Platform Security",
                    "Condition": "Input validation is inadequate or missing."
                },
                {
                    "Assumption": "Users interact with modified profiles or content.",
                    "Role": "Users",
                    "Condition": "Users fail to notice the presence of malicious elements."
                },
                {
                    "Assumption": "The platform lacks sufficient sanitization and filtering mechanisms.",
                    "Role": "Platform Security",
                    "Condition": "Weak input sanitation processes."
                }
            ],
            "Potential Impact": "Execution of malicious scripts leading to data exfiltration or further compromise of user accounts.",
            "MITRE ATT&CK Keywords": [
                "code injection",
                "cross-site scripting (XSS)",
                "profile tampering",
                "input validation attack"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending certain direct messages or posting specific content.",
            "Assumptions": [
                {
                    "Assumption": "There is no robust logging of user activities.",
                    "Role": "Platform Security",
                    "Condition": "Logs are incomplete or insufficiently detailed."
                },
                {
                    "Assumption": "Logs can be edited or deleted by malicious actors.",
                    "Role": "Attacker",
                    "Condition": "Logs are not securely managed."
                },
                {
                    "Assumption": "Dispute resolution mechanisms are weak or non-existent.",
                    "Role": "Platform Security",
                    "Condition": "Procedures for resolving these disputes are ineffective."
                }
            ],
            "Potential Impact": "Challenges in proving the authenticity of actions, potentially leading to legal complications.",
            "MITRE ATT&CK Keywords": [
                "logs manipulation",
                "activity repudiation",
                "non-repudiation",
                "dispute management"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes logs to cover their tracks after unauthorized activities.",
            "Assumptions": [
                {
                    "Assumption": "The attacker gains access to system or administrative privileges.",
                    "Role": "Attacker",
                    "Condition": "Privileged access is compromised."
                },
                {
                    "Assumption": "Log management and monitoring are inadequate.",
                    "Role": "Platform Security",
                    "Condition": "Logs are not securely stored or monitored."
                },
                {
                    "Assumption": "Backup and recovery mechanisms for logs are not implemented.",
                    "Role": "Platform Security",
                    "Condition": "Logs are not backed up regularly."
                }
            ],
            "Potential Impact": "Loss of critical forensic data, hindering incident response and investigation.",
            "MITRE ATT&CK Keywords": [
                "log deletion",
                "activity concealment",
                "incident response",
                "forensic tampering"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user disputes transactions or actions taken by third-party integrations connected to their account.",
            "Assumptions": [
                {
                    "Assumption": "Integration mechanisms lack robust authentication and authorization.",
                    "Role": "Platform Security",
                    "Condition": "Weak integration security controls."
                },
                {
                    "Assumption": "Third-party audit trails are insufficient.",
                    "Role": "Third-Party Service",
                    "Condition": "Third-party does not maintain detailed activity logs."
                },
                {
                    "Assumption": "Verification of third-party actions is challenging.",
                    "Role": "Platform Security",
                    "Condition": "No mutual accountability or cross-verification process in place."
                }
            ],
            "Potential Impact": "Disputes affecting the credibility of service integrations and causing legal or service trust issues.",
            "MITRE ATT&CK Keywords": [
                "third-party services",
                "transaction repudiation",
                "audit trail insufficiency",
                "integration security"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is exfiltrated through a compromised backend server.",
            "Assumptions": [
                {
                    "Assumption": "Attackers gain access to backend systems via vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Exploitable vulnerabilities exist in backend servers."
                },
                {
                    "Assumption": "Sensitive data is inadequately encrypted or protected.",
                    "Role": "Platform Security",
                    "Condition": "Data protection mechanisms are weak."
                },
                {
                    "Assumption": "Network monitoring and data exfiltration prevention mechanisms are insufficient.",
                    "Role": "Platform Security",
                    "Condition": "Data flow is not adequately monitored."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of user personal and sensitive information.",
            "MITRE ATT&CK Keywords": [
                "data exfiltration",
                "backend server compromise",
                "sensitive data breach",
                "network monitoring"
            ],
            "mitre_technique": {
                "name": "Traffic Duplication",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
                "technique_id": "T1020.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts communication between users and the platform over an insecure connection.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not secured via strong encryption (e.g., SSL/TLS).",
                    "Role": "Platform Security",
                    "Condition": "Use of unencrypted communication channels."
                },
                {
                    "Assumption": "Attackers have access to the communication channel.",
                    "Role": "Attacker",
                    "Condition": "Attacker is on the same network or a man-in-the-middle position."
                },
                {
                    "Assumption": "Users are unaware of insecure communication risks.",
                    "Role": "Users",
                    "Condition": "Users do not verify SSL/TLS certificates."
                }
            ],
            "Potential Impact": "Interception and exposure of confidential messages and shared content.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "communication interception",
                "unencrypted transmission",
                "SSL/TLS"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data exposure due to misconfigured privacy settings on user profiles.",
            "Assumptions": [
                {
                    "Assumption": "Default privacy settings are not adequately restrictive.",
                    "Role": "Platform Security",
                    "Condition": "Default settings permit too much data access."
                },
                {
                    "Assumption": "Users do not regularly review and adjust privacy settings.",
                    "Role": "Users",
                    "Condition": "Lack of awareness or complacency among users."
                },
                {
                    "Assumption": "Platform does not provide effective privacy management tools.",
                    "Role": "Platform Security",
                    "Condition": "Insufficient or hard-to-use privacy controls."
                }
            ],
            "Potential Impact": "Unintended disclosure of personal information and user activities.",
            "MITRE ATT&CK Keywords": [
                "privacy settings",
                "data exposure",
                "profile misconfiguration",
                "user awareness"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A distributed denial-of-service (DDoS) attack disrupts the availability of the platform.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can marshal enough resources to generate high traffic volumes.",
                    "Role": "Attacker",
                    "Condition": "Ability to leverage botnets or similar resources."
                },
                {
                    "Assumption": "The platform lacks adequate DDoS mitigation mechanisms.",
                    "Role": "Platform Security",
                    "Condition": "Insufficient investment in DDoS protection services."
                },
                {
                    "Assumption": "Real-time monitoring and incident response are inadequate.",
                    "Role": "Platform Security",
                    "Condition": "Slow detection and response to high traffic anomalies."
                }
            ],
            "Potential Impact": "Service downtime, preventing users from accessing the platform and disrupting communication.",
            "MITRE ATT&CK Keywords": [
                "distributed denial-of-service",
                "high traffic attack",
                "service disruption",
                "availability compromise"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploiting a vulnerability in backend servers to cause a crash or freeze.",
            "Assumptions": [
                {
                    "Assumption": "Backend servers have exploitable vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Known or zero-day vulnerabilities are present."
                },
                {
                    "Assumption": "Server resource monitoring and management are weak.",
                    "Role": "Platform Security",
                    "Condition": "Lack of real-time server health checks."
                },
                {
                    "Assumption": "Patch management and timely updates are inadequate.",
                    "Role": "Platform Security",
                    "Condition": "Delayed responses to vulnerability disclosures and patches."
                }
            ],
            "Potential Impact": "Inability to process user requests, leading to crashes or non-responsiveness.",
            "MITRE ATT&CK Keywords": [
                "server exploitation",
                "resource exhaustion",
                "backend server crash",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker performs repeated failed login attempts to lock user accounts.",
            "Assumptions": [
                {
                    "Assumption": "The platform's login functionality enforces account lockout after several failed attempts.",
                    "Role": "Platform Security",
                    "Condition": "Implemented account lockout policies with thresholds."
                },
                {
                    "Assumption": "The attacker can script or automate login attempts.",
                    "Role": "Attacker",
                    "Condition": "Ability to use brute force or similar automation tools."
                },
                {
                    "Assumption": "There is no secondary verification or challenge mechanism (e.g., CAPTCHA).",
                    "Role": "Platform Security",
                    "Condition": "Weak or absent anti-automation measures."
                }
            ],
            "Potential Impact": "Valid users are temporarily locked out, disrupting access to their accounts.",
            "MITRE ATT&CK Keywords": [
                "account lockout",
                "brute force attack",
                "login attempts",
                "authentication disruption"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a misconfiguration in user roles to gain administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "Role-based access controls are not properly implemented or reviewed.",
                    "Role": "Platform Security",
                    "Condition": "Weak role assignment and privilege allocation mechanisms."
                },
                {
                    "Assumption": "Account segregation and least privilege principles are not enforced.",
                    "Role": "Platform Security",
                    "Condition": "Failing to segregate duties and restrict privileges effectively."
                },
                {
                    "Assumption": "There are unpatched vulnerabilities related to role management.",
                    "Role": "Platform Security",
                    "Condition": "Delayed response in patching role management flaws."
                }
            ],
            "Potential Impact": "Gaining unauthorized access to critical systems and data, leading to compromise of platform integrity.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "role misconfiguration",
                "access control",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a vulnerability in the platform software to execute code with higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "The platform contains exploitable code vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Presence of known or zero-day vulnerabilities in the software."
                },
                {
                    "Assumption": "Adequate code review and vulnerability testing processes are missing.",
                    "Role": "Platform Security",
                    "Condition": "Insufficient pre-deployment testing and regular code review."
                },
                {
                    "Assumption": "Security patches are not applied promptly.",
                    "Role": "Platform Security",
                    "Condition": "Delays in applying security updates and patches."
                }
            ],
            "Potential Impact": "Execution of unauthorized actions with high privileges, compromising the system and user data.",
            "MITRE ATT&CK Keywords": [
                "code execution",
                "software vulnerabilities",
                "privilege escalation",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker manipulates third-party integration to gain elevated access.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications have excessive permissions.",
                    "Role": "Third-Party Service",
                    "Condition": "Granting broad or unnecessary permissions during integration."
                },
                {
                    "Assumption": "Integration mechanisms are not adequately hardened.",
                    "Role": "Platform Security",
                    "Condition": "Weak integration security controls and reviews."
                },
                {
                    "Assumption": "Communication between the platform and third-party services is insufficiently monitored.",
                    "Role": "Platform Security",
                    "Condition": "Absence of monitoring and anomaly detection for third-party interactions."
                }
            ],
            "Potential Impact": "Elevated access through third-party services, leading to unauthorized activities and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "third-party integration",
                "privilege abuse",
                "access manipulation",
                "elevation through external services"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "6",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake profile resembling a legitimate user to deceive other users.",
            "Assumptions": [
                {
                    "Assumption": "User-provided information is not verified thoroughly.",
                    "Role": "Platform Administrators",
                    "Condition": "During account creation and profile updates."
                },
                {
                    "Assumption": "Users easily trust profiles based on visual similarity.",
                    "Role": "Normal Users",
                    "Condition": "When browsing and interacting on the platform."
                }
            ],
            "Potential Impact": "Unauthorized access to user communication and data.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "profile impersonation",
                "identity theft"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage)\n\nFor operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. \n\nOnce a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--b1ccd744-3f78-4a0e-9bb2-2002057f7928",
                "technique_id": "T1585.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised third-party application to gain access to user data.",
            "Assumptions": [
                {
                    "Assumption": "Third-party integration is not thoroughly vetted.",
                    "Role": "Platform Administrators",
                    "Condition": "During the setup of third-party integrations."
                },
                {
                    "Assumption": "Users willingly link accounts to third-party applications.",
                    "Role": "Normal Users",
                    "Condition": "During the process of linking accounts."
                }
            ],
            "Potential Impact": "Unauthorized access and potential misuse of sensitive user data.",
            "MITRE ATT&CK Keywords": [
                "third-party compromise",
                "data exfiltration",
                "API abuse"
            ],
            "mitre_technique": {
                "name": "Serverless Execution",
                "description": "Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers. \n\nAdversaries may abuse these resources in various ways as a means of executing arbitrary commands. For example, adversaries may use serverless functions to execute malicious code, such as crypto-mining malware (i.e. [Resource Hijacking](https://attack.mitre.org/techniques/T1496)).(Citation: Cado Security Denonia) Adversaries may also create functions that enable further compromise of the cloud environment. For example, an adversary may use the `IAM:PassRole` permission in AWS or the `iam.serviceAccounts.actAs` permission in Google Cloud to add [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) to a serverless cloud function, which may then be able to perform actions the original user cannot.(Citation: Rhino Security Labs AWS Privilege Escalation)(Citation: Rhingo Security Labs GCP Privilege Escalation)\n\nServerless functions can also be invoked in response to cloud events (i.e. [Event Triggered Execution](https://attack.mitre.org/techniques/T1546)), potentially enabling persistent execution over time. For example, in AWS environments, an adversary may create a Lambda function that automatically adds [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) to a user and a corresponding CloudWatch events rule that invokes that function whenever a new user is created.(Citation: Backdooring an AWS account) Similarly, an adversary may create a Power Automate workflow in Office 365 environments that forwards all emails a user receives or creates anonymous sharing links whenever a user is granted access to a document in SharePoint.(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft DART Case Report 001)",
                "id": "attack-pattern--e848506b-8484-4410-8017-3d235a52f5b3",
                "technique_id": "T1648"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts login credentials using a phishing site.",
            "Assumptions": [
                {
                    "Assumption": "Users are not aware of phishing threats.",
                    "Role": "Normal Users",
                    "Condition": "When entering credentials on fake login pages."
                },
                {
                    "Assumption": "Platform lacks robust anti-phishing mechanisms.",
                    "Role": "Platform Administrators",
                    "Condition": "During authentication processes."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts and personal data.",
            "MITRE ATT&CK Keywords": [
                "credential harvesting",
                "phishing",
                "man-in-the-middle"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies backend server data to alter user posts.",
            "Assumptions": [
                {
                    "Assumption": "Lack of server-side input validation.",
                    "Role": "Platform Developers",
                    "Condition": "When processing user content updates."
                },
                {
                    "Assumption": "Insufficient access controls.",
                    "Role": "Platform Administrators",
                    "Condition": "When managing server access."
                }
            ],
            "Potential Impact": "Integrity compromise of user-generated content.",
            "MITRE ATT&CK Keywords": [
                "data manipulation",
                "backend compromise",
                "server tampering"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker makes unauthorized changes to user profile information.",
            "Assumptions": [
                {
                    "Assumption": "Weak authentication protocols.",
                    "Role": "Platform Developers",
                    "Condition": "During profile updates."
                },
                {
                    "Assumption": "Inadequate logging and monitoring.",
                    "Role": "Platform Administrators",
                    "Condition": "On profile change events."
                }
            ],
            "Potential Impact": "Loss of data integrity and potential user trust issues.",
            "MITRE ATT&CK Keywords": [
                "profile tampering",
                "unauthorized changes",
                "identity manipulation"
            ],
            "mitre_technique": {
                "name": "Weaken Encryption",
                "description": "Adversaries may compromise a network device\u2019s encryption capability in order to bypass encryption that would otherwise protect data communications. (Citation: Cisco Synful Knock Evolution)\n\nEncryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.\n\nAdversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as [Modify System Image](https://attack.mitre.org/techniques/T1601), [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001), and [Disable Crypto Hardware](https://attack.mitre.org/techniques/T1600/002), an adversary can negatively effect and/or eliminate a device\u2019s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. (Citation: Cisco Blog Legacy Device Attacks)",
                "id": "attack-pattern--1f9012ef-1e10-4e48-915e-e03563435fe8",
                "technique_id": "T1600"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "A compromised third-party integration alters system configurations.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications have extensive permissions.",
                    "Role": "Platform Administrators",
                    "Condition": "During the setup of the third-party integration."
                },
                {
                    "Assumption": "Configuration changes are not verified.",
                    "Role": "Platform Administrators",
                    "Condition": "When managing integration settings."
                }
            ],
            "Potential Impact": "System instability and data integrity issues.",
            "MITRE ATT&CK Keywords": [
                "configuration tampering",
                "third-party compromise",
                "system instability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies posting certain content that was actually posted.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient logging mechanisms.",
                    "Role": "Platform Developers",
                    "Condition": "During content creation and updates."
                },
                {
                    "Assumption": "Logs are not tamper-proof.",
                    "Role": "Platform Administrators",
                    "Condition": "When storing and managing log data."
                }
            ],
            "Potential Impact": "Dispute in content accountability and trust issues.",
            "MITRE ATT&CK Keywords": [
                "action repudiation",
                "log tampering",
                "dispute management"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker claims they did not send fraudulent messages even though they did.",
            "Assumptions": [
                {
                    "Assumption": "Communication logs are not adequately secured.",
                    "Role": "Platform Administrators",
                    "Condition": "During message retrieval and storage."
                },
                {
                    "Assumption": "Lack of non-repudiation measures.",
                    "Role": "Platform Developers",
                    "Condition": "In the messaging framework."
                }
            ],
            "Potential Impact": "Legitimacy questions around user communications.",
            "MITRE ATT&CK Keywords": [
                "message repudiation",
                "log security",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies involvement in malicious activity despite evidence.",
            "Assumptions": [
                {
                    "Assumption": "Logs are capable of being altered.",
                    "Role": "Platform Administrators",
                    "Condition": "When storing and archiving log data."
                },
                {
                    "Assumption": "Actions are not consistently attributed to users.",
                    "Role": "Platform Developers",
                    "Condition": "During activity tracking."
                }
            ],
            "Potential Impact": "Difficulty in incident response and accountability.",
            "MITRE ATT&CK Keywords": [
                "activity repudiation",
                "incident response",
                "log integrity"
            ],
            "mitre_technique": {
                "name": "Indicator Removal",
                "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
                "technique_id": "T1070"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted communication between users.",
            "Assumptions": [
                {
                    "Assumption": "Usage of unencrypted communication channels.",
                    "Role": "Platform Developers",
                    "Condition": "During real-time communication."
                },
                {
                    "Assumption": "Network is vulnerable to eavesdropping.",
                    "Role": "Platform Administrators",
                    "Condition": "During data transmission."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of private communications.",
            "MITRE ATT&CK Keywords": [
                "data eavesdropping",
                "unencrypted communication",
                "sensitive information disclosure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is exposed due to improper access controls on profiles.",
            "Assumptions": [
                {
                    "Assumption": "Inadequate profile access management.",
                    "Role": "Platform Administrators",
                    "Condition": "When managing user privacy settings."
                },
                {
                    "Assumption": "Weak enforcement of privacy controls.",
                    "Role": "Platform Developers",
                    "Condition": "During profile data retrieval."
                }
            ],
            "Potential Impact": "Exposure of personal and sensitive data.",
            "MITRE ATT&CK Keywords": [
                "profile data breach",
                "access control failure",
                "privacy violation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A third-party integration accidentally leaks user data to external parties.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications are not securely managed.",
                    "Role": "Platform Administrators",
                    "Condition": "During third-party integration setup."
                },
                {
                    "Assumption": "Data sharing policies are not enforced.",
                    "Role": "Platform Developers",
                    "Condition": "During data transmission to third parties."
                }
            ],
            "Potential Impact": "Leakage of sensitive data to unauthorized entities.",
            "MITRE ATT&CK Keywords": [
                "third-party data leak",
                "data sharing policy",
                "external breach"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overwhelms the backend servers with traffic, causing service disruptions.",
            "Assumptions": [
                {
                    "Assumption": "Lack of rate limiting and DDoS protections.",
                    "Role": "Platform Developers",
                    "Condition": "When handling incoming requests."
                },
                {
                    "Assumption": "Servers do not scale automatically.",
                    "Role": "Platform Administrators",
                    "Condition": "During high traffic periods."
                }
            ],
            "Potential Impact": "Service unavailability and user dissatisfaction.",
            "MITRE ATT&CK Keywords": [
                "DDoS attack",
                "server overload",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Endpoint Denial of Service",
                "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.(Citation: ArsTechnica Great Firewall of China)\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](https://attack.mitre.org/techniques/T1498).\n",
                "id": "attack-pattern--c675646d-e204-4aa8-978d-e3d6d65885c4",
                "technique_id": "T1499"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits vulnerabilities in third-party integrations to cause system failure.",
            "Assumptions": [
                {
                    "Assumption": "Third-party code is not regularly audited.",
                    "Role": "Platform Administrators",
                    "Condition": "During integration updates."
                },
                {
                    "Assumption": "Vulnerabilities in third-party libraries.",
                    "Role": "Platform Developers",
                    "Condition": "When using external dependencies."
                }
            ],
            "Potential Impact": "Potential system crashes and unavailability.",
            "MITRE ATT&CK Keywords": [
                "third-party vulnerability",
                "system crash",
                "availability compromise"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends malformed data packets causing backend server freeze.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient input validation on servers.",
                    "Role": "Platform Developers",
                    "Condition": "During data packet processing."
                },
                {
                    "Assumption": "Lack of error handling for unexpected data.",
                    "Role": "Platform Developers",
                    "Condition": "During server response."
                }
            ],
            "Potential Impact": "Interruption of normal server operations.",
            "MITRE ATT&CK Keywords": [
                "malformed packet attack",
                "server freeze",
                "input validation failure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "Existence of unpatched vulnerabilities.",
                    "Role": "Platform Administrators",
                    "Condition": "During routine system maintenance."
                },
                {
                    "Assumption": "Insufficient privilege separation.",
                    "Role": "Platform Developers",
                    "Condition": "When defining user roles and permissions."
                }
            ],
            "Potential Impact": "Unauthorized administrative control over the system.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability exploitation",
                "admin access"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A compromised user account is used to create new admin-level users.",
            "Assumptions": [
                {
                    "Assumption": "Users have the capability to create new accounts.",
                    "Role": "Platform Administrators",
                    "Condition": "During account management."
                },
                {
                    "Assumption": "Weak access controls on account creation.",
                    "Role": "Platform Developers",
                    "Condition": "During user role definition."
                }
            ],
            "Potential Impact": "Expansion of unauthorized access to multiple system areas.",
            "MITRE ATT&CK Keywords": [
                "account compromise",
                "role abuse",
                "unauthorized admin creation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker injects malicious code that escalates privileges.",
            "Assumptions": [
                {
                    "Assumption": "Code injection vulnerability exists.",
                    "Role": "Platform Developers",
                    "Condition": "During application code execution."
                },
                {
                    "Assumption": "Lack of input sanitization.",
                    "Role": "Platform Developers",
                    "Condition": "When processing user inputs."
                }
            ],
            "Potential Impact": "Gain elevated access to restricted system functionalities.",
            "MITRE ATT&CK Keywords": [
                "code injection",
                "privilege escalation",
                "malicious script"
            ],
            "mitre_technique": {
                "name": "JavaScript",
                "description": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.(Citation: NodeJS)\n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and Internet Explorer HTML Application (HTA) pages.(Citation: JScrip May 2018)(Citation: Microsoft JScript 2007)(Citation: Microsoft Windows Scripts)\n\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and [AppleScript](https://attack.mitre.org/techniques/T1059/002). Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.(Citation: Apple About Mac Scripting 2016)(Citation: SpecterOps JXA 2020)(Citation: SentinelOne macOS Red Team)(Citation: Red Canary Silver Sparrow Feb2021)(Citation: MDSec macOS JXA and VSCode)\n\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027).",
                "id": "attack-pattern--0f4a0c76-ab2d-4cb0-85d3-3f0efb8cba0d",
                "technique_id": "T1059.007"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "4",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could create a fake login page resembling the social media platform and trick users into entering their credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users are not cautious and do not verify the URL before entering credentials.",
                    "Role": "End User",
                    "Condition": "The malicious page closely mimics the legitimate login page design."
                },
                {
                    "Assumption": "The attacker manages to redirect the user to the fake page.",
                    "Role": "Attacker",
                    "Condition": "The user is tricked into clicking a link or the attacker controls a DNS server."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts compromising data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "phishing",
                "login",
                "credentials",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a user by hijacking a session token, accessing the user's profile and data.",
            "Assumptions": [
                {
                    "Assumption": "Session tokens are not encrypted and can be intercepted.",
                    "Role": "Server Admin",
                    "Condition": "Sessions are transmitted over an unsecured channel."
                },
                {
                    "Assumption": "The attacker is in a position to intercept the session token.",
                    "Role": "Attacker",
                    "Condition": "The attacker has access to the user's network traffic."
                }
            ],
            "Potential Impact": "Unauthorized access to user data compromising account and data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "session hijacking",
                "token interception",
                "network"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised API key to impersonate a legitimate third-party application, accessing user data.",
            "Assumptions": [
                {
                    "Assumption": "API keys are not adequately protected.",
                    "Role": "Developer",
                    "Condition": "API keys are stored insecurely or exposed in code repositories."
                },
                {
                    "Assumption": "The attacker is aware of and can exploit the compromised API key.",
                    "Role": "Attacker",
                    "Condition": "The attacker has access to the location where the API key is stored or shared."
                }
            ],
            "Potential Impact": "Unauthorized third-party access to user data compromising data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "API key",
                "compromise",
                "spoofing",
                "third-party integration"
            ],
            "mitre_technique": {
                "name": "Cloud Instance Metadata API",
                "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.\n",
                "id": "attack-pattern--19bf235b-8620-4997-b5b4-94e0659ed7c3",
                "technique_id": "T1552.005"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters posts or messages passing through the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the backend servers.",
                    "Role": "Attacker",
                    "Condition": "Weak access control or compromised server credentials."
                },
                {
                    "Assumption": "Data is not properly validated before being processed.",
                    "Role": "Developer",
                    "Condition": "Lack of input validation and integrity checks."
                }
            ],
            "Potential Impact": "Corrupted user content affects data integrity and compromises user trust.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "backend server",
                "data integrity",
                "message alteration"
            ],
            "mitre_technique": {
                "name": "File/Path Exclusions",
                "description": "Adversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate.(Citation: Microsoft File Folder Exclusions)\n\nAdversaries may abuse these exclusions to hide their file-based artifacts. For example, rather than  tampering with tool settings to add a new exclusion (i.e., [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)), adversaries may drop their file-based payloads in default or otherwise well-known exclusions. Adversaries may also use [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001) and other [Discovery](https://attack.mitre.org/tactics/TA0007)/[Reconnaissance](https://attack.mitre.org/tactics/TA0043) activities to both discover and verify existing exclusions in a victim environment.",
                "id": "attack-pattern--09b008a9-b4eb-462a-a751-a0eb58050cd9",
                "technique_id": "T1564.012"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the profile settings or privacy configurations of users' accounts.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has gained unauthorized access to user accounts.",
                    "Role": "Attacker",
                    "Condition": "Credentials are compromised via phishing or brute force attacks."
                },
                {
                    "Assumption": "Controls to log or revert changes are ineffective.",
                    "Role": "Admin",
                    "Condition": "Insufficient logging and audit trails."
                }
            ],
            "Potential Impact": "Compromised user privacy settings lead to unintended exposure of personal information.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "account settings",
                "privacy",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Conditional Access Policies",
                "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\n\nFor example, in Azure AD, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. \n\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
                "id": "attack-pattern--ceaeb6d8-95ee-4da2-9d42-dc6aa6ca43ae",
                "technique_id": "T1556.009"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code into third-party integrations to alter platform behaviors.",
            "Assumptions": [
                {
                    "Assumption": "External third-party integration points are not secure.",
                    "Role": "Developer",
                    "Condition": "Third-party applications are not vetted for security."
                },
                {
                    "Assumption": "The platform does not properly sanitize inputs from third-party sources.",
                    "Role": "Developer",
                    "Condition": "Lack of input filtering and validation."
                }
            ],
            "Potential Impact": "Platform functionality is disrupted and user data integrity compromised.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "third-party integration",
                "input validation",
                "code injection"
            ],
            "mitre_technique": {
                "name": "Reflective Code Loading",
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
                "id": "attack-pattern--4933e63b-9b77-476e-ab29-761bc5b7d15a",
                "technique_id": "T1620"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user claims that they did not perform specific actions, such as posting content or altering settings.",
            "Assumptions": [
                {
                    "Assumption": "The system lacks comprehensive logging of user actions.",
                    "Role": "Admin",
                    "Condition": "Insufficient logging and auditing functionality implemented."
                },
                {
                    "Assumption": "The authentication mechanism does not provide non-repudiation.",
                    "Role": "Developer",
                    "Condition": "Weak authentication mechanisms without digital signing."
                }
            ],
            "Potential Impact": "Difficulty in proving the authenticity of user actions, affecting data integrity.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "audit trail",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies sending malicious links or content through direct messaging.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient tracking and logging of direct messaging activities.",
                    "Role": "Admin",
                    "Condition": "Logs do not capture all necessary details of messaging transactions."
                },
                {
                    "Assumption": "Lack of mechanisms to verify the sender's identity in messaging.",
                    "Role": "Developer",
                    "Condition": "Messaging system does not implement robust sender verification."
                }
            ],
            "Potential Impact": "Challenges in detecting and attributing malicious activities, compromising data integrity.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "direct messaging",
                "logging",
                "sender verification"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user fraudulently denies granting permissions to a third-party application.",
            "Assumptions": [
                {
                    "Assumption": "Inadequate records of user consent actions.",
                    "Role": "Admin",
                    "Condition": "Consent logs are not maintained or are incomplete."
                },
                {
                    "Assumption": "The system does not enforce or record user authentication during consent.",
                    "Role": "Developer",
                    "Condition": "Lack of strong user authentication for consent actions."
                }
            ],
            "Potential Impact": "Dispute resolution challenges and regulatory non-compliance, affecting data integrity.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "third-party application",
                "consent logging",
                "auditing"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is accessible to unauthorized parties through insecure API endpoints.",
            "Assumptions": [
                {
                    "Assumption": "API lacks proper authentication and authorization checks.",
                    "Role": "Developer",
                    "Condition": "APIs are exposed without robust security mechanisms."
                },
                {
                    "Assumption": "Sensitive data is not encrypted in transit or at rest.",
                    "Role": "Admin",
                    "Condition": "Encryption is not enforced for sensitive data."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive information compromising data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "API security",
                "access control",
                "encryption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--051a14c76-dd3b-440b-9c20-2bf91d25a814",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An unauthorized third-party gains access to user profiles via exploited permission settings.",
            "Assumptions": [
                {
                    "Assumption": "Permissions are misconfigured allowing broader access than intended.",
                    "Role": "Admin",
                    "Condition": "Incorrect or overly permissive access controls applied."
                },
                {
                    "Assumption": "Users are not aware or do not manage their privacy settings effectively.",
                    "Role": "End User",
                    "Condition": "Privacy settings are complex or not user-friendly."
                }
            ],
            "Potential Impact": "Unauthorized access to personal information compromising user data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "privacy settings",
                "profile access",
                "authorization"
            ],
            "mitre_technique": {
                "name": "Steal Application Access Token",
                "description": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019)  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.(Citation: Kubernetes Service Accounts)  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment.(Citation: Cider Security Top 10 CICD Security Risks) If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017) The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens(Citation: Auth0 Understanding Refresh Tokens), allowing them to obtain new access tokens without prompting the user.  \n\n",
                "id": "attack-pattern--890c9858-598c-401d-a4d5-c67ebcdd703a",
                "technique_id": "T1528"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Internal user data, such as communication logs, is accidentally exposed through misconfigured servers.",
            "Assumptions": [
                {
                    "Assumption": "Servers are not configured with appropriate security settings.",
                    "Role": "Admin",
                    "Condition": "Lack of strict access controls and server misconfigurations."
                },
                {
                    "Assumption": "Sensitive information is inadequately protected within the system.",
                    "Role": "Developer",
                    "Condition": "Failure to implement data segregation and encryption."
                }
            ],
            "Potential Impact": "Exposure of confidential communication details affecting data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "server misconfiguration",
                "data protection",
                "communication logs"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A high volume of requests sent to the backend servers overwhelms the system, leading to service disruption.",
            "Assumptions": [
                {
                    "Assumption": "The system is unable to efficiently handle abnormal traffic spikes.",
                    "Role": "Admin",
                    "Condition": "Inadequate capacity planning and lack of traffic management mechanisms."
                },
                {
                    "Assumption": "No protective measures such as rate limiting or traffic filtering are in place.",
                    "Role": "Developer",
                    "Condition": "Absence of DoS mitigation strategies."
                }
            ],
            "Potential Impact": "Service unavailability affecting data availability and user access.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "backend servers",
                "traffic overload",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Third-party integration triggers excessive load on the social media platform, causing service outages.",
            "Assumptions": [
                {
                    "Assumption": "Integration lacks load management or fails to throttle requests.",
                    "Role": "Third-Party Developer",
                    "Condition": "Poorly designed integration that doesn't adhere to platform limits."
                },
                {
                    "Assumption": "No monitoring or rate-limiting mechanisms are in place for API usage.",
                    "Role": "Platform Admin",
                    "Condition": "Absence of API usage monitoring and control measures."
                }
            ],
            "Potential Impact": "Service instability and unavailability affecting data availability and user interaction.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "third-party integration",
                "load management",
                "API usage"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Botnet attacks target the social media platform, rendering it inaccessible to legitimate users.",
            "Assumptions": [
                {
                    "Assumption": "The social media platform is vulnerable to distributed attacks.",
                    "Role": "Admin",
                    "Condition": "Lack of distributed denial-of-service (DDoS) protection."
                },
                {
                    "Assumption": "The network infrastructure cannot effectively mitigate large-scale attacks.",
                    "Role": "Network Admin",
                    "Condition": "Network defenses are insufficient to handle high-traffic scenarios."
                }
            ],
            "Potential Impact": "Extended downtime and loss of service accessibility affecting data availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "botnet",
                "distributed attack",
                "DDoS"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker gains administrative privileges through exploiting vulnerable system components.",
            "Assumptions": [
                {
                    "Assumption": "Existing vulnerabilities in the application are not patched.",
                    "Role": "Admin",
                    "Condition": "Delayed or neglected security updates and patches."
                },
                {
                    "Assumption": "Weak access control mechanisms are in place.",
                    "Role": "Developer",
                    "Condition": "Lack of strong authentication and authorization protocols."
                }
            ],
            "Potential Impact": "Complete control over the system enabling unauthorized data modification and access.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "vulnerability exploitation",
                "system components",
                "admin access"
            ],
            "mitre_technique": {
                "name": "Exploitation for Privilege Escalation",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020) Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) or [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570).",
                "id": "attack-pattern--b21c3b2d-02e6-45b1-980b-e69051040839",
                "technique_id": "T1068"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An insider uses their access to escalate privileges and gain unauthorized admin-level access.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient monitoring of user activities and privilege changes.",
                    "Role": "Admin",
                    "Condition": "Lack of effective logging and monitoring mechanisms."
                },
                {
                    "Assumption": "Role-based access controls are not strictly enforced.",
                    "Role": "Developer",
                    "Condition": "Improper enforcement of least privilege principle."
                }
            ],
            "Potential Impact": "Unauthorized access to critical system operations and data manipulation.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "insider threat",
                "access control",
                "monitoring"
            ],
            "mitre_technique": {
                "name": "Additional Container Cluster Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled user or service account to maintain persistent access to a container orchestration system. For example, an adversary with sufficient permissions may create a RoleBinding or a ClusterRoleBinding to bind a Role or ClusterRole to a Kubernetes account.(Citation: Kubernetes RBAC)(Citation: Aquasec Kubernetes Attack 2023) Where attribute-based access control (ABAC) is in use, an adversary with sufficient permissions may modify a Kubernetes ABAC policy to give the target account additional permissions.(Citation: Kuberentes ABAC)\n \nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised.  \n\nNote that where container orchestration systems are deployed in cloud environments, as with Google Kubernetes Engine, Amazon Elastic Kubernetes Service, and Azure Kubernetes Service, cloud-based  role-based access control (RBAC) assignments or ABAC policies can often be used in place of or in addition to local permission assignments.(Citation: Google Cloud Kubernetes IAM)(Citation: AWS EKS IAM Roles for Service Accounts)(Citation: Microsoft Azure Kubernetes Service Service Accounts) In these cases, this technique may be used in conjunction with [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003).",
                "id": "attack-pattern--35d30338-5bfa-41b0-a170-ec06dfd75f64",
                "technique_id": "T1098.006"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Cross-site scripting (XSS) vulnerability is exploited to compromise user accounts with higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "The application is vulnerable to XSS attacks.",
                    "Role": "Developer",
                    "Condition": "Inadequate input validation and sanitization."
                },
                {
                    "Assumption": "The attacker can inject malicious scripts into the application.",
                    "Role": "Attacker",
                    "Condition": "User inputs are not properly escaped or sanitized."
                }
            ],
            "Potential Impact": "Compromise of user sessions and unauthorized access to elevated privileges.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "cross-site scripting",
                "XSS",
                "input validation"
            ],
            "mitre_technique": {
                "name": "Drive-by Compromise",
                "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring [Application Access Token](https://attack.mitre.org/techniques/T1550/001).\n\nMultiple ways of delivering exploit code to a browser exist (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004)), including:\n\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting\n* Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary\n* Malicious ads are paid for and served through legitimate ad providers (i.e., [Malvertising](https://attack.mitre.org/techniques/T1583/008))\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.(Citation: Shadowserver Strategic Web Compromise)\n\nTypical drive-by compromise process:\n\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\n\nUnlike [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\n\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.(Citation: Volexity OceanLotus Nov 2017)",
                "id": "attack-pattern--d742a578-d70e-4d0e-96a6-02a9c30204e6",
                "technique_id": "T1189"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "5",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake social media profile to impersonate a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to personal information about the target.",
                    "Role": "Attacker",
                    "Condition": "Information can be gathered through phishing or social engineering."
                },
                {
                    "Assumption": "The social media platform does not have robust verification processes.",
                    "Role": "Platform Developer",
                    "Condition": "Verification mechanisms are weak or non-existent."
                },
                {
                    "Assumption": "Users do not verify the authenticity of connections before communicating or sharing sensitive information.",
                    "Role": "User",
                    "Condition": "Users are unaware or careless regarding online relationships."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information and potential identity theft.",
            "MITRE ATT&CK Keywords": [
                "Social Engineering",
                "Phishing",
                "Identity Theft",
                "Impersonation"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
                "technique_id": "T1586.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs a third-party application to request sensitive user data from the social media platform.",
            "Assumptions": [
                {
                    "Assumption": "The third-party application is poorly secured or lacks proper authentication.",
                    "Role": "Third-Party Developer",
                    "Condition": "Weak or no application security measures in place."
                },
                {
                    "Assumption": "Users are unaware of the spoofed application's malicious intentions.",
                    "Role": "User",
                    "Condition": "Users trust the application and grant it permissions."
                },
                {
                    "Assumption": "The social media platform does not have stringent verification mechanisms for third-party requests.",
                    "Role": "Platform Developer",
                    "Condition": "Lack of robust application verification processes."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user data through third-party spoofing.",
            "MITRE ATT&CK Keywords": [
                "API Exploitation",
                "Man-in-the-Middle",
                "Data Theft",
                "Authorization Bypass"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs the source IP address to bypass security controls and gain inappropriate access.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has knowledge of the network infrastructure and IP ranges.",
                    "Role": "Attacker",
                    "Condition": "The information is obtained through reconnaissance."
                },
                {
                    "Assumption": "The platform does not perform comprehensive validation of IP addresses.",
                    "Role": "Platform Developer",
                    "Condition": "Network security lacks thoroughness in IP validation."
                },
                {
                    "Assumption": "The system relies heavily on IP-based authentication for access control.",
                    "Role": "Platform Architect",
                    "Condition": "IP addresses are used as a primary authentication mechanism."
                }
            ],
            "Potential Impact": "Unauthorized access to the backend server, leading to potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "IP Spoofing",
                "Network Exploitation",
                "Access Bypass",
                "Data Breach"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and alters data in transit between user devices and the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "The data in transit is not adequately encrypted.",
                    "Role": "Platform Developer",
                    "Condition": "Use of weak or no encryption protocols."
                },
                {
                    "Assumption": "The attacker has access to the network traffic via compromised routers or man-in-the-middle attacks.",
                    "Role": "Attacker",
                    "Condition": "The attacker controls or accesses network nodes."
                },
                {
                    "Assumption": "Users are unaware their data is being intercepted and modified.",
                    "Role": "User",
                    "Condition": "Users are not informed or observant of such risks."
                }
            ],
            "Potential Impact": "Data integrity is compromised, leading to altered or corrupted information.",
            "MITRE ATT&CK Keywords": [
                "Man-in-the-Middle",
                "Data Manipulation",
                "Packet Injection",
                "Cryptographic Downgrade"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to backend servers and modifies stored user data.",
            "Assumptions": [
                {
                    "Assumption": "The attacker exploits a vulnerability in the server software.",
                    "Role": "Attacker",
                    "Condition": "Existing server vulnerabilities are known and unpatched."
                },
                {
                    "Assumption": "The backend server lacks proper access controls or monitoring.",
                    "Role": "Platform Developer",
                    "Condition": "Weak server access controls and monitoring mechanisms."
                },
                {
                    "Assumption": "Users assume their data is secure and accurate.",
                    "Role": "User",
                    "Condition": "Users trust the platform\u2019s data security measures."
                }
            ],
            "Potential Impact": "Data corruption or loss, impacting the integrity and availability of user information.",
            "MITRE ATT&CK Keywords": [
                "Privilege Escalation",
                "Database Injection",
                "System Compromise",
                "Data Corruption"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker tampers with third-party integrations to alter the behavior of the social media platform.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications have weaknesses or vulnerabilities.",
                    "Role": "Third-Party Developer",
                    "Condition": "Poorly secured or maintained applications."
                },
                {
                    "Assumption": "The attacker has the ability to modify third-party code or configurations.",
                    "Role": "Attacker",
                    "Condition": "Access to third-party development environments."
                },
                {
                    "Assumption": "The platform relies on these third-party applications without sufficient validation.",
                    "Role": "Platform Developer",
                    "Condition": "Dependence on third-party integrations without robust validation routines."
                }
            ],
            "Potential Impact": "Altered platform functionality or unexpected behaviors, leading to potential data integrity and availability issues.",
            "MITRE ATT&CK Keywords": [
                "Third-Party Exploitation",
                "Injection Attacks",
                "Configuration Manipulation",
                "Behavioral Anomaly"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having performed a specific action on their profile, such as sending messages.",
            "Assumptions": [
                {
                    "Assumption": "The platform does not have sufficient logging or non-repudiation controls.",
                    "Role": "Platform Developer",
                    "Condition": "Lack of detailed logging mechanisms."
                },
                {
                    "Assumption": "The user has the ability and motive to deny the action.",
                    "Role": "User",
                    "Condition": "User attempts to avoid responsibility or accountability."
                },
                {
                    "Assumption": "There are scenarios where user actions can plausibly be questioned.",
                    "Role": "Security Analyst",
                    "Condition": "Ambiguous or questionable user activity records."
                }
            ],
            "Potential Impact": "Disputed activities may lead to trust issues and potential legal implications.",
            "MITRE ATT&CK Keywords": [
                "Action Denial",
                "Log Manipulation",
                "Non-Repudiation Failure",
                "Accountability Evasion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker alters log files to erase evidence of their malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the system's log files.",
                    "Role": "Attacker",
                    "Condition": "Access permissions are improperly managed."
                },
                {
                    "Assumption": "The platform does not have tamper-evident logging capabilities.",
                    "Role": "Platform Developer",
                    "Condition": "Logging system lacks integrity checks."
                },
                {
                    "Assumption": "Regular monitoring and auditing of logs are not performed.",
                    "Role": "System Administrator",
                    "Condition": "Neglect in log monitoring practices."
                }
            ],
            "Potential Impact": "Security incidents go undetected, obscuring the attacker's actions and preventing timely response.",
            "MITRE ATT&CK Keywords": [
                "Log Tampering",
                "Stealth Techniques",
                "Evidence Removal",
                "Forensic Evasion"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A third-party application denies responsibility for actions that affected user data.",
            "Assumptions": [
                {
                    "Assumption": "The platform does not enforce accountability for third-party actions.",
                    "Role": "Platform Developer",
                    "Condition": "Lack of clear accountability and tracking mechanisms for third-party integrations."
                },
                {
                    "Assumption": "Third-party applications can execute actions without proper attribution.",
                    "Role": "Third-Party Developer",
                    "Condition": "Insufficient attribution mechanisms within the platform."
                },
                {
                    "Assumption": "Users are unaware of the specific third-party application's responsibilities.",
                    "Role": "User",
                    "Condition": "Lack of transparency in third-party roles and actions."
                }
            ],
            "Potential Impact": "Disputed accountability may lead to trust issues and potential conflicts between users and third-party services.",
            "MITRE ATT&CK Keywords": [
                "Third-Party Accountability",
                "Action Denial",
                "Log Manipulation",
                "Integration Discrepancy"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability to access sensitive user data stored on the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "The backend servers have known vulnerabilities.",
                    "Role": "Platform Developer",
                    "Condition": "Existing vulnerabilities are unpatched."
                },
                {
                    "Assumption": "The attacker has sufficient technical skills to exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Attacker is proficient in exploiting system weaknesses."
                },
                {
                    "Assumption": "Sensitive data is stored in an easily accessible format.",
                    "Role": "Data Architect",
                    "Condition": "Data is not encrypted or securely stored."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user information.",
            "MITRE ATT&CK Keywords": [
                "Exploitation",
                "Server Vulnerability",
                "Data Breach",
                "Unauthorized Access"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is inadvertently exposed through improperly configured privacy settings.",
            "Assumptions": [
                {
                    "Assumption": "The platform's privacy settings are complex and confusing for users.",
                    "Role": "UX Designer",
                    "Condition": "Poorly designed privacy controls."
                },
                {
                    "Assumption": "Users do not fully understand or configure their privacy settings correctly.",
                    "Role": "User",
                    "Condition": "Lack of user awareness or knowledge."
                },
                {
                    "Assumption": "The default privacy settings are overly permissive.",
                    "Role": "Platform Developer",
                    "Condition": "Defaults are set to share rather than protect information."
                }
            ],
            "Potential Impact": "Unintended exposure of personal and sensitive information to unauthorized parties.",
            "MITRE ATT&CK Keywords": [
                "Privacy Misconfiguration",
                "User Error",
                "Data Leak",
                "Configuration Weakness"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted data transmitted between user devices and backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Data in transit is not encrypted.",
                    "Role": "Platform Developer",
                    "Condition": "Use of inadequate or no encryption protocols."
                },
                {
                    "Assumption": "The attacker has access to the network traffic via man-in-the-middle tactics.",
                    "Role": "Attacker",
                    "Condition": "Control over or access to network nodes."
                },
                {
                    "Assumption": "Users are unaware their data is being intercepted.",
                    "Role": "User",
                    "Condition": "Users trust in the platform's security measures."
                }
            ],
            "Potential Impact": "Exposure of sensitive user information during transmission.",
            "MITRE ATT&CK Keywords": [
                "Man-in-the-Middle",
                "Data Interception",
                "Encryption Weakness",
                "Network Surveillance"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a volumetric DDoS attack on the social media platform, overwhelming the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can marshal sufficient network resources for the DDoS attack.",
                    "Role": "Attacker",
                    "Condition": "Access to botnets or large-scale infrastructure."
                },
                {
                    "Assumption": "The backend servers are not equipped to handle high volumes of traffic.",
                    "Role": "Platform Developer",
                    "Condition": "Lack of protective measures like rate limiting or load balancing."
                },
                {
                    "Assumption": "The platform's network infrastructure is vulnerable to DDoS attacks.",
                    "Role": "Network Architect",
                    "Condition": "Network lacks adequate DDoS mitigation strategies."
                }
            ],
            "Potential Impact": "Disruption of service, rendering the social media platform inaccessible to users.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "Network Flooding",
                "Service Disruption",
                "Resource Exhaustion"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a software vulnerability to cause the backend servers to crash.",
            "Assumptions": [
                {
                    "Assumption": "The backend servers have software vulnerabilities.",
                    "Role": "Platform Developer",
                    "Condition": "Unpatched or poorly-reviewed software."
                },
                {
                    "Assumption": "The attacker can identify and exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Possesses technical knowledge to exploit the software issues."
                },
                {
                    "Assumption": "The platform does not have sufficient monitoring and recovery mechanisms in place.",
                    "Role": "System Administrator",
                    "Condition": "Lack of proactive monitoring and response strategies."
                }
            ],
            "Potential Impact": "Service outage, leading to denial of access for legitimate users.",
            "MITRE ATT&CK Keywords": [
                "Exploit Vulnerability",
                "Service Crash",
                "Outage",
                "Availability Compromise"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker manipulates third-party service dependencies to degrade service performance.",
            "Assumptions": [
                {
                    "Assumption": "The platform relies on third-party services for critical functions.",
                    "Role": "Platform Developer",
                    "Condition": "Dependence on external services."
                },
                {
                    "Assumption": "The attacker can disrupt these third-party services.",
                    "Role": "Attacker",
                    "Condition": "Capable of interfering with third-party operations."
                },
                {
                    "Assumption": "There are no contingency plans or redundancies for third-party service failures.",
                    "Role": "System Administrator",
                    "Condition": "Lack of backup plans or alternative services."
                }
            ],
            "Potential Impact": "Degradation of service performance, affecting user experience and availability.",
            "MITRE ATT&CK Keywords": [
                "Third-Party Compromise",
                "Service Degradation",
                "Dependency Weakness",
                "Performance Impact"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability to gain administrative access to the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "The backend servers have exploitable vulnerabilities.",
                    "Role": "Platform Developer",
                    "Condition": "Vulnerabilities are unpatched or unknown."
                },
                {
                    "Assumption": "The attacker has sufficient skills and knowledge to exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Technical proficiency in exploiting server flaws."
                },
                {
                    "Assumption": "The platform does not have adequate access control mechanisms.",
                    "Role": "System Administrator",
                    "Condition": "Weak or misconfigured access controls."
                }
            ],
            "Potential Impact": "Complete system compromise, leading to unauthorized data access and control.",
            "MITRE ATT&CK Keywords": [
                "Privilege Escalation",
                "Server Exploit",
                "Root Access",
                "System Compromise"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering techniques to convince an administrator to grant higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "The attacker is skilled in social engineering.",
                    "Role": "Attacker",
                    "Condition": "Expertise in manipulating behaviors or trust."
                },
                {
                    "Assumption": "The administrator is susceptible to social engineering tactics.",
                    "Role": "Administrator",
                    "Condition": "Lack of awareness or training in social engineering defenses."
                },
                {
                    "Assumption": "The platform lacks strict procedures for privilege escalation requests.",
                    "Role": "Platform Developer",
                    "Condition": "Weak or informal escalation procedures."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive administrative functions and data.",
            "MITRE ATT&CK Keywords": [
                "Social Engineering",
                "Phishing",
                "Privilege Abuse",
                "Access Manipulation"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
                "technique_id": "T1586.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a poorly configured third-party application to gain higher privileges on the platform.",
            "Assumptions": [
                {
                    "Assumption": "The third-party application is poorly secured or configured.",
                    "Role": "Third-Party Developer",
                    "Condition": "Weak application security measures."
                },
                {
                    "Assumption": "The attacker can leverage this vulnerability for privilege escalation.",
                    "Role": "Attacker",
                    "Condition": "Ability to exploit third-party application flaws."
                },
                {
                    "Assumption": "The platform does not adequately monitor and restrict third-party applications' privileges.",
                    "Role": "Platform Developer",
                    "Condition": "Weak third-party application management."
                }
            ],
            "Potential Impact": "Unauthorized access and control over critical platform functions.",
            "MITRE ATT&CK Keywords": [
                "Third-Party Exploit",
                "Privilege Escalation",
                "Access Control Weakness",
                "Application Misconfiguration"
            ],
            "mitre_technique": {
                "name": "Print Processors",
                "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.(Citation: Microsoft Intro Print Processors)\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\\\[Windows architecture: e.g., Windows x64]\\Print Processors\\\\[user defined]\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory.(Citation: Microsoft AddPrintProcessor May 2018) After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.(Citation: ESET PipeMon May 2020)\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
                "id": "attack-pattern--2de47683-f398-448f-b947-9abcc3e32fad",
                "technique_id": "T1547.012"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "7",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could create fake user profiles to impersonate real users.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can create accounts with limited verification.",
                    "Role": "Attacker",
                    "Condition": "User registration does not enforce strong identity verification."
                },
                {
                    "Assumption": "There are limited checks on profile authenticity.",
                    "Role": "Platform Administrator",
                    "Condition": "The system does not regularly check for fake profiles."
                },
                {
                    "Assumption": "Users might not recognize fake profiles.",
                    "Role": "End User",
                    "Condition": "Users may not be vigilant or informed enough to identify imposters."
                }
            ],
            "Potential Impact": "Reduced user trust through impersonation and possible social engineering attacks.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "identity theft",
                "social engineering",
                "fake profiles"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage)\n\nFor operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. \n\nOnce a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--b1ccd744-3f78-4a0e-9bb2-2002057f7928",
                "technique_id": "T1585.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Third-party applications might spoof authentication tokens to gain unauthorized access.",
            "Assumptions": [
                {
                    "Assumption": "Authentication tokens are not sufficiently protected.",
                    "Role": "Platform Developer",
                    "Condition": "Weak token management and lack of encryption."
                },
                {
                    "Assumption": "Integrated applications have excessive permissions.",
                    "Role": "User",
                    "Condition": "Users grant more permissions than necessary to third-party apps."
                },
                {
                    "Assumption": "Attackers have access to token interception methods.",
                    "Role": "Attacker",
                    "Condition": "The presence of network vulnerabilities that allow token interception."
                }
            ],
            "Potential Impact": "Unauthorized access to user data and platform features, risking data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "token theft",
                "third-party application",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Steal Application Access Token",
                "description": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019)  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.(Citation: Kubernetes Service Accounts)  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment.(Citation: Cider Security Top 10 CICD Security Risks) If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017) The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens(Citation: Auth0 Understanding Refresh Tokens), allowing them to obtain new access tokens without prompting the user.  \n\n",
                "id": "attack-pattern--890c9858-598c-401d-a4d5-c67ebcdd703a",
                "technique_id": "T1528"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attackers could spoof email addresses to send phishing messages from trusted accounts.",
            "Assumptions": [
                {
                    "Assumption": "Email address is used as the primary identifier.",
                    "Role": "Platform Administrator",
                    "Condition": "User accounts are tied to email addresses."
                },
                {
                    "Assumption": "Weak email authentication protocols.",
                    "Role": "Platform Developer",
                    "Condition": "Lack of DMARC, DKIM, or SPF records."
                },
                {
                    "Assumption": "Users might not scrutinize email sources.",
                    "Role": "End User",
                    "Condition": "Users trust emails from familiar-looking addresses."
                }
            ],
            "Potential Impact": "Users may fall for phishing attacks, leading to stolen credentials or sensitive data.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "email spoofing",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could alter content shared by users (e.g., posts, messages).",
            "Assumptions": [
                {
                    "Assumption": "Manipulation of stored data is possible.",
                    "Role": "Attacker",
                    "Condition": "Weaknesses in backend data storage security."
                },
                {
                    "Assumption": "Content validation is inadequate.",
                    "Role": "Platform Administrator",
                    "Condition": "Lack of robust integrity checks on content."
                },
                {
                    "Assumption": "User data access controls are insufficient.",
                    "Role": "Platform Developer",
                    "Condition": "Insufficient access control mechanisms."
                }
            ],
            "Potential Impact": "Corruption of user data or misinformation spread, impacting data integrity and user trust.",
            "MITRE ATT&CK Keywords": [
                "data tampering",
                "content manipulation",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attackers could manipulate backend database queries to alter data.",
            "Assumptions": [
                {
                    "Assumption": "Application is vulnerable to SQL injection.",
                    "Role": "Platform Developer",
                    "Condition": "Insufficient input validation and sanitization."
                },
                {
                    "Assumption": "Backend servers have inadequate logging.",
                    "Role": "Platform Administrator",
                    "Condition": "Lack of detailed logging and monitoring for database actions."
                },
                {
                    "Assumption": "Weak database security measures.",
                    "Role": "Platform Administrator",
                    "Condition": "Inadequate access controls and authentication mechanisms."
                }
            ],
            "Potential Impact": "Loss of data integrity and possible unauthorized data manipulation.",
            "MITRE ATT&CK Keywords": [
                "SQL injection",
                "database tampering",
                "data manipulation"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker might exploit APIs to alter key user data.",
            "Assumptions": [
                {
                    "Assumption": "APIs are not securely authenticated.",
                    "Role": "Platform Developer",
                    "Condition": "Lack of strong authentication and authorization for API endpoints."
                },
                {
                    "Assumption": "API endpoints do not validate input properly.",
                    "Role": "Platform Developer",
                    "Condition": "Weak input validation mechanisms."
                },
                {
                    "Assumption": "Logging and monitoring of API usage is inadequate.",
                    "Role": "Platform Administrator",
                    "Condition": "Lack of comprehensive logging and monitoring of API interactions."
                }
            ],
            "Potential Impact": "Compromise of data integrity and possible exposure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "API abuse",
                "input validation",
                "data tampering"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users could deny performing actions on their account if no proper logging is in place.",
            "Assumptions": [
                {
                    "Assumption": "Actions are not logged with sufficient detail.",
                    "Role": "Platform Administrator",
                    "Condition": "Inadequate logging and audit trails for user actions."
                },
                {
                    "Assumption": "Logs can be altered or deleted.",
                    "Role": "Attacker",
                    "Condition": "Weak protections on logging mechanisms."
                },
                {
                    "Assumption": "Users have the ability to manipulate logs.",
                    "Role": "User",
                    "Condition": "Users possess privileges to alter their own logs or logs are easily accessible."
                }
            ],
            "Potential Impact": "Undermines non-repudiation, leading to disputes and potential misuse of the platform.",
            "MITRE ATT&CK Keywords": [
                "non-repudiation",
                "log tampering",
                "audit trails"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker might remove or alter log entries to hide their activities.",
            "Assumptions": [
                {
                    "Assumption": "Logs are not securely stored.",
                    "Role": "Platform Administrator",
                    "Condition": "Logs are stored without encryption and protection."
                },
                {
                    "Assumption": "Log alterations are not monitored effectively.",
                    "Role": "Platform Administrator",
                    "Condition": "Insufficient monitoring and alerting for log changes."
                },
                {
                    "Assumption": "Attackers have privileges to access log files.",
                    "Role": "Attacker",
                    "Condition": "Compromised accounts can access log files with alteration capabilities."
                }
            ],
            "Potential Impact": "Loss of accountability and ability to independently reconstruct events, impacting system integrity.",
            "MITRE ATT&CK Keywords": [
                "log deletion",
                "log manipulation",
                "artifact removal"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Third-party services might deny actions they performed on the user's behalf.",
            "Assumptions": [
                {
                    "Assumption": "Third-party services have access to user data.",
                    "Role": "External Service",
                    "Condition": "Integrated services require user authorization for specific actions."
                },
                {
                    "Assumption": "Data sharing records are not detailed.",
                    "Role": "Platform Developer",
                    "Condition": "Insufficient logging of third-party interactions and data sharing actions."
                },
                {
                    "Assumption": "No verification mechanism for third-party actions.",
                    "Role": "Platform Developer",
                    "Condition": "The platform lacks a verification mechanism for third-party actions taken on user accounts."
                }
            ],
            "Potential Impact": "Disputes regarding third-party actions, impacting user trust and system reliability.",
            "MITRE ATT&CK Keywords": [
                "third-party interaction",
                "action repudiation",
                "service integration"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An unencrypted data transmission can be intercepted, exposing sensitive user data.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted without encryption.",
                    "Role": "Platform Developer",
                    "Condition": "Use of insecure communication protocols like HTTP."
                },
                {
                    "Assumption": "Sensitive data is included in transmission.",
                    "Role": "Platform Developer",
                    "Condition": "Personal information is transmitted over the network."
                },
                {
                    "Assumption": "Attackers have access to the network.",
                    "Role": "Attacker",
                    "Condition": "Presence of network vulnerabilities or compromised routes."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of personal details, compromising data confidentiality.",
            "MITRE ATT&CK Keywords": [
                "unencrypted data",
                "man-in-the-middle",
                "network interception"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A backend system vulnerability allows unauthorized data extraction.",
            "Assumptions": [
                {
                    "Assumption": "Backend systems have exploitable vulnerabilities.",
                    "Role": "Platform Developer",
                    "Condition": "Unpatched and outdated software with known vulnerabilities."
                },
                {
                    "Assumption": "Data access controls are inadequate.",
                    "Role": "Platform Administrator",
                    "Condition": "Weak authentication and authorization."
                },
                {
                    "Assumption": "Attackers are aware of the backend vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Access to exploit-specific information and tools."
                }
            ],
            "Potential Impact": "Exposure of significant volumes of sensitive user data, impacting confidentiality.",
            "MITRE ATT&CK Keywords": [
                "unauthorized access",
                "backend vulnerability",
                "data extraction"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Third-party integrations may unintentionally expose user information.",
            "Assumptions": [
                {
                    "Assumption": "Third-party apps have broad data access.",
                    "Role": "Platform Administrator",
                    "Condition": "Permissions granted are overly permissive."
                },
                {
                    "Assumption": "Lack of regular security reviews for third-party apps.",
                    "Role": "Platform Developer",
                    "Condition": "No stringent security assessment processes."
                },
                {
                    "Assumption": "Users are unaware of the scope of data shared.",
                    "Role": "User",
                    "Condition": "Users do not adequately review integration details."
                }
            ],
            "Potential Impact": "Sensitive user information could be inadvertently shared, compromising confidentiality.",
            "MITRE ATT&CK Keywords": [
                "third-party access",
                "data sharing",
                "information leakage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A Distributed Denial of Service (DDoS) attack floods the server, disrupting service.",
            "Assumptions": [
                {
                    "Assumption": "Servers are susceptible to traffic floods.",
                    "Role": "Platform Administrator",
                    "Condition": "Lack of robust DDoS protection and resilience mechanisms."
                },
                {
                    "Assumption": "Attackers can generate significant traffic volumes.",
                    "Role": "Attacker",
                    "Condition": "Access to botnets or other DDoS initiation tools."
                },
                {
                    "Assumption": "Monitoring systems might not detect the attack quickly.",
                    "Role": "Platform Administrator",
                    "Condition": "Insufficient real-time monitoring and automated response systems."
                }
            ],
            "Potential Impact": "Service disruption leading to loss of availability and potential user dissatisfaction.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "traffic flooding",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "API abuse could overload the system, causing a service slowdown or crash.",
            "Assumptions": [
                {
                    "Assumption": "APIs lack rate limiting.",
                    "Role": "Platform Developer",
                    "Condition": "No mechanisms to control the rate of API requests."
                },
                {
                    "Assumption": "Monitoring is inadequate for API usage patterns.",
                    "Role": "Platform Administrator",
                    "Condition": "API usage and abuse are not thoroughly monitored."
                },
                {
                    "Assumption": "Attackers can successfully invoke APIs repeatedly.",
                    "Role": "Attacker",
                    "Condition": "Vulnerabilities in API endpoint protection."
                }
            ],
            "Potential Impact": "System performance degradation, impacting service availability.",
            "MITRE ATT&CK Keywords": [
                "API abuse",
                "rate limiting",
                "service availability"
            ],
            "mitre_technique": {
                "name": "Resource Hijacking",
                "description": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. \n\nOne common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.(Citation: Kaspersky Lazarus Under The Hood Blog 2017) Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining.(Citation: CloudSploit - Unused AWS Regions) Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.(Citation: Unit 42 Hildegard Malware)(Citation: Trend Micro Exposed Docker APIs)\n\nAdditionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure it\u2019s not competing for resources.(Citation: Trend Micro War of Crypto Miners)\n\nAdversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitate [Network Denial of Service](https://attack.mitre.org/techniques/T1498) campaigns and/or to seed malicious torrents.(Citation: GoBotKR) Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services.(Citation: Sysdig Proxyjacking)",
                "id": "attack-pattern--cd25c1b4-935c-4f0e-ba8d-552f28bc4783",
                "technique_id": "T1496"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A vulnerability in the backend allows resource exhaustion attacks.",
            "Assumptions": [
                {
                    "Assumption": "Backend systems have resource limits.",
                    "Role": "Platform Developer",
                    "Condition": "Insufficient resource management and allocation."
                },
                {
                    "Assumption": "Attack vector allows repeated requests.",
                    "Role": "Attacker",
                    "Condition": "Backend vulnerabilities that permit intensive querying."
                },
                {
                    "Assumption": "Monitoring does not detect resource exhaustion.",
                    "Role": "Platform Administrator",
                    "Condition": "Lack of metrics and alerting on resource usage."
                }
            ],
            "Potential Impact": "Complete or partial system shutdown, impacting availability.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "backend vulnerability",
                "service downtime"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "User accounts could be compromised to elevate their access rights.",
            "Assumptions": [
                {
                    "Assumption": "Privileges are not tightly controlled.",
                    "Role": "Platform Developer",
                    "Condition": "Lack of role-based access controls."
                },
                {
                    "Assumption": "Authentication methods are weak.",
                    "Role": "Platform Developer",
                    "Condition": "Weak password policies and missing two-factor authentication."
                },
                {
                    "Assumption": "Attackers target high-level accounts.",
                    "Role": "Attacker",
                    "Condition": "Focused attacks on privileged or admin accounts."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive functions and data, compromising integrity and confidentiality.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "credential compromise",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Third-party apps might exploit integration permissions for elevated access.",
            "Assumptions": [
                {
                    "Assumption": "Third-party integrations are not restricted.",
                    "Role": "Platform Developer",
                    "Condition": "Lack of fine-grained control over permissions."
                },
                {
                    "Assumption": "No regular auditing of third-party access.",
                    "Role": "Platform Administrator",
                    "Condition": "Integrations are not reviewed for security compliance."
                },
                {
                    "Assumption": "Attackers exploit affiliated third-party apps.",
                    "Role": "Attacker",
                    "Condition": "Compromised or malicious third-party apps."
                }
            ],
            "Potential Impact": "Unauthorized access through third-party, risking data integrity and confidentiality.",
            "MITRE ATT&CK Keywords": [
                "third-party exploitation",
                "integration abuse",
                "elevated access"
            ],
            "mitre_technique": {
                "name": "Trusted Relationship",
                "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\n\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, [Valid Accounts](https://attack.mitre.org/techniques/T1078) used by the other party for access to internal network systems may be compromised and used.(Citation: CISA IT Service Providers)\n\nIn Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.(Citation: Office 365 Delegated Administration)",
                "id": "attack-pattern--9fa07bef-9c81-421e-a8e5-ad4366c5a925",
                "technique_id": "T1199"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploiting OS or application vulnerabilities to gain admin privileges on backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Backend systems have exploitable vulnerabilities.",
                    "Role": "Platform Administrator",
                    "Condition": "Unpatched systems with known vulnerabilities."
                },
                {
                    "Assumption": "Attackers can reach backend systems.",
                    "Role": "Attacker",
                    "Condition": "Access through network vulnerabilities or compromised endpoints."
                },
                {
                    "Assumption": "Monitoring for admin actions is insufficient.",
                    "Role": "Platform Administrator",
                    "Condition": "Lack of detailed monitoring and response for admin-level activities."
                }
            ],
            "Potential Impact": "Complete system control, risking all aspects of confidentiality, integrity, and availability.",
            "MITRE ATT&CK Keywords": [
                "os vulnerability",
                "privilege escalation",
                "admin control"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "8",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake profile mimicking a legitimate user to gain trust and potentially extract sensitive information from other users.",
            "Assumptions": [
                {
                    "Assumption": "User profile creation allows similar names to existing profiles",
                    "Role": "User",
                    "Condition": "User permissions allow creation of similar profile."
                },
                {
                    "Assumption": "Insufficient verification mechanisms in place for new profiles",
                    "Role": "System Admin",
                    "Condition": "No additional checks beyond initial profile creation."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "identity spoofing",
                "social engineering",
                "phishing",
                "device"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts unencrypted communication between client and server and spoofs the server to the client.",
            "Assumptions": [
                {
                    "Assumption": "Communication channels lack encryption",
                    "Role": "Network Admin",
                    "Condition": "Data in transit is not encrypted."
                },
                {
                    "Assumption": "Attackers can access network traffic between the server and clients",
                    "Role": "Attacker",
                    "Condition": "Presence in the same network as the target communication."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "network",
                "man-in-the-middle",
                "communication interception",
                "device"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses phishing emails that redirect users to a fake login page mimicking the social media platform\u2019s authentication page.",
            "Assumptions": [
                {
                    "Assumption": "Users can be tricked by phishing attacks",
                    "Role": "User",
                    "Condition": "User lacks awareness about phishing."
                },
                {
                    "Assumption": "Email systems do not adequately filter phishing emails",
                    "Role": "System Admin",
                    "Condition": "Email filtering rules are insufficient."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of credentials.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "email",
                "credential theft",
                "device"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters the content of user posts or messages by intercepting and modifying traffic between user devices and backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Data in transit is not encrypted",
                    "Role": "Network Admin",
                    "Condition": "Traffic between user devices and servers is unencrypted."
                },
                {
                    "Assumption": "Attackers have access to the communication channel",
                    "Role": "Attacker",
                    "Condition": "Attacker has network access."
                }
            ],
            "Potential Impact": "Corruption or tampering of data.",
            "MITRE ATT&CK Keywords": [
                "data injection",
                "content alteration",
                "man-in-the-middle",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to backend servers and modifies stored user data or system configurations.",
            "Assumptions": [
                {
                    "Assumption": "Backend servers have insufficient access controls",
                    "Role": "System Admin",
                    "Condition": "Access controls are weak."
                },
                {
                    "Assumption": "Attackers can exploit vulnerabilities to gain backend access",
                    "Role": "Attacker",
                    "Condition": "Backend server vulnerabilities are unpatched."
                }
            ],
            "Potential Impact": "Corruption or tampering of data.",
            "MITRE ATT&CK Keywords": [
                "server access",
                "configuration alteration",
                "data manipulation",
                "device"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code into the third-party integration APIs which then gets executed within the social media platform\u2019s environment.",
            "Assumptions": [
                {
                    "Assumption": "Third-party integrations allow code injection",
                    "Role": "Developer",
                    "Condition": "API accepts content without proper validation."
                },
                {
                    "Assumption": "Insufficient validation and sanitization of input from third-party applications",
                    "Role": "System Admin",
                    "Condition": "Input validation mechanisms are weak."
                }
            ],
            "Potential Impact": "Corruption or tampering of data.",
            "MITRE ATT&CK Keywords": [
                "code injection",
                "API exploitation",
                "third-party compromise",
                "device"
            ],
            "mitre_technique": {
                "name": "System Owner/User Discovery",
                "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from [System Owner/User Discovery](https://attack.mitre.org/techniques/T1033) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show users` and `show ssh` can be used to display users currently logged into the device.(Citation: show_ssh_users_cmd_cisco)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)",
                "id": "attack-pattern--03d7999c-1f4c-42cc-8373-e7690d318104",
                "technique_id": "T1033"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user claims they did not perform an action such as posting a message, leading to disputes and potential lack of accountability.",
            "Assumptions": [
                {
                    "Assumption": "No effective logging or auditing of user actions",
                    "Role": "System Admin",
                    "Condition": "Logging mechanisms are absent or insufficient."
                },
                {
                    "Assumption": "Platform does not provide non-repudiation mechanisms",
                    "Role": "Developer",
                    "Condition": "Non-repudiation features are not implemented."
                }
            ],
            "Potential Impact": "Lack of accountability and potential for disputes.",
            "MITRE ATT&CK Keywords": [
                "action denial",
                "logging inadequacy",
                "non-repudiation",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker modifies logs to erase traces of their malicious activities, making it difficult to trace the origin of the attack.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms are not tamper-proof",
                    "Role": "System Admin",
                    "Condition": "Logs can be modified without detection."
                },
                {
                    "Assumption": "Insufficient monitoring of administrative activities",
                    "Role": "System Admin",
                    "Condition": "Administrative changes are not monitored."
                }
            ],
            "Potential Impact": "Lack of accountability and detection of malicious activities.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "audit trail erasure",
                "administrative abuse",
                "network"
            ],
            "mitre_technique": {
                "name": "Socket Filters",
                "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.\n\nTo establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.(Citation: haking9 libpcap network sniffing) Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with [Protocol Tunneling](https://attack.mitre.org/techniques/T1572).(Citation: exatrack bpf filters passive backdoors)(Citation: Leonardo Turla Penquin May 2020)\n\nFilters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`.  Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
                "id": "attack-pattern--005cc321-08ce-4d17-b1ea-cb5275926520",
                "technique_id": "T1205.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A legitimate user denies having conducted an online transaction or message exchange, challenging the platform\u2019s integrity.",
            "Assumptions": [
                {
                    "Assumption": "No digital signatures for critical transactions",
                    "Role": "Developer",
                    "Condition": "Critical transactions are not signed."
                },
                {
                    "Assumption": "Insufficient measures to authenticate and log each transaction",
                    "Role": "System Admin",
                    "Condition": "Transaction logging is inadequate."
                }
            ],
            "Potential Impact": "Lack of accountability and challenge to system integrity.",
            "MITRE ATT&CK Keywords": [
                "transaction denial",
                "digital signature absence",
                "authentication failure",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to user profiles by exploiting security vulnerabilities, exposing sensitive personal information.",
            "Assumptions": [
                {
                    "Assumption": "Security vulnerabilities in user profile management",
                    "Role": "Developer",
                    "Condition": "User profile system has unpatched vulnerabilities."
                },
                {
                    "Assumption": "Access controls are weak",
                    "Role": "System Admin",
                    "Condition": "Insufficient access controls."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "unauthorized access",
                "data breaches",
                "profile exposure",
                "device"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A compromised third-party integration leaks sensitive user data exchanged between the social media platform and the third-party application.",
            "Assumptions": [
                {
                    "Assumption": "Sensitive data is shared with third-party applications",
                    "Role": "System Admin",
                    "Condition": "Data integration involves sensitive information."
                },
                {
                    "Assumption": "Third-party application has security weaknesses",
                    "Role": "Third-Party Developer",
                    "Condition": "Weak security in third-party app."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "data leaks",
                "third-party compromise",
                "integration exposure",
                "network"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker uses a social engineering attack to trick users into revealing sensitive information such as passwords or personal details.",
            "Assumptions": [
                {
                    "Assumption": "Users are susceptible to social engineering attacks",
                    "Role": "User",
                    "Condition": "Lack of user awareness."
                },
                {
                    "Assumption": "No adequate user training on social engineering risks",
                    "Role": "System Admin",
                    "Condition": "Insufficient user education."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "credential theft",
                "data leaks",
                "device"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker performs a Distributed Denial of Service (DDoS) attack on the backend servers, overwhelming them and causing the social media platform to be unavailable.",
            "Assumptions": [
                {
                    "Assumption": "Backend servers vulnerable to high-volume traffic",
                    "Role": "System Admin",
                    "Condition": "Insufficient DDoS protection measures."
                },
                {
                    "Assumption": "Attackers can coordinate large-scale botnet attacks",
                    "Role": "Attacker",
                    "Condition": "Access to botnet resources."
                }
            ],
            "Potential Impact": "Disruption to system or data access.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "service disruption",
                "network flooding",
                "device"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the social media platform\u2019s software to crash the backend servers, causing service downtime.",
            "Assumptions": [
                {
                    "Assumption": "Software has unpatched vulnerabilities",
                    "Role": "Developer",
                    "Condition": "Known vulnerabilities in the software stack."
                },
                {
                    "Assumption": "Insufficient input validation in the software",
                    "Role": "Developer",
                    "Condition": "Weakness in input validation."
                }
            ],
            "Potential Impact": "Disruption to system or data access.",
            "MITRE ATT&CK Keywords": [
                "exploit",
                "service crash",
                "vulnerability exploitation",
                "device"
            ],
            "mitre_technique": {
                "name": "Vulnerabilities",
                "description": "Adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.(Citation: National Vulnerability Database)\n\nAn adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e. [Exploits](https://attack.mitre.org/techniques/T1588/005)) or to attempt to develop one themselves (i.e. [Exploits](https://attack.mitre.org/techniques/T1587/004)).",
                "id": "attack-pattern--2b5aa86b-a0df-4382-848d-30abea443327",
                "technique_id": "T1588.006"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker gains access to the backend infrastructure and intentionally misconfigures critical services to disrupt platform operations.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient access control on backend servers",
                    "Role": "System Admin",
                    "Condition": "Weak access control mechanisms."
                },
                {
                    "Assumption": "Lack of monitoring on backend changes",
                    "Role": "System Admin",
                    "Condition": "Changes are not properly monitored."
                }
            ],
            "Potential Impact": "Disruption to system or data access.",
            "MITRE ATT&CK Keywords": [
                "infrastructure sabotage",
                "service misconfiguration",
                "access control failure",
                "device"
            ],
            "mitre_technique": {
                "name": "Disk Structure Wipe",
                "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. \n\nAdversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) may be performed in isolation, or along with [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) if all sectors of a disk are wiped.\n\nOn a network devices, adversaries may reformat the file system using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `format`.(Citation: format_cmd_cisco)\n\nTo maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)",
                "id": "attack-pattern--0af0ca99-357d-4ba1-805f-674fdfb7bef9",
                "technique_id": "T1561.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the application to escalate privileges and gain unauthorized administrative access.",
            "Assumptions": [
                {
                    "Assumption": "Application has known but unpatched vulnerabilities",
                    "Role": "Developer",
                    "Condition": "Exploitable application weaknesses."
                },
                {
                    "Assumption": "Insufficient privilege separation within the application",
                    "Role": "Developer",
                    "Condition": "Weak privilege separation mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized access and potential misuse of administrative functions.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability exploitation",
                "admin access",
                "device"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A compromised third-party application gains higher privileges within the social media platform's infrastructure, allowing unauthorized data access or manipulation.",
            "Assumptions": [
                {
                    "Assumption": "Third-party integration has elevated privileges",
                    "Role": "Developer",
                    "Condition": "Access permissions are overly permissive."
                },
                {
                    "Assumption": "Insufficient control over third-party applications",
                    "Role": "System Admin",
                    "Condition": "Weak third-party access control."
                }
            ],
            "Potential Impact": "Unauthorized access and manipulation of data.",
            "MITRE ATT&CK Keywords": [
                "third-party escalation",
                "access control weakness",
                "data manipulation",
                "device"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages social engineering techniques to gain higher-level access credentials from legitimate users.",
            "Assumptions": [
                {
                    "Assumption": "Users are susceptible to social engineering",
                    "Role": "User",
                    "Condition": "Lack of user awareness."
                },
                {
                    "Assumption": "No multi-factor authentication (MFA) for higher privileges",
                    "Role": "System Admin",
                    "Condition": "Higher privilege access lacks MFA."
                }
            ],
            "Potential Impact": "Unauthorized access and misuse.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "credential theft",
                "MFA bypass",
                "device"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "9",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake user profile that mimics a legitimate user to deceive other users.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has access to the platform's registration process",
                    "Role": "Attacker",
                    "Condition": "No strong identity verification mechanisms in place"
                },
                {
                    "Assumption": "Users are not verifying profiles rigorously",
                    "Role": "Users",
                    "Condition": "Users trust the appearance of profiles without additional verification"
                },
                {
                    "Assumption": "Lack of automated detection for fake profiles",
                    "Role": "Platform administrator",
                    "Condition": "No advanced detection algorithms for identifying fake accounts"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information and reputational damage.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "identity deception",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage)\n\nFor operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. \n\nOnce a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--b1ccd744-3f78-4a0e-9bb2-2002057f7928",
                "technique_id": "T1585.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Phishing attack where an attacker sends a message posing as a trusted source to gain login credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users are susceptible to social engineering attacks",
                    "Role": "Users",
                    "Condition": "No prior training or awareness"
                },
                {
                    "Assumption": "Attackers can send messages through the platform",
                    "Role": "Attacker",
                    "Condition": "Platform's messaging system is vulnerable"
                },
                {
                    "Assumption": "No multi-factor authentication in place",
                    "Role": "Platform administrator",
                    "Condition": "Users rely on passwords alone for authentication"
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts and potential data theft.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential theft",
                "identity deception"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a third-party service that is integrated with the platform to gain access to user data.",
            "Assumptions": [
                {
                    "Assumption": "Weak validation for third-party services",
                    "Role": "Platform administrator",
                    "Condition": "Lack of strict authentication mechanisms for integrated services"
                },
                {
                    "Assumption": "Users trust third-party services without question",
                    "Role": "Users",
                    "Condition": "Lack of user awareness regarding third-party integrations"
                },
                {
                    "Assumption": "Third-party services can request extensive permissions",
                    "Role": "Third-party service provider",
                    "Condition": "Platform grants extensive permissions to third-party services"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information and potential misuse of user data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "third-party service",
                "identity deception"
            ],
            "mitre_technique": {
                "name": "Spearphishing via Service",
                "description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services.(Citation: Lookout Dark Caracal Jan 2018) These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.\n\nA common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.",
                "id": "attack-pattern--f6ad61ee-65f3-4bd0-a3f5-2f0accb36317",
                "technique_id": "T1566.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious user modifies the contents of another user's profile.",
            "Assumptions": [
                {
                    "Assumption": "Lack of adequate access controls",
                    "Role": "Platform administrator",
                    "Condition": "Access control mechanisms are too permissive"
                },
                {
                    "Assumption": "Insufficient logging or monitoring",
                    "Role": "Platform administrator",
                    "Condition": "No real-time monitoring of profile changes"
                },
                {
                    "Assumption": "Users have the capability to alter profile information",
                    "Role": "Users",
                    "Condition": "Profile data can be modified via the application"
                }
            ],
            "Potential Impact": "Corruption of data and potential identity theft.",
            "MITRE ATT&CK Keywords": [
                "data tampering",
                "profile manipulation",
                "integrity violation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies data in transit between the user and backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted without encryption",
                    "Role": "Platform administrator",
                    "Condition": "Lack of encryption for data in transit"
                },
                {
                    "Assumption": "Man-in-the-middle position achievable",
                    "Role": "Attacker",
                    "Condition": "Able to intercept traffic between user and server"
                },
                {
                    "Assumption": "Lack of integrity checks for transmitted data",
                    "Role": "Platform administrator",
                    "Condition": "No verification of data integrity post-transmission"
                }
            ],
            "Potential Impact": "Data corruption and potential unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "data tampering",
                "man-in-the-middle",
                "interception"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attacker exploits a vulnerability to inject malicious content into posts or messages shared on the platform.",
            "Assumptions": [
                {
                    "Assumption": "Presence of exploitable vulnerability",
                    "Role": "Attacker",
                    "Condition": "Vulnerability in content handling mechanisms"
                },
                {
                    "Assumption": "No validation or sanitization for user inputs",
                    "Role": "Platform administrator",
                    "Condition": "Lack of input validation/sanitization"
                },
                {
                    "Assumption": "Users interact with submitted content",
                    "Role": "Users",
                    "Condition": "Trust in content from other users"
                }
            ],
            "Potential Impact": "Corruption of data, possible malicious code execution.",
            "MITRE ATT&CK Keywords": [
                "data injection",
                "malicious content",
                "XSS"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having performed certain actions on the platform due to lack of non-repudiation mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "Lack of comprehensive logging",
                    "Role": "Platform administrator",
                    "Condition": "Insufficient logging of user actions"
                },
                {
                    "Assumption": "Inadequate auditing mechanisms",
                    "Role": "Platform administrator",
                    "Condition": "Auditing mechanisms are not robust"
                },
                {
                    "Assumption": "Actions can't be uniquely tied to users",
                    "Role": "Platform administrator",
                    "Condition": "No unique identifiers for user actions"
                }
            ],
            "Potential Impact": "Disputes over user actions and potential for malicious activity denial.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "action denial",
                "log tampering"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker modifies system logs to hide malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "Attackers have access to system logs",
                    "Role": "Attacker",
                    "Condition": "Permissions allow access to logs"
                },
                {
                    "Assumption": "Logs are not secured or immutable",
                    "Role": "Platform administrator",
                    "Condition": "Logs are not protected against tampering"
                },
                {
                    "Assumption": "No regular log review procedures",
                    "Role": "Platform administrator",
                    "Condition": "Logs are not frequently reviewed for discrepancies"
                }
            ],
            "Potential Impact": "Hidden malicious actions can lead to undetected security breaches.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "activity hiding",
                "repudiation"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A third-party service denies involvement in unauthorized data access due to lack of transaction tracing.",
            "Assumptions": [
                {
                    "Assumption": "No reliable transaction logging",
                    "Role": "Platform administrator",
                    "Condition": "Transactions are not logged with sufficient detail"
                },
                {
                    "Assumption": "Weak authentication between services",
                    "Role": "Third-party service provider",
                    "Condition": "Services interact with weak authentication mechanisms"
                },
                {
                    "Assumption": "No robust API usage tracking",
                    "Role": "Platform administrator",
                    "Condition": "API calls and responses are not well tracked"
                }
            ],
            "Potential Impact": "Difficulty in tracing unauthorized data access and holding parties accountable.",
            "MITRE ATT&CK Keywords": [
                "third-party repudiation",
                "transaction denial",
                "service denial"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data accessed by unauthorized personnel due to improperly configured access controls.",
            "Assumptions": [
                {
                    "Assumption": "Access controls are misconfigured",
                    "Role": "Platform administrator",
                    "Condition": "Permissions are more lax than intended"
                },
                {
                    "Assumption": "Sensitive data is not encrypted at rest",
                    "Role": "Platform administrator",
                    "Condition": "Currently no encryption mechanisms for stored data"
                },
                {
                    "Assumption": "No monitoring of access attempts",
                    "Role": "Platform administrator",
                    "Condition": "Lack of alerting for unauthorized access attempts"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "access control",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) ",
                "id": "attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196",
                "technique_id": "T1222"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains access to residual data on discarded storage devices.",
            "Assumptions": [
                {
                    "Assumption": "Storage devices are not securely wiped",
                    "Role": "Platform administrator",
                    "Condition": "No data destruction policies for discarded hardware"
                },
                {
                    "Assumption": "Sensitive data is stored on these devices",
                    "Role": "Platform administrator",
                    "Condition": "Stored data includes sensitive user information"
                },
                {
                    "Assumption": "Attackers can access discarded devices",
                    "Role": "Attacker",
                    "Condition": "Discarded devices are accessible"
                }
            ],
            "Potential Impact": "Unauthorized access to historical sensitive user data.",
            "MITRE ATT&CK Keywords": [
                "data remnants",
                "information disclosure",
                "hardware disposal"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive information leaked via insecure third-party integrations.",
            "Assumptions": [
                {
                    "Assumption": "Integrations are not reviewed for security",
                    "Role": "Platform administrator",
                    "Condition": "Third-party services are not assessed for security compliance"
                },
                {
                    "Assumption": "Data shared without proper agreements or limitations",
                    "Role": "Platform administrator",
                    "Condition": "Lack of data sharing policies"
                },
                {
                    "Assumption": "Weak encryption between platform and third-party services",
                    "Role": "Platform administrator",
                    "Condition": "No end-to-end encryption for data exchange"
                }
            ],
            "Potential Impact": "Exposed sensitive information via third-party breaches.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "third-party risk",
                "data sharing"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "DDoS attack overwhelms platform servers, causing service disruption.",
            "Assumptions": [
                {
                    "Assumption": "High-volume traffic can overwhelm resources",
                    "Role": "Attacker",
                    "Condition": "Large botnets or tools are used to generate traffic"
                },
                {
                    "Assumption": "No network traffic filtering",
                    "Role": "Platform administrator",
                    "Condition": "No DDoS protection mechanisms in place"
                },
                {
                    "Assumption": "Platform\u2019s infrastructure can't handle high loads",
                    "Role": "Platform administrator",
                    "Condition": "Insufficient resource planning"
                }
            ],
            "Potential Impact": "Service outage and disruption of user access.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "network flood",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Resource exhaustion attack through repeated abuse of platform's content upload features.",
            "Assumptions": [
                {
                    "Assumption": "High resource usage from file uploads",
                    "Role": "User",
                    "Condition": "No limits on frequency or size of uploads"
                },
                {
                    "Assumption": "No controls on resource consumption",
                    "Role": "Platform administrator",
                    "Condition": "Lack of resource usage monitoring and limits"
                },
                {
                    "Assumption": "No automated mechanisms to detect abuse",
                    "Role": "Platform administrator",
                    "Condition": "Absence of heuristics to detect abnormal usage patterns"
                }
            ],
            "Potential Impact": "Decreased performance and potential service outages.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "content upload abuse",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Backend server crash due to exploitation of a software vulnerability.",
            "Assumptions": [
                {
                    "Assumption": "Presence of exploitable software vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "Known or zero-day vulnerabilities exist"
                },
                {
                    "Assumption": "Unpatched or outdated software",
                    "Role": "Platform administrator",
                    "Condition": "Failure to apply security updates"
                },
                {
                    "Assumption": "Access to backend servers",
                    "Role": "Attacker",
                    "Condition": "Network security does not block exploit vectors"
                }
            ],
            "Potential Impact": "Service disruption and data access interruption.",
            "MITRE ATT&CK Keywords": [
                "software exploitation",
                "server crash",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Exploitation for Privilege Escalation",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020) Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) or [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570).",
                "id": "attack-pattern--b21c3b2d-02e6-45b1-980b-e69051040839",
                "technique_id": "T1068"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "Presence of a known privilege escalation vulnerability",
                    "Role": "Attacker",
                    "Condition": "Vulnerability is exploitable"
                },
                {
                    "Assumption": "System is not fully patched",
                    "Role": "Platform administrator",
                    "Condition": "Lack of timely vulnerability management"
                },
                {
                    "Assumption": "Attacker can interact with the system to trigger the exploit",
                    "Role": "Attacker",
                    "Condition": "Initial access to exploit entry points"
                }
            ],
            "Potential Impact": "Complete control over the platform and unrestricted access to data.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "administrative access",
                "vulnerability exploit"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malicious insider abuses granted privileges to perform unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "Users have more privileges than necessary",
                    "Role": "Platform administrator",
                    "Condition": "Insufficient enforcement of least privilege principle"
                },
                {
                    "Assumption": "No regular reviews of user privileges",
                    "Role": "Platform administrator",
                    "Condition": "No periodic reviews of access levels"
                },
                {
                    "Assumption": "Lack of monitoring for privileged actions",
                    "Role": "Platform administrator",
                    "Condition": "No oversight on actions by privileged accounts"
                }
            ],
            "Potential Impact": "Unauthorized data access and potential for data manipulation.",
            "MITRE ATT&CK Keywords": [
                "privilege abuse",
                "insider threat",
                "unauthorized actions"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploit of API vulnerabilities to perform actions beyond the user's granted permissions.",
            "Assumptions": [
                {
                    "Assumption": "API contains exploitable logic flaws",
                    "Role": "Attacker",
                    "Condition": "Vulnerabilities in API design or implementation"
                },
                {
                    "Assumption": "Lack of strict API access controls",
                    "Role": "Platform administrator",
                    "Condition": "API endpoints are not adequately secured"
                },
                {
                    "Assumption": "Attackers can interact with the API",
                    "Role": "Attacker",
                    "Condition": "Publicly accessible APIs"
                }
            ],
            "Potential Impact": "Access to unauthorized operations or data.",
            "MITRE ATT&CK Keywords": [
                "API exploitation",
                "permission bypass",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "10",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake login page mimicking the social media platform to capture user credentials.",
            "Assumptions": [
                {
                    "Assumption": "The user is not vigilant about validating URLs before logging in.",
                    "Role": "User",
                    "Condition": "The user visits a phishing site."
                },
                {
                    "Assumption": "The fake login page closely resembles the original site.",
                    "Role": "Attacker",
                    "Condition": "The attacker has knowledge of web development."
                },
                {
                    "Assumption": "There is no mechanism in place to detect and take down phishing sites quickly.",
                    "Role": "Platform Security Team",
                    "Condition": "The platform lacks phishing detection and takedown mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of user credentials.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "spoofing",
                "credential harvesting",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker takes advantage of weak session management to hijack user sessions.",
            "Assumptions": [
                {
                    "Assumption": "Session tokens are not sufficiently protected with HTTPS.",
                    "Role": "Platform Developers",
                    "Condition": "The platform does not enforce HTTPS for all communications."
                },
                {
                    "Assumption": "Users are not logged out after a certain period of inactivity.",
                    "Role": "Platform Designers",
                    "Condition": "The platform does not implement session expiration policies."
                },
                {
                    "Assumption": "Session IDs are predictable or insufficiently random.",
                    "Role": "Developers",
                    "Condition": "The platform uses a weak algorithm to generate session IDs."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts.",
            "MITRE ATT&CK Keywords": [
                "session hijacking",
                "man-in-the-middle",
                "credential access"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates a legitimate user by guessing or stealing their credentials through brute force or social engineering.",
            "Assumptions": [
                {
                    "Assumption": "The platform does not enforce strong password policies.",
                    "Role": "Platform Developers",
                    "Condition": "The platform allows weak passwords."
                },
                {
                    "Assumption": "Multi-factor authentication is not enforced.",
                    "Role": "Security Engineers",
                    "Condition": "The platform does not require MFA for sensitive operations."
                },
                {
                    "Assumption": "Users reuse passwords across multiple sites.",
                    "Role": "Users",
                    "Condition": "Users have poor password management practices."
                }
            ],
            "Potential Impact": "Unauthorized access to user profiles and sensitive data.",
            "MITRE ATT&CK Keywords": [
                "brute force",
                "password reuse",
                "social engineering",
                "credential access"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies data being transmitted between the user and the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted over unencrypted channels.",
                    "Role": "Platform Developers",
                    "Condition": "The platform does not enforce SSL/TLS encryption."
                },
                {
                    "Assumption": "The attacker has access to the network.",
                    "Role": "Attacker",
                    "Condition": "The attacker can perform a man-in-the-middle attack."
                },
                {
                    "Assumption": "There are no data integrity checks in place.",
                    "Role": "Platform Designers",
                    "Condition": "The platform lacks mechanisms to verify data integrity."
                }
            ],
            "Potential Impact": "Corruption or tampering of user data.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "network sniffing",
                "data manipulation"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains unauthorized write access to the backend database and modifies user profile information.",
            "Assumptions": [
                {
                    "Assumption": "The database has vulnerabilities that can be exploited for write access.",
                    "Role": "Attacker",
                    "Condition": "The platform has unpatched vulnerabilities."
                },
                {
                    "Assumption": "There are no proper access controls or logging mechanisms for database operations.",
                    "Role": "Database Administrators",
                    "Condition": "The platform lacks access control and auditing."
                },
                {
                    "Assumption": "The attacker is able to escalate privileges to access the database.",
                    "Role": "Attacker",
                    "Condition": "The platform has weak privilege escalation protections."
                }
            ],
            "Potential Impact": "Unauthorized modification of user data.",
            "MITRE ATT&CK Keywords": [
                "SQL injection",
                "command injection",
                "privilege escalation",
                "database"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a vulnerability in third-party integrations to alter data being sent to the social media platform.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications have access to sensitive data.",
                    "Role": "Platform Developers",
                    "Condition": "The platform allows extensive permissions for third-party integrations."
                },
                {
                    "Assumption": "There is no proper validation of data received from third-party applications.",
                    "Role": "Platform Designers",
                    "Condition": "The platform fails to validate incoming data."
                },
                {
                    "Assumption": "Third-party applications are not regularly vetted for security vulnerabilities.",
                    "Role": "Platform Security Team",
                    "Condition": "The platform lacks a vetting process for third-party applications."
                }
            ],
            "Potential Impact": "Corruption or tampering of data from third-party sources.",
            "MITRE ATT&CK Keywords": [
                "supply chain compromise",
                "third-party risk",
                "data manipulation"
            ],
            "mitre_technique": {
                "name": "Supply Chain Compromise",
                "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory)(Citation: IBM Storwize)(Citation: Schneider Electric USB Malware) \n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.(Citation: Avast CCleaner3 2018)(Citation: Microsoft Dofoil 2018)(Citation: Command Five SK 2011) Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Symantec Elderwood Sept 2012)(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)",
                "id": "attack-pattern--3f18edba-28f4-4bb9-82c3-8aa60dcac5f7",
                "technique_id": "T1195"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker performs malicious actions using another user\u2019s account and then denies the actions.",
            "Assumptions": [
                {
                    "Assumption": "There is inadequate logging of user actions.",
                    "Role": "Platform Developers",
                    "Condition": "The platform lacks comprehensive logging for user activities."
                },
                {
                    "Assumption": "Logs are not tamper-proof.",
                    "Role": "Database Administrators",
                    "Condition": "The platform does not use tamper-evident logging mechanisms."
                },
                {
                    "Assumption": "Users can perform sensitive actions without proper authentication.",
                    "Role": "Platform Developers",
                    "Condition": "The platform does not enforce strong authentication for critical actions."
                }
            ],
            "Potential Impact": "Difficulty in attributing actions to specific users, enabling attackers to deny responsibility.",
            "MITRE ATT&CK Keywords": [
                "action denial",
                "log manipulation",
                "identity spoofing"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having posted certain content or messages, claiming their account was compromised.",
            "Assumptions": [
                {
                    "Assumption": "There is no cryptographic signing of posts or messages.",
                    "Role": "Platform Developers",
                    "Condition": "The platform does not implement digital signatures."
                },
                {
                    "Assumption": "Account activity logs are not sufficiently detailed.",
                    "Role": "Database Administrators",
                    "Condition": "The platform does not maintain comprehensive activity logs."
                },
                {
                    "Assumption": "The platform does not offer two-factor authentication to protect accounts.",
                    "Role": "Security Engineers",
                    "Condition": "MFA is not enforced on the platform."
                }
            ],
            "Potential Impact": "Disputes over the authenticity of user actions and content.",
            "MITRE ATT&CK Keywords": [
                "digital forgery",
                "log tampering",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker exploits logging mechanisms to delete or alter activity logs, obscuring their actions.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms are not securely implemented.",
                    "Role": "Platform Developers",
                    "Condition": "The platform stores logs in locations accessible to attackers."
                },
                {
                    "Assumption": "There are no alerting systems for log alterations.",
                    "Role": "Platform Security Team",
                    "Condition": "The platform does not monitor changes to logs."
                },
                {
                    "Assumption": "Logs are not regularly backed up.",
                    "Role": "Database Administrators",
                    "Condition": "The platform does not have regular backup procedures."
                }
            ],
            "Potential Impact": "Loss of accountability and difficulty in forensic investigations.",
            "MITRE ATT&CK Keywords": [
                "log deletion",
                "log manipulation",
                "anti-forensics"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted communications between the user and the server, capturing sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted over unencrypted channels.",
                    "Role": "Platform Developers",
                    "Condition": "The platform does not enforce SSL/TLS encryption."
                },
                {
                    "Assumption": "The attacker has access to the network.",
                    "Role": "Attacker",
                    "Condition": "The attacker can perform a man-in-the-middle attack."
                },
                {
                    "Assumption": "Users transmit sensitive information over unsecured Wi-Fi.",
                    "Role": "Users",
                    "Condition": "The user accesses the platform over a public Wi-Fi network."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user information.",
            "MITRE ATT&CK Keywords": [
                "network sniffing",
                "unencrypted data",
                "man-in-the-middle"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker accesses user profile data by exploiting vulnerabilities in the backend databases.",
            "Assumptions": [
                {
                    "Assumption": "The backend database has known vulnerabilities.",
                    "Role": "Platform Developers",
                    "Condition": "The platform has unpatched vulnerabilities."
                },
                {
                    "Assumption": "Proper access controls are not in place for database access.",
                    "Role": "Database Administrators",
                    "Condition": "The platform lacks stringent access control measures."
                },
                {
                    "Assumption": "Database monitoring and alerting mechanisms are missing.",
                    "Role": "Platform Security Team",
                    "Condition": "The platform does not monitor database access activities."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of user profile data.",
            "MITRE ATT&CK Keywords": [
                "SQL injection",
                "database access",
                "information extraction"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data is disclosed due to insecure third-party integrations that have access to user information.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications have extensive permissions.",
                    "Role": "Platform Developers",
                    "Condition": "The platform permits broad access for third-party apps."
                },
                {
                    "Assumption": "Third-party applications are not regularly vetted for security.",
                    "Role": "Platform Security Team",
                    "Condition": "The platform lacks a security vetting process for integrations."
                },
                {
                    "Assumption": "Data sharing policies with third parties are not stringent.",
                    "Role": "Platform Designers",
                    "Condition": "The platform has lax data sharing agreements."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user data through third-party applications.",
            "MITRE ATT&CK Keywords": [
                "third-party risk",
                "data leakage",
                "supply chain compromise"
            ],
            "mitre_technique": {
                "name": "Supply Chain Compromise",
                "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory)(Citation: IBM Storwize)(Citation: Schneider Electric USB Malware) \n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.(Citation: Avast CCleaner3 2018)(Citation: Microsoft Dofoil 2018)(Citation: Command Five SK 2011) Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Symantec Elderwood Sept 2012)(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)",
                "id": "attack-pattern--3f18edba-28f4-4bb9-82c3-8aa60dcac5f7",
                "technique_id": "T1195"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overwhelms the backend servers with excessive requests, rendering the service unavailable to legitimate users.",
            "Assumptions": [
                {
                    "Assumption": "The platform lacks rate limiting for incoming requests.",
                    "Role": "Platform Developers",
                    "Condition": "The platform does not implement request throttling."
                },
                {
                    "Assumption": "The application is not designed to handle high volumes of traffic.",
                    "Role": "Platform Designers",
                    "Condition": "The platform is not built for scalability."
                },
                {
                    "Assumption": "There are no DDoS mitigation services in place.",
                    "Role": "Platform Security Team",
                    "Condition": "The platform does not use DDoS protection services."
                }
            ],
            "Potential Impact": "Disruption of service, making the platform unavailable to users.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "excessive requests",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits vulnerabilities in the third-party integrations to execute commands that overload system resources.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications have access to critical system resources.",
                    "Role": "Platform Developers",
                    "Condition": "The platform grants extensive permissions to third-party apps."
                },
                {
                    "Assumption": "There are known vulnerabilities in the third-party applications.",
                    "Role": "Platform Security Team",
                    "Condition": "The platform does not regularly update or vet third-party applications."
                },
                {
                    "Assumption": "There is no isolation between the main application and third-party integrations.",
                    "Role": "Platform Designers",
                    "Condition": "The platform lacks sandboxing for third-party applications."
                }
            ],
            "Potential Impact": "Disruption of service due to resource exhaustion.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "third-party risk",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker introduces malware through a compromised third-party integration, which executes a denial-of-service attack.",
            "Assumptions": [
                {
                    "Assumption": "Malware is able to infect third-party applications.",
                    "Role": "Attacker",
                    "Condition": "The attacker can inject malicious code into third-party applications."
                },
                {
                    "Assumption": "There are insufficient malware detection and prevention mechanisms.",
                    "Role": "Platform Security Team",
                    "Condition": "The platform lacks robust malware detection and prevention."
                },
                {
                    "Assumption": "The third-party integration is critical to platform operations.",
                    "Role": "Platform Designers",
                    "Condition": "The platform relies heavily on the compromised third-party integration."
                }
            ],
            "Potential Impact": "Service disruption caused by malware-induced denial-of-service attack.",
            "MITRE ATT&CK Keywords": [
                "malware introduction",
                "third-party risk",
                "denial-of-service"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the web application to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "The web application has known vulnerabilities.",
                    "Role": "Platform Developers",
                    "Condition": "The platform is not fully updated and has unpatched vulnerabilities."
                },
                {
                    "Assumption": "The attacker can escalate privileges from a normal user to an administrator.",
                    "Role": "Attacker",
                    "Condition": "The platform has weak privilege escalation protections."
                },
                {
                    "Assumption": "There is no proper segmentation of user roles and permissions.",
                    "Role": "Platform Designers",
                    "Condition": "The platform does not enforce strict role-based access control."
                }
            ],
            "Potential Impact": "Unauthorized administrative access, enabling full control over the platform.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "admin access",
                "exploitation"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a vulnerability in the third-party application to escalate privileges within the social media platform.",
            "Assumptions": [
                {
                    "Assumption": "The third-party application has vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "The platform integrates with vulnerable third-party applications."
                },
                {
                    "Assumption": "Third-party applications have access to higher privileges than they should.",
                    "Role": "Platform Developers",
                    "Condition": "The platform grants excessive permissions to third-party integrations."
                },
                {
                    "Assumption": "There are no proper access control mechanisms for third-party applications.",
                    "Role": "Platform Designers",
                    "Condition": "The platform lacks access control for third-party app permissions."
                }
            ],
            "Potential Impact": "Unauthorized privileged access via compromised third-party application.",
            "MITRE ATT&CK Keywords": [
                "third-party risk",
                "privilege escalation",
                "exploitation"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering techniques to trick an admin into granting them higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "Administrative staff are targets of social engineering attacks.",
                    "Role": "Attacker",
                    "Condition": "The attacker can successfully deceive administrative staff."
                },
                {
                    "Assumption": "There are no multi-factor authentication (MFA) mechanisms in place for privilege escalation processes.",
                    "Role": "Platform Developers",
                    "Condition": "The platform does not use MFA for critical administrative actions."
                },
                {
                    "Assumption": "Security awareness training is not regularly conducted for administrative staff.",
                    "Role": "Platform Security Team",
                    "Condition": "The platform lacks regular security training programs."
                }
            ],
            "Potential Impact": "Unauthorized privileged access achieved through social engineering.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "phishing",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "11",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake social media profile impersonating a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "The platform does not have strong verification processes",
                    "Role": "Platform Developer",
                    "Condition": "Verification not enforced"
                },
                {
                    "Assumption": "The attacker has access to some publicly available information about the legitimate person",
                    "Role": "Attacker",
                    "Condition": "Public info accessible"
                },
                {
                    "Assumption": "The platform allows for easy creation of new profiles without significant checks",
                    "Role": "Platform Policy Maker",
                    "Condition": "Minimal checks"
                }
            ],
            "Potential Impact": "Confidentiality: Unauthorized access to private communications. Integrity: Victim's reputation tarnished. Availability: Impact on legitimate user's access.",
            "MITRE ATT&CK Keywords": [
                "identity theft",
                "impersonation",
                "social engineering",
                "phishing"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
                "technique_id": "T1586.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs the identity of a third-party application to gain authorized access.",
            "Assumptions": [
                {
                    "Assumption": "The platform has weak authentication for third-party integrations",
                    "Role": "Platform Developer",
                    "Condition": "Weak authentication measures"
                },
                {
                    "Assumption": "The attacker has some knowledge of the third-party application's integration details",
                    "Role": "Attacker",
                    "Condition": "Integration details accessible"
                },
                {
                    "Assumption": "The platform trusts all data from the third-party app without rigorous validation",
                    "Role": "Platform Policy Maker",
                    "Condition": "Lack of validation"
                }
            ],
            "Potential Impact": "Confidentiality: Sensitive data exposed to attacker. Integrity: Data could be manipulated. Availability: Systems could be disrupted by fake commands.",
            "MITRE ATT&CK Keywords": [
                "API abuse",
                "middleware exploitation",
                "token abuse",
                "trusted relationship"
            ],
            "mitre_technique": {
                "name": "Trusted Relationship",
                "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\n\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, [Valid Accounts](https://attack.mitre.org/techniques/T1078) used by the other party for access to internal network systems may be compromised and used.(Citation: CISA IT Service Providers)\n\nIn Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.(Citation: Office 365 Delegated Administration)",
                "id": "attack-pattern--9fa07bef-9c81-421e-a8e5-ad4366c5a925",
                "technique_id": "T1199"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker spoofs the email address used for account recovery to gain access to user profiles.",
            "Assumptions": [
                {
                    "Assumption": "The platform's account recovery process relies on email",
                    "Role": "Platform Developer",
                    "Condition": "Email-based recovery"
                },
                {
                    "Assumption": "The attacker can modify or access the recovery email",
                    "Role": "Attacker",
                    "Condition": "Email access or spoofing capability"
                },
                {
                    "Assumption": "The user does not have multi-factor authentication enabled",
                    "Role": "User",
                    "Condition": "No MFA"
                }
            ],
            "Potential Impact": "Confidentiality: Unauthorized access to user data. Integrity: Data can be manipulated by attacker. Availability: User accounts could be locked.",
            "MITRE ATT&CK Keywords": [
                "email account takeover",
                "identity impersonation",
                "credential access",
                "phishing"
            ],
            "mitre_technique": {
                "name": "Application Access Token",
                "description": "Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.\n",
                "id": "attack-pattern--27960489-4e7f-461d-a62a-f5c0cb521e4a",
                "technique_id": "T1527"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains unauthorized access to backend servers and alters user data.",
            "Assumptions": [
                {
                    "Assumption": "The backend servers have unpatched vulnerabilities",
                    "Role": "System Administrator",
                    "Condition": "Server vulnerabilities"
                },
                {
                    "Assumption": "The attacker has knowledge of these vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "Vulnerability knowledge"
                },
                {
                    "Assumption": "The platform lacks intrusion detection mechanisms",
                    "Role": "Platform Developer",
                    "Condition": "No intrusion detection"
                }
            ],
            "Potential Impact": "Confidentiality: User data exposure. Integrity: Data corruption. Availability: System functionality degraded.",
            "MITRE ATT&CK Keywords": [
                "server exploitation",
                "data manipulation",
                "injection attacks",
                "malicious payloads"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies user content during transmission.",
            "Assumptions": [
                {
                    "Assumption": "The platform uses unencrypted communication channels",
                    "Role": "Platform Developer",
                    "Condition": "Unencrypted channels"
                },
                {
                    "Assumption": "The attacker has access to the network traffic",
                    "Role": "Attacker",
                    "Condition": "Network access"
                },
                {
                    "Assumption": "The user does not use secure protocols (e.g., VPN)",
                    "Role": "User",
                    "Condition": "No secure protocol"
                }
            ],
            "Potential Impact": "Confidentiality: Intercepted communications. Integrity: Altered user content. Availability: Not directly affected.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "communication interception",
                "network manipulation",
                "data tampering"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits third-party integrations to alter user data.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications have weak security controls",
                    "Role": "Third-Party Developer",
                    "Condition": "Weak security controls"
                },
                {
                    "Assumption": "The attacker targets these third-party services",
                    "Role": "Attacker",
                    "Condition": "Third-party vulnerabilities targeted"
                },
                {
                    "Assumption": "The platform relies heavily on third-party data without strong validation",
                    "Role": "Platform Developer",
                    "Condition": "Weak validation of third-party data"
                }
            ],
            "Potential Impact": "Confidentiality: Exposure of linked data. Integrity: Altered profile and application data. Availability: Service disruption possible.",
            "MITRE ATT&CK Keywords": [
                "third-party exploitation",
                "data corruption",
                "API tampering",
                "integration exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user sends malicious messages but denies responsibility.",
            "Assumptions": [
                {
                    "Assumption": "The platform lacks robust logging and tracking mechanisms",
                    "Role": "Platform Developer",
                    "Condition": "Weak logging"
                },
                {
                    "Assumption": "The attacker can spoof session tokens or credentials",
                    "Role": "Attacker",
                    "Condition": "Credential spoofing capability"
                },
                {
                    "Assumption": "The system does not safeguard logs against tampering",
                    "Role": "System Administrator",
                    "Condition": "Log tampering possible"
                }
            ],
            "Potential Impact": "Confidentiality: Not directly affected. Integrity: Logs cannot be trusted. Availability: Potential service disruption if misuse is untraceable.",
            "MITRE ATT&CK Keywords": [
                "log evasion",
                "session spoofing",
                "denial of action",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker executes actions using a compromised account but denies it later.",
            "Assumptions": [
                {
                    "Assumption": "The account does not have sufficient logging for action tracking",
                    "Role": "System Administrator",
                    "Condition": "Insufficient logging"
                },
                {
                    "Assumption": "The platform does not have effective anomaly detection",
                    "Role": "Platform Developer",
                    "Condition": "Lack of anomaly detection"
                },
                {
                    "Assumption": "The attacker has access to the compromised account",
                    "Role": "Attacker",
                    "Condition": "Account compromised"
                }
            ],
            "Potential Impact": "Confidentiality: Compromised data. Integrity: Actions executed without accurate traceability. Availability: Potential disruptions or locks on user accounts.",
            "MITRE ATT&CK Keywords": [
                "account impersonation",
                "action denial",
                "log manipulation",
                "anomaly evasion"
            ],
            "mitre_technique": {
                "name": "Temporary Elevated Cloud Access",
                "description": "Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own. \n\nJust-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted.(Citation: Azure Just in Time Access 2023)\n\nAccount impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with the `iam.serviceAccountTokenCreator` role can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts.(Citation: Google Cloud Service Account Authentication Roles)(Citation: Hunters Domain Wide Delegation Google Workspace 2023)(Citation: Google Cloud Just in Time Access 2023)(Citation: Palo Alto Unit 42 Google Workspace Domain Wide Delegation 2023) In Exchange Online, the `ApplicationImpersonation` role allows a service account to use the permissions associated with specified user accounts.(Citation: Microsoft Impersonation and EWS in Exchange) \n\nMany cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with the `PassRole` permission can allow a service they create to assume a given role, while in GCP, users with the `iam.serviceAccountUser` role can attach a service account to a resource.(Citation: AWS PassRole)(Citation: Google Cloud Service Account Authentication Roles)\n\nWhile users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended.(Citation: Rhino Google Cloud Privilege Escalation)(Citation: Rhino Security Labs AWS Privilege Escalation)\n\n**Note:** this technique is distinct from [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003), which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they control [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) that would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.(Citation: CrowdStrike StellarParticle January 2022)",
                "id": "attack-pattern--6fa224c7-5091-4595-bf15-3fc9fe2f2c7c",
                "technique_id": "T1548.005"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "User activity logs are alterable, allowing attackers to cover their tracks.",
            "Assumptions": [
                {
                    "Assumption": "User activity logs are stored insecurely",
                    "Role": "System Administrator",
                    "Condition": "Insecure log storage"
                },
                {
                    "Assumption": "The attacker has access to change log data",
                    "Role": "Attacker",
                    "Condition": "Log access"
                },
                {
                    "Assumption": "No integrity checks are applied to the logs",
                    "Role": "Platform Developer",
                    "Condition": "No integrity checks"
                }
            ],
            "Potential Impact": "Confidentiality: Not directly affected. Integrity: Logs cannot be trusted. Availability: Investigations compromised.",
            "MITRE ATT&CK Keywords": [
                "log editing",
                "evasion tactics",
                "audit trail tampering",
                "integrity disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability to gain access to sensitive user data.",
            "Assumptions": [
                {
                    "Assumption": "The platform has unpatched vulnerabilities",
                    "Role": "System Administrator",
                    "Condition": "Platform vulnerabilities"
                },
                {
                    "Assumption": "The attacker is aware of these vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "Vulnerability awareness"
                },
                {
                    "Assumption": "The system does not have adequate monitoring in place",
                    "Role": "Platform Developer",
                    "Condition": "Weak monitoring"
                }
            ],
            "Potential Impact": "Confidentiality: Sensitive user data exposed. Integrity: Data potentially alterable by attacker. Availability: Not directly affected.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "sensitive data exposure",
                "attack vectors",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts data between clients and servers.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not encrypted",
                    "Role": "Platform Developer",
                    "Condition": "No encryption"
                },
                {
                    "Assumption": "The attacker can access the network traffic",
                    "Role": "Attacker",
                    "Condition": "Network access"
                },
                {
                    "Assumption": "Users are not using secure protocols",
                    "Role": "User",
                    "Condition": "No secure protocols"
                }
            ],
            "Potential Impact": "Confidentiality: Intercepted communications. Integrity: Data can potentially be altered. Availability: Not directly affected.",
            "MITRE ATT&CK Keywords": [
                "interception",
                "communication monitoring",
                "network eavesdropping",
                "man-in-the-middle"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data can be accessed via poorly secured third-party integrations.",
            "Assumptions": [
                {
                    "Assumption": "Third-party integrations do not have robust security",
                    "Role": "Third-Party Developer",
                    "Condition": "Weak security measures"
                },
                {
                    "Assumption": "The platform does not rigorously validate third-party data access",
                    "Role": "Platform Developer",
                    "Condition": "Lack of validation"
                },
                {
                    "Assumption": "The attacker targets these third-party services",
                    "Role": "Attacker",
                    "Condition": "Targeting third parties"
                }
            ],
            "Potential Impact": "Confidentiality: Sensitive data leaked. Integrity: Data could be manipulated via third-party. Availability: Services might be disrupted by bad third-party data.",
            "MITRE ATT&CK Keywords": [
                "data leakage",
                "API vulnerabilities",
                "third-party access",
                "integration weaknesses"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the backend servers with traffic to disrupt service.",
            "Assumptions": [
                {
                    "Assumption": "The backend servers lack rate limiting mechanisms",
                    "Role": "Platform Developer",
                    "Condition": "No rate limiting"
                },
                {
                    "Assumption": "The attacker has sufficient resources to launch a DDoS attack",
                    "Role": "Attacker",
                    "Condition": "Resource capability"
                },
                {
                    "Assumption": "The platform does not have effective DDoS mitigation",
                    "Role": "System Administrator",
                    "Condition": "No DDoS mitigation"
                }
            ],
            "Potential Impact": "Confidentiality: Not directly affected. Integrity: Not directly affected. Availability: Services unavailable due to overload.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "service disruption",
                "traffic saturation",
                "resource exhaustion"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability causing the system to crash.",
            "Assumptions": [
                {
                    "Assumption": "The platform has unpatched vulnerabilities that can be exploited",
                    "Role": "System Administrator",
                    "Condition": "Existing vulnerabilities"
                },
                {
                    "Assumption": "The attacker is aware of and can exploit these vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "Vulnerability knowledge"
                },
                {
                    "Assumption": "The system does not have robust exception handling",
                    "Role": "Platform Developer",
                    "Condition": "Weak exception handling"
                }
            ],
            "Potential Impact": "Confidentiality: Not directly affected. Integrity: Not directly affected. Availability: Services crash, making them unavailable.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "service crash",
                "exception handling failure",
                "resource exhaustion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker leverages third-party integrations to flood the platform with requests.",
            "Assumptions": [
                {
                    "Assumption": "Third-party integrations do not have rate limiting",
                    "Role": "Third-Party Developer",
                    "Condition": "No rate limiting"
                },
                {
                    "Assumption": "The platform does not validate the amount of data received from third parties",
                    "Role": "Platform Developer",
                    "Condition": "Lack of validation"
                },
                {
                    "Assumption": "The attacker can exploit these integrations to generate excessive requests",
                    "Role": "Attacker",
                    "Condition": "Resource capability"
                }
            ],
            "Potential Impact": "Confidentiality: Not directly affected. Integrity: Not directly affected. Availability: Services unavailable or slow due to overload.",
            "MITRE ATT&CK Keywords": [
                "third-party exploitation",
                "request flooding",
                "rate limiting bypass",
                "integration abuse"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker finds and exploits a privilege escalation vulnerability in the server software.",
            "Assumptions": [
                {
                    "Assumption": "The server software has known or unknown privilege escalation vulnerabilities",
                    "Role": "System Administrator",
                    "Condition": "Existing vulnerabilities"
                },
                {
                    "Assumption": "The attacker has access to exploit these vulnerabilities",
                    "Role": "Attacker",
                    "Condition": "Vulnerability knowledge and access"
                },
                {
                    "Assumption": "The platform does not have proper privilege separation",
                    "Role": "Platform Developer",
                    "Condition": "Weak privilege separation"
                }
            ],
            "Potential Impact": "Confidentiality: Attacker gains unauthorized access to restricted data. Integrity: Data can be altered or corrupted. Availability: Critical services can be disrupted.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "server exploitation",
                "unauthorized access",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a compromised administrative account to gain higher privileges.",
            "Assumptions": [
                {
                    "Assumption": "The administrative account is compromised",
                    "Role": "User/System Administrator",
                    "Condition": "Account compromised"
                },
                {
                    "Assumption": "The system does not enforce strict access controls or monitoring",
                    "Role": "Platform Developer",
                    "Condition": "Weak access controls"
                },
                {
                    "Assumption": "The attacker can navigate the system to escalate privileges further",
                    "Role": "Attacker",
                    "Condition": "Access and navigation capability"
                }
            ],
            "Potential Impact": "Confidentiality: Access to sensitive user and system data. Integrity: Ability to alter data and configurations. Availability: Potential administrative disruptions.",
            "MITRE ATT&CK Keywords": [
                "admin account takeover",
                "access control bypass",
                "account privilege escalation",
                "unauthorized control"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages misconfigured third-party integrations to escalate their privileges within the platform.",
            "Assumptions": [
                {
                    "Assumption": "Third-party integrations are misconfigured",
                    "Role": "Third-Party Developer",
                    "Condition": "Misconfiguration present"
                },
                {
                    "Assumption": "The attacker identifies and exploits these misconfigurations",
                    "Role": "Attacker",
                    "Condition": "Identification and exploitation capability"
                },
                {
                    "Assumption": "The platform does not check for proper privilege levels on third-party data",
                    "Role": "Platform Developer",
                    "Condition": "Lack of privilege validation"
                }
            ],
            "Potential Impact": "Confidentiality: Ability to access sensitive data via escalated privileges. Integrity: Unauthorized changes to data and configurations. Availability: Potential service disruptions.",
            "MITRE ATT&CK Keywords": [
                "third-party misconfiguration",
                "access validation bypass",
                "integration exploitation",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "12",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake login page that mimics the social media network to capture user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users may not verify the URL before entering credentials.",
                    "Role": "User",
                    "Condition": "Social engineering or phishing attack."
                },
                {
                    "Assumption": "Attackers have resources to create convincing fake pages.",
                    "Role": "Attacker",
                    "Condition": "Access to development tools and hosting services."
                },
                {
                    "Assumption": "The social media platform does not implement advanced anti-phishing mechanisms.",
                    "Role": "Application",
                    "Condition": "Weak phishing detection systems in place."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential theft",
                "fake website",
                "user impersonation"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attackers use compromised third-party integrations to impersonate trusted services and gather user data.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications are compromised or malicious.",
                    "Role": "Attacker",
                    "Condition": "Weak security practices by third-party services."
                },
                {
                    "Assumption": "Users trust third-party applications linked to their accounts.",
                    "Role": "User",
                    "Condition": "Lack of awareness or caution regarding app permissions."
                },
                {
                    "Assumption": "The social media platform has limited control over third-party app security.",
                    "Role": "Application",
                    "Condition": "Open API or loose integration controls."
                }
            ],
            "Potential Impact": "Exposure of sensitive user data to unauthorized parties.",
            "MITRE ATT&CK Keywords": [
                "third-party compromise",
                "API misuse",
                "data exfiltration",
                "trusted relationship"
            ],
            "mitre_technique": {
                "name": "Trusted Relationship",
                "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\n\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, [Valid Accounts](https://attack.mitre.org/techniques/T1078) used by the other party for access to internal network systems may be compromised and used.(Citation: CISA IT Service Providers)\n\nIn Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.(Citation: Office 365 Delegated Administration)",
                "id": "attack-pattern--9fa07bef-9c81-421e-a8e5-ad4366c5a925",
                "technique_id": "T1199"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains access to session tokens through session fixation or reuse attacks.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can intercept or predict session tokens.",
                    "Role": "Attacker",
                    "Condition": "Weak session management or token generation mechanisms."
                },
                {
                    "Assumption": "Users do not log out properly or have persistent sessions.",
                    "Role": "User",
                    "Condition": "User behavior or application UI design."
                },
                {
                    "Assumption": "The application does not frequently refresh or invalidate session tokens.",
                    "Role": "Application",
                    "Condition": "Weak session lifecycle management."
                }
            ],
            "Potential Impact": "Hijacking user sessions and accessing account data.",
            "MITRE ATT&CK Keywords": [
                "session hijacking",
                "session fixation",
                "token reuse",
                "account takeover"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious actors modify content or data in user profiles through API vulnerabilities.",
            "Assumptions": [
                {
                    "Assumption": "APIs contain vulnerabilities that allow unauthorized data modification.",
                    "Role": "Application",
                    "Condition": "Lack of input validation or improper access controls."
                },
                {
                    "Assumption": "Attackers can identify and exploit these API vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Access to API documentation or analysis tools."
                },
                {
                    "Assumption": "The application does not employ robust monitoring to detect unauthorized changes.",
                    "Role": "Application",
                    "Condition": "Insufficient logging and monitoring systems."
                }
            ],
            "Potential Impact": "Integrity of user data compromised, leading to misinformation or fraud.",
            "MITRE ATT&CK Keywords": [
                "API exploitation",
                "data manipulation",
                "content tampering",
                "access control bypass"
            ],
            "mitre_technique": {
                "name": "Transmitted Data Manipulation",
                "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--cc1e737c-236c-4e3b-83ba-32039a626ef8",
                "technique_id": "T1493"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters backend server configurations to redirect traffic to malicious sites.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can gain administrative access to backend servers.",
                    "Role": "Attacker",
                    "Condition": "Weak admin credentials or poor security practices."
                },
                {
                    "Assumption": "Servers do not have strict configuration change policies.",
                    "Role": "Application",
                    "Condition": "Lack of change management procedures or oversight."
                },
                {
                    "Assumption": "The application does not validate server configurations frequently.",
                    "Role": "Application",
                    "Condition": "Insufficient configuration management and verification mechanisms."
                }
            ],
            "Potential Impact": "Users redirected to malicious websites, risking data theft or malware infection.",
            "MITRE ATT&CK Keywords": [
                "configuration tampering",
                "backend exploitation",
                "traffic redirection",
                "malicious website"
            ],
            "mitre_technique": {
                "name": "Traffic Duplication",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
                "technique_id": "T1020.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Users with insufficient input validation could upload malicious content that executes on other users' devices.",
            "Assumptions": [
                {
                    "Assumption": "The application does not enforce strict file type/script restrictions.",
                    "Role": "Application",
                    "Condition": "Weak file validation policies or checks."
                },
                {
                    "Assumption": "Attackers can upload files without thorough scanning.",
                    "Role": "Attacker",
                    "Condition": "No robust malware scanning or sandboxing mechanism."
                },
                {
                    "Assumption": "Other users download or interact with the uploaded malicious content.",
                    "Role": "User",
                    "Condition": "Trust in platform and other users' content."
                }
            ],
            "Potential Impact": "Integrity and confidentiality breaches through malware execution.",
            "MITRE ATT&CK Keywords": [
                "malware upload",
                "file tampering",
                "input validation failure",
                "script execution"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny sending messages or performing actions due to lack of comprehensive logging and auditing.",
            "Assumptions": [
                {
                    "Assumption": "The application does not log all user actions comprehensively.",
                    "Role": "Application",
                    "Condition": "Insufficient logging mechanisms or policies."
                },
                {
                    "Assumption": "Logs are not immutable or easily altered.",
                    "Role": "Application",
                    "Condition": "Weak log integrity measures."
                },
                {
                    "Assumption": "Users disavow actions to avoid accountability.",
                    "Role": "User",
                    "Condition": "Potential for malicious activities or disputes."
                }
            ],
            "Potential Impact": "Denial of services or actions, leading to potential fraud or dispute resolution issues.",
            "MITRE ATT&CK Keywords": [
                "action disavowal",
                "insufficient logging",
                "audit trail manipulation",
                "user repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Administrators or users deny unauthorized configuration changes due to gaps in the audit trail.",
            "Assumptions": [
                {
                    "Assumption": "The application lacks comprehensive logging for configuration changes.",
                    "Role": "Application",
                    "Condition": "Insufficient audit mechanisms or log retention policies."
                },
                {
                    "Assumption": "Logs can be altered or deleted by administrators or attackers.",
                    "Role": "Attacker",
                    "Condition": "Lack of log integrity and protection measures."
                },
                {
                    "Assumption": "Stakeholders deny actions to avoid blame for security incidents.",
                    "Role": "User/Admin",
                    "Condition": "Conflicting interests or accountability concerns."
                }
            ],
            "Potential Impact": "Dispute and difficulty in incident resolution.",
            "MITRE ATT&CK Keywords": [
                "config change denial",
                "audit gap",
                "log manipulation",
                "repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users contest the authenticity of transactions or data manipulations without non-repudiation controls.",
            "Assumptions": [
                {
                    "Assumption": "The platform does not implement strong non-repudiation controls.",
                    "Role": "Application",
                    "Condition": "Weak cryptographic measures or logging systems."
                },
                {
                    "Assumption": "Users exploit the lack of non-repudiation to contest actions.",
                    "Role": "User",
                    "Condition": "Potential financial or reputational benefits."
                },
                {
                    "Assumption": "There is no multi-factor authentication or digital signatures for critical actions.",
                    "Role": "Application",
                    "Condition": "Lack of advanced security measures."
                }
            ],
            "Potential Impact": "Fraudulent transactions or disputes over data integrity.",
            "MITRE ATT&CK Keywords": [
                "transaction disavowal",
                "non-repudiation failure",
                "data dispute",
                "audit trail"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is exposed due to insufficient access controls on backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Access controls on backend servers are not properly configured.",
                    "Role": "Application",
                    "Condition": "Weak policy enforcement or configuration errors."
                },
                {
                    "Assumption": "Attackers can exploit these configuration weaknesses.",
                    "Role": "Attacker",
                    "Condition": "Ability to analyze and find configuration vulnerabilities."
                },
                {
                    "Assumption": "Users rely on the platform for data security.",
                    "Role": "User",
                    "Condition": "Trust in platform security measures."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive data and privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "access control failure",
                "data leakage",
                "information exposure",
                "backend compromise"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Data intercepted during transmission due to lack of encryption or weak encryption protocols.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted without proper encryption.",
                    "Role": "Application",
                    "Condition": "Use of insecure or outdated encryption protocols."
                },
                {
                    "Assumption": "Attackers can intercept data traffic.",
                    "Role": "Attacker",
                    "Condition": "Ability to perform man-in-the-middle attacks or traffic sniffing."
                },
                {
                    "Assumption": "Users and third parties expect secure data transmission.",
                    "Role": "User",
                    "Condition": "Trust in platform's encryption practices."
                }
            ],
            "Potential Impact": "Leaking sensitive information and possible identity theft.",
            "MITRE ATT&CK Keywords": [
                "encryption failure",
                "data interception",
                "man-in-the-middle",
                "traffic sniffing"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive information stored in logs or cache is accessed by unauthorized users.",
            "Assumptions": [
                {
                    "Assumption": "Sensitive data is logged or cached insecurely.",
                    "Role": "Application",
                    "Condition": "Lack of secure logging or caching practices."
                },
                {
                    "Assumption": "Attackers can access these logs or cache.",
                    "Role": "Attacker",
                    "Condition": "Access to log files or cache storage."
                },
                {
                    "Assumption": "Users think their data is secure on the platform.",
                    "Role": "User",
                    "Condition": "Trust in platform's storage and handling practices."
                }
            ],
            "Potential Impact": "Exposure of sensitive information and possible unauthorized data access.",
            "MITRE ATT&CK Keywords": [
                "log exposure",
                "cache leakage",
                "insecure storage",
                "sensitive data exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Attackers launch a DDoS attack to overwhelm backend servers, causing service disruption.",
            "Assumptions": [
                {
                    "Assumption": "The application has limited resources to handle high traffic volume.",
                    "Role": "Application",
                    "Condition": "Insufficient scaling mechanisms."
                },
                {
                    "Assumption": "Attackers can coordinate a large volume of traffic.",
                    "Role": "Attacker",
                    "Condition": "Access to botnets or high-traffic generation tools."
                },
                {
                    "Assumption": "Users expect continuous availability of services.",
                    "Role": "User",
                    "Condition": "Dependence on platform for communication and content sharing."
                }
            ],
            "Potential Impact": "Service disruption and loss of availability.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "traffic flooding",
                "service outage",
                "availability attack"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious users upload large files or content repetitively, consuming storage and processing resources.",
            "Assumptions": [
                {
                    "Assumption": "The platform does not have restrictions on file size or upload frequency.",
                    "Role": "Application",
                    "Condition": "Lack of resource management policies."
                },
                {
                    "Assumption": "Attackers can exploit these upload functionalities.",
                    "Role": "Attacker",
                    "Condition": "Ability to automate or script mass uploads."
                },
                {
                    "Assumption": "The system does not effectively monitor or limit resource abuse.",
                    "Role": "Application",
                    "Condition": "Insufficient monitoring mechanisms."
                }
            ],
            "Potential Impact": "Degradation of system performance and availability.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "large file upload",
                "storage abuse",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of vulnerabilities to crash backend servers or services.",
            "Assumptions": [
                {
                    "Assumption": "The application contains unpatched or unknown vulnerabilities.",
                    "Role": "Application",
                    "Condition": "Delayed or no patch management processes."
                },
                {
                    "Assumption": "Attackers can discover and exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Access to vulnerability research tools and techniques."
                },
                {
                    "Assumption": "Users depend on the consistent functionality of the platform.",
                    "Role": "User",
                    "Condition": "Reliance on platform for communication and content sharing."
                }
            ],
            "Potential Impact": "Service disruption and possible data loss.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploit",
                "server crash",
                "unpatched systems",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attackers exploit system vulnerabilities to gain administrative access to backend servers.",
            "Assumptions": [
                {
                    "Assumption": "The system has unpatched vulnerabilities or misconfigurations.",
                    "Role": "Application",
                    "Condition": "Weak patch management or security policies."
                },
                {
                    "Assumption": "Attackers have the capability to exploit these flaws.",
                    "Role": "Attacker",
                    "Condition": "Access to exploit tools or vulnerability information."
                },
                {
                    "Assumption": "The application does not enforce strict privilege separation.",
                    "Role": "Application",
                    "Condition": "Insufficient role-based access controls."
                }
            ],
            "Potential Impact": "Full control over backend servers, leading to data breaches and further attacks.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability exploitation",
                "administrative access",
                "backend control"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attackers use cross-site scripting (XSS) to hijack user sessions and elevate their privileges on the site.",
            "Assumptions": [
                {
                    "Assumption": "The application does not properly sanitize user input.",
                    "Role": "Application",
                    "Condition": "Weak input validation mechanisms."
                },
                {
                    "Assumption": "Users can be tricked into triggering the XSS attack.",
                    "Role": "User",
                    "Condition": "Lack of awareness or click on malicious links."
                },
                {
                    "Assumption": "Attackers can access and manipulate user sessions.",
                    "Role": "Attacker",
                    "Condition": "Successful XSS payload delivery and execution."
                }
            ],
            "Potential Impact": "Unauthorized access and manipulation of user accounts.",
            "MITRE ATT&CK Keywords": [
                "XSS",
                "session hijacking",
                "input sanitization failure",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Exploitation of weak APIs to gain elevated privileges and perform unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "APIs lack proper access control mechanisms.",
                    "Role": "Application",
                    "Condition": "Insufficient API security practices."
                },
                {
                    "Assumption": "Attackers can identify and exploit these weak APIs.",
                    "Role": "Attacker",
                    "Condition": "Access to application documentation or analysis tools."
                },
                {
                    "Assumption": "The application does not monitor API usage efficiently.",
                    "Role": "Application",
                    "Condition": "Lack of logging and anomaly detection mechanisms."
                }
            ],
            "Potential Impact": "Execution of unauthorized administrative actions.",
            "MITRE ATT&CK Keywords": [
                "API exploitation",
                "access control weakness",
                "privilege escalation",
                "unauthorized actions"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "13",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a profile impersonating a legitimate user to gain access to private groups and information.",
            "Assumptions": [
                {
                    "Assumption": "User identity can be mimicked",
                    "Role": "Attacker",
                    "Condition": "No strict identity verification"
                },
                {
                    "Assumption": "Legitimate users in the group",
                    "Role": "Targeted User",
                    "Condition": "Trusted community members"
                },
                {
                    "Assumption": "No additional verification required",
                    "Role": "Platform",
                    "Condition": "Basic registration process"
                }
            ],
            "Potential Impact": "Unauthorized access to personal information",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "identity theft",
                "impersonation",
                "private group"
            ],
            "mitre_technique": {
                "name": "Impersonation",
                "description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary\u2019s ultimate goals, possibly against multiple victims. \n \nIn many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables [Financial Theft](https://attack.mitre.org/techniques/T1657).\n\nAdversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as `payment`, `request`, or `urgent` to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary\u2019s goal.\u202f\u202f \n \nImpersonation is typically preceded by reconnaissance techniques such as [Gather Victim Identity Information](https://attack.mitre.org/techniques/T1589) and [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591) as well as acquiring infrastructure such as email domains (i.e. [Domains](https://attack.mitre.org/techniques/T1583/001)) to substantiate their false identity.(Citation: CrowdStrike-BEC)\n \nThere is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may [Compromise Accounts](https://attack.mitre.org/techniques/T1586) targeting one organization which can then be used to support impersonation against other entities.(Citation: VEC)",
                "id": "attack-pattern--c9e0c59e-162e-40a4-b8b1-78fab4329ada",
                "technique_id": "T1656"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses credential stuffing to take over accounts with weak or reused passwords.",
            "Assumptions": [
                {
                    "Assumption": "Users reuse passwords",
                    "Role": "User",
                    "Condition": "Weak password policies"
                },
                {
                    "Assumption": "No multi-factor authentication",
                    "Role": "Platform",
                    "Condition": "Single factor security"
                },
                {
                    "Assumption": "Leaked password databases available",
                    "Role": "Attacker",
                    "Condition": "Access to breached data"
                }
            ],
            "Potential Impact": "Account takeover and unauthorized actions",
            "MITRE ATT&CK Keywords": [
                "credential stuffing",
                "brute force",
                "login",
                "account takeover"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses fake OAuth tokens to simulate third-party integrations and extract user data.",
            "Assumptions": [
                {
                    "Assumption": "OAuth implementation vulnerabilities",
                    "Role": "Platform",
                    "Condition": "Insecure token generation"
                },
                {
                    "Assumption": "Third-party integrations allowed",
                    "Role": "User",
                    "Condition": "Linking external services"
                },
                {
                    "Assumption": "Tokens not validated properly",
                    "Role": "Platform",
                    "Condition": "Poor token validation"
                }
            ],
            "Potential Impact": "Unauthorized data extraction",
            "MITRE ATT&CK Keywords": [
                "oauth",
                "token",
                "third-party integration",
                "data extraction"
            ],
            "mitre_technique": {
                "name": "Application Access Token",
                "description": "Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.\n",
                "id": "attack-pattern--27960489-4e7f-461d-a62a-f5c0cb521e4a",
                "technique_id": "T1527"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies data packets between the client and server to alter messages or posts.",
            "Assumptions": [
                {
                    "Assumption": "Unencrypted communication",
                    "Role": "Platform",
                    "Condition": "HTTP instead of HTTPS"
                },
                {
                    "Assumption": "Accessible network traffic",
                    "Role": "Attacker",
                    "Condition": "Network proximity"
                },
                {
                    "Assumption": "No data integrity checks",
                    "Role": "Platform",
                    "Condition": "Lack of validation on input"
                }
            ],
            "Potential Impact": "Data integrity compromised; misinformation spread",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "packet modification",
                "network interception",
                "data tampering"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains write access to backend servers and modifies stored content to change posts, messages, or user data.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerable server configurations",
                    "Role": "Platform",
                    "Condition": "Weak server security"
                },
                {
                    "Assumption": "Privilege escalation possible",
                    "Role": "Attacker",
                    "Condition": "Access to administrative controls"
                },
                {
                    "Assumption": "Database access unmonitored",
                    "Role": "Platform",
                    "Condition": "Lack of logging and alerting"
                }
            ],
            "Potential Impact": "Content manipulation and loss of trust",
            "MITRE ATT&CK Keywords": [
                "server compromise",
                "write access",
                "content modification",
                "backend tampering"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a third-party integration vulnerability to alter OAuth scopes and gain excessive permissions.",
            "Assumptions": [
                {
                    "Assumption": "OAuth misconfiguration",
                    "Role": "Platform",
                    "Condition": "Improper scope management"
                },
                {
                    "Assumption": "Third-party apps access sensitive data",
                    "Role": "User",
                    "Condition": "Extensive permissions granted"
                },
                {
                    "Assumption": "No scope validation",
                    "Role": "Platform",
                    "Condition": "Lack of thorough checks"
                }
            ],
            "Potential Impact": "Unauthorized actions and data modification",
            "MITRE ATT&CK Keywords": [
                "oauth",
                "scope misconfiguration",
                "third-party exploitation",
                "data tampering"
            ],
            "mitre_technique": {
                "name": "Application Access Token",
                "description": "Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.\n",
                "id": "attack-pattern--27960489-4e7f-461d-a62a-f5c0cb521e4a",
                "technique_id": "T1527"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes activity logs to cover their tracks and disavow malicious actions taken on breached accounts.",
            "Assumptions": [
                {
                    "Assumption": "Inadequate logging mechanisms",
                    "Role": "Platform",
                    "Condition": "No comprehensive logging"
                },
                {
                    "Assumption": "Logging not tamper-proof",
                    "Role": "Platform",
                    "Condition": "Logs can be easily altered"
                },
                {
                    "Assumption": "No backups of logs",
                    "Role": "Platform",
                    "Condition": "Lack of secondary storage"
                }
            ],
            "Potential Impact": "Difficulty in tracking and investigating incidents",
            "MITRE ATT&CK Keywords": [
                "log deletion",
                "log tampering",
                "activity logs",
                "repudiation"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A malicious user falsely claims legitimate actions were unauthorized due to lack of transactional logging.",
            "Assumptions": [
                {
                    "Assumption": "No transactional logging",
                    "Role": "Platform",
                    "Condition": "Missing audit trails"
                },
                {
                    "Assumption": "Dispute mechanisms exist",
                    "Role": "User",
                    "Condition": "Ability to challenge actions"
                },
                {
                    "Assumption": "No identity verifications on actions",
                    "Role": "Platform",
                    "Condition": "Weak verification"
                }
            ],
            "Potential Impact": "Disruption of service trust and potential legal issues",
            "MITRE ATT&CK Keywords": [
                "transactional logging",
                "dispute",
                "audit trails",
                "repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users claim they did not consent to third-party data sharing due to unclear consent mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "Poor consent record-keeping",
                    "Role": "Platform",
                    "Condition": "Vague consent collection"
                },
                {
                    "Assumption": "Third-party integrations lacking transparency",
                    "Role": "Platform",
                    "Condition": "Non-transparent policies"
                },
                {
                    "Assumption": "No user acknowledgments",
                    "Role": "User",
                    "Condition": "Consent not clearly recorded"
                }
            ],
            "Potential Impact": "Legal non-compliance and reputational damage",
            "MITRE ATT&CK Keywords": [
                "consent",
                "third-party data sharing",
                "privacy policies",
                "repudiation"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\").(Citation: CISA IDN ST05-016) URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s.(Citation: Trend Micro Pawn Storm OAuth 2017) These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. (Citation: Microsoft OAuth 2.0 Consent Phishing 2021)\n\nAdversaries may also utilize spearphishing links to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .(Citation: Trend Micro Pawn Storm OAuth 2017)(Citation: Microsoft OAuth 2.0 Consent Phishing 2021)\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.(Citation: SecureWorks Device Code Phishing 2021)(Citation: Netskope Device Code Phishing 2021)(Citation: Optiv Device Code Phishing 2021)",
                "id": "attack-pattern--2b742742-28c3-4e1b-bab7-8350d6300fa7",
                "technique_id": "T1566.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability in the messaging system to intercept and read private conversations.",
            "Assumptions": [
                {
                    "Assumption": "Messaging encryption is weak",
                    "Role": "Platform",
                    "Condition": "Weak or no encryption"
                },
                {
                    "Assumption": "Man-in-the-middle attack is possible",
                    "Role": "Attacker",
                    "Condition": "Access to communication channels"
                },
                {
                    "Assumption": "No end-to-end encryption",
                    "Role": "Platform",
                    "Condition": "Encryption only at transit"
                }
            ],
            "Potential Impact": "Unauthorized disclosure of private messages",
            "MITRE ATT&CK Keywords": [
                "message interception",
                "weak encryption",
                "private conversation",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to server logs containing sensitive user data due to improper access controls.",
            "Assumptions": [
                {
                    "Assumption": "Logs contain sensitive information",
                    "Role": "Platform",
                    "Condition": "Detailed user data in logs"
                },
                {
                    "Assumption": "Access controls are misconfigured",
                    "Role": "Platform",
                    "Condition": "Weak or improper permissions"
                },
                {
                    "Assumption": "Logs are accessible remotely",
                    "Role": "Attacker",
                    "Condition": "Network access to logs"
                }
            ],
            "Potential Impact": "Exposure of sensitive user data",
            "MITRE ATT&CK Keywords": [
                "server logs",
                "access controls",
                "sensitive data",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Data from Local System",
                "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco) Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.\n",
                "id": "attack-pattern--3c4a2599-71ee-4405-ba1e-0e28414b4bc5",
                "technique_id": "T1005"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker successfully exploits a SQL injection vulnerability to extract sensitive information from the database.",
            "Assumptions": [
                {
                    "Assumption": "SQL queries are not sanitized",
                    "Role": "Platform",
                    "Condition": "Poor database management"
                },
                {
                    "Assumption": "Direct access to database",
                    "Role": "Attacker",
                    "Condition": "Web application vulnerability"
                },
                {
                    "Assumption": "Sensitive data stored without encryption",
                    "Role": "Platform",
                    "Condition": "Plaintext sensitive info"
                }
            ],
            "Potential Impact": "Database information exposed",
            "MITRE ATT&CK Keywords": [
                "sql injection",
                "database extraction",
                "sensitive data",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Cloud Accounts",
                "description": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. (Citation: AWS Identity Federation)(Citation: Google Federating GC)(Citation: Microsoft Deploying AD Federation)\n\nService or user accounts may be targeted by adversaries through [Brute Force](https://attack.mitre.org/techniques/T1110), [Phishing](https://attack.mitre.org/techniques/T1566), or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto [Remote Services](https://attack.mitre.org/techniques/T1021). High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based [Software Deployment Tools](https://attack.mitre.org/techniques/T1072) to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005) or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through [Cloud API](https://attack.mitre.org/techniques/T1059/009) or other methods. \n",
                "id": "attack-pattern--f232fa7a-025c-4d43-abc7-318e81a73d65",
                "technique_id": "T1078.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker carries out a Distributed Denial of Service (DDoS) attack to overload the platform's servers and render them inaccessible.",
            "Assumptions": [
                {
                    "Assumption": "Servers cannot handle high traffic",
                    "Role": "Platform",
                    "Condition": "Limited server resources"
                },
                {
                    "Assumption": "Botnets or large attack network available",
                    "Role": "Attacker",
                    "Condition": "Network of compromised devices"
                },
                {
                    "Assumption": "Inadequate DDoS protection",
                    "Role": "Platform",
                    "Condition": "Poor defensive measures"
                }
            ],
            "Potential Impact": "Service disruption and downtime",
            "MITRE ATT&CK Keywords": [
                "ddos",
                "server overload",
                "botnet",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends a high volume of crafted requests to a specific API to exhaust resources and cause denial of legitimate service.",
            "Assumptions": [
                {
                    "Assumption": "API lacks rate limiting",
                    "Role": "Platform",
                    "Condition": "No request throttling"
                },
                {
                    "Assumption": "API endpoint exposed",
                    "Role": "Attacker",
                    "Condition": "Publicly accessible API"
                },
                {
                    "Assumption": "High request capacity",
                    "Role": "Attacker",
                    "Condition": "Ability to send mass requests"
                }
            ],
            "Potential Impact": "Resource exhaustion and API unavailability",
            "MITRE ATT&CK Keywords": [
                "api abuse",
                "rate limiting",
                "request flooding",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a backend vulnerability to crash the service by causing an unhandled exception or infinite loop.",
            "Assumptions": [
                {
                    "Assumption": "Vulnerability in code",
                    "Role": "Platform",
                    "Condition": "Lack of input validation"
                },
                {
                    "Assumption": "Unhandled exceptions",
                    "Role": "Platform",
                    "Condition": "Poor error handling"
                },
                {
                    "Assumption": "Debugging modes with unnecessary data",
                    "Role": "Platform",
                    "Condition": "Detailed error messages"
                }
            ],
            "Potential Impact": "Service crash and unavailability",
            "MITRE ATT&CK Keywords": [
                "backend crash",
                "exception handling",
                "infinite loop",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability to gain elevated privileges and execute administrative functions.",
            "Assumptions": [
                {
                    "Assumption": "Privilege escalation flaw",
                    "Role": "Platform",
                    "Condition": "Vulnerable code paths"
                },
                {
                    "Assumption": "Initial access already obtained",
                    "Role": "Attacker",
                    "Condition": "Compromised lower privilege account"
                },
                {
                    "Assumption": "No privilege separation",
                    "Role": "Platform",
                    "Condition": "Weak access controls"
                }
            ],
            "Potential Impact": "Unauthorized administrative actions and system compromise",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "admin functions",
                "vulnerability exploitation",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "DLL Search Order Hijacking",
                "description": "Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft DLL Search) Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. \n\nAdversaries may perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft 2269637) Adversaries may use this behavior to cause the program to load a malicious DLL. \n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation. (Citation: Microsoft DLL Redirection) (Citation: Microsoft Manifests) (Citation: Mandiant Search Order)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\n\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "id": "attack-pattern--46944654-fcc1-4f63-9dad-628102376586",
                "technique_id": "T1038"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages faulty third-party code to gain higher privileges than intended.",
            "Assumptions": [
                {
                    "Assumption": "Third-party code integrated",
                    "Role": "Platform",
                    "Condition": "Use of external libraries"
                },
                {
                    "Assumption": "Flaws in third-party code",
                    "Role": "Platform",
                    "Condition": "Insecure dependencies"
                },
                {
                    "Assumption": "No sandboxing",
                    "Role": "Platform",
                    "Condition": "Direct execution control"
                }
            ],
            "Potential Impact": "Unauthorized access to higher privileges",
            "MITRE ATT&CK Keywords": [
                "third-party code",
                "library flaw",
                "dependency vulnerability",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits configuration weaknesses to raise their privilege level on the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Misconfigured server settings",
                    "Role": "Platform",
                    "Condition": "Weak default settings"
                },
                {
                    "Assumption": "Known vulnerabilities",
                    "Role": "Platform",
                    "Condition": "Unpatched systems"
                },
                {
                    "Assumption": "Initial access obtained",
                    "Role": "Attacker",
                    "Condition": "Compromised user account"
                }
            ],
            "Potential Impact": "System compromise and unauthorized control",
            "MITRE ATT&CK Keywords": [
                "misconfiguration",
                "server settings",
                "backend vulnerability",
                "elevation of privilege"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "15",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake user profile to impersonate a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "User identity verification is weak or has vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Valid if the authentication process lacks robustness."
                },
                {
                    "Assumption": "Attackers have access to sufficient personal information to make a credible fake profile.",
                    "Role": "Attacker",
                    "Condition": "Valid if attackers can harvest data from breached accounts or public sources."
                }
            ],
            "Potential Impact": "Impersonation could lead to unauthorized access to sensitive data and communication, damaging user trust.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "credential theft",
                "account manipulation"
            ],
            "mitre_technique": {
                "name": "Impersonation",
                "description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary\u2019s ultimate goals, possibly against multiple victims. \n \nIn many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables [Financial Theft](https://attack.mitre.org/techniques/T1657).\n\nAdversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as `payment`, `request`, or `urgent` to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary\u2019s goal.\u202f\u202f \n \nImpersonation is typically preceded by reconnaissance techniques such as [Gather Victim Identity Information](https://attack.mitre.org/techniques/T1589) and [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591) as well as acquiring infrastructure such as email domains (i.e. [Domains](https://attack.mitre.org/techniques/T1583/001)) to substantiate their false identity.(Citation: CrowdStrike-BEC)\n \nThere is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may [Compromise Accounts](https://attack.mitre.org/techniques/T1586) targeting one organization which can then be used to support impersonation against other entities.(Citation: VEC)",
                "id": "attack-pattern--c9e0c59e-162e-40a4-b8b1-78fab4329ada",
                "technique_id": "T1656"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses phishing techniques to trick users into providing their login credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users are not adequately trained to recognize phishing attempts.",
                    "Role": "User",
                    "Condition": "Valid if the platform does not provide sufficient education and awareness."
                },
                {
                    "Assumption": "The application does not use multi-factor authentication (MFA).",
                    "Role": "Administrator",
                    "Condition": "Valid if relying solely on passwords for authentication."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts and sensitive data, potentially leading to misuse or further compromises.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential theft",
                "email",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "A third-party application with improper security measures is utilized to log in, allowing attackers to hijack sessions.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications do not enforce adequate security measures.",
                    "Role": "Third-party Developer",
                    "Condition": "Valid if integrations lack rigorous security reviews."
                },
                {
                    "Assumption": "Users trust third-party applications without verifying their security posture.",
                    "Role": "User",
                    "Condition": "Valid if users are unaware of risks or poorly informed."
                }
            ],
            "Potential Impact": "Compromised user sessions and potential data leaks or unauthorized actions taken on behalf of the user.",
            "MITRE ATT&CK Keywords": [
                "session hijacking",
                "third-party",
                "authentication",
                "session management"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies data en route between the user and backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not encrypted (e.g., lack of TLS/SSL).",
                    "Role": "Administrator",
                    "Condition": "Valid if security measures like encryption are not in place."
                },
                {
                    "Assumption": "The network is accessible to the attacker.",
                    "Role": "Attacker",
                    "Condition": "Valid if the attacker has access to the same network or uses a man-in-the-middle attack."
                }
            ],
            "Potential Impact": "Corruption of data, leading to misinformation or unauthorized actions within the application.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "network",
                "data tampering",
                "TLS/SSL"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An insider modifies backend server configurations to gain unauthorized privileges.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient access controls and monitoring on the backend servers.",
                    "Role": "Administrator",
                    "Condition": "Valid if server configurations lack strict access control policies."
                },
                {
                    "Assumption": "The insider has legitimate access to the backend servers.",
                    "Role": "Insider",
                    "Condition": "Valid if the insider is trusted and has administrative access."
                }
            ],
            "Potential Impact": "Unauthorized changes to server behaviors impacting application stability and integrity.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "configuration change",
                "backend servers",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker uses a vulnerability in third-party integrations to alter user data.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications are not regularly audited for security vulnerabilities.",
                    "Role": "Third-party Developer",
                    "Condition": "Valid if security audits are sporadic or non-existent."
                },
                {
                    "Assumption": "Third-party applications have extensive permissions.",
                    "Role": "Administrator",
                    "Condition": "Valid if applications are granted excessive access rights without proper checks."
                }
            ],
            "Potential Impact": "Corruption or unauthorized manipulation of user data, leading to misinformation and loss of trust.",
            "MITRE ATT&CK Keywords": [
                "third-party vulnerability",
                "data injection",
                "API misuse"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a harmful message or performing a critical action.",
            "Assumptions": [
                {
                    "Assumption": "The application does not maintain comprehensive logs.",
                    "Role": "Developer",
                    "Condition": "Valid if logging is incomplete or not implemented."
                },
                {
                    "Assumption": "Users are aware of the lack of non-repudiation measures.",
                    "Role": "User",
                    "Condition": "Valid if users exploit known weaknesses in logging."
                }
            ],
            "Potential Impact": "Challenges in attributing actions correctly, potentially leading to fraud or scams going undetected.",
            "MITRE ATT&CK Keywords": [
                "non-repudiation",
                "logging deficiency",
                "action deniability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker denies initiating a session due to lack of audit trails.",
            "Assumptions": [
                {
                    "Assumption": "The platform lacks proper session logging and monitoring.",
                    "Role": "Administrator",
                    "Condition": "Valid if session activities are not logged or monitored effectively."
                },
                {
                    "Assumption": "Attackers can access the system without raising alerts.",
                    "Role": "Attacker",
                    "Condition": "Valid if intrusion detection is weak or non-existent."
                }
            ],
            "Potential Impact": "Difficulty in tracking unauthorized access, potentially leading to undetected breaches.",
            "MITRE ATT&CK Keywords": [
                "session logging",
                "audit trail",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user claims they did not approve a third-party application access due to lack of confirmation mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "Third-party access approvals lack verification steps.",
                    "Role": "Developer",
                    "Condition": "Valid if user approvals are not double-checked or logged."
                },
                {
                    "Assumption": "Users are not informed or aware of their actions during the approval process.",
                    "Role": "User",
                    "Condition": "Valid if approval interfaces are unclear or misleading."
                }
            ],
            "Potential Impact": "Disputes over authorized data sharing, affecting privacy and trust in the platform.",
            "MITRE ATT&CK Keywords": [
                "third-party access",
                "approval logging",
                "user verification"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is exposed due to improper access controls.",
            "Assumptions": [
                {
                    "Assumption": "Access control policies are not strict or properly enforced.",
                    "Role": "Administrator",
                    "Condition": "Valid if security policies are lax or misconfigured."
                },
                {
                    "Assumption": "Sensitive data is stored in an accessible manner.",
                    "Role": "Developer",
                    "Condition": "Valid if data storage does not follow encryption best practices."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of personal information, leading to privacy violations and potential misuse.",
            "MITRE ATT&CK Keywords": [
                "data exposure",
                "access control weakness",
                "sensitive information"
            ],
            "mitre_technique": {
                "name": "Cloud Instance Metadata API",
                "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.\n",
                "id": "attack-pattern--19bf235b-8620-4997-b5b4-94e0659ed7c3",
                "technique_id": "T1552.005"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits an API to retrieve unauthorized user information.",
            "Assumptions": [
                {
                    "Assumption": "APIs do not have proper authentication and authorization checks.",
                    "Role": "Developer",
                    "Condition": "Valid if API endpoints are poorly secured."
                },
                {
                    "Assumption": "Attackers can identify and exploit vulnerable API endpoints.",
                    "Role": "Attacker",
                    "Condition": "Valid if security testing is insufficient or lacking."
                }
            ],
            "Potential Impact": "Unauthorized access to user profile data, leading to privacy breaches and identity theft.",
            "MITRE ATT&CK Keywords": [
                "API exploitation",
                "data retrieval",
                "authorization bypass"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Third-party applications access more data than intended due to improper permissions.",
            "Assumptions": [
                {
                    "Assumption": "The platform grants excessive permissions to third-party apps.",
                    "Role": "Administrator",
                    "Condition": "Valid if permission settings are not fine-grained."
                },
                {
                    "Assumption": "Third-party apps are not vetted for data access practices.",
                    "Role": "Developer",
                    "Condition": "Valid if app vetting processes are inadequate."
                }
            ],
            "Potential Impact": "Excessive data sharing leading to unintentional information leaks and privacy concerns.",
            "MITRE ATT&CK Keywords": [
                "third-party access",
                "excessive permissions",
                "data leakage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a Distributed Denial of Service (DDoS) attack to overwhelm the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "The backend infrastructure is not adequately scaled to handle high traffic.",
                    "Role": "Administrator",
                    "Condition": "Valid if servers lack redundancy or autoscaling."
                },
                {
                    "Assumption": "Lack of proper DDoS mitigation strategies.",
                    "Role": "Administrator",
                    "Condition": "Valid if there are no anti-DDoS protections in place."
                }
            ],
            "Potential Impact": "Service disruption, causing users to lose access to the platform.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "network flood",
                "service disruption",
                "backend servers"
            ],
            "mitre_technique": {
                "name": "Network Denial of Service",
                "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",
                "id": "attack-pattern--d74c4a7e-ffbf-432f-9365-7ebf1f787cab",
                "technique_id": "T1498"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the application code to crash the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "There are exploitable vulnerabilities in the application code.",
                    "Role": "Developer",
                    "Condition": "Valid if code reviews and security testing are insufficient."
                },
                {
                    "Assumption": "Attackers have access to exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Valid if vulnerabilities are known or discovered by attackers."
                }
            ],
            "Potential Impact": "Application downtime, affecting user access and operational continuity.",
            "MITRE ATT&CK Keywords": [
                "code exploitation",
                "server crash",
                "vulnerability",
                "application downtime"
            ],
            "mitre_technique": {
                "name": "Vulnerability Scanning",
                "description": "Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.\n\nThese scans may also include more broad attempts to [Gather Victim Host Information](https://attack.mitre.org/techniques/T1592) that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts.(Citation: OWASP Vuln Scanning) Information from these scans may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).",
                "id": "attack-pattern--5502c4e9-24ef-4d5f-8ee9-9e906c2f82c4",
                "technique_id": "T1595.002"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A third-party application with insufficient rate limiting generates excessive API calls, overwhelming system resources.",
            "Assumptions": [
                {
                    "Assumption": "The platform does not enforce rate limiting on API calls.",
                    "Role": "Developer",
                    "Condition": "Valid if API rate limits are not implemented."
                },
                {
                    "Assumption": "Third-party applications can freely interact with the APIs.",
                    "Role": "Administrator",
                    "Condition": "Valid if open access is given without restrictions."
                }
            ],
            "Potential Impact": "Performance degradation or complete service outage due to resource exhaustion.",
            "MITRE ATT&CK Keywords": [
                "rate limiting",
                "API abuse",
                "resource exhaustion",
                "third-party integration"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability to gain administrative access to backend servers.",
            "Assumptions": [
                {
                    "Assumption": "The backend server software has exploitable vulnerabilities.",
                    "Role": "Developer",
                    "Condition": "Valid if software patches and updates are not timely."
                },
                {
                    "Assumption": "Attackers have knowledge of these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Valid if vulnerabilities are well-documented or discovered."
                }
            ],
            "Potential Impact": "Full control over the backend environment, allowing for wide-ranging malicious activities.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "backend servers",
                "vulnerability exploitation",
                "admin access"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An insider uses their legitimate access to increase their privileges improperly.",
            "Assumptions": [
                {
                    "Assumption": "Access controls are insufficiently stringent.",
                    "Role": "Administrator",
                    "Condition": "Valid if access control policies are minimal or lenient."
                },
                {
                    "Assumption": "The insider has knowledge of the system architecture and vulnerabilities.",
                    "Role": "Insider",
                    "Condition": "Valid if the insider has technical expertise and access."
                }
            ],
            "Potential Impact": "Unauthorized escalation of privileges leading to potential data manipulation or system compromise.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "access control weaknesses",
                "privilege abuse",
                "system compromise"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering to trick an administrator into executing malicious commands.",
            "Assumptions": [
                {
                    "Assumption": "Administrators can be socially engineered into taking actions without adequate verification.",
                    "Role": "Administrator",
                    "Condition": "Valid if admin training on security practices is insufficient."
                },
                {
                    "Assumption": "There are insufficient checks for administrative actions.",
                    "Role": "Administrator",
                    "Condition": "Valid if actions are not verified or logged adequately."
                }
            ],
            "Potential Impact": "Malicious execution of high-privilege commands leading to system control changes or data breaches.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "admin rights",
                "malicious commands",
                "user manipulation"
            ],
            "mitre_technique": {
                "name": "Malicious File",
                "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) \n\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).",
                "id": "attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e",
                "technique_id": "T1204.002"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "14",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake login page to capture user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users are not verifying the authenticity of the login page.",
                    "Role": "User",
                    "Condition": "Users click on phishing links or visit suspicious sites."
                },
                {
                    "Assumption": "The attacker can host a fake but convincing login page.",
                    "Role": "Attacker",
                    "Condition": "Attacker has access to a domain and web hosting."
                },
                {
                    "Assumption": "Users are entering their credentials on the fake page.",
                    "Role": "User",
                    "Condition": "Users are not aware of the phishing attempt."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user data.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential harvesting",
                "user authentication",
                "web"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker impersonates another user by compromising their account.",
            "Assumptions": [
                {
                    "Assumption": "Attacker has knowledge of user's credentials.",
                    "Role": "Attacker",
                    "Condition": "Credentials obtained through phishing or data leaks."
                },
                {
                    "Assumption": "The platform does not have multi-factor authentication enabled.",
                    "Role": "Platform Admin",
                    "Condition": "Only single-factor authentication in place."
                },
                {
                    "Assumption": "The attacker can maintain access to the compromised account.",
                    "Role": "Attacker",
                    "Condition": "Attacker evades detection by the user or platform security."
                }
            ],
            "Potential Impact": "Loss of data integrity and confidentiality.",
            "MITRE ATT&CK Keywords": [
                "account takeover",
                "identity theft",
                "credential access",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Compromise Accounts",
                "description": "Adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. [Establish Accounts](https://attack.mitre.org/techniques/T1585)), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials.(Citation: AnonHBGary)(Citation: Microsoft DEV-0537) Prior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries may directly leverage compromised email accounts for [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Phishing](https://attack.mitre.org/techniques/T1566).",
                "id": "attack-pattern--81033c3b-16a4-46e4-8fed-9b030dd03c4a",
                "technique_id": "T1586"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a fake social media profile to gain trust and extract sensitive information from users.",
            "Assumptions": [
                {
                    "Assumption": "Users accept connection requests without proper validation.",
                    "Role": "User",
                    "Condition": "Users are not scrutinizing new connection requests."
                },
                {
                    "Assumption": "The attacker knows enough user information to construct a realistic profile.",
                    "Role": "Attacker",
                    "Condition": "Attacker has done reconnaissance on the target."
                },
                {
                    "Assumption": "Victims share sensitive information with the fake profile.",
                    "Role": "User",
                    "Condition": "Users believe they are interacting with a legitimate contact."
                }
            ],
            "Potential Impact": "Compromised data privacy and possible social engineering attacks.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "fake profile",
                "information gathering",
                "impersonation"
            ],
            "mitre_technique": {
                "name": "Protocol Tunneling",
                "description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. \n\nThere are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel.(Citation: SSH Tunneling) \n\n[Protocol Tunneling](https://attack.mitre.org/techniques/T1572) may also be abused by adversaries during [Dynamic Resolution](https://attack.mitre.org/techniques/T1568). Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets.(Citation: BleepingComp Godlua JUL19) \n\nAdversaries may also leverage [Protocol Tunneling](https://attack.mitre.org/techniques/T1572) in conjunction with [Proxy](https://attack.mitre.org/techniques/T1090) and/or [Protocol Impersonation](https://attack.mitre.org/techniques/T1001/003) to further conceal C2 communications and infrastructure. ",
                "id": "attack-pattern--4fe28b27-b13c-453e-a386-c2ef362a573b",
                "technique_id": "T1572"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies user data during transmission by exploiting a man-in-the-middle attack.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not encrypted.",
                    "Role": "Platform Admin",
                    "Condition": "Use of HTTP instead of HTTPS."
                },
                {
                    "Assumption": "The attacker has access to the network where data transmission occurs.",
                    "Role": "Attacker",
                    "Condition": "Attacker is on the same network or has compromised network access."
                },
                {
                    "Assumption": "Users and servers do not verify data integrity.",
                    "Role": "User/Server",
                    "Condition": "Lack of integrity checks leading to unnoticed tampering."
                }
            ],
            "Potential Impact": "Data integrity compromised, leading to possible misinformation or unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "network exploitation",
                "data tampering",
                "encryption"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains write access to the backend servers and alters user content or application configurations.",
            "Assumptions": [
                {
                    "Assumption": "The attacker bypasses authentication or exploits a vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Vulnerabilities or misconfigurations in the backend system."
                },
                {
                    "Assumption": "Insufficient logging and monitoring of server activities.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of comprehensive logging tools."
                },
                {
                    "Assumption": "The attacker\u2019s actions go undetected for a period.",
                    "Role": "Platform Admin",
                    "Condition": "Delayed detection and response."
                }
            ],
            "Potential Impact": "Loss of data integrity and corrupted application functionality.",
            "MITRE ATT&CK Keywords": [
                "server compromise",
                "data corruption",
                "backend tampering",
                "configuration change"
            ],
            "mitre_technique": {
                "name": "Launch Daemon",
                "description": "Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in <code>/System/Library/LaunchDaemons/</code> and <code>/Library/LaunchDaemons/</code>. Required Launch Daemons parameters include a <code>Label</code> to identify the task, <code>Program</code> to provide a path to the executable, and <code>RunAtLoad</code> to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.(Citation: AppleDocs Launch Agent Daemons)(Citation: Methods of Mac Malware Persistence)(Citation: launchd Keywords for plists)\n\nAdversaries may install a Launch Daemon configured to execute at startup by using the <code>RunAtLoad</code> parameter set to <code>true</code> and the <code>Program</code> parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. [Masquerading](https://attack.mitre.org/techniques/T1036)). When the Launch Daemon is executed, the program inherits administrative permissions.(Citation: WireLurker)(Citation: OSX Malware Detection)\n\nAdditionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as <code>usr/local/bin</code> to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.(Citation: LaunchDaemon Hijacking)(Citation: sentinelone macos persist Jun 2019)",
                "id": "attack-pattern--573ad264-1371-4ae0-8482-d2673b719dba",
                "technique_id": "T1543.004"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious third-party application alters user data or injects malicious code via API integration.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications have extensive permissions.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of least privilege principle in permissions."
                },
                {
                    "Assumption": "APIs are not sufficiently secured against tampering.",
                    "Role": "Platform Admin",
                    "Condition": "Weak or no authentication mechanisms for APIs."
                },
                {
                    "Assumption": "Users inadvertently authorize malicious third-party apps.",
                    "Role": "User",
                    "Condition": "Users are unaware of the risks associated with third-party apps."
                }
            ],
            "Potential Impact": "Corruption of user data and potential spread of malware.",
            "MITRE ATT&CK Keywords": [
                "API exploitation",
                "third-party integration",
                "malicious code injection",
                "data tampering"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny the actions taken on their accounts, leading to disputes.",
            "Assumptions": [
                {
                    "Assumption": "Inadequate logging of user actions.",
                    "Role": "Platform Admin",
                    "Condition": "Absence of detailed audit trails."
                },
                {
                    "Assumption": "Attackers can perform actions on compromised accounts.",
                    "Role": "Attacker",
                    "Condition": "Successful account compromise by the attacker."
                },
                {
                    "Assumption": "Users lack the means to verify their own actions.",
                    "Role": "User",
                    "Condition": "No mechanisms for users to review their activities."
                }
            ],
            "Potential Impact": "Challenges in resolving user disputes and potential financial or reputational damage.",
            "MITRE ATT&CK Keywords": [
                "audit trail manipulation",
                "log tampering",
                "identity theft",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Administrators deny making configuration changes that led to security breaches.",
            "Assumptions": [
                {
                    "Assumption": "Change management processes are weak or non-existent.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of formal change management or approval processes."
                },
                {
                    "Assumption": "The platform does not maintain detailed logs of administrative actions.",
                    "Role": "Platform Admin",
                    "Condition": "Insufficient administrative activity logging."
                },
                {
                    "Assumption": "No independent verification of administrative changes.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of oversight for administrative changes."
                }
            ],
            "Potential Impact": "Difficulty in attributing root cause of security incidents and maintaining system integrity.",
            "MITRE ATT&CK Keywords": [
                "admin actions",
                "configuration change",
                "log management",
                "security breach"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes or alters logs to cover their tracks.",
            "Assumptions": [
                {
                    "Assumption": "Logs are stored without encryption or integrity protection.",
                    "Role": "Platform Admin",
                    "Condition": "Unsecured log storage."
                },
                {
                    "Assumption": "Access controls to logs are weak or misconfigured.",
                    "Role": "Platform Admin",
                    "Condition": "Insufficient access control mechanisms."
                },
                {
                    "Assumption": "The attacker has sufficient privileges to modify logs.",
                    "Role": "Attacker",
                    "Condition": "Attacker escalates privileges to gain log access."
                }
            ],
            "Potential Impact": "Inability to detect or investigate security breaches.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "audit trail",
                "track covering",
                "data deletion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is extracted through SQL injection attacks.",
            "Assumptions": [
                {
                    "Assumption": "Web application does not properly sanitize user inputs.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of input validation measures."
                },
                {
                    "Assumption": "No prepared statements or parameterized queries are used.",
                    "Role": "Platform Admin",
                    "Condition": "Use of dynamic SQL without safeguards."
                },
                {
                    "Assumption": "Database contains sensitive user information.",
                    "Role": "Platform Admin",
                    "Condition": "Storing of sensitive data in the database."
                }
            ],
            "Potential Impact": "Unauthorized access and disclosure of sensitive data.",
            "MITRE ATT&CK Keywords": [
                "SQL injection",
                "database exploitation",
                "input validation",
                "data leakage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user communications are intercepted due to lack of encryption.",
            "Assumptions": [
                {
                    "Assumption": "Communication between users and servers is unencrypted.",
                    "Role": "Platform Admin",
                    "Condition": "Use of plain HTTP or unencrypted protocols."
                },
                {
                    "Assumption": "Attacker has network access to intercept communications.",
                    "Role": "Attacker",
                    "Condition": "Attacker is on the same network path."
                },
                {
                    "Assumption": "Users send sensitive information over these channels.",
                    "Role": "User",
                    "Condition": "Users do not use secure communication channels."
                }
            ],
            "Potential Impact": "Loss of confidentiality for user communications.",
            "MITRE ATT&CK Keywords": [
                "unencrypted transmission",
                "network sniffing",
                "data interception",
                "confidentiality breach"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Third-party integrations improperly handle user data, leading to exposure.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications are given unnecessary access permissions.",
                    "Role": "Platform Admin",
                    "Condition": "Oversight in permissions management."
                },
                {
                    "Assumption": "User data shared with third-party apps is not encrypted.",
                    "Role": "Platform Admin",
                    "Condition": "Plain data transfers to third-party services."
                },
                {
                    "Assumption": "There are weak or no agreements on data handling with third parties.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of data-sharing agreements or audits."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user data.",
            "MITRE ATT&CK Keywords": [
                "third-party risk",
                "data leakage",
                "integration risk",
                "data management"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Attackers launch a Distributed Denial of Service (DDoS) attack, overwhelming the servers.",
            "Assumptions": [
                {
                    "Assumption": "Servers are not protected by robust DDoS mitigation solutions.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of DDoS mitigation strategies."
                },
                {
                    "Assumption": "The platform does not use CDNs or other load distribution techniques.",
                    "Role": "Platform Admin",
                    "Condition": "Centralized server infrastructure without load balancing."
                },
                {
                    "Assumption": "Attackers can coordinate a large number of devices for the attack.",
                    "Role": "Attacker",
                    "Condition": "Access to botnets or compromised devices."
                }
            ],
            "Potential Impact": "Service unavailability affecting user access and business operations.",
            "MITRE ATT&CK Keywords": [
                "DDoS attack",
                "traffic flood",
                "network disruption",
                "service interruption"
            ],
            "mitre_technique": {
                "name": "Endpoint Denial of Service",
                "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.(Citation: ArsTechnica Great Firewall of China)\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](https://attack.mitre.org/techniques/T1498).\n",
                "id": "attack-pattern--c675646d-e204-4aa8-978d-e3d6d65885c4",
                "technique_id": "T1499"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Attackers exploit application vulnerabilities to crash the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Application contains unpatched vulnerabilities.",
                    "Role": "Platform Admin",
                    "Condition": "Delayed or missing software updates."
                },
                {
                    "Assumption": "Attackers have identified and can exploit specific vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Availability of exploit scripts or tools."
                },
                {
                    "Assumption": "No effective monitoring to detect unusual server behavior.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of real-time monitoring solutions."
                }
            ],
            "Potential Impact": "Interruption of service and potential data loss.",
            "MITRE ATT&CK Keywords": [
                "vulnerability exploitation",
                "application crash",
                "backend disruption",
                "patch management"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Insider launches an attack against the database servers to disrupt operations.",
            "Assumptions": [
                {
                    "Assumption": "Inadequate access controls and monitoring of insider activities.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of strict access control and monitoring policies."
                },
                {
                    "Assumption": "Insider has sufficient privileges to affect database performance.",
                    "Role": "Insider",
                    "Condition": "Privileged access to database systems."
                },
                {
                    "Assumption": "No mechanisms in place to quickly identify and mitigate insider threats.",
                    "Role": "Platform Admin",
                    "Condition": "Absence of effective insider threat detection and response."
                }
            ],
            "Potential Impact": "Severe disruption to data processing and application services.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "privileged access abuse",
                "database disruption",
                "access control"
            ],
            "mitre_technique": {
                "name": "Service Registry Permissions Weakness",
                "description": "Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, [PowerShell](https://attack.mitre.org/techniques/T1086), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through Access Control Lists and permissions. (Citation: MSDN Registry Key Security)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter Registry keys associated with service failure parameters (such as <code>FailureCommand</code>) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: TrustedSignal Service Failure)(Citation: Twitter Service Recovery Nov 2017)",
                "id": "attack-pattern--39a130e1-6ab7-434a-8bd2-418e7d9d6427",
                "technique_id": "T1058"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attackers exploit a vulnerability to gain administrative control over the platform.",
            "Assumptions": [
                {
                    "Assumption": "The platform has unpatched critical vulnerabilities.",
                    "Role": "Platform Admin",
                    "Condition": "Failure to apply regular security updates."
                },
                {
                    "Assumption": "Attackers have detailed knowledge of these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Information on vulnerabilities is publicly available."
                },
                {
                    "Assumption": "Attackers can execute malicious code on the platform.",
                    "Role": "Attacker",
                    "Condition": "Ability to run scripts or executable code."
                }
            ],
            "Potential Impact": "Complete control over the platform resulting in potential data breaches and system manipulation.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability exploitation",
                "administrative control",
                "system takeover"
            ],
            "mitre_technique": {
                "name": "Component Object Model",
                "description": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM) Remote COM execution is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as  [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation: Fireeye Hunting COM June 2019)\n\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).(Citation: Microsoft COM) Specific COM objects also exist to directly perform functions beyond code execution, such as creating a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018)",
                "id": "attack-pattern--2f6b4ed7-fef1-44ba-bcb8-1b4beb610b64",
                "technique_id": "T1559.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A malicious user escalates privileges by exploiting insecure API endpoints.",
            "Assumptions": [
                {
                    "Assumption": "API endpoints do not enforce strict access controls.",
                    "Role": "Platform Admin",
                    "Condition": "Weak or missing authentication and authorization checks."
                },
                {
                    "Assumption": "The attacker can gain necessary access through the API.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of API endpoints and methods."
                },
                {
                    "Assumption": "Insufficient monitoring of API usage and access patterns.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of API usage logging and anomaly detection."
                }
            ],
            "Potential Impact": "Unauthorized access to higher-level privileges leading to data manipulation and system compromise.",
            "MITRE ATT&CK Keywords": [
                "API abuse",
                "privilege escalation",
                "unauthorized access",
                "access control"
            ],
            "mitre_technique": {
                "name": "Print Processors",
                "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.(Citation: Microsoft Intro Print Processors)\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\\\[Windows architecture: e.g., Windows x64]\\Print Processors\\\\[user defined]\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory.(Citation: Microsoft AddPrintProcessor May 2018) After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.(Citation: ESET PipeMon May 2020)\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
                "id": "attack-pattern--2de47683-f398-448f-b947-9abcc3e32fad",
                "technique_id": "T1547.012"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Users gain higher levels of access through compromised accounts with weak passwords.",
            "Assumptions": [
                {
                    "Assumption": "Accounts are secured with weak or reused passwords.",
                    "Role": "User",
                    "Condition": "Use of simple or common passwords."
                },
                {
                    "Assumption": "The platform does not enforce strong password policies.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of enforced password complexity rules."
                },
                {
                    "Assumption": "Attackers can employ brute-force techniques to crack passwords.",
                    "Role": "Attacker",
                    "Condition": "Availability of automated password cracking tools."
                }
            ],
            "Potential Impact": "Elevation of privileges leading to data breaches and unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "weak password",
                "brute-force attack",
                "account compromise",
                "access escalation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "16",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake login page that looks identical to the actual social media platform to steal user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users may fall for phishing attempts if not cautious.",
                    "Role": "End Users",
                    "Condition": "When they do not verify the URL before entering their credentials."
                },
                {
                    "Assumption": "Attackers can host the spoofed page on a server with a similar URL.",
                    "Role": "Attackers",
                    "Condition": "When they have the capability to host websites and manipulate DNS."
                },
                {
                    "Assumption": "Users do not enable multi-factor authentication (MFA).",
                    "Role": "End Users",
                    "Condition": "When not utilizing additional security measures."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts and sensitive information.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "phishing",
                "credential harvesting",
                "fake website"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attackers impersonate legitimate third-party applications to request access to user profiles through OAuth.",
            "Assumptions": [
                {
                    "Assumption": "Users tend to approve application requests without verifying their legitimacy.",
                    "Role": "End Users",
                    "Condition": "When they trust the appearance of the application."
                },
                {
                    "Assumption": "Attackers can create convincing OAuth requests.",
                    "Role": "Attackers",
                    "Condition": "When they have knowledge of the OAuth protocol."
                },
                {
                    "Assumption": "The platform does not adequately authenticate third-party applications.",
                    "Role": "Social Media Platform",
                    "Condition": "When lacking rigorous third-party verification processes."
                }
            ],
            "Potential Impact": "Unauthorized access to user profiles, including personal information and activity logs.",
            "MITRE ATT&CK Keywords": [
                "OAuth",
                "impersonation",
                "phishing",
                "third-party access"
            ],
            "mitre_technique": {
                "name": "Application Access Token",
                "description": "Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.\n",
                "id": "attack-pattern--27960489-4e7f-461d-a62a-f5c0cb521e4a",
                "technique_id": "T1527"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attackers gain access to user accounts by exploiting weak or reused passwords.",
            "Assumptions": [
                {
                    "Assumption": "Users often reuse passwords across different platforms.",
                    "Role": "End Users",
                    "Condition": "When they have poor password hygiene."
                },
                {
                    "Assumption": "Attackers have access to compromised credential databases.",
                    "Role": "Attackers",
                    "Condition": "When they possess stolen credentials or perform credential stuffing attacks."
                },
                {
                    "Assumption": "The platform does not enforce strong password policies.",
                    "Role": "Social Media Platform",
                    "Condition": "When password strength requirements are lax or non-existent."
                }
            ],
            "Potential Impact": "Unauthorized control over user accounts leading to potential identity theft and unauthorized disclosure of information.",
            "MITRE ATT&CK Keywords": [
                "password reuse",
                "credential stuffing",
                "account compromise",
                "identity theft"
            ],
            "mitre_technique": {
                "name": "Credential Stuffing",
                "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.\n\nCredential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.\n\nTypically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)",
                "id": "attack-pattern--b2d03cea-aec1-45ca-9744-9ee583c1e1cc",
                "technique_id": "T1110.004"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the content of a user post through a vulnerability in the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Backend servers have vulnerabilities that can be exploited.",
                    "Role": "Attackers",
                    "Condition": "When they have identified and understood these vulnerabilities."
                },
                {
                    "Assumption": "Attackers have access to tools and techniques to manipulate server-side data.",
                    "Role": "Attackers",
                    "Condition": "When possessing necessary technical skills."
                },
                {
                    "Assumption": "Users cannot easily detect unauthorized changes to their posts.",
                    "Role": "End Users",
                    "Condition": "When unaware of the tampering."
                }
            ],
            "Potential Impact": "Corruption or alteration of user content, undermining the platform's integrity.",
            "MITRE ATT&CK Keywords": [
                "content tampering",
                "server-side vulnerability",
                "data manipulation",
                "integrity violation"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies data in transit between users and the backend servers through a Man-in-the-Middle (MitM) attack.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted over unencrypted channels.",
                    "Role": "Social Media Platform",
                    "Condition": "When SSL/TLS is not enforced."
                },
                {
                    "Assumption": "Attackers have access to network interception tools.",
                    "Role": "Attackers",
                    "Condition": "When positioned within the network to intercept traffic."
                },
                {
                    "Assumption": "Users do not notice abnormal activity or warnings in their network connection.",
                    "Role": "End Users",
                    "Condition": "When connecting to public or unsecured networks."
                }
            ],
            "Potential Impact": "Interception and modification of sensitive information, compromising data confidentiality and integrity.",
            "MITRE ATT&CK Keywords": [
                "MitM",
                "network interception",
                "data tampering",
                "SSL/TLS"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious insiders with administrative access alter user data in the database to achieve personal or financial gain.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have privileged access to the database.",
                    "Role": "Administrators",
                    "Condition": "When access control policies are insufficient."
                },
                {
                    "Assumption": "No effective monitoring and auditing mechanisms in place.",
                    "Role": "Social Media Platform",
                    "Condition": "When system logs and user activities are not regularly reviewed."
                },
                {
                    "Assumption": "Insiders act with malicious intent.",
                    "Role": "Administrators",
                    "Condition": "When they have a motive and opportunity."
                }
            ],
            "Potential Impact": "Unauthorized alteration of user data, compromising both data integrity and user trust.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "privileged access abuse",
                "database tampering",
                "unauthorized modification"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny posting content that violates platform policies, leading to disputes about activity logs.",
            "Assumptions": [
                {
                    "Assumption": "Activity logs are not verifiable or tamper-proof.",
                    "Role": "Social Media Platform",
                    "Condition": "When security logging mechanisms are weak."
                },
                {
                    "Assumption": "Users claim their accounts were compromised.",
                    "Role": "End Users",
                    "Condition": "When caught violating policies."
                },
                {
                    "Assumption": "Platform policies rely on accurate activity logs for enforcement.",
                    "Role": "Social Media Platform",
                    "Condition": "When enforcing terms of service and user agreements."
                }
            ],
            "Potential Impact": "Disputes over actions taken, potentially leading to legal or reputational consequences.",
            "MITRE ATT&CK Keywords": [
                "activity logs",
                "account compromise",
                "policy violation",
                "user disputes"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker performs actions on a user\u2019s account and deletes logs to cover their tracks.",
            "Assumptions": [
                {
                    "Assumption": "Attackers have access to tools that can delete logs.",
                    "Role": "Attackers",
                    "Condition": "When they gain necessary privileges."
                },
                {
                    "Assumption": "Audit logs are not securely stored or backed up.",
                    "Role": "Social Media Platform",
                    "Condition": "When log management practices are inadequate."
                },
                {
                    "Assumption": "Users will not immediately notice unauthorized activity.",
                    "Role": "End Users",
                    "Condition": "When they are not actively monitoring their accounts."
                }
            ],
            "Potential Impact": "Obscuring evidence of malicious activity, hindering incident response and forensic investigations.",
            "MITRE ATT&CK Keywords": [
                "log deletion",
                "covering tracks",
                "audit log",
                "forensic avoidance"
            ],
            "mitre_technique": {
                "name": "Cloud Service Discovery",
                "description": "An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.\n\nAdversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.(Citation: Azure - Resource Manager API)(Citation: Azure AD Graph API)\n\nFor example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.(Citation: Azure - Stormspotter)(Citation: GitHub Pacu)\n\nAdversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses through [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001) or [Disable or Modify Cloud Logs](https://attack.mitre.org/techniques/T1562/008).",
                "id": "attack-pattern--e24fcba8-2557-4442-a139-1ee2f2e784db",
                "technique_id": "T1526"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users dispute transactions or actions that occurred due to automated system errors.",
            "Assumptions": [
                {
                    "Assumption": "Automated systems are not infallible and may have bugs.",
                    "Role": "Social Media Platform",
                    "Condition": "When software development practices are not rigorous."
                },
                {
                    "Assumption": "Logs of actions are not detailed or precise enough to identify errors.",
                    "Role": "Social Media Platform",
                    "Condition": "When logging granularity is insufficient for troubleshooting."
                },
                {
                    "Assumption": "Users are affected materially by the automated errors.",
                    "Role": "End Users",
                    "Condition": "When transactions involve financial or reputation-related consequences."
                }
            ],
            "Potential Impact": "Disputes over transactions lead to potential financial loss or reputational damage.",
            "MITRE ATT&CK Keywords": [
                "transaction dispute",
                "automation error",
                "log accuracy",
                "system bugs"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is exposed due to a vulnerability in the API interface.",
            "Assumptions": [
                {
                    "Assumption": "The API interface has a security vulnerability.",
                    "Role": "Social Media Platform",
                    "Condition": "When security reviews are not thorough."
                },
                {
                    "Assumption": "Attackers have knowledge of the API vulnerability.",
                    "Role": "Attackers",
                    "Condition": "When vulnerabilities are discovered but not yet patched."
                },
                {
                    "Assumption": "Sensitive data is accessible through the API.",
                    "Role": "Social Media Platform",
                    "Condition": "When API access controls are weak."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user data, compromising privacy and potential legal violations.",
            "MITRE ATT&CK Keywords": [
                "API vulnerability",
                "data exposure",
                "information leakage",
                "user privacy"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Malicious third-party applications access more data than authorized due to improper OAuth permissions.",
            "Assumptions": [
                {
                    "Assumption": "OAuth permissions are not properly restricted.",
                    "Role": "Social Media Platform",
                    "Condition": "When permissions are overly broad."
                },
                {
                    "Assumption": "Third-party applications can request excessive access.",
                    "Role": "Third-Party Applications",
                    "Condition": "When the platform does not enforce least privilege."
                },
                {
                    "Assumption": "Users do not review or understand the permission requests.",
                    "Role": "End Users",
                    "Condition": "When approving access without scrutiny."
                }
            ],
            "Potential Impact": "Unauthorized access to extensive user data by third-party applications.",
            "MITRE ATT&CK Keywords": [
                "OAuth",
                "third-party access",
                "data access",
                "excessive permissions"
            ],
            "mitre_technique": {
                "name": "Steal Application Access Token",
                "description": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019)  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.(Citation: Kubernetes Service Accounts)  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment.(Citation: Cider Security Top 10 CICD Security Risks) If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017) The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens(Citation: Auth0 Understanding Refresh Tokens), allowing them to obtain new access tokens without prompting the user.  \n\n",
                "id": "attack-pattern--890c9858-598c-401d-a4d5-c67ebcdd703a",
                "technique_id": "T1528"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Attackers gain access to sensitive data by exploiting unpatched vulnerabilities in the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Backend servers have unpatched vulnerabilities.",
                    "Role": "Social Media Platform",
                    "Condition": "When timely patch management is lacking."
                },
                {
                    "Assumption": "Attackers can exploit these vulnerabilities.",
                    "Role": "Attackers",
                    "Condition": "When they have the technical capability."
                },
                {
                    "Assumption": "Sensitive data is not encrypted.",
                    "Role": "Social Media Platform",
                    "Condition": "When data at rest and in transit is not encrypted."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user data, leading to breaches and potential misuse.",
            "MITRE ATT&CK Keywords": [
                "server vulnerability",
                "data breach",
                "encryption",
                "patch management"
            ],
            "mitre_technique": {
                "name": "Reduce Key Space",
                "description": "Adversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.(Citation: Cisco Synful Knock Evolution)\n\nAdversaries can weaken the encryption software on a compromised network device by reducing the key size used by the software to convert plaintext to ciphertext (e.g., from hundreds or thousands of bytes to just a couple of bytes). As a result, adversaries dramatically reduce the amount of effort needed to decrypt the protected information without the key.\n\nAdversaries may modify the key size used and other encryption parameters using specialized commands in a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) introduced to the system through [Modify System Image](https://attack.mitre.org/techniques/T1601) to change the configuration of the device. (Citation: Cisco Blog Legacy Device Attacks)",
                "id": "attack-pattern--3a40f208-a9c1-4efa-a598-4003c3681fb8",
                "technique_id": "T1600.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker performs a distributed denial of service (DDoS) attack, overwhelming the servers and making the platform inaccessible.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can mobilize a large number of compromised devices.",
                    "Role": "Attackers",
                    "Condition": "When operating a botnet."
                },
                {
                    "Assumption": "The platform's servers are vulnerable to high traffic volumes.",
                    "Role": "Social Media Platform",
                    "Condition": "When infrastructure is not scalable or resilient."
                },
                {
                    "Assumption": "There is insufficient DDoS protection in place.",
                    "Role": "Social Media Platform",
                    "Condition": "When advanced DDoS mitigation strategies are not implemented."
                }
            ],
            "Potential Impact": "Temporary disruption of service, affecting availability and user experience.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "service disruption",
                "availability",
                "botnet"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits resource-heavy functions through the API to exhaust server resources, leading to a slowdown or outage.",
            "Assumptions": [
                {
                    "Assumption": "API endpoints are not optimized or rate-limited.",
                    "Role": "Social Media Platform",
                    "Condition": "When server-side validation is insufficient."
                },
                {
                    "Assumption": "Attackers can identify and exploit these endpoints.",
                    "Role": "Attackers",
                    "Condition": "When they have knowledge of the API structure."
                },
                {
                    "Assumption": "Adequate monitoring and throttling mechanisms are not in place.",
                    "Role": "Social Media Platform",
                    "Condition": "When there is a lack of effective API management."
                }
            ],
            "Potential Impact": "Degradation of service performance and potential outages.",
            "MITRE ATT&CK Keywords": [
                "API abuse",
                "resource exhaustion",
                "service disruption",
                "rate limiting"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Attackers target third-party integrations to exploit dependencies and cause cascading failures across the platform.",
            "Assumptions": [
                {
                    "Assumption": "Third-party services are integrated without thorough security vetting.",
                    "Role": "Social Media Platform",
                    "Condition": "When integrating external services without rigorous assessment."
                },
                {
                    "Assumption": "Dependencies are critical to platform operations.",
                    "Role": "Social Media Platform",
                    "Condition": "When reliant on third-party uptime."
                },
                {
                    "Assumption": "There are no fallback mechanisms for critical dependencies.",
                    "Role": "Social Media Platform",
                    "Condition": "When redundancy and failover strategies are lacking."
                }
            ],
            "Potential Impact": "Service disruptions due to failures in third-party services, affecting platform availability.",
            "MITRE ATT&CK Keywords": [
                "third-party dependency",
                "service failure",
                "cascading effect",
                "availability"
            ],
            "mitre_technique": {
                "name": "Reflection Amplification",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target.(Citation: Cloudflare ReflectionDoS May 2017) This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.\n\nReflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS(Citation: Cloudflare DNSamplficationDoS) and NTP(Citation: Cloudflare NTPamplifciationDoS), though the use of several others in the wild have been documented.(Citation: Arbor AnnualDoSreport Jan 2018)  In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.(Citation: Cloudflare Memcrashed Feb 2018)",
                "id": "attack-pattern--36b2a1d7-e09e-49bf-b45e-477076c2ec01",
                "technique_id": "T1498.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the platform to gain administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "There are unpatched vulnerabilities in the platform software.",
                    "Role": "Social Media Platform",
                    "Condition": "When patch management is inadequate."
                },
                {
                    "Assumption": "Attackers have sufficient technical skills to exploit these vulnerabilities.",
                    "Role": "Attackers",
                    "Condition": "When possessing or obtaining exploit tools."
                },
                {
                    "Assumption": "Once administrative access is gained, attackers can escalate privileges.",
                    "Role": "Attackers",
                    "Condition": "When internal controls are weak."
                }
            ],
            "Potential Impact": "Unauthorized control over the entire platform, leading to potential data breaches and service manipulation.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "administrative access",
                "vulnerability exploitation",
                "platform control"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malicious actors exploit insecure direct object references (IDOR) to access data and functions beyond their permission level.",
            "Assumptions": [
                {
                    "Assumption": "Data and functions are accessible via predictable URLs or parameters.",
                    "Role": "Social Media Platform",
                    "Condition": "When design patterns fail to protect sensitive objects."
                },
                {
                    "Assumption": "Access controls are not enforced at the backend.",
                    "Role": "Social Media Platform",
                    "Condition": "When trust is placed on the client side for security."
                },
                {
                    "Assumption": "Attackers can manipulate IDs to gain unauthorized access.",
                    "Role": "Attackers",
                    "Condition": "When possessing knowledge of ID structure."
                }
            ],
            "Potential Impact": "Access to data and functions that should be restricted, leading to unauthorized actions and data leakage.",
            "MITRE ATT&CK Keywords": [
                "IDOR",
                "unauthorized access",
                "access control",
                "data leakage"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attackers use social engineering to trick administrators into granting them elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "Administrators can be targeted with social engineering tactics.",
                    "Role": "Attackers",
                    "Condition": "When identifying susceptible admin users."
                },
                {
                    "Assumption": "Training for recognizing social engineering is insufficient.",
                    "Role": "Social Media Platform",
                    "Condition": "When security awareness programs are weak."
                },
                {
                    "Assumption": "Attackers can convincingly impersonate trusted entities.",
                    "Role": "Attackers",
                    "Condition": "When adept at forging communications."
                }
            ],
            "Potential Impact": "Gaining elevated privileges through deception, leading to unauthorized actions and data breaches.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "privilege escalation",
                "impersonation",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "18",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake social media account that closely mimics a legitimate user's profile.",
            "Assumptions": [
                {
                    "Assumption": "Victim users do not thoroughly verify the authenticity of profiles before engaging with them.",
                    "Role": "Victims",
                    "Condition": "Ongoing trust in social media platforms."
                },
                {
                    "Assumption": "The platform's identity verification mechanisms are either weak or not used.",
                    "Role": "Social Media Platform",
                    "Condition": "Weakness in identity verification systems."
                },
                {
                    "Assumption": "Attackers have access to or can gather sufficient information to convincingly impersonate a user.",
                    "Role": "Attackers",
                    "Condition": "Access to personal information via various means."
                }
            ],
            "Potential Impact": "Unauthorized disclosure or misuse of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "impersonation",
                "phishing",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
                "technique_id": "T1586.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Malicious third-party applications use OAuth tokens to access and misuse users' social media accounts.",
            "Assumptions": [
                {
                    "Assumption": "OAuth tokens are stored insecurely or can be easily obtained.",
                    "Role": "Third-Party Apps",
                    "Condition": "Insecure token storage or transmission."
                },
                {
                    "Assumption": "The user approves permissions without fully understanding the risks.",
                    "Role": "Users",
                    "Condition": "Lack of user awareness or caution."
                },
                {
                    "Assumption": "Third-party integration does not enforce stringent validation checks.",
                    "Role": "Social Media Platform",
                    "Condition": "Insufficient validation of third-party apps."
                }
            ],
            "Potential Impact": "Unauthorized access and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "OAuth",
                "token theft",
                "API abuse",
                "third-party risk"
            ],
            "mitre_technique": {
                "name": "Steal Application Access Token",
                "description": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019)  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.(Citation: Kubernetes Service Accounts)  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment.(Citation: Cider Security Top 10 CICD Security Risks) If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017) The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens(Citation: Auth0 Understanding Refresh Tokens), allowing them to obtain new access tokens without prompting the user.  \n\n",
                "id": "attack-pattern--890c9858-598c-401d-a4d5-c67ebcdd703a",
                "technique_id": "T1528"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Phishing attacks where attackers send fake messages posing as legitimate users to acquire login credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users do not recognize phishing attempts and readily provide sensitive information.",
                    "Role": "Users",
                    "Condition": "Insufficient awareness or training."
                },
                {
                    "Assumption": "Email or message filters do not effectively block phishing attempts.",
                    "Role": "Social Media Platform",
                    "Condition": "Weakness in email/message filtering systems."
                },
                {
                    "Assumption": "Attackers can craft convincingly real-looking phishing messages.",
                    "Role": "Attackers",
                    "Condition": "Skill level and resources to create realistic messages."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts and personal data.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential theft",
                "impersonation",
                "email fraud"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
                "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
                "technique_id": "T1566.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains unauthorized access to backend servers and modifies user profile data.",
            "Assumptions": [
                {
                    "Assumption": "There is a vulnerability in the server or its management interface.",
                    "Role": "Backend Servers",
                    "Condition": "Presence of exploitable vulnerabilities."
                },
                {
                    "Assumption": "Attackers have sufficient skills and tools to exploit the vulnerability.",
                    "Role": "Attackers",
                    "Condition": "Advanced skillset and tools."
                },
                {
                    "Assumption": "Network or application defenses do not detect or thwart the intrusion.",
                    "Role": "Network and Admins",
                    "Condition": "Effective evasion of monitoring."
                }
            ],
            "Potential Impact": "Data integrity compromised, leading to misinformation or defamation.",
            "MITRE ATT&CK Keywords": [
                "server compromise",
                "data tampering",
                "backend hacking",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious insiders modify security and privacy settings to expose user data.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have privileged access to user data and settings.",
                    "Role": "Insiders",
                    "Condition": "Access rights and administrative privileges."
                },
                {
                    "Assumption": "There are inadequate monitoring mechanisms for insider activities.",
                    "Role": "Administrators",
                    "Condition": "Insufficient monitoring and oversight."
                },
                {
                    "Assumption": "The organization lacks a rapid incident response plan.",
                    "Role": "Security Team",
                    "Condition": "Lack of prepared response and mitigation measures."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of personal information and potential misuse.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "privilege abuse",
                "data manipulation",
                "privacy breach"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies data in transit between user devices and backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not fully encrypted or uses weak encryption.",
                    "Role": "Application and Network",
                    "Condition": "Use of inadequate encryption protocols."
                },
                {
                    "Assumption": "Attackers can position themselves in the communication path (e.g., via man-in-the-middle attack).",
                    "Role": "Attackers",
                    "Condition": "Capability to intercept traffic."
                },
                {
                    "Assumption": "Users or devices do not validate the authenticity of the server certificates.",
                    "Role": "Users/Devices",
                    "Condition": "Lack of proper certificate validation."
                }
            ],
            "Potential Impact": "Data integrity and confidentiality compromised.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "data interception",
                "encryption weakness",
                "traffic hijacking"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny having performed actions on their accounts (e.g., commenting or messaging), claiming their accounts were compromised.",
            "Assumptions": [
                {
                    "Assumption": "The application does not log sufficient information to verify the origin of actions.",
                    "Role": "Application Development",
                    "Condition": "Insufficient logging and audit trails."
                },
                {
                    "Assumption": "Users have unrecognized or misconfigured security settings.",
                    "Role": "Users",
                    "Condition": "Lack of understanding or improper configuration."
                },
                {
                    "Assumption": "Attackers use compromised credentials to perform actions.",
                    "Role": "Attackers",
                    "Condition": "Access to user credentials."
                }
            ],
            "Potential Impact": "Difficulty in accountability and potential abuse or confusion.",
            "MITRE ATT&CK Keywords": [
                "account impersonation",
                "action repudiation",
                "log forging",
                "misuse of credentials"
            ],
            "mitre_technique": {
                "name": "Temporary Elevated Cloud Access",
                "description": "Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own. \n\nJust-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted.(Citation: Azure Just in Time Access 2023)\n\nAccount impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with the `iam.serviceAccountTokenCreator` role can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts.(Citation: Google Cloud Service Account Authentication Roles)(Citation: Hunters Domain Wide Delegation Google Workspace 2023)(Citation: Google Cloud Just in Time Access 2023)(Citation: Palo Alto Unit 42 Google Workspace Domain Wide Delegation 2023) In Exchange Online, the `ApplicationImpersonation` role allows a service account to use the permissions associated with specified user accounts.(Citation: Microsoft Impersonation and EWS in Exchange) \n\nMany cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with the `PassRole` permission can allow a service they create to assume a given role, while in GCP, users with the `iam.serviceAccountUser` role can attach a service account to a resource.(Citation: AWS PassRole)(Citation: Google Cloud Service Account Authentication Roles)\n\nWhile users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended.(Citation: Rhino Google Cloud Privilege Escalation)(Citation: Rhino Security Labs AWS Privilege Escalation)\n\n**Note:** this technique is distinct from [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003), which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they control [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) that would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.(Citation: CrowdStrike StellarParticle January 2022)",
                "id": "attack-pattern--6fa224c7-5091-4595-bf15-3fc9fe2f2c7c",
                "technique_id": "T1548.005"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Administrators or users deny changes made to privacy settings after a data breach incident.",
            "Assumptions": [
                {
                    "Assumption": "Adequate logging of administrative and user actions is not implemented.",
                    "Role": "Administrators/Developers",
                    "Condition": "Logging deficiencies."
                },
                {
                    "Assumption": "Logging mechanisms, if present, can be tampered with or deleted.",
                    "Role": "Attackers",
                    "Condition": "Exploitations to alter or delete logs."
                },
                {
                    "Assumption": "System lacks detailed audit trails and monitoring.",
                    "Role": "Security Team",
                    "Condition": "Absence of comprehensive audit mechanisms."
                }
            ],
            "Potential Impact": "Challenges in accountability and forensic analysis post-incident.",
            "MITRE ATT&CK Keywords": [
                "settings tampering",
                "administrative changes",
                "audit bypass",
                "privacy breach"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users claim unauthorized transactions were performed on their account due to application vulnerabilities.",
            "Assumptions": [
                {
                    "Assumption": "Application has security vulnerabilities that can be exploited to perform unauthorized actions.",
                    "Role": "Application Developers",
                    "Condition": "Presence of exploitable vulnerabilities."
                },
                {
                    "Assumption": "Logs do not capture enough information to verify the authenticity of actions.",
                    "Role": "Application Development",
                    "Condition": "Inadequate logging practices."
                },
                {
                    "Assumption": "Fraud detection mechanisms are insufficient or bypassed.",
                    "Role": "Security Team",
                    "Condition": "Efficiency of fraud detection systems."
                }
            ],
            "Potential Impact": "Loss of trust and potential legal consequences.",
            "MITRE ATT&CK Keywords": [
                "unauthorized transactions",
                "vulnerability exploitation",
                "log manipulation",
                "account fraud"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is exposed due to improper access control settings.",
            "Assumptions": [
                {
                    "Assumption": "Weak or inadequate access control mechanisms are in place.",
                    "Role": "System Administrators",
                    "Condition": "Improper access control configurations."
                },
                {
                    "Assumption": "Sensitive data is not encrypted or protected sufficiently.",
                    "Role": "Application Development",
                    "Condition": "Lack of robust security measures."
                },
                {
                    "Assumption": "Attackers can easily bypass access controls.",
                    "Role": "Attackers",
                    "Condition": "Effective exploitation techniques."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive information.",
            "MITRE ATT&CK Keywords": [
                "access control bypass",
                "data exposure",
                "unauthorized access",
                "privacy breach"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "A data breach occurs where attackers gain access to backend servers and exfiltrate user data.",
            "Assumptions": [
                {
                    "Assumption": "There are exploitable vulnerabilities in the backend servers.",
                    "Role": "Backend Administrators",
                    "Condition": "Existence of vulnerabilities."
                },
                {
                    "Assumption": "Attackers have the capability and resources to exploit said vulnerabilities.",
                    "Role": "Attackers",
                    "Condition": "Advanced threat capabilities."
                },
                {
                    "Assumption": "Data is not properly encrypted or protected.",
                    "Role": "Application Development",
                    "Condition": "Weak data protection mechanisms."
                }
            ],
            "Potential Impact": "Major breach of confidentiality and potential legal ramifications.",
            "MITRE ATT&CK Keywords": [
                "backend breach",
                "data exfiltration",
                "server vulnerability",
                "encryption failure"
            ],
            "mitre_technique": {
                "name": "Traffic Duplication",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
                "technique_id": "T1020.001"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Third-party applications misuse permissions to access and disclose user data without consent.",
            "Assumptions": [
                {
                    "Assumption": "Users approve permissions without understanding risks.",
                    "Role": "Users",
                    "Condition": "Lack of user awareness."
                },
                {
                    "Assumption": "Third-party applications have broad access to user data.",
                    "Role": "Third-Party Apps",
                    "Condition": "Permissive access controls."
                },
                {
                    "Assumption": "Platform does not effectively monitor third-party data usage.",
                    "Role": "Platform Developers",
                    "Condition": "Inadequate monitoring."
                }
            ],
            "Potential Impact": "Unauthorized disclosure and potential misuse of user data.",
            "MITRE ATT&CK Keywords": [
                "third-party access",
                "data misuse",
                "permission abuse",
                "unauthorized disclosure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed Denial of Service (DDoS) attack targets the backend servers, overwhelming them with traffic and rendering the service unavailable.",
            "Assumptions": [
                {
                    "Assumption": "There are not enough protective measures in place to mitigate DDoS attacks.",
                    "Role": "Network Administrators",
                    "Condition": "Insufficient DDoS protection."
                },
                {
                    "Assumption": "Attackers have access to a large number of compromised devices to generate traffic.",
                    "Role": "Attackers",
                    "Condition": "Access to botnets or equivalent resources."
                },
                {
                    "Assumption": "The application does not have sufficient redundancy or failover mechanisms.",
                    "Role": "Application Designers",
                    "Condition": "Lack of redundancy."
                }
            ],
            "Potential Impact": "Service disruption, loss of availability, and user frustration.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "traffic flooding",
                "service disruption",
                "availability attack"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Resource exhaustion attack on the application by sending a large number of requests to specific endpoints.",
            "Assumptions": [
                {
                    "Assumption": "Endpoints are not designed to handle exceptionally high traffic.",
                    "Role": "Application Developers",
                    "Condition": "Lack of load testing and optimization."
                },
                {
                    "Assumption": "Attackers script automated requests to repeatedly target vulnerable endpoints.",
                    "Role": "Attackers",
                    "Condition": "Automation capabilities."
                },
                {
                    "Assumption": "There are no rate-limiting controls in place.",
                    "Role": "System Administrators",
                    "Condition": "Absence of rate-limiting policies."
                }
            ],
            "Potential Impact": "Degradation of performance and potential service outages.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "request flooding",
                "endpoint vulnerability",
                "performance degradation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A logic bomb planted by an insider triggers and disrupts the functionality of the social media application.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have the ability to insert malicious code into the application.",
                    "Role": "Insiders",
                    "Condition": "Access to application codebase."
                },
                {
                    "Assumption": "Code reviews and monitoring are insufficient to detect such implants.",
                    "Role": "Code Reviewers",
                    "Condition": "Limitations in review and monitoring processes."
                },
                {
                    "Assumption": "The application cannot detect or handle such logic bombs when triggered.",
                    "Role": "Application Developers",
                    "Condition": "Lack of detection and response mechanisms."
                }
            ],
            "Potential Impact": "Service disruption and potential harm to the application's integrity.",
            "MITRE ATT&CK Keywords": [
                "logic bomb",
                "insider threat",
                "code injection",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Dynamic-link Library Injection",
                "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945",
                "technique_id": "T1055.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attackers exploit a vulnerability to gain administrative privileges on the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "There exists a vulnerability in the backend systems.",
                    "Role": "Backend Administrators",
                    "Condition": "Presence of exploitable vulnerabilities."
                },
                {
                    "Assumption": "Attackers have knowledge of or can discover this vulnerability.",
                    "Role": "Attackers",
                    "Condition": "Access to vulnerability information."
                },
                {
                    "Assumption": "Existing privilege escalation protections are inadequate.",
                    "Role": "System Administrators",
                    "Condition": "Inefficiencies in privilege management."
                }
            ],
            "Potential Impact": "Unauthorized access to administrative functions and sensitive data.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "admin rights",
                "server vulnerability",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Users exploit weak session handling mechanisms to gain elevated privileges within the social media platform.",
            "Assumptions": [
                {
                    "Assumption": "Session tokens are not securely handled or validated.",
                    "Role": "Application Developers",
                    "Condition": "Weak session management."
                },
                {
                    "Assumption": "Attackers are able to predict or hijack existing sessions.",
                    "Role": "Attackers",
                    "Condition": "Knowledge of session handling weaknesses."
                },
                {
                    "Assumption": "The application does not have mechanisms to detect and prevent session abuse.",
                    "Role": "Security Team",
                    "Condition": "Lack of session monitoring."
                }
            ],
            "Potential Impact": "Unauthorized actions and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "session hijacking",
                "token prediction",
                "session management",
                "elevated privileges"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malware delivered via a third-party integration grants attackers elevated privileges within the social media application.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications are not thoroughly vetted for security.",
                    "Role": "Application Developers",
                    "Condition": "Insufficient security vetting processes."
                },
                {
                    "Assumption": "Users approve malicious third-party integrations.",
                    "Role": "Users",
                    "Condition": "Lack of understanding/awareness of risks."
                },
                {
                    "Assumption": "The application does not isolate third-party application spaces.",
                    "Role": "Application Developers",
                    "Condition": "Absence of application isolation mechanisms."
                }
            ],
            "Potential Impact": "Compromise of application security and user data.",
            "MITRE ATT&CK Keywords": [
                "third-party risk",
                "malware injection",
                "application isolation",
                "elevated privileges"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "17",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could create a fake login page that resembles the social media platform's legitimate login page to steal user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users are directed to the phishing site through malicious links.",
                    "Role": "End User",
                    "Condition": "Users click on the malicious link."
                },
                {
                    "Assumption": "The attacker can create a convincing replica of the social media platform's login page.",
                    "Role": "Attacker",
                    "Condition": "The attacker has basic web development skills."
                },
                {
                    "Assumption": "Users cannot distinguish between the legitimate login page and the phishing page.",
                    "Role": "End User",
                    "Condition": "Users are not aware of phishing techniques."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts, leading to data breach and potential misuse of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential harvesting",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker may hijack user sessions by stealing session tokens through a client-side script injection (XSS).",
            "Assumptions": [
                {
                    "Assumption": "The social media platform is vulnerable to XSS attacks.",
                    "Role": "Web Application",
                    "Condition": "Lack of proper input validation."
                },
                {
                    "Assumption": "Users interact with pages containing the malicious script.",
                    "Role": "End User",
                    "Condition": "Users visit compromised links or pages."
                },
                {
                    "Assumption": "Session tokens are not adequately protected.",
                    "Role": "Web Application",
                    "Condition": "Session tokens stored in accessible locations (e.g., cookies without HttpOnly flag)."
                }
            ],
            "Potential Impact": "Compromise of user accounts, leading to unauthorized actions on behalf of the users.",
            "MITRE ATT&CK Keywords": [
                "XSS",
                "session hijacking",
                "token compromise",
                "client-side attack"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker may use social engineering to impersonate a legitimate user and deceive other users to gain access to sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "Attackers have knowledge of the legitimate user's profile information.",
                    "Role": "Attacker",
                    "Condition": "Profile information is publicly accessible or obtained through other means."
                },
                {
                    "Assumption": "Other users are not able to verify the true identity of the impersonator.",
                    "Role": "End Users",
                    "Condition": "Users lack tools or awareness to verify user identities."
                },
                {
                    "Assumption": "The platform does not have robust identity verification mechanisms.",
                    "Role": "Web Application",
                    "Condition": "No multi-factor authentication or identity verification processes in place."
                }
            ],
            "Potential Impact": "Exposure of sensitive information and compromise of Trust in the platform.",
            "MITRE ATT&CK Keywords": [
                "impersonation",
                "social engineering",
                "identity theft"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
                "technique_id": "T1586.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to backend servers and alters user data, such as changing profile information or deleting content.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has network-level access to backend servers.",
                    "Role": "Attacker",
                    "Condition": "The network is compromised or poorly protected."
                },
                {
                    "Assumption": "Backend servers lack sufficient security controls and monitoring.",
                    "Role": "Web Application",
                    "Condition": "No robust access control or monitoring systems."
                },
                {
                    "Assumption": "The attacker has the necessary privileges or exploits a vulnerability to escalate privileges.",
                    "Role": "Attacker",
                    "Condition": "Misconfiguration or unpatched vulnerabilities in the server."
                }
            ],
            "Potential Impact": "Loss of data integrity and user's perceived trust in the platform.",
            "MITRE ATT&CK Keywords": [
                "data alteration",
                "backend hacking",
                "privilege escalation",
                "server-side attack"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the content of user communications in transit, such as altering the messages sent between users.",
            "Assumptions": [
                {
                    "Assumption": "Data in transit is not encrypted or is weakly encrypted.",
                    "Role": "Web Application",
                    "Condition": "Lack or inadequacy of encryption mechanisms."
                },
                {
                    "Assumption": "The attacker has access to the network traffic.",
                    "Role": "Attacker",
                    "Condition": "Man-in-the-middle setup or compromise of network devices."
                },
                {
                    "Assumption": "Users and the platform do not detect the tampering.",
                    "Role": "End Users and Web Application",
                    "Condition": "No verification mechanisms in place for message integrity."
                }
            ],
            "Potential Impact": "Compromise of communication integrity and potential misinformation.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "data tampering",
                "communication interception"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits vulnerabilities in third-party integrations to alter data shared between the social media platforms and these applications.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications have access to sensitive data.",
                    "Role": "Third-Party Applications",
                    "Condition": "Data sharing agreements allow access to sensitive data."
                },
                {
                    "Assumption": "The third-party application is compromised or contains vulnerabilities.",
                    "Role": "Attacker or Third-Party Application",
                    "Condition": "The application is unpatched or has security flaws."
                },
                {
                    "Assumption": "The social media platform trusts data from third-party applications without sufficient validation.",
                    "Role": "Web Application",
                    "Condition": "Lack of data validation and verification mechanisms."
                }
            ],
            "Potential Impact": "Data corruption or tampering, leading to potential misinformation and loss of integrity.",
            "MITRE ATT&CK Keywords": [
                "third-party integration",
                "data tampering",
                "API exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a message or posting a piece of content, claiming that their account was compromised.",
            "Assumptions": [
                {
                    "Assumption": "Adequate logging and audit trails are not in place.",
                    "Role": "Web Application",
                    "Condition": "Logs do not capture sufficient detail to prove user actions."
                },
                {
                    "Assumption": "There is a lack of strong authentication methods.",
                    "Role": "End User",
                    "Condition": "Only basic authentication methods are in use."
                },
                {
                    "Assumption": "Users are not educated on maintaining the security of their accounts.",
                    "Role": "End User",
                    "Condition": "Lack of user security training and awareness."
                }
            ],
            "Potential Impact": "Dispute over actions taken on the platform, affecting the trustworthiness of the system.",
            "MITRE ATT&CK Keywords": [
                "message repudiation",
                "user action denial",
                "logging failure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user uploads malicious content and later denies it, claiming that their account was compromised.",
            "Assumptions": [
                {
                    "Assumption": "There is inadequate logging of user actions.",
                    "Role": "Web Application",
                    "Condition": "Logs do not capture sufficient detail to prove user actions."
                },
                {
                    "Assumption": "The platform lacks proper content verification mechanisms.",
                    "Role": "Web Application",
                    "Condition": "No filtering or scanning for malicious content."
                },
                {
                    "Assumption": "Users are not held accountable for the security of their accounts.",
                    "Role": "End User",
                    "Condition": "Lack of user responsibility and security practices."
                }
            ],
            "Potential Impact": "Spread of malicious content and dispute over accountability.",
            "MITRE ATT&CK Keywords": [
                "content repudiation",
                "malicious upload",
                "accountability denial"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker performs actions impersonating a user and the user denies those actions were performed by them.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to valid user credentials.",
                    "Role": "Attacker",
                    "Condition": "Credentials are compromised or weak."
                },
                {
                    "Assumption": "There is no tracking or logging of IP addresses and devices used for actions.",
                    "Role": "Web Application",
                    "Condition": "Logs do not record sufficient information on user activities."
                },
                {
                    "Assumption": "Users are unaware of suspicious activities on their accounts.",
                    "Role": "End User",
                    "Condition": "Lack of notifications or alerts for unusual account activity."
                }
            ],
            "Potential Impact": "Inability to hold the correct party accountable and potential misuse of the platform.",
            "MITRE ATT&CK Keywords": [
                "action denial",
                "user impersonation",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Valid Accounts",
                "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
                "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
                "technique_id": "T1078"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is exposed due to a data breach on backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Backend servers store sensitive data.",
                    "Role": "Web Application",
                    "Condition": "User data is stored in backend databases."
                },
                {
                    "Assumption": "Security measures on the backend servers are inadequate.",
                    "Role": "Web Application",
                    "Condition": "No encryption or poor data protection practices."
                },
                {
                    "Assumption": "The attacker can bypass security controls to access the data.",
                    "Role": "Attacker",
                    "Condition": "Exploitation of vulnerabilities or misconfigurations."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user information, leading to privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "data breach",
                "backend server compromise",
                "personal information exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts data in transit between users and the social media platform, exposing sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "Data in transit is not encrypted.",
                    "Role": "Web Application",
                    "Condition": "No use of HTTPS or other encryption protocols."
                },
                {
                    "Assumption": "The attacker has access to the network traffic.",
                    "Role": "Attacker",
                    "Condition": "Man-in-the-middle setup or network compromise."
                },
                {
                    "Assumption": "Users are not aware that data transmission is insecure.",
                    "Role": "End User",
                    "Condition": "No user warnings or notifications about insecure connections."
                }
            ],
            "Potential Impact": "Disclosure of private communications and user data, leading to privacy violations.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "unencrypted transmission",
                "interception"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive data is shared with third-party applications without adequate consent or user awareness.",
            "Assumptions": [
                {
                    "Assumption": "User data is accessible by third-party applications.",
                    "Role": "Third-Party Applications",
                    "Condition": "Data sharing capabilities are enabled."
                },
                {
                    "Assumption": "Users are not fully aware of the data being shared.",
                    "Role": "End User",
                    "Condition": "Insufficient transparency or consent mechanisms."
                },
                {
                    "Assumption": "Third-party applications do not adequately protect the shared data.",
                    "Role": "Third-Party Applications",
                    "Condition": "Lax security measures or data handling practices."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of user information, leading to privacy risks.",
            "MITRE ATT&CK Keywords": [
                "third-party data sharing",
                "user consent",
                "data exposure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a Distributed Denial of Service (DDoS) attack, overwhelming the social media platform\u2019s servers.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can generate sufficient traffic to overwhelm the servers.",
                    "Role": "Attacker",
                    "Condition": "Access to botnets or other amplification methods."
                },
                {
                    "Assumption": "The platform lacks effective DDoS protection mechanisms.",
                    "Role": "Web Application",
                    "Condition": "No DDoS mitigation strategies in place."
                },
                {
                    "Assumption": "The attack targets critical infrastructure components.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of the critical infrastructure."
                }
            ],
            "Potential Impact": "Disruption of service availability and loss of access for legitimate users.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "service disruption",
                "server overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the platform's backend server software to crash the servers.",
            "Assumptions": [
                {
                    "Assumption": "There are unpatched vulnerabilities in the backend server software.",
                    "Role": "Web Application",
                    "Condition": "Software is outdated or poorly maintained."
                },
                {
                    "Assumption": "The attacker can trigger the vulnerability remotely.",
                    "Role": "Attacker",
                    "Condition": "Network accessibility to the server software."
                },
                {
                    "Assumption": "No effective monitoring or automated recovery processes are in place.",
                    "Role": "Web Application",
                    "Condition": "Lack of monitoring and rapid response mechanisms."
                }
            ],
            "Potential Impact": "Service downtime and potential data loss, affecting user access and trust.",
            "MITRE ATT&CK Keywords": [
                "software vulnerability",
                "server crash",
                "remote exploitation"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malicious third-party application repeatedly sends malformed requests to the platform\u2019s API, causing performance degradation.",
            "Assumptions": [
                {
                    "Assumption": "The platform has open APIs accessible by third-party applications.",
                    "Role": "Web Application",
                    "Condition": "APIs are publicly available."
                },
                {
                    "Assumption": "API rate limiting or input validation is not enforced.",
                    "Role": "Web Application",
                    "Condition": "Lack of or weak protective measures for APIs."
                },
                {
                    "Assumption": "The attacker can automate the process of sending malformed requests.",
                    "Role": "Attacker or Third-Party Application",
                    "Condition": "Access to automated scripts or tools."
                }
            ],
            "Potential Impact": "Service degradation and potential disruption of functionalities.",
            "MITRE ATT&CK Keywords": [
                "API abuse",
                "malformed requests",
                "service performance degradation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the backend server to gain higher-level access and control over the system.",
            "Assumptions": [
                {
                    "Assumption": "There are exploitable vulnerabilities in the backend server.",
                    "Role": "Web Application",
                    "Condition": "Existence of unpatched or unknown vulnerabilities."
                },
                {
                    "Assumption": "The attacker has a way to interact with the backend server.",
                    "Role": "Attacker",
                    "Condition": "Network access or ability to initiate requests to the server."
                },
                {
                    "Assumption": "Effective privilege separation and least privilege principles are not enforced.",
                    "Role": "Web Application",
                    "Condition": "Improper access control mechanisms."
                }
            ],
            "Potential Impact": "Complete control over the system, leading to potential data breaches, tampering, and service disruption.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "backend exploitation",
                "system control"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages social engineering to trick an administrator into providing elevated access credentials.",
            "Assumptions": [
                {
                    "Assumption": "Attackers have knowledge of the administrative staff.",
                    "Role": "Attacker",
                    "Condition": "Information obtained from public or private leaks."
                },
                {
                    "Assumption": "Administrative staff lacks training in security awareness.",
                    "Role": "Administrator",
                    "Condition": "No regular security awareness training."
                },
                {
                    "Assumption": "Elevated access credentials are not sufficiently protected.",
                    "Role": "Administrator",
                    "Condition": "Credentials stored improperly (e.g., in plaintext)."
                }
            ],
            "Potential Impact": "Unauthorized actions including data theft, tampering, and disruption of services.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "credential theft",
                "administrator impersonation"
            ],
            "mitre_technique": {
                "name": "Impersonation",
                "description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary\u2019s ultimate goals, possibly against multiple victims. \n \nIn many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables [Financial Theft](https://attack.mitre.org/techniques/T1657).\n\nAdversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as `payment`, `request`, or `urgent` to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary\u2019s goal.\u202f\u202f \n \nImpersonation is typically preceded by reconnaissance techniques such as [Gather Victim Identity Information](https://attack.mitre.org/techniques/T1589) and [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591) as well as acquiring infrastructure such as email domains (i.e. [Domains](https://attack.mitre.org/techniques/T1583/001)) to substantiate their false identity.(Citation: CrowdStrike-BEC)\n \nThere is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may [Compromise Accounts](https://attack.mitre.org/techniques/T1586) targeting one organization which can then be used to support impersonation against other entities.(Citation: VEC)",
                "id": "attack-pattern--c9e0c59e-162e-40a4-b8b1-78fab4329ada",
                "technique_id": "T1656"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses a compromised third-party application to exploit the social media platform and escalate privileges.",
            "Assumptions": [
                {
                    "Assumption": "The third-party application has higher-level access than necessary.",
                    "Role": "Third-Party Applications",
                    "Condition": "Improper access control and privilege assignment."
                },
                {
                    "Assumption": "Security measures for third-party integrations are inadequate.",
                    "Role": "Web Application",
                    "Condition": "Lack of thorough vetting and monitoring of third-party applications."
                },
                {
                    "Assumption": "The attacker has already compromised the third-party application.",
                    "Role": "Attacker",
                    "Condition": "The application is vulnerable or poorly secured."
                }
            ],
            "Potential Impact": "Elevated access can lead to extensive control over user data and the platform's functionality.",
            "MITRE ATT&CK Keywords": [
                "third-party compromise",
                "access escalation",
                "privilege misuse"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "19",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attacker creates a fake user profile to impersonate a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can create accounts without thorough identity verification.",
                    "Role": "Attacker",
                    "Condition": "Platform allows easy account creation."
                },
                {
                    "Assumption": "The legitimate user has a public profile.",
                    "Role": "Legitimate User",
                    "Condition": "User's privacy settings allow public visibility."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information, compromised identity and trust.",
            "MITRE ATT&CK Keywords": [
                "impersonation",
                "credential access",
                "user account"
            ],
            "mitre_technique": {
                "name": "Application Access Token",
                "description": "Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.\n",
                "id": "attack-pattern--27960489-4e7f-461d-a62a-f5c0cb521e4a",
                "technique_id": "T1527"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attacker uses phishing techniques to obtain user login credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users can be tricked into clicking malicious links.",
                    "Role": "User",
                    "Condition": "Users lack awareness or training."
                },
                {
                    "Assumption": "The attacker can create a convincing phishing page.",
                    "Role": "Attacker",
                    "Condition": "Attacker has necessary resources."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts, potential data breach.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential harvesting",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
                "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
                "technique_id": "T1566.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attacker spoofs IP addresses to bypass security controls.",
            "Assumptions": [
                {
                    "Assumption": "No multi-factor authentication is in place.",
                    "Role": "Platform Admin",
                    "Condition": "Platform only relies on IP addresses for security."
                },
                {
                    "Assumption": "The attacker has technical capability to spoof IP addresses.",
                    "Role": "Attacker",
                    "Condition": "Attacker has access to necessary tools and knowledge."
                }
            ],
            "Potential Impact": "Unauthorized access to system resources, potential data breach.",
            "MITRE ATT&CK Keywords": [
                "ip address spoofing",
                "network",
                "bypass security"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attacker intercepts and modifies user data during transmission.",
            "Assumptions": [
                {
                    "Assumption": "Data encryption during transmission is either absent or weak.",
                    "Role": "Platform Admin",
                    "Condition": "Platform does not implement strong encryption protocols."
                },
                {
                    "Assumption": "The attacker has access to the network path.",
                    "Role": "Attacker",
                    "Condition": "Attacker can perform man-in-the-middle attacks."
                }
            ],
            "Potential Impact": "Data integrity compromised, potential leak of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "network",
                "data manipulation"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attacker gains unauthorized access to backend servers and alters stored data.",
            "Assumptions": [
                {
                    "Assumption": "Backend server vulnerabilities exist.",
                    "Role": "Platform Admin",
                    "Condition": "Outdated software or misconfigurations are present."
                },
                {
                    "Assumption": "The attacker gains privileged access.",
                    "Role": "Attacker",
                    "Condition": "Attacker exploits vulnerabilities successfully."
                }
            ],
            "Potential Impact": "Data corruption, loss of data integrity.",
            "MITRE ATT&CK Keywords": [
                "unauthorized access",
                "backend server",
                "data corruption"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An insider modifies user profiles or system settings without authorization.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient internal controls and monitoring.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of proper access control mechanisms."
                },
                {
                    "Assumption": "The insider has sufficient access privileges.",
                    "Role": "Insider",
                    "Condition": "Employee has access to sensitive parts of the system."
                }
            ],
            "Potential Impact": "Data integrity compromised, unauthorized changes to system operations.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "data manipulation",
                "access control"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny performing specific actions on the platform.",
            "Assumptions": [
                {
                    "Assumption": "Actions are not properly logged.",
                    "Role": "Platform Admin",
                    "Condition": "Logging mechanisms are absent or inadequate."
                },
                {
                    "Assumption": "The platform lacks non-repudiation mechanisms.",
                    "Role": "Platform Admin",
                    "Condition": "Platform does not use techniques like digital signatures."
                }
            ],
            "Potential Impact": "Dispute over user actions, potential legal and reputational issues.",
            "MITRE ATT&CK Keywords": [
                "action denial",
                "logging",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Third-party application denies having accessed or modified user data.",
            "Assumptions": [
                {
                    "Assumption": "Inadequate monitoring of third-party integrations.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of audit trails or monitoring tools."
                },
                {
                    "Assumption": "Third-party applications have broad data access privileges.",
                    "Role": "Platform Admin",
                    "Condition": "Loose access control mechanisms."
                }
            ],
            "Potential Impact": "Loss of data integrity and accountability, difficulty in tracing actions.",
            "MITRE ATT&CK Keywords": [
                "third-party",
                "audit trail",
                "data access"
            ],
            "mitre_technique": {
                "name": "Compromise Infrastructure",
                "description": "Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, network devices, and third-party web and DNS services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle.(Citation: Mandiant APT1)(Citation: ICANNDomainNameHijacking)(Citation: Talos DNSpionage Nov 2018)(Citation: FireEye EPS Awakens Part 2) Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.\n\nUse of compromised infrastructure allows adversaries to stage, launch, and execute operations. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. For example, adversaries may leverage compromised infrastructure (potentially also in conjunction with [Digital Certificates](https://attack.mitre.org/techniques/T1588/004)) to further blend in and support staged information gathering and/or [Phishing](https://attack.mitre.org/techniques/T1566) campaigns.(Citation: FireEye DNS Hijack 2019) Additionally, adversaries may also compromise infrastructure to support [Proxy](https://attack.mitre.org/techniques/T1090) and/or proxyware services.(Citation: amnesty_nso_pegasus)(Citation: Sysdig Proxyjacking)\n\nBy using compromised infrastructure, adversaries may make it difficult to tie their actions back to them. Prior to targeting, adversaries may compromise the infrastructure of other adversaries.(Citation: NSA NCSC Turla OilRig)",
                "id": "attack-pattern--7e3beebd-8bfe-4e7b-a892-e44ab06a75f9",
                "technique_id": "T1584"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Disgruntled employees deny tampering with sensitive configurations.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient logging and monitoring of configuration changes.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of adequate auditing mechanisms."
                },
                {
                    "Assumption": "High-level employees have administrative access.",
                    "Role": "Insider",
                    "Condition": "Elevated access permissions."
                }
            ],
            "Potential Impact": "System integrity compromised, increased forensic and troubleshooting efforts.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "configuration change",
                "logging"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is accessed through insufficiently secured APIs.",
            "Assumptions": [
                {
                    "Assumption": "APIs lack proper authentication and authorization mechanisms.",
                    "Role": "Platform Admin",
                    "Condition": "APIs are publicly accessible without sufficient security."
                },
                {
                    "Assumption": "Sensitive data can be retrieved or manipulated via the API.",
                    "Role": "Attackers",
                    "Condition": "Attackers can exploit API endpoints."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user information.",
            "MITRE ATT&CK Keywords": [
                "api security",
                "data exposure",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Platforms fail to properly anonymize user data in public feeds.",
            "Assumptions": [
                {
                    "Assumption": "Public feeds contain identifiable information.",
                    "Role": "Platform Admin",
                    "Condition": "Proper data anonymization techniques not implemented."
                },
                {
                    "Assumption": "User data is accessible without adequate privacy controls.",
                    "Role": "Users",
                    "Condition": "Users\u2019 data can be accessed by anyone."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of personally identifiable information (PII).",
            "MITRE ATT&CK Keywords": [
                "pii exposure",
                "data anonymization",
                "public feed"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Third-party integrations expose sensitive user data to unauthorized entities.",
            "Assumptions": [
                {
                    "Assumption": "Third-party integrations are not thoroughly vetted.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of proper security checks and audits."
                },
                {
                    "Assumption": "Sensitive data is shared with third parties.",
                    "Role": "Platform Admin",
                    "Condition": "Data sharing is necessary for integration functionality."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user data.",
            "MITRE ATT&CK Keywords": [
                "third-party",
                "data sharing",
                "data exposure"
            ],
            "mitre_technique": {
                "name": "Network Trust Dependencies",
                "description": "Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation: Pentesting AD Forests) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).",
                "id": "attack-pattern--36aa137f-5166-41f8-b2f0-a4cfa1b4133e",
                "technique_id": "T1590.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Attacker floods the backend servers with traffic, causing the platform to become unavailable.",
            "Assumptions": [
                {
                    "Assumption": "Systems are not adequately protected against DDoS attacks.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of robust DDoS protection mechanisms."
                },
                {
                    "Assumption": "The attacker has the capability to generate high traffic volumes.",
                    "Role": "Attacker",
                    "Condition": "Access to sufficient botnets or malicious tools."
                }
            ],
            "Potential Impact": "Disruption of service availability for legitimate users.",
            "MITRE ATT&CK Keywords": [
                "ddos",
                "traffic flooding",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Insider launches resource-intensive processes to degrade system performance.",
            "Assumptions": [
                {
                    "Assumption": "Resource utilization is not adequately monitored.",
                    "Role": "Platform Admin",
                    "Condition": "Lack of resource monitoring and alerting tools."
                },
                {
                    "Assumption": "The insider has access to initiate resource-intensive tasks.",
                    "Role": "Insider",
                    "Condition": "Administrative or privileged access."
                }
            ],
            "Potential Impact": "Degradation of system performance, potential downtime.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "insider threat",
                "performance degradation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploiting vulnerabilities in third-party integrations to disable linked functionalities.",
            "Assumptions": [
                {
                    "Assumption": "Third-party integrations have known vulnerabilities.",
                    "Role": "Platform Admin",
                    "Condition": "Third-party tools not regularly patched or updated."
                },
                {
                    "Assumption": "The attacker can exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Knowledge and tools to exploit the third-party vulnerabilities."
                }
            ],
            "Potential Impact": "Disruption of essential functionalities and services.",
            "MITRE ATT&CK Keywords": [
                "third-party",
                "vulnerability exploitation",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Reflection Amplification",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target.(Citation: Cloudflare ReflectionDoS May 2017) This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.\n\nReflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS(Citation: Cloudflare DNSamplficationDoS) and NTP(Citation: Cloudflare NTPamplifciationDoS), though the use of several others in the wild have been documented.(Citation: Arbor AnnualDoSreport Jan 2018)  In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.(Citation: Cloudflare Memcrashed Feb 2018)",
                "id": "attack-pattern--36b2a1d7-e09e-49bf-b45e-477076c2ec01",
                "technique_id": "T1498.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attacker exploits a vulnerability to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "The system has unpatched vulnerabilities.",
                    "Role": "Platform Admin",
                    "Condition": "Regular updates and patches are not implemented."
                },
                {
                    "Assumption": "The attacker has access to exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Technical expertise and necessary tools."
                }
            ],
            "Potential Impact": "Unauthorized administrative access, potential for further attacks and data breaches.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "exploitation",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Insider uses existing access to elevate privileges and perform unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "Access controls are insufficient.",
                    "Role": "Platform Admin",
                    "Condition": "Weak or misconfigured permissions."
                },
                {
                    "Assumption": "The insider has operational knowledge and access",
                    "Role": "Insider",
                    "Condition": "Already employed in a role with system access."
                }
            ],
            "Potential Impact": "Unauthorized changes to system settings and data, potential insider threat escalations.",
            "MITRE ATT&CK Keywords": [
                "access control",
                "privilege escalation",
                "insider threat"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attacker gains access through third-party application vulnerabilities to gain elevated permissions.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications are not thoroughly secured.",
                    "Role": "Platform Admin",
                    "Condition": "Insufficient security checks for third-party integrations."
                },
                {
                    "Assumption": "The attacker can exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Technical expertise and necessary tools."
                }
            ],
            "Potential Impact": "Unauthorized privilege elevation, extended access to system resources.",
            "MITRE ATT&CK Keywords": [
                "third-party",
                "vulnerability exploitation",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Virtual Private Server",
                "description": "Adversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.(Citation: NSA NCSC Turla OilRig)\n\nCompromising a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers as well as that added by the compromised third-party.",
                "id": "attack-pattern--39cc9f64-cf74-4a48-a4d8-fe98c54a02e0",
                "technique_id": "T1584.003"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "20",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake profile imitating a high-profile individual to deceive other users.",
            "Assumptions": [
                {
                    "Assumption": "The attacker can create a legitimate-looking profile.",
                    "Role": "Attacker",
                    "Condition": "The registration and verification processes allow such profiles."
                },
                {
                    "Assumption": "Users do not thoroughly verify the authenticity of profiles.",
                    "Role": "Users",
                    "Condition": "Users tend to trust well-crafted profiles without question."
                },
                {
                    "Assumption": "Social media networks do not have strict automated or manual verification processes.",
                    "Role": "Platform Security Team",
                    "Condition": "Verification processes are either weak or non-existent."
                }
            ],
            "Potential Impact": "Compromised user trust and potential disclosure of sensitive information.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "social engineering",
                "identity fraud"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage)\n\nFor operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. \n\nOnce a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--b1ccd744-3f78-4a0e-9bb2-2002057f7928",
                "technique_id": "T1585.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains unauthorized access to user accounts by exploiting weak authentication mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "The platform uses weak or no multi-factor authentication.",
                    "Role": "Platform",
                    "Condition": "Authentication mechanisms are not robust."
                },
                {
                    "Assumption": "Users use easily guessable passwords.",
                    "Role": "Users",
                    "Condition": "Poor password hygiene is common among users."
                },
                {
                    "Assumption": "There is a lack of monitoring for unusual login activities.",
                    "Role": "Platform Security Team",
                    "Condition": "Lack of anomaly detection in login attempts."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts, leading to data breaches.",
            "MITRE ATT&CK Keywords": [
                "credential access",
                "brute force",
                "password spraying"
            ],
            "mitre_technique": {
                "name": "Password Spraying",
                "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. (Citation: BlackHillsInfosec Password Spraying)\n\nTypically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--692074ae-bb62-4a5e-a735-02cb6bde458c",
                "technique_id": "T1110.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses phishing emails to trick users into providing their login credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users click on links in emails without verifying their legitimacy.",
                    "Role": "Users",
                    "Condition": "Lack of user awareness about phishing attacks."
                },
                {
                    "Assumption": "The email systems do not filter out phishing emails effectively.",
                    "Role": "Platform/Email Provider",
                    "Condition": "Weak email filtering mechanisms."
                },
                {
                    "Assumption": "The platform does not implement proactive user education programs.",
                    "Role": "Platform",
                    "Condition": "Lack of user training and awareness initiatives."
                }
            ],
            "Potential Impact": "Unauthorized account access and potential data leaks.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "social engineering",
                "credential access"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "A malicious actor modifies user posts or privacy settings in the backend database.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the backend database.",
                    "Role": "Attacker",
                    "Condition": "Lack of sufficient database access controls."
                },
                {
                    "Assumption": "There are no integrity checks for critical data.",
                    "Role": "Platform Security Team",
                    "Condition": "Insufficient data integrity mechanisms."
                },
                {
                    "Assumption": "Database and application logs are not monitored regularly.",
                    "Role": "Platform Security Team",
                    "Condition": "Lack of effective log monitoring practices."
                }
            ],
            "Potential Impact": "Corruption of user data and misuse of personal information.",
            "MITRE ATT&CK Keywords": [
                "data manipulation",
                "database tampering",
                "backend compromise"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and alters network traffic between user devices and the backend server.",
            "Assumptions": [
                {
                    "Assumption": "Network traffic is not encrypted.",
                    "Role": "Platform/Network",
                    "Condition": "Absence of SSL/TLS encryption."
                },
                {
                    "Assumption": "The attacker has access to the same network as the victim.",
                    "Role": "Attacker",
                    "Condition": "Attacker is on the same local network or can perform MitM attacks."
                },
                {
                    "Assumption": "There are no measures to detect and prevent traffic anomalies.",
                    "Role": "Platform Security Team",
                    "Condition": "Lack of network monitoring and intrusion detection."
                }
            ],
            "Potential Impact": "Unauthorized modification of data in transit and potential privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "network tampering",
                "traffic interception"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a vulnerability in the third-party integration to inject malicious code.",
            "Assumptions": [
                {
                    "Assumption": "The third-party service has known vulnerabilities.",
                    "Role": "Third-Party Providers",
                    "Condition": "Unpatched vulnerabilities in integrated services."
                },
                {
                    "Assumption": "The platform does not sanitize inputs from third-party integrations.",
                    "Role": "Platform",
                    "Condition": "Insufficient input validation and sanitization."
                },
                {
                    "Assumption": "There is no process to audit third-party integrations for security.",
                    "Role": "Platform Security Team",
                    "Condition": "Lack of security reviews for third-party tools."
                }
            ],
            "Potential Impact": "Execution of malicious code leading to data corruption or unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "code injection",
                "third-party compromise",
                "input validation"
            ],
            "mitre_technique": {
                "name": "Dynamic-link Library Injection",
                "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945",
                "technique_id": "T1055.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies posting defamatory content via their account.",
            "Assumptions": [
                {
                    "Assumption": "There are no reliable logging mechanisms for user actions.",
                    "Role": "Platform",
                    "Condition": "Lack of detailed activity logs."
                },
                {
                    "Assumption": "Logs can be altered by unauthorized parties.",
                    "Role": "Attacker/Insider",
                    "Condition": "Weak log integrity protections."
                },
                {
                    "Assumption": "No multi-factor authentication to verify the user's identity.",
                    "Role": "Platform",
                    "Condition": "Single-factor authentication is used."
                }
            ],
            "Potential Impact": "Inability to hold users accountable for their actions, damaging the platform's credibility.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "activity repudiation",
                "integrity loss"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes logs to obscure their unauthorized actions within the system.",
            "Assumptions": [
                {
                    "Assumption": "Logs are stored in an accessible and unmonitored location.",
                    "Role": "Platform Security Team",
                    "Condition": "Insecure log storage."
                },
                {
                    "Assumption": "The system does not employ tamper-evident logging.",
                    "Role": "Platform",
                    "Condition": "Logs can be deleted without detection."
                },
                {
                    "Assumption": "There are no redundant logging mechanisms or backups.",
                    "Role": "Platform",
                    "Condition": "Lack of log redundancy and backups."
                }
            ],
            "Potential Impact": "Loss of critical forensic data, complicating incident response and investigations.",
            "MITRE ATT&CK Keywords": [
                "log deletion",
                "forensic obfuscation",
                "evidence destruction"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user claims they did not consent to certain data-sharing actions performed by the platform.",
            "Assumptions": [
                {
                    "Assumption": "Consent records are not appropriately logged or maintained.",
                    "Role": "Platform",
                    "Condition": "Inadequate consent tracking mechanisms."
                },
                {
                    "Assumption": "There are inconsistencies in the application of privacy policies.",
                    "Role": "Platform",
                    "Condition": "Privacy controls are not uniformly enforced."
                },
                {
                    "Assumption": "There is no user interface for reviewing and managing consent history.",
                    "Role": "Platform",
                    "Condition": "Lack of transparent consent management tools."
                }
            ],
            "Potential Impact": "Legal repercussions and loss of user trust.",
            "MITRE ATT&CK Keywords": [
                "consent repudiation",
                "privacy policy breach",
                "compliance violation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is exposed due to an insecure API endpoint.",
            "Assumptions": [
                {
                    "Assumption": "APIs do not enforce proper authentication and authorization.",
                    "Role": "Platform",
                    "Condition": "Weak API security controls."
                },
                {
                    "Assumption": "APIs return excessive data without filtering.",
                    "Role": "Platform",
                    "Condition": "Improper data handling in API responses."
                },
                {
                    "Assumption": "There is no monitoring for unusual API activity.",
                    "Role": "Platform Security Team",
                    "Condition": "Lack of API activity monitoring and alerts."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive information and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "insecure API",
                "data leakage",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Data breach due to misconfigured cloud storage exposing user information.",
            "Assumptions": [
                {
                    "Assumption": "Cloud storage buckets are publicly accessible.",
                    "Role": "Platform/IT Team",
                    "Condition": "Misconfigured access controls for cloud storage."
                },
                {
                    "Assumption": "There is no regular audit of cloud storage permissions.",
                    "Role": "Platform Security Team",
                    "Condition": "Lack of periodic security audits."
                },
                {
                    "Assumption": "Users' sensitive information is not encrypted at rest.",
                    "Role": "Platform",
                    "Condition": "Plaintext data storage."
                }
            ],
            "Potential Impact": "Massive data leakage affecting a large number of users.",
            "MITRE ATT&CK Keywords": [
                "cloud misconfiguration",
                "data exposure",
                "unauthorized disclosure"
            ],
            "mitre_technique": {
                "name": "Weaken Encryption",
                "description": "Adversaries may compromise a network device\u2019s encryption capability in order to bypass encryption that would otherwise protect data communications. (Citation: Cisco Synful Knock Evolution)\n\nEncryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.\n\nAdversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as [Modify System Image](https://attack.mitre.org/techniques/T1601), [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001), and [Disable Crypto Hardware](https://attack.mitre.org/techniques/T1600/002), an adversary can negatively effect and/or eliminate a device\u2019s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. (Citation: Cisco Blog Legacy Device Attacks)",
                "id": "attack-pattern--1f9012ef-1e10-4e48-915e-e03563435fe8",
                "technique_id": "T1600"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains access to user communications by sniffing network traffic.",
            "Assumptions": [
                {
                    "Assumption": "The platform does not enforce end-to-end encryption for communications.",
                    "Role": "Platform",
                    "Condition": "Lack of encryption in message transmission."
                },
                {
                    "Assumption": "The attacker can access the same network as the victim.",
                    "Role": "Attacker",
                    "Condition": "Shared network access."
                },
                {
                    "Assumption": "There is no monitoring for unusual network activity.",
                    "Role": "Platform Security Team",
                    "Condition": "Lack of network traffic monitoring."
                }
            ],
            "Potential Impact": "Unauthorized access to private conversations and potential blackmail or misuse.",
            "MITRE ATT&CK Keywords": [
                "network sniffing",
                "eavesdropping",
                "communication interception"
            ],
            "mitre_technique": {
                "name": "Network Sniffing",
                "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)",
                "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
                "technique_id": "T1040"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A Distributed Denial of Service (DDoS) attack overwhelms the platform's servers.",
            "Assumptions": [
                {
                    "Assumption": "The platform servers are not adequately protected against DDoS.",
                    "Role": "Platform/IT Team",
                    "Condition": "Lack of DDoS mitigation solutions."
                },
                {
                    "Assumption": "There is a high reliance on a limited number of servers.",
                    "Role": "Platform",
                    "Condition": "Insufficient server redundancy."
                },
                {
                    "Assumption": "Network bandwidth is not sufficient to handle large volumes of traffic.",
                    "Role": "Platform/Network Provider",
                    "Condition": "Limited network capacity."
                }
            ],
            "Potential Impact": "Service disruption affecting user access and functionality.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "service disruption",
                "overload attack"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the platform with fake accounts, overwhelming system resources.",
            "Assumptions": [
                {
                    "Assumption": "There are no rate-limiting mechanisms on account creation.",
                    "Role": "Platform",
                    "Condition": "Lack of anti-spam measures."
                },
                {
                    "Assumption": "Automated bots can bypass CAPTCHA and other verification mechanisms.",
                    "Role": "Attacker",
                    "Condition": "Weak CAPTCHA challenges."
                },
                {
                    "Assumption": "The platform cannot effectively distinguish and block fake accounts.",
                    "Role": "Platform Security Team",
                    "Condition": "Inadequate detection of fake accounts."
                }
            ],
            "Potential Impact": "Degradation of service quality and availability.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "fake accounts",
                "spam"
            ],
            "mitre_technique": {
                "name": "Email Accounts",
                "description": "Adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or large-scale spam email campaigns. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship with, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: [Domains](https://attack.mitre.org/techniques/T1583/001)).\n\nA variety of methods exist for compromising email accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials.(Citation: AnonHBGary)(Citation: Microsoft DEV-0537) Prior to compromising email accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. Adversaries may target compromising well-known email accounts or domains from which malicious spam or [Phishing](https://attack.mitre.org/techniques/T1566) emails may evade reputation-based email filtering rules.\n\nAdversaries can use a compromised email account to hijack existing email threads with targets of interest.",
                "id": "attack-pattern--3dc8c101-d4db-4f4d-8150-1b5a76ca5f1b",
                "technique_id": "T1586.002"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A vulnerability in the third-party integration leads to excessive resource consumption.",
            "Assumptions": [
                {
                    "Assumption": "The third-party service has a resource exhaustion vulnerability.",
                    "Role": "Third-Party Providers",
                    "Condition": "Unpatched vulnerability in third-party applications."
                },
                {
                    "Assumption": "The third-party service is critical to the platform's operations.",
                    "Role": "Platform",
                    "Condition": "High dependency on third-party integrations."
                },
                {
                    "Assumption": "There are no fallback mechanisms in case of third-party failures.",
                    "Role": "Platform/IT Team",
                    "Condition": "Lack of redundancy and fallback plans."
                }
            ],
            "Potential Impact": "Service downtime and possible data loss.",
            "MITRE ATT&CK Keywords": [
                "resource depletion",
                "third-party vulnerability",
                "integration failure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a software vulnerability to gain admin-level access.",
            "Assumptions": [
                {
                    "Assumption": "The platform has known software vulnerabilities.",
                    "Role": "Platform/Developers",
                    "Condition": "Unpatched software vulnerabilities."
                },
                {
                    "Assumption": "The attacker can execute remote code or escalate privileges locally.",
                    "Role": "Attacker",
                    "Condition": "Exploitation of the vulnerability allows privilege escalation."
                },
                {
                    "Assumption": "There is insufficient monitoring for unusual administrative activity.",
                    "Role": "Platform Security Team",
                    "Condition": "Lack of security event monitoring."
                }
            ],
            "Potential Impact": "Complete system takeover and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability exploitation",
                "admin access"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An insider with legitimate access misuses their privileges to perform unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have privileged access without sufficient checks.",
                    "Role": "Platform",
                    "Condition": "Lack of access controls and monitoring for insiders."
                },
                {
                    "Assumption": "There are no effective audit mechanisms for admin actions.",
                    "Role": "Platform Security Team",
                    "Condition": "Insufficient logging and auditing of admin activities."
                },
                {
                    "Assumption": "Insider threat detection mechanisms are not in place.",
                    "Role": "Platform Security Team",
                    "Condition": "Lack of insider threat monitoring."
                }
            ],
            "Potential Impact": "Unauthorized changes to the system and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "misuse of privileges",
                "unauthorized actions"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages weak permissions to perform actions without proper authorization.",
            "Assumptions": [
                {
                    "Assumption": "Permissions are not enforced correctly across the platform.",
                    "Role": "Platform/IT Team",
                    "Condition": "Weak or misconfigured permission settings."
                },
                {
                    "Assumption": "Users can discover and exploit permission flaws.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of the platform's permission structure."
                },
                {
                    "Assumption": "There is no regular audit of permission settings.",
                    "Role": "Platform Security Team",
                    "Condition": "Lack of periodic reviews and audits."
                }
            ],
            "Potential Impact": "Unauthorized actions and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "weak permissions",
                "access control",
                "authorization bypass"
            ],
            "mitre_technique": {
                "name": "Services Registry Permissions Weakness",
                "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service\u2019s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service)",
                "id": "attack-pattern--17cc750b-e95b-4d7d-9dde-49e0de24148c",
                "technique_id": "T1574.011"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "22",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates fake profiles to impersonate legitimate users on the platform.",
            "Assumptions": [
                {
                    "Assumption": "User profiles may not have strong verification mechanisms.",
                    "Role": "Platform Developer",
                    "Condition": "Verification processes are weak or absent."
                },
                {
                    "Assumption": "Attackers have access to stolen personal information to make fake profiles more convincing.",
                    "Role": "Attacker",
                    "Condition": "Personal data leaks or breaches have occurred."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive information due to trust in fake identities.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "user profiles",
                "social engineering",
                "phishing"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
                "technique_id": "T1586.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Man-in-the-Middle (MitM) attack where the attacker intercepts communication between users and backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not adequately encrypted.",
                    "Role": "Network Administrator",
                    "Condition": "Use of weak or no encryption methods."
                },
                {
                    "Assumption": "Attacker has control over the network path between the user and the server.",
                    "Role": "Attacker",
                    "Condition": "Network access control is not strict."
                }
            ],
            "Potential Impact": "Unauthorized disclosure and potential modification of sensitive user data.",
            "MITRE ATT&CK Keywords": [
                "mitm",
                "network",
                "injection",
                "communication"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses phishing emails to trick users into revealing their login credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users may not be trained to recognize phishing attempts.",
                    "Role": "End User",
                    "Condition": "Lack of adequate security training."
                },
                {
                    "Assumption": "Email systems do not have robust phishing detection mechanisms.",
                    "Role": "Email Systems Administrator",
                    "Condition": "No advanced email filtering in place."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts leading to data breach.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "social engineering",
                "email",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a vulnerability to modify data in backend servers.",
            "Assumptions": [
                {
                    "Assumption": "The backend server has unpatched vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Delayed or absent security updates."
                },
                {
                    "Assumption": "Attackers can reach the vulnerable backend services.",
                    "Role": "Attacker",
                    "Condition": "Server not adequately isolated or protected by firewalls."
                }
            ],
            "Potential Impact": "Integrity of user data is compromised, leading to loss of user trust.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "backend servers",
                "exploitation",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Insider threat where a disgruntled employee deliberately alters account balances or transaction records.",
            "Assumptions": [
                {
                    "Assumption": "Employee has high-level access to the backend systems.",
                    "Role": "Insider",
                    "Condition": "Insufficient access control measures."
                },
                {
                    "Assumption": "There is a lack of monitoring and auditing for critical operations.",
                    "Role": "Security Officer",
                    "Condition": "Limited or absent logging and alerting systems."
                }
            ],
            "Potential Impact": "Loss of data integrity and potential financial loss.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "tampering",
                "data modification",
                "backend"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker injects malicious code into user-generated content (e.g., posts or comments).",
            "Assumptions": [
                {
                    "Assumption": "Content filtering and validation are not stringent.",
                    "Role": "Application Developer",
                    "Condition": "Inadequate input validation mechanisms."
                },
                {
                    "Assumption": "Attackers can post content without constraints.",
                    "Role": "Attacker",
                    "Condition": "No or weak content moderation."
                }
            ],
            "Potential Impact": "Data corruption and potential compromise of other users' accounts.",
            "MITRE ATT&CK Keywords": [
                "content injection",
                "tampering",
                "cross-site scripting",
                "data integrity"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny actions such as sending messages or posting content.",
            "Assumptions": [
                {
                    "Assumption": "Lack of logging and audit trails for user actions.",
                    "Role": "System Administrator",
                    "Condition": "No comprehensive logging system in place."
                },
                {
                    "Assumption": "Users can access accounts without proper identity verification.",
                    "Role": "Application User",
                    "Condition": "Weak or no authentication mechanisms."
                }
            ],
            "Potential Impact": "Disputes regarding actions lead to trust issues and potential legal consequences.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "logging",
                "user actions",
                "disputes"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "The system does not record unsuccessful login attempts, allowing attackers to deny brute force attack attempts.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms are not configured to capture all authentication attempts.",
                    "Role": "System Administrator",
                    "Condition": "Limited scope of logging configurations."
                },
                {
                    "Assumption": "System does not enforce rate limiting on login attempts.",
                    "Role": "Application Developer",
                    "Condition": "Lack of rate limiting or CAPTCHA mechanisms."
                }
            ],
            "Potential Impact": "Difficulty in detecting and responding to brute force attacks.",
            "MITRE ATT&CK Keywords": [
                "brute force",
                "repudiation",
                "authentication",
                "logging"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users claim they did not approve third-party application access to their data.",
            "Assumptions": [
                {
                    "Assumption": "Access consent logs are not maintained or are incomplete.",
                    "Role": "Application Developer",
                    "Condition": "No systematic logging of user consents."
                },
                {
                    "Assumption": "Application access requests are not clearly communicated to users.",
                    "Role": "Application User",
                    "Condition": "Poor communication of access requests."
                }
            ],
            "Potential Impact": "Legal disputes and potential loss of user trust.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "third-party access",
                "consent",
                "logging"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\").(Citation: CISA IDN ST05-016) URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s.(Citation: Trend Micro Pawn Storm OAuth 2017) These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. (Citation: Microsoft OAuth 2.0 Consent Phishing 2021)\n\nAdversaries may also utilize spearphishing links to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .(Citation: Trend Micro Pawn Storm OAuth 2017)(Citation: Microsoft OAuth 2.0 Consent Phishing 2021)\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.(Citation: SecureWorks Device Code Phishing 2021)(Citation: Netskope Device Code Phishing 2021)(Citation: Optiv Device Code Phishing 2021)",
                "id": "attack-pattern--2b742742-28c3-4e1b-bab7-8350d6300fa7",
                "technique_id": "T1566.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is leaked due to an unpatched vulnerability in backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Backend servers have known vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Delayed application of security patches."
                },
                {
                    "Assumption": "Attackers have gained knowledge of these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Public disclosure of security vulnerabilities."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user information.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "unpatched vulnerability",
                "backend servers",
                "data leak"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted data transmitted between users and servers.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted without encryption.",
                    "Role": "Network Administrator",
                    "Condition": "Use of insecure transmission protocols."
                },
                {
                    "Assumption": "Attackers control intermediary nodes or perform MitM attacks.",
                    "Role": "Attacker",
                    "Condition": "Access to network infrastructure."
                }
            ],
            "Potential Impact": "Sensitive data becomes accessible to unauthorized entities.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "unencrypted transmission",
                "network",
                "mitm"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Third-party applications mishandle or further expose user data.",
            "Assumptions": [
                {
                    "Assumption": "Weak data handling practices by third-party integrations.",
                    "Role": "Third-Party Application Developer",
                    "Condition": "Lack of stringent data handling policies."
                },
                {
                    "Assumption": "User data is shared without extensive review or audit.",
                    "Role": "Application Developer",
                    "Condition": "Insufficient vetting of third-party applications."
                }
            ],
            "Potential Impact": "Exposure of user data to unintended parties or misuse.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "third-party",
                "integration",
                "data mishandling"
            ],
            "mitre_technique": {
                "name": "Compromise Infrastructure",
                "description": "Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, network devices, and third-party web and DNS services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle.(Citation: Mandiant APT1)(Citation: ICANNDomainNameHijacking)(Citation: Talos DNSpionage Nov 2018)(Citation: FireEye EPS Awakens Part 2) Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.\n\nUse of compromised infrastructure allows adversaries to stage, launch, and execute operations. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. For example, adversaries may leverage compromised infrastructure (potentially also in conjunction with [Digital Certificates](https://attack.mitre.org/techniques/T1588/004)) to further blend in and support staged information gathering and/or [Phishing](https://attack.mitre.org/techniques/T1566) campaigns.(Citation: FireEye DNS Hijack 2019) Additionally, adversaries may also compromise infrastructure to support [Proxy](https://attack.mitre.org/techniques/T1090) and/or proxyware services.(Citation: amnesty_nso_pegasus)(Citation: Sysdig Proxyjacking)\n\nBy using compromised infrastructure, adversaries may make it difficult to tie their actions back to them. Prior to targeting, adversaries may compromise the infrastructure of other adversaries.(Citation: NSA NCSC Turla OilRig)",
                "id": "attack-pattern--7e3beebd-8bfe-4e7b-a892-e44ab06a75f9",
                "technique_id": "T1584"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Attacker launches a Distributed Denial of Service (DDoS) attack to overload backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Distributed attack sources are coordinated to flood the network.",
                    "Role": "Attacker",
                    "Condition": "Access to a botnet or compromised resource pool."
                },
                {
                    "Assumption": "Backend servers have insufficient capacity to handle sudden traffic spikes.",
                    "Role": "Network Administrator",
                    "Condition": "Limited scalability of server resources."
                }
            ],
            "Potential Impact": "Disruption of services, impacting system availability.",
            "MITRE ATT&CK Keywords": [
                "ddos",
                "denial of service",
                "network",
                "overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of application vulnerabilities that cause crashes or performance degradation.",
            "Assumptions": [
                {
                    "Assumption": "Application has known or zero-day vulnerabilities.",
                    "Role": "Application Developer",
                    "Condition": "Unpatched or newly discovered vulnerabilities."
                },
                {
                    "Assumption": "Attackers can reach and exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Existing network accessibility."
                }
            ],
            "Potential Impact": "System performance degradation or complete downtime.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "application",
                "exploitation",
                "vulnerabilities"
            ],
            "mitre_technique": {
                "name": "OS Exhaustion Flood",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
                "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
                "technique_id": "T1499.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Resource exhaustion attacks targeting application servers (e.g., CPU, memory).",
            "Assumptions": [
                {
                    "Assumption": "Server resources are inadequately protected or throttled.",
                    "Role": "System Administrator",
                    "Condition": "Lack of resource management policies."
                },
                {
                    "Assumption": "Attackers have the capability to initiate high resource-consuming processes.",
                    "Role": "Attacker",
                    "Condition": "Access to the application or networking resources."
                }
            ],
            "Potential Impact": "Reduced system availability and potential service interruptions.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "application servers",
                "performance degradation"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker leverages a vulnerability to gain administrative control over backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Backend server has exploitable vulnerabilities.",
                    "Role": "System Administrator",
                    "Condition": "Absence of timely security updates."
                },
                {
                    "Assumption": "Attackers have discovered or known exploits available.",
                    "Role": "Attacker",
                    "Condition": "Information on vulnerabilities is publicly accessible."
                }
            ],
            "Potential Impact": "Full control over the server, leading to possible data tampering or denial of service.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "backend servers",
                "exploitation",
                "admin control"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Insider threat where an employee abuses their access to gain higher privileges in the system.",
            "Assumptions": [
                {
                    "Assumption": "Employee has knowledge of system operations and access mechanisms.",
                    "Role": "Insider",
                    "Condition": "High level of access to the system."
                },
                {
                    "Assumption": "No strict monitoring or auditing of privileged access.",
                    "Role": "System Administrator",
                    "Condition": "Insufficient logging and alerting for access."
                }
            ],
            "Potential Impact": "Potential for significant unauthorized actions and data breaches.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "insider threat",
                "abuse access",
                "system operations"
            ],
            "mitre_technique": {
                "name": "Native API",
                "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.(Citation: NT API Windows)(Citation: Linux Kernel API) These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.(Citation: OutFlank System Calls)(Citation: CyberBit System Calls)(Citation: MDSec System Calls) For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes.(Citation: Microsoft CreateProcess)(Citation: GNU Fork) This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.(Citation: Microsoft Win32)(Citation: LIBC)(Citation: GLIBC)\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.(Citation: Microsoft NET)(Citation: Apple Core Services)(Citation: MACOS Cocoa)(Citation: macOS Foundation)\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks.(Citation: Redops Syscalls) Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001).",
                "id": "attack-pattern--391d824f-0ef1-47a0-b0ee-c59a75e27670",
                "technique_id": "T1106"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attackers exploit third-party application integration to elevate privileges.",
            "Assumptions": [
                {
                    "Assumption": "Weak security measures in third-party applications.",
                    "Role": "Third-Party Application Developer",
                    "Condition": "Inadequate security controls."
                },
                {
                    "Assumption": "Users are not fully aware of the permissions granted.",
                    "Role": "Application User",
                    "Condition": "Lack of transparency in permission requests."
                }
            ],
            "Potential Impact": "Attackers gain unauthorized higher privileges leading to potential system compromise.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "third-party",
                "integration",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "21",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake login page mimicking the social media platform to steal user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users are unable to distinguish between the fake and genuine login page.",
                    "Role": "End User",
                    "Condition": "Users are not trained to recognize security alerts and fake pages."
                },
                {
                    "Assumption": "The attacker can host the fake page and direct traffic to it.",
                    "Role": "Attacker",
                    "Condition": "The attacker has access to the necessary resources to host and redirect users."
                },
                {
                    "Assumption": "Users might reuse passwords across different accounts.",
                    "Role": "End User",
                    "Condition": "Users do not follow best practices for unique passwords for each account."
                }
            ],
            "Potential Impact": "Unauthorized data access, including personal information and messages.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "phishing",
                "credential theft",
                "web application",
                "user impersonation"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses social engineering to impersonate a technical support agent and gain access to user accounts.",
            "Assumptions": [
                {
                    "Assumption": "Users are easily influenced by authoritative figures.",
                    "Role": "End User",
                    "Condition": "Users are not aware or cautious about social engineering tactics."
                },
                {
                    "Assumption": "Attackers can create convincing fake identities.",
                    "Role": "Attacker",
                    "Condition": "Resources and skills to create plausible support accounts."
                },
                {
                    "Assumption": "Users may share sensitive information over the phone or email.",
                    "Role": "End User",
                    "Condition": "Users are not trained on what type of information can be shared."
                }
            ],
            "Potential Impact": "Access to sensitive user data and potential account takeover leading to further exploitation.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "impersonation",
                "phishing",
                "user support impersonation"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
                "technique_id": "T1586.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses malware to alter the user's hosts file, redirecting legitimate website requests to malicious domains.",
            "Assumptions": [
                {
                    "Assumption": "User devices are not adequately protected against malware.",
                    "Role": "End User/Administrator",
                    "Condition": "No anti-virus or anti-malware software installed, or it's outdated."
                },
                {
                    "Assumption": "Malware is capable of modifying system files.",
                    "Role": "Attacker",
                    "Condition": "Malware has sufficient privileges to alter system configurations."
                },
                {
                    "Assumption": "Users do not verify SSL certificates diligently.",
                    "Role": "End User",
                    "Condition": "Users are not vigilant about SSL certificate warnings and details."
                }
            ],
            "Potential Impact": "Stealthy interception of user credentials and personal information.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "system modification",
                "hosts file manipulation",
                "redirect",
                "phishing"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to backend servers and alters user profile information or posts.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient security controls on server access.",
                    "Role": "Administrator",
                    "Condition": "Lack of strong access controls and monitoring."
                },
                {
                    "Assumption": "Backdoors or exploits exist in the server software.",
                    "Role": "Attacker",
                    "Condition": "Vulnerabilities in software are unpatched."
                },
                {
                    "Assumption": "Attackers have enough privileges to alter data.",
                    "Role": "Administrator/Attacker",
                    "Condition": "Administrative access or privilege escalation is possible."
                }
            ],
            "Potential Impact": "Integrity breach, altered data, and mistrust in platform reliability.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "server access",
                "data alteration",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies data in transit between the user and the backend servers through a man-in-the-middle attack.",
            "Assumptions": [
                {
                    "Assumption": "No end-to-end encryption in place.",
                    "Role": "Administrator/Developer",
                    "Condition": "Data is transmitted over unencrypted channels."
                },
                {
                    "Assumption": "Attackers can position themselves between the user and the server.",
                    "Role": "Attacker",
                    "Condition": "Network vulnerabilities exist allowing interception."
                },
                {
                    "Assumption": "Users do not notice irregularities in data.",
                    "Role": "End User",
                    "Condition": "Users are not vigilant about data discrepancies."
                }
            ],
            "Potential Impact": "Data integrity compromised, potential information leakage, and user mistrust.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "data tampering",
                "network interception",
                "encryption"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An insider with legitimate access modifies content policies or user permissions maliciously.",
            "Assumptions": [
                {
                    "Assumption": "Lack of oversight on insider activities.",
                    "Role": "Administrator/Manager",
                    "Condition": "Insufficient monitoring and auditing of internal actions."
                },
                {
                    "Assumption": "Administrators have high-level permissions.",
                    "Role": "Administrator",
                    "Condition": "Administrators have the ability to make critical changes."
                },
                {
                    "Assumption": "No dual-control or approval processes.",
                    "Role": "Administrator/Manager",
                    "Condition": "Changes can be made by a single individual without secondary approval."
                }
            ],
            "Potential Impact": "Issues with data integrity and access control, potential misuse or abuse of compromised user accounts.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "policy change",
                "permission modification",
                "auditing"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Cloud Logs",
                "description": "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.(Citation: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files.(Citation: AWS Update Trail)(Citation: Pacu Detection Disruption Module) In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.(Citation: Dark Reading Microsoft 365 Attacks 2021)",
                "id": "attack-pattern--cacc40da-4c9e-462c-80d5-fd70a178b12d",
                "technique_id": "T1562.008"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny having performed certain actions on the platform (posting content, changing settings, etc.), potentially in an attempt to avoid responsibility.",
            "Assumptions": [
                {
                    "Assumption": "Lack of proper logging of user actions.",
                    "Role": "Developer/Administrator",
                    "Condition": "Audit logging is not comprehensive or tamper-evident."
                },
                {
                    "Assumption": "No mechanisms to verify user authenticity in action logs.",
                    "Role": "Developer/Administrator",
                    "Condition": "User actions are not linked to authentication securely."
                },
                {
                    "Assumption": "Possible user accounts misuse via shared credentials.",
                    "Role": "End User",
                    "Condition": "Users share passwords or credentials are compromised."
                }
            ],
            "Potential Impact": "Difficulty in dispute resolution leads to mistrust and potential exploitation.",
            "MITRE ATT&CK Keywords": [
                "audit log tampering",
                "action repudiation",
                "accountability",
                "logging"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker gains access to log files and alters them to erase traces of malicious activities.",
            "Assumptions": [
                {
                    "Assumption": "Audit logs are not protected adequately.",
                    "Role": "Administrator",
                    "Condition": "Logs are unencrypted or not monitored."
                },
                {
                    "Assumption": "Attackers have sufficient privileges to access and modify logs.",
                    "Role": "Administrator/Attacker",
                    "Condition": "Access controls on logging system are weak."
                },
                {
                    "Assumption": "No redundancy or tamper-evident mechanisms in logging system.",
                    "Role": "Developer/Administrator",
                    "Condition": "The system does not have safeguards against log alterations."
                }
            ],
            "Potential Impact": "Harder forensic analysis, attackers can hide traces of their presence, and no proper trail of actions.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "evidence destruction",
                "repudiation",
                "audit logs"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users contest charges or actions taken against them, claiming no knowledge due to absence of reliable user activity tracking and logging.",
            "Assumptions": [
                {
                    "Assumption": "Poor logging and tracking mechanisms.",
                    "Role": "Developer/Administrator",
                    "Condition": "Logs are either non-existent, incomplete or incorrectly configured."
                },
                {
                    "Assumption": "The system does not link actions to authenticated users reliably.",
                    "Role": "Developer/Administrator",
                    "Condition": "User actions are mismatched or inadequately recorded."
                },
                {
                    "Assumption": "Incident response systems are inadequate for post-incident investigation.",
                    "Role": "Security Team",
                    "Condition": "Limited capability to investigate and resolve disputes using logs."
                }
            ],
            "Potential Impact": "Disputes regarding actions and transactions leading to operational and trust issues.",
            "MITRE ATT&CK Keywords": [
                "dispute resolution",
                "user action tracking",
                "logging",
                "accountability"
            ],
            "mitre_technique": {
                "name": "Disable Windows Event Logging",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
                "technique_id": "T1562.002"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data is leaked due to a vulnerability in the platform's API which allows unauthorized third-party access.",
            "Assumptions": [
                {
                    "Assumption": "The API lacks proper authentication and authorization checks.",
                    "Role": "Developer",
                    "Condition": "Misconfigured or weak API security."
                },
                {
                    "Assumption": "Third parties can identify and exploit the API vulnerability.",
                    "Role": "Attacker/Developer",
                    "Condition": "The vulnerability is known or easily discoverable."
                },
                {
                    "Assumption": "The API has access to sensitive data.",
                    "Role": "Developer",
                    "Condition": "Sensitive data is exposed through API endpoints."
                }
            ],
            "Potential Impact": "Unauthorized access to personal information causing privacy breaches and potential data misuse.",
            "MITRE ATT&CK Keywords": [
                "API vulnerability",
                "data leakage",
                "unauthorized access",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a misconfigured server to access and extract a database containing user details.",
            "Assumptions": [
                {
                    "Assumption": "The server is misconfigured and exposes sensitive data.",
                    "Role": "Administrator/Developer",
                    "Condition": "Server configurations are incorrect or insecure."
                },
                {
                    "Assumption": "Attackers can scan for and identify misconfigured servers.",
                    "Role": "Attacker",
                    "Condition": "Availability of tools and techniques to find misconfigurations."
                },
                {
                    "Assumption": "The database houses sensitive user information.",
                    "Role": "Developer",
                    "Condition": "Sensitive data is stored without sufficient access restrictions."
                }
            ],
            "Potential Impact": "Confidentiality breach, exposing user information like contact details, activity logs, and messages.",
            "MITRE ATT&CK Keywords": [
                "server misconfiguration",
                "database exposure",
                "data breach",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An insider leaks sensitive data, including user messages and personal information, to unauthorized external entities.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have legitimate access to sensitive data.",
                    "Role": "Administrator/Employee",
                    "Condition": "User roles involve handling sensitive information."
                },
                {
                    "Assumption": "There are no effective monitoring or data loss prevention mechanisms.",
                    "Role": "Security Team",
                    "Condition": "Lack of comprehensive DLP systems."
                },
                {
                    "Assumption": "No stringent access and activity oversight.",
                    "Role": "Administrator/Manager",
                    "Condition": "Absence of role-based access controls and periodic audits."
                }
            ],
            "Potential Impact": "Severe privacy breaches and loss of user trust, legal implications from data leakage.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "data leakage",
                "sensitive information",
                "information disclosure"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A distributed denial-of-service (DDoS) attack targets the social media platform's servers, overwhelming them and causing downtime.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can generate substantial traffic.",
                    "Role": "Attacker",
                    "Condition": "Ability to mobilize botnets or compromised hosts."
                },
                {
                    "Assumption": "Servers lack sufficient anti-DDoS protections.",
                    "Role": "Administrator",
                    "Condition": "Insufficient DDoS mitigation strategies in place."
                },
                {
                    "Assumption": "The platform's infrastructure cannot scale quickly to handle surge traffic.",
                    "Role": "IT Infrastructure",
                    "Condition": "Limited infrastructure elasticity or auto-scaling capabilities."
                }
            ],
            "Potential Impact": "Server downtime, reduced availability, leading to user dissatisfaction and potential revenue loss.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "service disruption",
                "network traffic overload",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malware infects user devices and uses them to launch attacks against the platform's backend servers.",
            "Assumptions": [
                {
                    "Assumption": "User devices are compromised with malware.",
                    "Role": "End User",
                    "Condition": "Lack of adequate malware protection or social engineering victimization."
                },
                {
                    "Assumption": "Infected devices can coordinate and launch attacks.",
                    "Role": "Attacker",
                    "Condition": "Botnet control mechanisms in place."
                },
                {
                    "Assumption": "Servers are not resilient against amplified attack traffic.",
                    "Role": "Administrator",
                    "Condition": "Servers lack robust defenses against volumetric attacks."
                }
            ],
            "Potential Impact": "Service disruptions and performance degradation, affecting user experience and platform trust.",
            "MITRE ATT&CK Keywords": [
                "malware",
                "botnet",
                "back-end servers",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A vulnerability exploited by attackers causes critical system overload or crash, rendering services unavailable.",
            "Assumptions": [
                {
                    "Assumption": "Unpatched vulnerabilities exist.",
                    "Role": "Administrator/Developer",
                    "Condition": "System updates and patches are not regularly applied."
                },
                {
                    "Assumption": "Attackers can identify and exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of vulnerable system components or zero-days."
                },
                {
                    "Assumption": "Dependence on vulnerable system for critical operations.",
                    "Role": "Administrator/Developer",
                    "Condition": "Core functionalities rely on susceptible components."
                }
            ],
            "Potential Impact": "Service outage, inability to perform critical operations and user dissatisfaction.",
            "MITRE ATT&CK Keywords": [
                "system vulnerability",
                "exploitation",
                "crash",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a software vulnerability to escalate from a regular user to an administrator role on the platform.",
            "Assumptions": [
                {
                    "Assumption": "Existence of privilege escalation vulnerabilities.",
                    "Role": "Developer",
                    "Condition": "Code vulnerabilities that allow privilege escalation are present."
                },
                {
                    "Assumption": "Attackers discover and exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Attackers have knowledge and capability to exploit these vulnerabilities."
                },
                {
                    "Assumption": "No detection and response mechanisms are in place.",
                    "Role": "Administrator",
                    "Condition": "Insufficient monitoring and alerting of abnormal privilege changes."
                }
            ],
            "Potential Impact": "Compromise of sensitive system functionalities, unauthorized access to administrative controls.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability exploitation",
                "administrator role",
                "credentials"
            ],
            "mitre_technique": {
                "name": "Bypass User Account Control",
                "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.(Citation: TechNet How UAC Works)\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) objects without prompting the user through the UAC notification box.(Citation: TechNet Inside UAC)(Citation: MSDN COM Elevation) An example of this is use of [Rundll32](https://attack.mitre.org/techniques/T1218/011) to load a specifically crafted DLL which loads an auto-elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)",
                "id": "attack-pattern--120d5519-3098-4e1c-9191-2aa61232f073",
                "technique_id": "T1548.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An insider misuses their legitimate privileges to execute unauthorized administrative actions.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have high-level network access.",
                    "Role": "Employee/Administrator",
                    "Condition": "Job role entails elevated privileges."
                },
                {
                    "Assumption": "Lack of internal controls and segregation of duties.",
                    "Role": "Administrator/Manager",
                    "Condition": "Insufficient oversight and role management policies."
                },
                {
                    "Assumption": "Weak or non-existent logging and monitoring.",
                    "Role": "Security Team",
                    "Condition": "No comprehensive activity monitoring and logging."
                }
            ],
            "Potential Impact": "Unauthorized system changes, potential misuse of platform, and policy violations.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "administrative actions",
                "privileged access",
                "misuse of credentials"
            ],
            "mitre_technique": {
                "name": "Direct Cloud VM Connections",
                "description": "Adversaries may leverage [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log directly into accessible cloud hosted compute infrastructure through cloud native methods. Many cloud providers offer interactive connections to virtual infrastructure that can be accessed through the [Cloud API](https://attack.mitre.org/techniques/T1059/009), such as Azure Serial Console(Citation: Azure Serial Console), AWS EC2 Instance Connect(Citation: EC2 Instance Connect)(Citation: lucr-3: Getting SaaS-y in the cloud), and AWS System Manager.(Citation: AWS System Manager).\n\nMethods of authentication for these connections can include passwords, application access tokens, or SSH keys. These cloud native methods may, by default, allow for privileged access on the host with SYSTEM or root level access. \n\nAdversaries may utilize these cloud native methods to directly access virtual infrastructure and pivot through an environment.(Citation: SIM Swapping and Abuse of the Microsoft Azure Serial Console) These connections typically provide direct console access to the VM rather than the execution of scripts (i.e., [Cloud Administration Command](https://attack.mitre.org/techniques/T1651)).",
                "id": "attack-pattern--45241b9e-9bbc-4826-a2cc-78855e51ca09",
                "technique_id": "T1021.008"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Through social engineering, an attacker convinces a legitimate administrator to disclose credentials or perform unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "Administrators can be targets of social engineering.",
                    "Role": "Administrator",
                    "Condition": "Administrators may not be aware or properly cautious of social engineering strategies."
                },
                {
                    "Assumption": "Administrators have wide-ranging privileges.",
                    "Role": "Administrator",
                    "Condition": "High-level access rights within just a few individuals."
                },
                {
                    "Assumption": "Effective social engineering techniques are employed by the attacker.",
                    "Role": "Attacker",
                    "Condition": "Attackers have adequate skillsets and knowledge to execute convincing schemes."
                }
            ],
            "Potential Impact": "Unauthorized execution of privileged operations, potential full compromise of the platform.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "privilege escalation",
                "credential compromise",
                "administrative access"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "23",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake profile mimicking a legitimate user to impersonate them online.",
            "Assumptions": [
                {
                    "Assumption": "The application does not have robust identity verification methods.",
                    "Role": "Application Developer",
                    "Condition": "When creating user profiles."
                },
                {
                    "Assumption": "Users don't recognize the differences between the legitimate and fake profiles.",
                    "Role": "Users",
                    "Condition": "When browsing and engaging with profiles."
                },
                {
                    "Assumption": "The platform relies on user reports to identify spoofed profiles.",
                    "Role": "Platform Security Team",
                    "Condition": "Insufficient automated detection mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized access to personal information and reputation damage.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "fake profile",
                "identity theft",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
                "technique_id": "T1586.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses phishing techniques to gain access to a user's account.",
            "Assumptions": [
                {
                    "Assumption": "Users can be tricked into revealing their login credentials.",
                    "Role": "Users",
                    "Condition": "When poorly educated on phishing threats."
                },
                {
                    "Assumption": "The platform does not fully utilize multi-factor authentication.",
                    "Role": "Application Developer",
                    "Condition": "When configuring authentication methods."
                },
                {
                    "Assumption": "The attacker successfully mimics the platform's login page.",
                    "Role": "Attacker",
                    "Condition": "When setting up the phishing site."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and potential misuse of the account.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential theft",
                "social engineering",
                "account takeover"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker exploits a vulnerability in third-party integrations to spoof a trusted application.",
            "Assumptions": [
                {
                    "Assumption": "The third-party application has a security vulnerability.",
                    "Role": "Third-Party Application Developers",
                    "Condition": "When developing and updating their application."
                },
                {
                    "Assumption": "The platform trusts data and interactions from third-party applications.",
                    "Role": "Platform Developers",
                    "Condition": "When integrating third-party services."
                },
                {
                    "Assumption": "Users trust third-party applications linked to their profiles.",
                    "Role": "Users",
                    "Condition": "When authorizing third-party integrations."
                }
            ],
            "Potential Impact": "Unauthorized actions performed as a trusted application, leading to data compromise.",
            "MITRE ATT&CK Keywords": [
                "third-party integration",
                "vulnerability exploitation",
                "fake application",
                "trust abuse"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies user profiles to inject malicious code.",
            "Assumptions": [
                {
                    "Assumption": "The platform does not sufficiently sanitize user inputs.",
                    "Role": "Application Developer",
                    "Condition": "When processing user profile updates."
                },
                {
                    "Assumption": "Users are unaware of the injected malicious content.",
                    "Role": "Users",
                    "Condition": "When viewing or interacting with profiles."
                },
                {
                    "Assumption": "The attacker gains write access to user profiles.",
                    "Role": "Attacker",
                    "Condition": "When exploiting vulnerabilities or misconfigurations."
                }
            ],
            "Potential Impact": "Corruption of user profiles and potentially spreading malware or unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "input sanitization",
                "code injection",
                "profile tampering",
                "malware"
            ],
            "mitre_technique": {
                "name": "Shared Modules",
                "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., [Native API](https://attack.mitre.org/techniques/T1106)).\n\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\n\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in `dlfcn.h` in functions such as `dlopen` and `dlsym`. Although macOS can execute `.so` files, common practice uses `.dylib` files.(Citation: Apple Dev Dynamic Libraries)(Citation: Linux Shared Libraries)(Citation: RotaJakiro 2021 netlab360 analysis)(Citation: Unit42 OceanLotus 2017)\n\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in `NTDLL.dll` and is part of the Windows [Native API](https://attack.mitre.org/techniques/T1106) which is called from functions like `LoadLibrary` at run time.(Citation: Microsoft DLL)",
                "id": "attack-pattern--0a5231ec-41af-4a35-83d0-6bdf11f28c65",
                "technique_id": "T1129"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies content as it is transmitted between users.",
            "Assumptions": [
                {
                    "Assumption": "The application does not use end-to-end encryption for all communications.",
                    "Role": "Application Developer",
                    "Condition": "When implementing messaging features."
                },
                {
                    "Assumption": "Users are not aware that content could be intercepted.",
                    "Role": "Users",
                    "Condition": "When sending sensitive information."
                },
                {
                    "Assumption": "The attacker has the capability to intercept network traffic.",
                    "Role": "Attacker",
                    "Condition": "When positioned to perform a man-in-the-middle attack."
                }
            ],
            "Potential Impact": "Altered content leading to misinformation, data corruption, and possible exploitation.",
            "MITRE ATT&CK Keywords": [
                "network traffic interception",
                "man-in-the-middle",
                "communication tampering",
                "data corruption"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits vulnerabilities in the backend servers to alter stored content or user data.",
            "Assumptions": [
                {
                    "Assumption": "The backend servers have unpatched vulnerabilities.",
                    "Role": "Server Administrators",
                    "Condition": "When managing server maintenance and updates."
                },
                {
                    "Assumption": "The platform's data validation and integrity checks are insufficient.",
                    "Role": "Application Developer",
                    "Condition": "When designing data handling routines."
                },
                {
                    "Assumption": "The attacker has network access to the servers.",
                    "Role": "Attacker",
                    "Condition": "When exploiting network vulnerabilities."
                }
            ],
            "Potential Impact": "Compromised data integrity and possible system instability.",
            "MITRE ATT&CK Keywords": [
                "server exploitation",
                "data tampering",
                "backend vulnerabilities",
                "integrity compromise"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending specific messages or posting content.",
            "Assumptions": [
                {
                    "Assumption": "The application lacks sufficient logging and auditing.",
                    "Role": "Application Developer",
                    "Condition": "When designing logging mechanisms."
                },
                {
                    "Assumption": "Users can alter event logs without trace.",
                    "Role": "Users",
                    "Condition": "When given excessive permissions."
                },
                {
                    "Assumption": "The platform does not support non-repudiation mechanisms.",
                    "Role": "Platform Security Team",
                    "Condition": "When setting up security measures."
                }
            ],
            "Potential Impact": "Disputes over activity leading to trust issues and possible data misuse.",
            "MITRE ATT&CK Keywords": [
                "non-repudiation",
                "log manipulation",
                "activity denial",
                "audit trail"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes or alters audit logs to cover their tracks.",
            "Assumptions": [
                {
                    "Assumption": "Audit logs are stored without tamper-evident features.",
                    "Role": "Application Developer",
                    "Condition": "When designing the logging system."
                },
                {
                    "Assumption": "The attacker has elevated permissions to access and alter logs.",
                    "Role": "Attacker",
                    "Condition": "When exploiting privilege escalation vulnerabilities."
                },
                {
                    "Assumption": "The platform does not monitor or alert on log modification activities.",
                    "Role": "Platform Security Team",
                    "Condition": "When configuring monitoring tools."
                }
            ],
            "Potential Impact": "Loss of forensic data making it difficult to trace malicious actions.",
            "MITRE ATT&CK Keywords": [
                "log deletion",
                "log alteration",
                "covering tracks",
                "forensics evasion"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A disgruntled employee modifies data records and denies the changes.",
            "Assumptions": [
                {
                    "Assumption": "Employees have access to modify critical data without oversight.",
                    "Role": "Organization Management",
                    "Condition": "When setting role-based access controls."
                },
                {
                    "Assumption": "The application allows data modifications without proper logging.",
                    "Role": "Application Developer",
                    "Condition": "When creating data update processes."
                },
                {
                    "Assumption": "The employee is dissatisfied or has malicious intent.",
                    "Role": "Disgruntled Employee",
                    "Condition": "When feeling wronged or neglected."
                }
            ],
            "Potential Impact": "Corruption of data leading to operational disruptions and financial loss.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "data alteration",
                "employee sabotage",
                "credential misuse"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive personal information is leaked through an insecure API endpoint.",
            "Assumptions": [
                {
                    "Assumption": "The API endpoint is improperly secured.",
                    "Role": "API Developer",
                    "Condition": "When implementing API security measures."
                },
                {
                    "Assumption": "Sensitive data is accessible via the API.",
                    "Role": "API Developer",
                    "Condition": "When handling data exposure."
                },
                {
                    "Assumption": "Attackers can identify and exploit the insecure endpoint.",
                    "Role": "Attacker",
                    "Condition": "When scanning for vulnerabilities."
                }
            ],
            "Potential Impact": "Unauthorized access to personal data and potential privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "API security",
                "data leak",
                "unauthorized access",
                "endpoint exploitation"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker accesses unauthorized profile information by exploiting a cross-site scripting (XSS) vulnerability.",
            "Assumptions": [
                {
                    "Assumption": "The application is vulnerable to XSS attacks.",
                    "Role": "Application Developer",
                    "Condition": "When failing to properly sanitize user inputs."
                },
                {
                    "Assumption": "Users are unaware of XSS threats when interacting with profiles or messages.",
                    "Role": "Users",
                    "Condition": "When engaging with potentially malicious content."
                },
                {
                    "Assumption": "The attacker can lure users to interact with the injected scripts.",
                    "Role": "Attacker",
                    "Condition": "When crafting the malicious content."
                }
            ],
            "Potential Impact": "Exposure of sensitive user information and possible session hijacking.",
            "MITRE ATT&CK Keywords": [
                "XSS",
                "cross-site scripting",
                "data exposure",
                "session hijacking"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive information is inadvertently shared through third-party integrations.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications require access to sensitive data.",
                    "Role": "Third-Party Application Developers",
                    "Condition": "When creating data-sharing requests."
                },
                {
                    "Assumption": "Users are not fully aware of the data sharing implications.",
                    "Role": "Users",
                    "Condition": "When authorizing third-party applications."
                },
                {
                    "Assumption": "The platform does not sufficiently restrict data access for third parties.",
                    "Role": "Platform Developers",
                    "Condition": "When configuring third-party permissions."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user data and potential misuse by third parties.",
            "MITRE ATT&CK Keywords": [
                "third-party integration",
                "data sharing",
                "unauthorized access",
                "sensitive information leak"
            ],
            "mitre_technique": {
                "name": "Exploitation for Credential Access",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
                "id": "attack-pattern--9c306d8d-cde7-4b4c-b6e8-d0bb16caca36",
                "technique_id": "T1212"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker floods the platform with requests, causing service disruption.",
            "Assumptions": [
                {
                    "Assumption": "The platform lacks sufficient rate limiting and DDoS protection mechanisms.",
                    "Role": "Application Developer",
                    "Condition": "When designing request handling protocols."
                },
                {
                    "Assumption": "The infrastructure can be overwhelmed by high traffic volume.",
                    "Role": "Infrastructure Team",
                    "Condition": "When lack of scaling capabilities."
                },
                {
                    "Assumption": "The attacker has the resources to generate massive amounts of traffic.",
                    "Role": "Attacker",
                    "Condition": "When launching the attack."
                }
            ],
            "Potential Impact": "Service unavailability and potential loss of user trust.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "service disruption",
                "traffic flooding",
                "rate limiting"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the backend servers to crash the application.",
            "Assumptions": [
                {
                    "Assumption": "The backend servers have unpatched vulnerabilities.",
                    "Role": "Server Administrators",
                    "Condition": "When failing to apply security updates."
                },
                {
                    "Assumption": "The application cannot gracefully handle unexpected input or actions.",
                    "Role": "Application Developer",
                    "Condition": "When not considering error handling."
                },
                {
                    "Assumption": "The attacker can reliably exploit the vulnerability to cause a crash.",
                    "Role": "Attacker",
                    "Condition": "When identifying the exploit."
                }
            ],
            "Potential Impact": "Service disruption and potential data loss.",
            "MITRE ATT&CK Keywords": [
                "server vulnerability",
                "application crash",
                "service disruption",
                "exploitation"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker uses botnets to continuously overwhelm the platform's authentication system with login attempts.",
            "Assumptions": [
                {
                    "Assumption": "The authentication system lacks safeguards against brute force attacks.",
                    "Role": "Application Developer",
                    "Condition": "When designing login protocols."
                },
                {
                    "Assumption": "The infrastructure cannot handle rapid, repeated login attempts.",
                    "Role": "Infrastructure Team",
                    "Condition": "When lacking scalable resources."
                },
                {
                    "Assumption": "The attacker has access to a large botnet for coordinating the attack.",
                    "Role": "Attacker",
                    "Condition": "When controlling multiple compromised devices."
                }
            ],
            "Potential Impact": "Authentication system unavailability and degraded user experience.",
            "MITRE ATT&CK Keywords": [
                "brute force",
                "botnet attacks",
                "authentication flooding",
                "denial of service"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability to gain admin-level access to the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "The platform has unpatched vulnerabilities that allow privilege escalation.",
                    "Role": "Platform Security Team",
                    "Condition": "When not applying security updates promptly."
                },
                {
                    "Assumption": "The attacker can access the network where the servers are hosted.",
                    "Role": "Attacker",
                    "Condition": "When positioning themselves in the network."
                },
                {
                    "Assumption": "The application does not properly enforce privilege separation.",
                    "Role": "Application Developer",
                    "Condition": "When designing access controls."
                }
            ],
            "Potential Impact": "Full control over the server, unauthorized data access, and potential complete system compromise.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "admin access",
                "server vulnerability",
                "full system compromise"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses social engineering to trick an employee into providing elevated credentials.",
            "Assumptions": [
                {
                    "Assumption": "Employees are susceptible to social engineering techniques.",
                    "Role": "Employees",
                    "Condition": "When unaware of social engineering tactics."
                },
                {
                    "Assumption": "The organization does not have strict verification procedures for credential-related actions.",
                    "Role": "Organization Management",
                    "Condition": "When setting up internal processes."
                },
                {
                    "Assumption": "The attacker has gathered enough information to convincingly impersonate a trusted party.",
                    "Role": "Attacker",
                    "Condition": "When conducting reconnaissance."
                }
            ],
            "Potential Impact": "Unauthorized access to elevated functions and sensitive data, compromising platform security.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "credential theft",
                "privilege misuse",
                "elevated access"
            ],
            "mitre_technique": {
                "name": "Spearphishing Attachment",
                "description": "Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
                "id": "attack-pattern--6aac77c4-eaf2-4366-8c13-ce50ab951f38",
                "technique_id": "T1193"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A compromised third-party integration with elevated privileges is used to perform unauthorized actions on the platform.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications can request elevated privileges.",
                    "Role": "Third-Party Application Developers",
                    "Condition": "When designing app permissions."
                },
                {
                    "Assumption": "The platform does not thoroughly vet the security of third-party applications.",
                    "Role": "Platform Security Team",
                    "Condition": "When integrating third-party services."
                },
                {
                    "Assumption": "Users authorize the third-party integration without understanding the implications.",
                    "Role": "Users",
                    "Condition": "When accepting permission requests."
                }
            ],
            "Potential Impact": "Unauthorized actions performed with elevated privileges, leading to data breaches or integrity issues.",
            "MITRE ATT&CK Keywords": [
                "third-party compromise",
                "elevated privileges",
                "unauthorized actions",
                "integration vulnerability"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "25",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a phishing scheme to trick users into revealing their social media login credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users can be tricked by phishing schemes.",
                    "Role": "User",
                    "Condition": "Phishing attempt is credible."
                },
                {
                    "Assumption": "Attackers can reach users via email or social media.",
                    "Role": "Attacker",
                    "Condition": "Attacker has knowledge of user contact information."
                },
                {
                    "Assumption": "The application does not have strong anti-phishing protections.",
                    "Role": "Application",
                    "Condition": "Protective measures are weak or non-existent."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential access",
                "user accounts",
                "coercion",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker exploits a vulnerability in the API to impersonate another user when interacting with third-party integrations.",
            "Assumptions": [
                {
                    "Assumption": "There is a known vulnerability in the API.",
                    "Role": "Developer",
                    "Condition": "Vulnerability has not been patched."
                },
                {
                    "Assumption": "The attacker has the knowledge and tools to exploit the API.",
                    "Role": "Attacker",
                    "Condition": "Attacker is technically skilled."
                },
                {
                    "Assumption": "Third-party applications do not verify the user's identity beyond the initial API call.",
                    "Role": "Third-Party Application",
                    "Condition": "Security checks are minimal or bypassed."
                }
            ],
            "Potential Impact": "Unauthorized actions performed via third-party integrations.",
            "MITRE ATT&CK Keywords": [
                "api exploitation",
                "identity spoofing",
                "integration attack",
                "vulnerability exploits"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake profile and pretends to be someone else to gain trust and access to personal information.",
            "Assumptions": [
                {
                    "Assumption": "The application allows easy creation of accounts without proper verification.",
                    "Role": "Application",
                    "Condition": "Sign-up process lacks thorough verification."
                },
                {
                    "Assumption": "Users do not verify the identity of new connections.",
                    "Role": "User",
                    "Condition": "Users are not cautious about new connections."
                },
                {
                    "Assumption": "The attacker can create a convincing fake profile.",
                    "Role": "Attacker",
                    "Condition": "Attacker can gather enough information to appear legitimate."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user information.",
            "MITRE ATT&CK Keywords": [
                "fake profile",
                "social engineering",
                "identity fraud",
                "information gain",
                "relationship exploitation"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage)\n\nFor operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. \n\nOnce a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--b1ccd744-3f78-4a0e-9bb2-2002057f7928",
                "technique_id": "T1585.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies data between the user and the backend server.",
            "Assumptions": [
                {
                    "Assumption": "Data transmitted is not encrypted or weakly encrypted.",
                    "Role": "Application",
                    "Condition": "Lacking strong encryption mechanisms."
                },
                {
                    "Assumption": "The attacker has access to the communication channel between the user and the server.",
                    "Role": "Attacker",
                    "Condition": "Attacker can successfully intercept the communication."
                },
                {
                    "Assumption": "There are inadequate integrity checks on transmitted data.",
                    "Role": "Developer",
                    "Condition": "Integrity verification mechanisms are not in place."
                }
            ],
            "Potential Impact": "Data integrity compromised, possible injection of malicious data.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "data modification",
                "communication interception",
                "encryption bypass",
                "injection"
            ],
            "mitre_technique": {
                "name": "Content Injection",
                "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)\n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)\n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)",
                "id": "attack-pattern--43c9bc06-715b-42db-972f-52d25c09a20c",
                "technique_id": "T1659"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker exploits a vulnerability in the backend server to alter backend databases.",
            "Assumptions": [
                {
                    "Assumption": "There is an unpatched vulnerability in the backend server.",
                    "Role": "Developer",
                    "Condition": "Vulnerability is known but not resolved."
                },
                {
                    "Assumption": "The attacker has the skill to exploit this vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Technical abilities to exploit the server."
                },
                {
                    "Assumption": "Access controls to the database are insufficient.",
                    "Role": "Application",
                    "Condition": "Weak access control mechanisms are in place."
                }
            ],
            "Potential Impact": "Compromise of data integrity, alteration of critical information.",
            "MITRE ATT&CK Keywords": [
                "backend exploitation",
                "database tampering",
                "vulnerability exploit",
                "integrity breach",
                "data alteration"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker uploads malicious content disguised as legitimate content on the platform.",
            "Assumptions": [
                {
                    "Assumption": "Content uploaded by users is not adequately scanned for malware.",
                    "Role": "Application",
                    "Condition": "Lack of robust scanning tools."
                },
                {
                    "Assumption": "Users are able to upload a variety of content types easily.",
                    "Role": "User",
                    "Condition": "User content uploads are not tightly controlled."
                },
                {
                    "Assumption": "Users trust and interact with this content.",
                    "Role": "User",
                    "Condition": "Users do not question the legitimacy of the content."
                }
            ],
            "Potential Impact": "Compromise of user devices and spread of malware.",
            "MITRE ATT&CK Keywords": [
                "malicious content upload",
                "content modification",
                "user device compromise",
                "malware distribution",
                "file scanning"
            ],
            "mitre_technique": {
                "name": "Binary Padding",
                "description": "Adversaries can use binary padding to add junk data and change the on-disk representation of malware without affecting the functionality or behavior of the binary. This will often increase the size of the binary beyond what some security tools are capable of handling due to file size limitations.\n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blacklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ)\n",
                "id": "attack-pattern--519630c5-f03f-4882-825c-3af924935817",
                "technique_id": "T1009"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending a message that contains sensitive information, claiming their account was compromised.",
            "Assumptions": [
                {
                    "Assumption": "The application does not have sufficient logging of user activity.",
                    "Role": "Developer",
                    "Condition": "Logging mechanisms are weak or lacking."
                },
                {
                    "Assumption": "The attacker or user could have compromised the account.",
                    "Role": "User",
                    "Condition": "Account security measures are weak."
                },
                {
                    "Assumption": "There is no multi-factor authentication.",
                    "Role": "Application",
                    "Condition": "Authentication method is weak."
                }
            ],
            "Potential Impact": "Inability to validate the integrity of communications, potential legal and trust issues.",
            "MITRE ATT&CK Keywords": [
                "message repudiation",
                "activity denial",
                "logging insufficiency",
                "authentication bypass",
                "user impersonation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker claims that unauthorized actions originated from their account due to lack of proper audit trails.",
            "Assumptions": [
                {
                    "Assumption": "The application does not have detailed logging or audit trails.",
                    "Role": "Developer",
                    "Condition": "Audit mechanisms are weak."
                },
                {
                    "Assumption": "The attacker has knowledge of account details.",
                    "Role": "Attacker",
                    "Condition": "Attacker has obtained or guessed credentials."
                },
                {
                    "Assumption": "Logs can be altered or deleted.",
                    "Role": "Application",
                    "Condition": "Access controls to logs are weak."
                }
            ],
            "Potential Impact": "Inability to hold the attacker accountable, which impacts trust and security of the platform.",
            "MITRE ATT&CK Keywords": [
                "action denial",
                "audit trail bypass",
                "log tampering",
                "access controls",
                "accountability evasion"
            ],
            "mitre_technique": {
                "name": "Access Token Manipulation",
                "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\n\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)\n\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
                "id": "attack-pattern--dcaa092b-7de9-4a21-977f-7fcb77e89c48",
                "technique_id": "T1134"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies receiving or downloading certain sensitive files, casting doubt on data security.",
            "Assumptions": [
                {
                    "Assumption": "The application does not track file downloads comprehensively.",
                    "Role": "Developer",
                    "Condition": "File access logging is weak."
                },
                {
                    "Assumption": "The user account may have weak security settings.",
                    "Role": "User",
                    "Condition": "Account settings are not stringent."
                },
                {
                    "Assumption": "Sensitive files are easy to access without strict permissions.",
                    "Role": "Application",
                    "Condition": "File permissions are weak."
                }
            ],
            "Potential Impact": "Questioning of platform security, potential for data leaks.",
            "MITRE ATT&CK Keywords": [
                "download denial",
                "file access tracking",
                "audit insufficiency",
                "data security",
                "access permissions"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits a vulnerability to access sensitive user profile information.",
            "Assumptions": [
                {
                    "Assumption": "There is a vulnerability in the system that exposes user data.",
                    "Role": "Developer",
                    "Condition": "Vulnerability is known but unpatched."
                },
                {
                    "Assumption": "Sensitive data is stored without adequate encryption.",
                    "Role": "Application",
                    "Condition": "Encryption mechanisms are weak."
                },
                {
                    "Assumption": "The attacker has access to advanced attack tools.",
                    "Role": "Attacker",
                    "Condition": "Attacker is technically sophisticated."
                }
            ],
            "Potential Impact": "Unauthorized access to personal information, leading to privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "data breach",
                "profile information access",
                "encryption insufficiency",
                "vulnerability exploit",
                "privacy violation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts traffic between a user and the backend server to access unencrypted messages.",
            "Assumptions": [
                {
                    "Assumption": "Traffic is not encrypted end-to-end.",
                    "Role": "Developer",
                    "Condition": "Encryption mechanisms are weak or absent."
                },
                {
                    "Assumption": "The attacker can position themselves between the user and server.",
                    "Role": "Attacker",
                    "Condition": "Man-in-the-middle position is achievable."
                },
                {
                    "Assumption": "There is no additional layer of security like VPN or secure tunnels.",
                    "Role": "User/Application",
                    "Condition": "Users or application do not use enhanced security measures."
                }
            ],
            "Potential Impact": "Unauthorized eavesdropping on sensitive communications.",
            "MITRE ATT&CK Keywords": [
                "traffic interception",
                "unencrypted communication",
                "man-in-the-middle",
                "data leakage",
                "information gathering"
            ],
            "mitre_technique": {
                "name": "Transmitted Data Manipulation",
                "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--cc1e737c-236c-4e3b-83ba-32039a626ef8",
                "technique_id": "T1493"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains access to backend server logs that store sensitive data in plain text.",
            "Assumptions": [
                {
                    "Assumption": "Logs contain sensitive information in an unencrypted format.",
                    "Role": "Developer",
                    "Condition": "Sensitive data is in plain text."
                },
                {
                    "Assumption": "The attacker can access the logs via vulnerabilities or insufficient access controls.",
                    "Role": "Attacker",
                    "Condition": "Weak access control mechanisms."
                },
                {
                    "Assumption": "Logs are stored without adequate protective measures.",
                    "Role": "Application",
                    "Condition": "Lack of proper storage security."
                }
            ],
            "Potential Impact": "Exposure of sensitive user data via compromised logs.",
            "MITRE ATT&CK Keywords": [
                "log access",
                "plaintext data",
                "access control failure",
                "data exposure",
                "information retrieval"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a distributed denial-of-service (DDoS) attack to overwhelm backend servers.",
            "Assumptions": [
                {
                    "Assumption": "The application does not have effective DDoS mitigation.",
                    "Role": "Developer",
                    "Condition": "DDoS protection mechanisms are weak or absent."
                },
                {
                    "Assumption": "The attacker has the capability to mount a large-scale attack.",
                    "Role": "Attacker",
                    "Condition": "Access to a botnet or other DDoS tools."
                },
                {
                    "Assumption": "Network infrastructure cannot handle excessive traffic.",
                    "Role": "Application",
                    "Condition": "Scalability of infrastructure is poor."
                }
            ],
            "Potential Impact": "Service disruption, leading to application downtime.",
            "MITRE ATT&CK Keywords": [
                "DDoS attack",
                "service disruption",
                "network flooding",
                "resource exhaustion",
                "downtime"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability to cause system resources to be consumed disproportionately.",
            "Assumptions": [
                {
                    "Assumption": "There is a vulnerability that can be exploited to consume resources.",
                    "Role": "Developer",
                    "Condition": "Known but unpatched vulnerability."
                },
                {
                    "Assumption": "The attacker has the technical skills to exploit this vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Attacker is technically capable."
                },
                {
                    "Assumption": "System resources are not adequately monitored to detect this usage pattern.",
                    "Role": "Application",
                    "Condition": "Resource monitoring mechanisms are weak."
                }
            ],
            "Potential Impact": "Degradation of service performance or complete application failure.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "vulnerability exploitation",
                "system overload",
                "performance degradation",
                "application failure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker uploads large, malformed files to exhaust storage resources.",
            "Assumptions": [
                {
                    "Assumption": "The application does not impose limits on file upload sizes.",
                    "Role": "Developer",
                    "Condition": "Upload size not restricted."
                },
                {
                    "Assumption": "The attacker can repeatedly upload files without detection.",
                    "Role": "Attacker",
                    "Condition": "Lack of upload activity monitoring."
                },
                {
                    "Assumption": "Storage resources are limited and can be exhausted by such uploads.",
                    "Role": "Application",
                    "Condition": "Insufficient storage management."
                }
            ],
            "Potential Impact": "Storage capacity exhaustion, affecting data management and availability.",
            "MITRE ATT&CK Keywords": [
                "storage exhaustion",
                "large file upload",
                "resource limitations",
                "application disruption",
                "data management failure"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a backend server vulnerability to gain administrator access.",
            "Assumptions": [
                {
                    "Assumption": "There is an unpatched vulnerability that allows privilege escalation.",
                    "Role": "Developer",
                    "Condition": "Vulnerability is known but unaddressed."
                },
                {
                    "Assumption": "The attacker has the ability to identify and exploit this vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Attacker is technically skilled."
                },
                {
                    "Assumption": "Access controls on the backend are insufficient to prevent escalation.",
                    "Role": "Application",
                    "Condition": "Weak access control mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized control over the application and data.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "backend server exploit",
                "administrator access",
                "control takeover",
                "access control weakness"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A user escalates privileges by injecting malicious code through data entry points.",
            "Assumptions": [
                {
                    "Assumption": "User input is not properly sanitized or validated.",
                    "Role": "Developer",
                    "Condition": "Input validation is weak."
                },
                {
                    "Assumption": "The application executes injected code with higher privileges.",
                    "Role": "Application",
                    "Condition": "Execution environment is not secure."
                },
                {
                    "Assumption": "Users have access to data entry points capable of code injection.",
                    "Role": "User",
                    "Condition": "User interfaces are not tightly secured."
                }
            ],
            "Potential Impact": "Unauthorized actions with elevated privileges, compromising application security.",
            "MITRE ATT&CK Keywords": [
                "code injection",
                "privilege escalation",
                "input validation failure",
                "elevated permissions",
                "security compromise"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker manipulates third-party integration tokens to gain elevated access.",
            "Assumptions": [
                {
                    "Assumption": "Integration tokens are not securely managed.",
                    "Role": "Developer",
                    "Condition": "Token management is weak."
                },
                {
                    "Assumption": "The attacker can obtain or manipulate these tokens.",
                    "Role": "Attacker",
                    "Condition": "Weak token protection mechanisms."
                },
                {
                    "Assumption": "Third-party applications do not enforce stringent access controls.",
                    "Role": "Third-Party Application",
                    "Condition": "Security checks on tokens are weak or bypassed."
                }
            ],
            "Potential Impact": "Gaining unauthorized access through elevated privileges, impacting both application and third-party services.",
            "MITRE ATT&CK Keywords": [
                "token manipulation",
                "integration exploit",
                "access privilege escalation",
                "third-party interaction",
                "security bypass"
            ],
            "mitre_technique": {
                "name": "Access Token Manipulation",
                "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\n\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)\n\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
                "id": "attack-pattern--dcaa092b-7de9-4a21-977f-7fcb77e89c48",
                "technique_id": "T1134"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "24",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could create a fake social media profile to impersonate a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "The platform lacks stringent identity verification methods.",
                    "Role": "Platform Administrator",
                    "Condition": "When users sign up, their identity is not thoroughly verified."
                },
                {
                    "Assumption": "Users use easily guessable or publicly available information for their profiles.",
                    "Role": "User",
                    "Condition": "Users do not set strong, unique profile information."
                },
                {
                    "Assumption": "The attacker has basic knowledge of the legitimate user's information.",
                    "Role": "Attacker",
                    "Condition": "The attacker knows publicly available data about the target user."
                }
            ],
            "Potential Impact": "Unauthorized access to user communications and data, potential spreading of misinformation.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "impersonation",
                "social engineering"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
                "technique_id": "T1586.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could use phishing tactics to obtain user credentials and access accounts.",
            "Assumptions": [
                {
                    "Assumption": "Users can fall for phishing scams.",
                    "Role": "User",
                    "Condition": "Users are not adequately trained to recognize phishing attempts."
                },
                {
                    "Assumption": "The platform does not implement multi-factor authentication (MFA).",
                    "Role": "Platform Administrator",
                    "Condition": "Accounts are only secured with passwords."
                },
                {
                    "Assumption": "The attacker has a basic understanding of common phishing techniques.",
                    "Role": "Attacker",
                    "Condition": "The attacker can craft convincing phishing emails or messages."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user data and potential compromise of personal information.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential theft",
                "authentication"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could spoof a third-party application to request access to user data.",
            "Assumptions": [
                {
                    "Assumption": "Third-party integration lacks rigorous verification.",
                    "Role": "Platform Administrator",
                    "Condition": "The platform does not effectively vet third-party applications."
                },
                {
                    "Assumption": "Users may grant permissions without fully understanding the implications.",
                    "Role": "User",
                    "Condition": "Users are not familiar with security best practices regarding third-party permissions."
                },
                {
                    "Assumption": "The attacker can develop a malicious application posing as legitimate.",
                    "Role": "Attacker",
                    "Condition": "The attacker understands social engineering and malicious application development."
                }
            ],
            "Potential Impact": "Exposure of user data to unauthorized third parties and potential misuse of user information.",
            "MITRE ATT&CK Keywords": [
                "imposter",
                "third-party integration",
                "data exfiltration"
            ],
            "mitre_technique": {
                "name": "Traffic Duplication",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)\n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)\n\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)\n\nAdversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.",
                "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
                "technique_id": "T1020.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could intercept and modify data in transit between the user's device and the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Data is not encrypted during transmission.",
                    "Role": "Platform Administrator",
                    "Condition": "Data is sent via unencrypted channels."
                },
                {
                    "Assumption": "The attacker has access to the data transmission path.",
                    "Role": "Attacker",
                    "Condition": "The attacker can perform man-in-the-middle attacks."
                },
                {
                    "Assumption": "The user's device or network is compromised.",
                    "Role": "User",
                    "Condition": "The user's device is vulnerable to network attacks."
                }
            ],
            "Potential Impact": "Integrity of the data could be compromised, leading to falsified or corrupted information.",
            "MITRE ATT&CK Keywords": [
                "man-in-the-middle",
                "data tampering",
                "network interception"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could gain access to the backend servers and alter user content or platform settings.",
            "Assumptions": [
                {
                    "Assumption": "Backend servers have unpatched vulnerabilities.",
                    "Role": "Platform Administrator",
                    "Condition": "Security patches are not promptly applied."
                },
                {
                    "Assumption": "The attacker has credentials to access backend systems.",
                    "Role": "Attacker",
                    "Condition": "The credentials are obtained through phishing or brute force."
                },
                {
                    "Assumption": "The platform lacks adequate monitoring of backend activities.",
                    "Role": "Platform Administrator",
                    "Condition": "Anomalous activities go undetected."
                }
            ],
            "Potential Impact": "Compromise of data integrity, corruption of user information, potential unauthorized changes to platform functionality.",
            "MITRE ATT&CK Keywords": [
                "server access",
                "data corruption",
                "backend tampering"
            ],
            "mitre_technique": {
                "name": "Clear Linux or Mac System Logs",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n",
                "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
                "technique_id": "T1070.002"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker could modify third-party integration configurations to access sensitive data.",
            "Assumptions": [
                {
                    "Assumption": "Integration configurations are not securely managed.",
                    "Role": "Platform Administrator",
                    "Condition": "Insecure management practices for integration configurations."
                },
                {
                    "Assumption": "The attacker has privileged access to configuration management.",
                    "Role": "Attacker",
                    "Condition": "Privileged access through compromised accounts or insider threats."
                },
                {
                    "Assumption": "No logging of configuration changes.",
                    "Role": "Platform Administrator",
                    "Condition": "Configuration changes are not properly logged for auditing."
                }
            ],
            "Potential Impact": "Data integrity issues, unauthorized access to sensitive user information, disruptions to third-party services.",
            "MITRE ATT&CK Keywords": [
                "configuration tampering",
                "third-party integration",
                "data leakage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending inappropriate or illegal content through direct messaging.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient logging of user activities.",
                    "Role": "Platform Administrator",
                    "Condition": "User activities are not adequately logged."
                },
                {
                    "Assumption": "No digital signatures for message contents.",
                    "Role": "Platform Administrator",
                    "Condition": "Messages are not signed to verify authenticity."
                },
                {
                    "Assumption": "User accounts can be compromised easily.",
                    "Role": "User",
                    "Condition": "Lack of strong security measures like MFA."
                }
            ],
            "Potential Impact": "Difficulty in verifying the sender, compromising the platform's credibility and user's reputation.",
            "MITRE ATT&CK Keywords": [
                "activity logging",
                "digital signatures",
                "accountability"
            ],
            "mitre_technique": {
                "name": "SIP and Trust Provider Hijacking",
                "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode (Citation: Microsoft Authenticode) digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  (Citation: Microsoft WinVerifyTrust) which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. (Citation: SpectorOps Subverting Trust Sept 2017)\n\nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) (Citation: EduardosBlog SIPs July 2008) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017)) and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps Subverting Trust Sept 2017)\n\nSimilar to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)\n\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE[\\WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code> that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP (Citation: GitHub SIP POC Sept 2017) (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code> that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\n* Modifying the <code>DLL</code> and <code>Function</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID}</code> that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\n* **Note:** The above hijacks are also possible without modifying the Registry via [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. (Citation: SpectorOps Subverting Trust Sept 2017)",
                "id": "attack-pattern--543fceb5-cb92-40cb-aacf-6913d4db58bc",
                "technique_id": "T1553.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A third-party application denies involvement in a data breach.",
            "Assumptions": [
                {
                    "Assumption": "Lack of integration activity logs.",
                    "Role": "Platform Administrator",
                    "Condition": "Loggings of third-party integrations are not maintained."
                },
                {
                    "Assumption": "Insecure communication between the platform and third-party applications.",
                    "Role": "Platform Administrator",
                    "Condition": "Communication channels are not secured."
                },
                {
                    "Assumption": "Third-party applications have excessive permissions.",
                    "Role": "User",
                    "Condition": "Permissions granted are beyond necessary."
                }
            ],
            "Potential Impact": "Compromised ability to trace the breach source, leading to data confidentiality violations.",
            "MITRE ATT&CK Keywords": [
                "third-party deniability",
                "integration logs",
                "data breach"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Administrative actions are denied by platform administrators in case of misconfiguration or accidental data loss.",
            "Assumptions": [
                {
                    "Assumption": "Administrative actions are not logged.",
                    "Role": "Platform Administrator",
                    "Condition": "Administrative actions lack logging for audit purposes."
                },
                {
                    "Assumption": "Inadequate monitoring of administrative activities.",
                    "Role": "Platform Administrator",
                    "Condition": "There is no real-time monitoring of admin activities."
                },
                {
                    "Assumption": "Access controls for administrative roles are poorly managed.",
                    "Role": "Platform Administrator",
                    "Condition": "Roles and permissions are not properly enforced."
                }
            ],
            "Potential Impact": "Challenges in accountability and forensic investigations, compromising data integrity.",
            "MITRE ATT&CK Keywords": [
                "admin action logging",
                "accountability",
                "forensic readiness"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data could be exposed through insecure API endpoints.",
            "Assumptions": [
                {
                    "Assumption": "API endpoints lack proper authentication.",
                    "Role": "Platform Administrator",
                    "Condition": "APIs do not require authentication or have weak authentication mechanisms."
                },
                {
                    "Assumption": "Excessive data exposure from API responses.",
                    "Role": "Platform Administrator",
                    "Condition": "APIs return more data than necessary."
                },
                {
                    "Assumption": "Lack of encryption for data at rest and in transit.",
                    "Role": "Platform Administrator",
                    "Condition": "Data is stored and transmitted in plain text."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user data, compromising confidentiality.",
            "MITRE ATT&CK Keywords": [
                "API access",
                "data leakage",
                "unauthorized disclosure"
            ],
            "mitre_technique": {
                "name": "Application Access Token",
                "description": "Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.\n",
                "id": "attack-pattern--27960489-4e7f-461d-a62a-f5c0cb521e4a",
                "technique_id": "T1527"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker could access user information through unsecured third-party integrations.",
            "Assumptions": [
                {
                    "Assumption": "Third-party integrations are not vetted for security.",
                    "Role": "Platform Administrator",
                    "Condition": "Integrations are approved without security reviews."
                },
                {
                    "Assumption": "Data sharing agreements are poorly defined.",
                    "Role": "Platform Administrator",
                    "Condition": "Agreements do not specify data handling practices."
                },
                {
                    "Assumption": "Users are not informed about data sharing risks.",
                    "Role": "User",
                    "Condition": "Lack of user awareness regarding data sharing with third parties."
                }
            ],
            "Potential Impact": "Exposure of personal user data to unauthorized entities, leading to privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "third-party data access",
                "data sharing",
                "privacy breach"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Social engineering attacks could extract personal data from unaware users.",
            "Assumptions": [
                {
                    "Assumption": "Users are not adequately trained in security awareness.",
                    "Role": "User",
                    "Condition": "Users do not recognize social engineering tactics."
                },
                {
                    "Assumption": "The platform lacks mechanisms to detect and prevent social engineering.",
                    "Role": "Platform Administrator",
                    "Condition": "No detection tools for social engineering patterns."
                },
                {
                    "Assumption": "Attackers exploit trust between users.",
                    "Role": "Attacker",
                    "Condition": "Attackers leverage the trust factor among users."
                }
            ],
            "Potential Impact": "Loss of personal data due to deceit, compromising user confidentiality and integrity.",
            "MITRE ATT&CK Keywords": [
                "social engineering",
                "user data extraction",
                "phishing"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed Denial of Service (DDoS) attacks could target the platform's backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Insufficient network traffic monitoring.",
                    "Role": "Platform Administrator",
                    "Condition": "No real-time monitoring of network traffic."
                },
                {
                    "Assumption": "Lack of rate limiting and IP blacklisting.",
                    "Role": "Platform Administrator",
                    "Condition": "No mechanisms to mitigate flooding attacks."
                },
                {
                    "Assumption": "Backend servers lack redundancy and load balancing.",
                    "Role": "Platform Administrator",
                    "Condition": "The platform does not implement high availability solutions."
                }
            ],
            "Potential Impact": "Service unavailability, affecting user access and platform functionality.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "network disruption",
                "service interruption"
            ],
            "mitre_technique": {
                "name": "Network Denial of Service",
                "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",
                "id": "attack-pattern--d74c4a7e-ffbf-432f-9365-7ebf1f787cab",
                "technique_id": "T1498"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker could exploit vulnerabilities to crash the backend servers or databases.",
            "Assumptions": [
                {
                    "Assumption": "Unpatched vulnerabilities in server software.",
                    "Role": "Platform Administrator",
                    "Condition": "Security patches are delayed or not applied."
                },
                {
                    "Assumption": "The platform does not have intrusion detection systems (IDS).",
                    "Role": "Platform Administrator",
                    "Condition": "No IDS to detect abnormal behavior or attacks."
                },
                {
                    "Assumption": "Inadequate resource management and monitoring.",
                    "Role": "Platform Administrator",
                    "Condition": "Servers are not monitored for resource usage anomalies."
                }
            ],
            "Potential Impact": "Data availability impacts, disruptions to user activities, potential data loss if crashes corrupt the storage.",
            "MITRE ATT&CK Keywords": [
                "server crash",
                "exploitation",
                "database disruption"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Bot attacks aimed at overwhelming the platform's authentication mechanism.",
            "Assumptions": [
                {
                    "Assumption": "Weak protection against automated attacks.",
                    "Role": "Platform Administrator",
                    "Condition": "No CAPTCHAs or similar mechanisms to block bots."
                },
                {
                    "Assumption": "No rate limiting on authentication attempts.",
                    "Role": "Platform Administrator",
                    "Condition": "Unlimited attempts for login."
                },
                {
                    "Assumption": "The attacker can deploy or rent a botnet.",
                    "Role": "Attacker",
                    "Condition": "The attacker has access to or control of botnet resources."
                }
            ],
            "Potential Impact": "Disruption of user authentication services, leading to potential lockouts of legitimate users.",
            "MITRE ATT&CK Keywords": [
                "botnet",
                "authentication flooding",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker could exploit vulnerabilities to gain administrative access to the platform.",
            "Assumptions": [
                {
                    "Assumption": "Unpatched privilege escalation vulnerabilities.",
                    "Role": "Platform Administrator",
                    "Condition": "Vulnerabilities in the system are not promptly fixed."
                },
                {
                    "Assumption": "The attacker has some level of access to the platform.",
                    "Role": "Attacker",
                    "Condition": "Attackers have user or lower-level access."
                },
                {
                    "Assumption": "Lack of detailed monitoring of privilege escalations.",
                    "Role": "Platform Administrator",
                    "Condition": "Privileges escalations are not logged or monitored."
                }
            ],
            "Potential Impact": "Compromised platform security, unauthorized administrative actions, potential data breaches and sabotage.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "administrative access",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malicious insider uses elevated access to alter critical backend configurations.",
            "Assumptions": [
                {
                    "Assumption": "Inadequate access controls and oversight for insiders.",
                    "Role": "Platform Administrator",
                    "Condition": "Insufficient monitoring of insider activities."
                },
                {
                    "Assumption": "Privileged accounts are not monitored effectively.",
                    "Role": "Platform Administrator",
                    "Condition": "Lack of logging and alerting for privileged actions."
                },
                {
                    "Assumption": "Separation of duties is not enforced strictly.",
                    "Role": "Platform Administrator",
                    "Condition": "Single individuals have access to multiple critical system components."
                }
            ],
            "Potential Impact": "Critical system configurations could be tampered with, compromising system functionality and data integrity.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "configuration tampering",
                "access control"
            ],
            "mitre_technique": {
                "name": "Group Policy Modification",
                "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016) \n\nLike other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.\n\nMalicious GPO modifications can be used to implement many other malicious behaviors such as [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001), [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105), [Create Account](https://attack.mitre.org/techniques/T1136), [Service Execution](https://attack.mitre.org/techniques/T1569/002),  and more.(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)(Citation: Mandiant M Trends 2016)(Citation: Microsoft Hacking Team Breach) Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.(Citation: Wald0 Guide to GPOs)\n\nFor example, publicly available scripts such as <code>New-GPOImmediateTask</code> can be leveraged to automate the creation of a malicious [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053) by modifying GPO settings, in this case modifying <code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>.(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions) In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.(Citation: Harmj0y SeEnableDelegationPrivilege Right)",
                "id": "attack-pattern--5d2be8b9-d24c-4e98-83bf-2f5f79477163",
                "technique_id": "T1484.001"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An unauthorized user exploits a weak access control to gain elevated privileges on third-party services integrated with the platform.",
            "Assumptions": [
                {
                    "Assumption": "Weak access control implementations for integrations.",
                    "Role": "Platform Administrator",
                    "Condition": "Third-party services are not adequately secured."
                },
                {
                    "Assumption": "Excessive permissions granted to users or applications.",
                    "Role": "Platform Administrator",
                    "Condition": "Permissions are not minimized through the principle of least privilege."
                },
                {
                    "Assumption": "Poor auditing of access control logs.",
                    "Role": "Platform Administrator",
                    "Condition": "Access control changes are not properly logged and monitored."
                }
            ],
            "Potential Impact": "Privilege abuse on integrated services, leading to data breaches, unauthorized configurations, and potential service disruption.",
            "MITRE ATT&CK Keywords": [
                "access control",
                "elevation of privilege",
                "third-party integration"
            ],
            "mitre_technique": {
                "name": "Additional Container Cluster Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled user or service account to maintain persistent access to a container orchestration system. For example, an adversary with sufficient permissions may create a RoleBinding or a ClusterRoleBinding to bind a Role or ClusterRole to a Kubernetes account.(Citation: Kubernetes RBAC)(Citation: Aquasec Kubernetes Attack 2023) Where attribute-based access control (ABAC) is in use, an adversary with sufficient permissions may modify a Kubernetes ABAC policy to give the target account additional permissions.(Citation: Kuberentes ABAC)\n \nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised.  \n\nNote that where container orchestration systems are deployed in cloud environments, as with Google Kubernetes Engine, Amazon Elastic Kubernetes Service, and Azure Kubernetes Service, cloud-based  role-based access control (RBAC) assignments or ABAC policies can often be used in place of or in addition to local permission assignments.(Citation: Google Cloud Kubernetes IAM)(Citation: AWS EKS IAM Roles for Service Accounts)(Citation: Microsoft Azure Kubernetes Service Service Accounts) In these cases, this technique may be used in conjunction with [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003).",
                "id": "attack-pattern--35d30338-5bfa-41b0-a170-ec06dfd75f64",
                "technique_id": "T1098.006"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "26",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake profile mimicking a legitimate user to gain trust and access to sensitive information or target other users.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has knowledge of the real user's profile information.",
                    "Role": "Attacker",
                    "Condition": "The real user's profile information is publicly accessible or has been leaked."
                },
                {
                    "Assumption": "The social media platform does not have strong verification mechanisms.",
                    "Role": "Platform",
                    "Condition": "Lack of multi-factor authentication or identity verification measures."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user information and potential manipulation of other users.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "identity theft",
                "social engineering",
                "fake profile"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
                "technique_id": "T1586.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts and manipulates the authentication process to gain unauthorized access to another user\u2019s account.",
            "Assumptions": [
                {
                    "Assumption": "The communication between the user and the server is not encrypted.",
                    "Role": "Attacker",
                    "Condition": "The application does not use HTTPS."
                },
                {
                    "Assumption": "The attacker has access to the same network as the user.",
                    "Role": "Attacker",
                    "Condition": "The attacker and victim are connected to the same insecure Wi-Fi network."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts and potential data breach.",
            "MITRE ATT&CK Keywords": [
                "session hijacking",
                "man-in-the-middle",
                "network sniffing",
                "credential interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker uses a compromised third-party integration to impersonate legitimate users from that third party.",
            "Assumptions": [
                {
                    "Assumption": "The third-party application is compromised.",
                    "Role": "Third-Party Service",
                    "Condition": "The third-party service does not maintain proper security hygiene."
                },
                {
                    "Assumption": "Users have linked their social media accounts to the third-party service.",
                    "Role": "User",
                    "Condition": "Users opt to link their social media accounts for convenience."
                }
            ],
            "Potential Impact": "Unauthorized actions and access within linked accounts, leading to data breaches.",
            "MITRE ATT&CK Keywords": [
                "third-party compromise",
                "service impersonation",
                "token reuse",
                "integration abuse"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies user data in transit between the client and the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "The communication channel between the client and server is not secure.",
                    "Role": "Developer",
                    "Condition": "The application does not use secure communication protocols like TLS/SSL."
                },
                {
                    "Assumption": "The attacker has access to the network.",
                    "Role": "Attacker",
                    "Condition": "The attacker and victim are on the same network."
                }
            ],
            "Potential Impact": "Data corruption leading to the loss of data integrity.",
            "MITRE ATT&CK Keywords": [
                "data manipulation",
                "network sniffing",
                "man-in-the-middle",
                "in-transit interception"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker uploads malicious content masquerading as legitimate user-generated content.",
            "Assumptions": [
                {
                    "Assumption": "The user-generated content is not properly validated.",
                    "Role": "Developer",
                    "Condition": "The application does not sanitize or validate uploaded content."
                },
                {
                    "Assumption": "The platform allows content uploads from users.",
                    "Role": "Platform",
                    "Condition": "Users can upload various types of content, including media files."
                }
            ],
            "Potential Impact": "Spread of malware and malicious content leading to data compromises on user devices.",
            "MITRE ATT&CK Keywords": [
                "file upload abuse",
                "malicious file delivery",
                "content tampering",
                "social media"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
                "technique_id": "T1586.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker tampers with backend server data by exploiting a vulnerability in server software.",
            "Assumptions": [
                {
                    "Assumption": "The server software has vulnerabilities.",
                    "Role": "Administrator",
                    "Condition": "Servers run outdated or unpatched software."
                },
                {
                    "Assumption": "The attacker has identified the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "The attacker seeks out and exploits known vulnerabilities."
                }
            ],
            "Potential Impact": "Data corruption and potential manipulation of critical application behavior.",
            "MITRE ATT&CK Keywords": [
                "server exploitation",
                "data corruption",
                "backend tampering",
                "vulnerability exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies sending messages or posting content that they actually did send or post.",
            "Assumptions": [
                {
                    "Assumption": "The application does not log actions with adequate detail.",
                    "Role": "Developer",
                    "Condition": "Logs lack sufficient detail or are not immutable."
                },
                {
                    "Assumption": "The offending user seeks to avoid accountability.",
                    "Role": "User",
                    "Condition": "The user denies actions to escape responsibility."
                }
            ],
            "Potential Impact": "Dispute resolution issues and potential legal ramifications.",
            "MITRE ATT&CK Keywords": [
                "activity repudiation",
                "log tampering",
                "content disputes",
                "legal issues"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker exploits logging flaws to manipulate log entries and cover their tracks.",
            "Assumptions": [
                {
                    "Assumption": "The logging mechanism has vulnerabilities.",
                    "Role": "Developer",
                    "Condition": "Logs are alterable or insufficiently protected."
                },
                {
                    "Assumption": "The attacker has access to the logging system.",
                    "Role": "Attacker",
                    "Condition": "The attacker compromises the logging system."
                }
            ],
            "Potential Impact": "Obfuscation of malicious activities and bypassing of audit trails.",
            "MITRE ATT&CK Keywords": [
                "log manipulation",
                "audit bypass",
                "repudiation",
                "evidence tampering"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies accepting terms and conditions or agreements after performing actions that required agreement to those terms.",
            "Assumptions": [
                {
                    "Assumption": "The terms acceptance process is not clearly logged.",
                    "Role": "Developer",
                    "Condition": "Lack of detailed logging for terms acceptance."
                },
                {
                    "Assumption": "The user performed actions contingent on agreeing to terms.",
                    "Role": "User",
                    "Condition": "Requires action confirmation linked to terms acceptance."
                }
            ],
            "Potential Impact": "Legal disputes and enforcement challenges regarding agreed terms.",
            "MITRE ATT&CK Keywords": [
                "agreements repudiation",
                "terms disputes",
                "compliance issues",
                "contract repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user information is leaked due to insufficient data masking or encryption.",
            "Assumptions": [
                {
                    "Assumption": "The application lacks proper encryption for sensitive data.",
                    "Role": "Developer",
                    "Condition": "Personal data is stored or transmitted without encryption."
                },
                {
                    "Assumption": "Sensitive data is exposed through APIs or user interfaces.",
                    "Role": "Platform",
                    "Condition": "APIs or UI elements expose sensitive information."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of personal information leading to privacy breaches.",
            "MITRE ATT&CK Keywords": [
                "data leakage",
                "encryption failure",
                "personal information",
                "API exposure"
            ],
            "mitre_technique": {
                "name": "Browser Information Discovery",
                "description": "Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.(Citation: Kaspersky Autofill)\n\nBrowser information may also highlight additional targets after an adversary has access to valid credentials, especially [Credentials In Files](https://attack.mitre.org/techniques/T1552/001) associated with logins cached by a browser.\n\nSpecific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g., `%APPDATA%/Google/Chrome`).(Citation: Chrome Roaming Profiles)",
                "id": "attack-pattern--5e4a2073-9643-44cb-a0b5-e7f4048446c7",
                "technique_id": "T1217"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains access to backend databases and extracts sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "The backend databases are not sufficiently secured.",
                    "Role": "Administrator",
                    "Condition": "Databases lack proper access controls or encryption."
                },
                {
                    "Assumption": "The attacker gains unauthorized access to backend systems.",
                    "Role": "Attacker",
                    "Condition": "Compromises credentials or exploits vulnerabilities."
                }
            ],
            "Potential Impact": "Massive data breach resulting in the loss of user trust and potential legal consequences.",
            "MITRE ATT&CK Keywords": [
                "database breach",
                "sensitive data",
                "unauthorized access",
                "data extraction"
            ],
            "mitre_technique": {
                "name": "Data from Cloud Storage",
                "description": "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                "id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7",
                "technique_id": "T1530"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits social engineering techniques to trick users into revealing sensitive information.",
            "Assumptions": [
                {
                    "Assumption": "Users are susceptible to social engineering attacks.",
                    "Role": "User",
                    "Condition": "Users lack awareness or training on security best practices."
                },
                {
                    "Assumption": "The attacker has convincing pretext.",
                    "Role": "Attacker",
                    "Condition": "Utilizes realistic scenarios and deception tactics."
                }
            ],
            "Potential Impact": "Disclosure of user credentials and sensitive personal information.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "social engineering",
                "information solicitation",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker overwhelms the backend servers with high-volume traffic, rendering the platform unusable.",
            "Assumptions": [
                {
                    "Assumption": "The application lacks adequate rate limiting or DDoS protection.",
                    "Role": "Developer",
                    "Condition": "Missing protective measures against high traffic volumes."
                },
                {
                    "Assumption": "The attacker has access to a botnet or other means to generate large traffic.",
                    "Role": "Attacker",
                    "Condition": "Controls enough resources to launch a successful DoS attack."
                }
            ],
            "Potential Impact": "Service disruption leading to temporary unavailability for legitimate users.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "traffic flooding",
                "service disruption",
                "availability attack"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits vulnerabilities in third-party integrations to crash the application.",
            "Assumptions": [
                {
                    "Assumption": "The integration code has exploitable flaws.",
                    "Role": "Third-Party Service",
                    "Condition": "Integration points are not fully vetted for security."
                },
                {
                    "Assumption": "The attacker targets these vulnerabilities intentionally.",
                    "Role": "Attacker",
                    "Condition": "Scans for vulnerabilities within linked services."
                }
            ],
            "Potential Impact": "System crashes and potential data integrity issues.",
            "MITRE ATT&CK Keywords": [
                "integration failure",
                "vulnerability exploitation",
                "crash attack",
                "third-party service"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker sends specially crafted requests to exploit a server vulnerability, causing the server to crash.",
            "Assumptions": [
                {
                    "Assumption": "The server software contains a known vulnerability.",
                    "Role": "Administrator",
                    "Condition": "Running outdated software with known exploits."
                },
                {
                    "Assumption": "The attacker can send these requests to the server.",
                    "Role": "Attacker",
                    "Condition": "Has network access to the vulnerable endpoint."
                }
            ],
            "Potential Impact": "Service unavailability, leading to downtime for users.",
            "MITRE ATT&CK Keywords": [
                "server crash",
                "crafted requests",
                "vulnerability exploitation",
                "service disruption"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability in the backend server to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "The backend server has vulnerabilities.",
                    "Role": "Administrator",
                    "Condition": "Servers run outdated or unpatched software."
                },
                {
                    "Assumption": "The attacker has identified the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "The attacker discovers and exploits known server vulnerabilities."
                }
            ],
            "Potential Impact": "Full control of the application environment and potential compromise of all user data.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "server exploitation",
                "administrative access",
                "security bypass"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker uses credential stuffing attacks to obtain higher-privilege accounts.",
            "Assumptions": [
                {
                    "Assumption": "Users reuse passwords across multiple sites.",
                    "Role": "User",
                    "Condition": "Multiple sites share the same user credentials."
                },
                {
                    "Assumption": "The application does not implement robust authentication mechanisms.",
                    "Role": "Platform",
                    "Condition": "Lack of multi-factor authentication and rate limiting."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive functionalities and data.",
            "MITRE ATT&CK Keywords": [
                "credential stuffing",
                "authentication bypass",
                "password reuse",
                "elevated access"
            ],
            "mitre_technique": {
                "name": "Credential Stuffing",
                "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.\n\nCredential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.\n\nTypically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)",
                "id": "attack-pattern--b2d03cea-aec1-45ca-9744-9ee583c1e1cc",
                "technique_id": "T1110.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits weak session management to gain elevated privileges.",
            "Assumptions": [
                {
                    "Assumption": "The application uses predictable session tokens.",
                    "Role": "Developer",
                    "Condition": "Weak generation and management of session tokens."
                },
                {
                    "Assumption": "The attacker has access to several valid session tokens.",
                    "Role": "Attacker",
                    "Condition": "Intercepts or guesses session tokens."
                }
            ],
            "Potential Impact": "Access to higher-privilege user accounts and potential data compromise.",
            "MITRE ATT&CK Keywords": [
                "session hijacking",
                "weak session management",
                "privilege elevation",
                "token prediction"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "27",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could create a fake login page for the social media platform to steal user credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users are not always cautious and may not verify the authenticity of the login page.",
                    "Role": "User",
                    "Condition": "When accessing the platform via links in emails or messages."
                },
                {
                    "Assumption": "Phishing emails or messages successfully reach the users.",
                    "Role": "Attacker",
                    "Condition": "By sending well-crafted phishing emails or messages."
                },
                {
                    "Assumption": "The legitimate website's URL is sufficiently similar to the fake one.",
                    "Role": "User",
                    "Condition": "When the user is not vigilant about checking URLs."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of user credentials leading to potential account compromise.",
            "MITRE ATT&CK Keywords": [
                "phishing",
                "credential stealing",
                "social engineering",
                "user account"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker may impersonate another user by exploiting insufficient authentication mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "Authentication mechanisms rely solely on passwords without additional factors.",
                    "Role": "Developer",
                    "Condition": "When robust authentication measures such as 2FA are not implemented."
                },
                {
                    "Assumption": "Users may use weak or easily guessable passwords.",
                    "Role": "User",
                    "Condition": "When password policies are weak or not enforced."
                },
                {
                    "Assumption": "There is no effective monitoring system to detect and block multiple failed login attempts.",
                    "Role": "Security Team",
                    "Condition": "When rate limiting or account lockout mechanisms are not in place."
                }
            ],
            "Potential Impact": "Unauthorized access to user accounts and sensitive information.",
            "MITRE ATT&CK Keywords": [
                "brute force",
                "password cracking",
                "account takeover",
                "identity theft"
            ],
            "mitre_technique": {
                "name": "Password Guessing",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                "technique_id": "T1110.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker could inject malicious JavaScript to spoof sessions and steal session tokens.",
            "Assumptions": [
                {
                    "Assumption": "The web application is vulnerable to Cross-Site Scripting (XSS).",
                    "Role": "Developer",
                    "Condition": "When input validation and sanitization are inadequate."
                },
                {
                    "Assumption": "Users visit a compromised page where the malicious script is injected.",
                    "Role": "User",
                    "Condition": "When accessing untrusted links or content."
                },
                {
                    "Assumption": "The attacker can capture the session token during an active session.",
                    "Role": "Attacker",
                    "Condition": "When session tokens are not securely transmitted or stored."
                }
            ],
            "Potential Impact": "Session hijacking leading to unauthorized actions under the user's account.",
            "MITRE ATT&CK Keywords": [
                "XSS",
                "session hijacking",
                "injection",
                "web application"
            ],
            "mitre_technique": {
                "name": "Steal Web Session Cookie",
                "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)\n\nThere are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                "id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff",
                "technique_id": "T1539"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies data in transit between the user and the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Data is transmitted in clear text or without strong encryption.",
                    "Role": "Developer",
                    "Condition": "When secure protocols like HTTPS are not enforced."
                },
                {
                    "Assumption": "The attacker has access to the network traffic.",
                    "Role": "Attacker",
                    "Condition": "When network communications are not properly secured."
                },
                {
                    "Assumption": "There is no integrity check to detect tampered data.",
                    "Role": "Security Team",
                    "Condition": "When data integrity mechanisms such as HMAC are not implemented."
                }
            ],
            "Potential Impact": "Data integrity compromise, potential unauthorized actions or manipulation of user content.",
            "MITRE ATT&CK Keywords": [
                "network traffic",
                "man-in-the-middle",
                "data integrity",
                "HTTPS"
            ],
            "mitre_technique": {
                "name": "Adversary-in-the-Middle",
                "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).",
                "id": "attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d",
                "technique_id": "T1557"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies backend server configurations to gain unauthorized privileges.",
            "Assumptions": [
                {
                    "Assumption": "Configuration files are not properly secured.",
                    "Role": "Administrator",
                    "Condition": "When access controls on configuration files are weak."
                },
                {
                    "Assumption": "The attacker has access to the server either physically or via network.",
                    "Role": "Attacker",
                    "Condition": "When remote access to servers is inadequately controlled."
                },
                {
                    "Assumption": "There are no alerts for configuration changes.",
                    "Role": "Security Team",
                    "Condition": "When monitoring and alerting mechanisms are not enforced."
                }
            ],
            "Potential Impact": "System integrity compromise leading to unauthorized system changes and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "configuration tampering",
                "server compromise",
                "privilege escalation",
                "backend server"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker uses an exploitation tool to manipulate user input and execute unauthorized database commands (SQL Injection).",
            "Assumptions": [
                {
                    "Assumption": "The web application does not properly validate or sanitize user input.",
                    "Role": "Developer",
                    "Condition": "When proper input validation or prepared statements are not used."
                },
                {
                    "Assumption": "The attacker can interact with input fields or URL parameters.",
                    "Role": "Attacker",
                    "Condition": "When user input points are exposed without protection."
                },
                {
                    "Assumption": "The database server processes input directly without extra validation.",
                    "Role": "Database Administrator",
                    "Condition": "When defenses against SQL Injection are absent."
                }
            ],
            "Potential Impact": "Database integrity compromise and potential unauthorized access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "SQL injection",
                "database tampering",
                "input validation",
                "command injection"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny sending messages or posted content due to lack of effective logging.",
            "Assumptions": [
                {
                    "Assumption": "The application does not maintain comprehensive logs of user actions.",
                    "Role": "Developer",
                    "Condition": "When logging functionality is not implemented or is incomplete."
                },
                {
                    "Assumption": "Log data is non-repudiable and not tamper-evident.",
                    "Role": "Developer",
                    "Condition": "When logs are stored without integrity mechanisms."
                },
                {
                    "Assumption": "Logs are not monitored or reviewed regularly.",
                    "Role": "Security Team",
                    "Condition": "When log management practices are inadequate."
                }
            ],
            "Potential Impact": "Loss of accountability and potential disputes over legitimate actions performed on the platform.",
            "MITRE ATT&CK Keywords": [
                "logging",
                "non-repudiation",
                "user action",
                "audit logs"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Linux Audit System",
                "description": "Adversaries may disable or modify the Linux audit system to hide malicious activity and avoid detection. Linux admins use the Linux Audit system to track security-relevant information on a system. The Linux Audit system operates at the kernel-level and maintains event logs on application and system activity such as process, network, file, and login events based on pre-configured rules.\n\nOften referred to as `auditd`, this is the name of the daemon used to write events to disk and is governed by the parameters set in the `audit.conf` configuration file. Two primary ways to configure the log generation rules are through the command line `auditctl` utility and the file `/etc/audit/audit.rules`,  containing a sequence of `auditctl` commands loaded at boot time.(Citation: Red Hat System Auditing)(Citation: IzyKnows auditd threat detection 2022)\n\nWith root privileges, adversaries may be able to ensure their activity is not logged through disabling the Audit system service, editing the configuration/rule files, or by hooking the Audit system library functions. Using the command line, adversaries can disable the Audit system service through killing processes associated with `auditd` daemon or use `systemctl` to stop the Audit service. Adversaries can also hook Audit system functions to disable logging or modify the rules contained in the `/etc/audit/audit.rules` or `audit.conf` files to ignore malicious activity.(Citation: Trustwave Honeypot SkidMap 2023)(Citation: ESET Ebury Feb 2014)",
                "id": "attack-pattern--562e9b64-7239-493d-80f4-2bff900d9054",
                "technique_id": "T1562.012"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker modifies log files to cover their tracks following unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "Log files are stored in a location that the attacker can access.",
                    "Role": "Administrator",
                    "Condition": "When access controls on log files are weak."
                },
                {
                    "Assumption": "Logging mechanisms do not include tamper-evident data.",
                    "Role": "Developer",
                    "Condition": "When logs lack cryptographic integrity protection methods."
                },
                {
                    "Assumption": "Log file changes are not monitored for unusual patterns.",
                    "Role": "Security Team",
                    "Condition": "When monitoring mechanisms are absent or inadequate."
                }
            ],
            "Potential Impact": "Erosion of data integrity and undermined ability to track malicious actions.",
            "MITRE ATT&CK Keywords": [
                "log tampering",
                "data integrity",
                "audit trails",
                "cover tracks"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user disputes financial transactions or purchases made via third-party integrations.",
            "Assumptions": [
                {
                    "Assumption": "The application does not maintain detailed records of transaction histories.",
                    "Role": "Developer",
                    "Condition": "When transaction logging is insufficient."
                },
                {
                    "Assumption": "Third-party integrations do not have reliable logging systems or data sharing agreements.",
                    "Role": "Third-Party Provider",
                    "Condition": "When logging practices are inconsistent across integrated platforms."
                },
                {
                    "Assumption": "There is no proper user authentication for transaction approval.",
                    "Role": "Developer",
                    "Condition": "When robust authentication mechanisms (e.g., multi-factor) are not enforced."
                }
            ],
            "Potential Impact": "Disputed financial claims leading to loss of trust and potential financial damage.",
            "MITRE ATT&CK Keywords": [
                "transaction logging",
                "financial dispute",
                "third-party integration",
                "non-repudiation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "The application exposes sensitive user data due to inadequate access control mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "Access control mechanisms are not granular or role-based.",
                    "Role": "Developer",
                    "Condition": "When access control policies are not implemented."
                },
                {
                    "Assumption": "Sensitive data access is not logged or monitored.",
                    "Role": "Security Team",
                    "Condition": "When access attempts to sensitive data are not tracked."
                },
                {
                    "Assumption": "Unauthorized users can bypass the existing security controls.",
                    "Role": "Attacker",
                    "Condition": "When there are vulnerabilities in the access control implementation."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user data compromising user privacy.",
            "MITRE ATT&CK Keywords": [
                "access control",
                "data exposure",
                "sensitive information",
                "privacy breach"
            ],
            "mitre_technique": {
                "name": "File and Directory Permissions Modification",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) ",
                "id": "attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196",
                "technique_id": "T1222"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Third-party integrations inadvertently grant excessive permissions leading to unauthorized data access.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications request more permissions than necessary.",
                    "Role": "Third-Party Developer",
                    "Condition": "When data access requests are excessive."
                },
                {
                    "Assumption": "Users do not fully understand permission requests or their implications.",
                    "Role": "User",
                    "Condition": "When permission requests are not clearly explained."
                },
                {
                    "Assumption": "There is no mechanism to review and manage granted permissions periodically.",
                    "Role": "Developer",
                    "Condition": "When permissions are not audited regularly."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive user data by third-party applications.",
            "MITRE ATT&CK Keywords": [
                "third-party integration",
                "permissions",
                "data access",
                "information leakage"
            ],
            "mitre_technique": {
                "name": "Active Setup",
                "description": "Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer.(Citation: Klein Active Setup 2010) These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nAdversaries may abuse Active Setup by creating a key under <code> HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\</code> and setting a malicious value for <code>StubPath</code>. This value will serve as the program that will be executed when a user logs into the computer.(Citation: Mandiant Glyer APT 2010)(Citation: Citizenlab Packrat 2015)(Citation: FireEye CFR Watering Hole 2012)(Citation: SECURELIST Bright Star 2015)(Citation: paloalto Tropic Trooper 2016)\n\nAdversaries can abuse these components to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.",
                "id": "attack-pattern--22522668-ddf6-470b-a027-9d6866679f67",
                "technique_id": "T1547.014"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker exploits an application vulnerability to retrieve user profile information.",
            "Assumptions": [
                {
                    "Assumption": "The application is vulnerable to data leaks or broken access controls.",
                    "Role": "Developer",
                    "Condition": "When security testing is insufficient."
                },
                {
                    "Assumption": "Sensitive user profile data is stored and retrievable without proper encryption.",
                    "Role": "Developer",
                    "Condition": "When data encryption for sensitive information is not implemented."
                },
                {
                    "Assumption": "Attackers can locate and exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "When the application has known unpatched vulnerabilities."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of personal and sensitive user information.",
            "MITRE ATT&CK Keywords": [
                "data leak",
                "broken access control",
                "vulnerability exploitation",
                "profile information"
            ],
            "mitre_technique": {
                "name": "Compromise Accounts",
                "description": "Adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. [Establish Accounts](https://attack.mitre.org/techniques/T1585)), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials.(Citation: AnonHBGary)(Citation: Microsoft DEV-0537) Prior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries may directly leverage compromised email accounts for [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Phishing](https://attack.mitre.org/techniques/T1566).",
                "id": "attack-pattern--81033c3b-16a4-46e4-8fed-9b030dd03c4a",
                "technique_id": "T1586"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker launches a Distributed Denial of Service (DDoS) attack to disrupt the platform's availability.",
            "Assumptions": [
                {
                    "Assumption": "The application lacks adequate DDoS protection mechanisms.",
                    "Role": "Developer",
                    "Condition": "When DDoS mitigation strategies are not implemented."
                },
                {
                    "Assumption": "The attacker has access to a large network of compromised systems (botnet).",
                    "Role": "Attacker",
                    "Condition": "When the attacker controls sufficient resources to overwhelm the service."
                },
                {
                    "Assumption": "The platform is highly reliant on continuous availability.",
                    "Role": "User",
                    "Condition": "When service disruption severely impacts user experience."
                }
            ],
            "Potential Impact": "Disruption to system availability and user access, potentially leading to loss of revenue and reputation.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "service disruption",
                "botnet",
                "system availability"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a resource exhaustion vulnerability to overload the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "The application has a resource-intensive feature that can be exploited.",
                    "Role": "Developer",
                    "Condition": "When resource limits are not enforced."
                },
                {
                    "Assumption": "The attacker can repeatedly trigger this feature.",
                    "Role": "Attacker",
                    "Condition": "When rate limiting or request throttling is not implemented."
                },
                {
                    "Assumption": "There are no mechanisms to detect and mitigate abnormal usage patterns.",
                    "Role": "Security Team",
                    "Condition": "When anomaly detection capabilities are lacking."
                }
            ],
            "Potential Impact": "System overload leading to service unavailability and degraded performance.",
            "MITRE ATT&CK Keywords": [
                "resource exhaustion",
                "backend server",
                "service unavailability",
                "performance degradation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A malicious user uploads large files repeatedly to exhaust storage resources.",
            "Assumptions": [
                {
                    "Assumption": "The application allows users to upload files without strict size limitations.",
                    "Role": "Developer",
                    "Condition": "When file size restrictions are not properly enforced."
                },
                {
                    "Assumption": "The attacker can create multiple fake accounts to bypass upload limits.",
                    "Role": "Attacker",
                    "Condition": "When user registration lacks robust validation mechanisms."
                },
                {
                    "Assumption": "There is no automated monitoring of storage usage and alerting mechanisms.",
                    "Role": "Security Team",
                    "Condition": "When there is a lack of storage consumption monitoring."
                }
            ],
            "Potential Impact": "Exhaustion of storage capacity leading to system unavailability and potential data loss.",
            "MITRE ATT&CK Keywords": [
                "storage exhaustion",
                "file upload",
                "resource depletion",
                "system unavailability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability to gain higher privileges within the application.",
            "Assumptions": [
                {
                    "Assumption": "The application has a known vulnerability that can be exploited.",
                    "Role": "Developer",
                    "Condition": "When the application is not regularly patched or updated."
                },
                {
                    "Assumption": "Sensitive operations are not sufficiently protected by access controls.",
                    "Role": "Developer",
                    "Condition": "When privilege barriers are weak or nonexistent."
                },
                {
                    "Assumption": "The attacker has already gained some level of access to the system.",
                    "Role": "Attacker",
                    "Condition": "When initial access has been achieved through other means (e.g., phishing)."
                }
            ],
            "Potential Impact": "Unauthorized execution of privileged operations, compromising system integrity and security.",
            "MITRE ATT&CK Keywords": [
                "privilege escalation",
                "vulnerability exploitation",
                "system integrity",
                "access control"
            ],
            "mitre_technique": {
                "name": "File System Permissions Weakness",
                "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
                "id": "attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a",
                "technique_id": "T1044"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An insider user exploits configuration flaws to upgrade their access level.",
            "Assumptions": [
                {
                    "Assumption": "Configuration flaws exist in user role management.",
                    "Role": "Administrator",
                    "Condition": "When role permissions are not properly configured."
                },
                {
                    "Assumption": "The user has some level of legitimate access to the system.",
                    "Role": "User",
                    "Condition": "When the user already holds a lower privileged account."
                },
                {
                    "Assumption": "There are no alerts or monitoring of privilege changes.",
                    "Role": "Security Team",
                    "Condition": "When user privilege change logs are not monitored."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive data and capabilities leading to potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "insider threat",
                "configuration flaw",
                "access level",
                "privileged operations"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits third-party service vulnerabilities to gain higher privileges in the main application.",
            "Assumptions": [
                {
                    "Assumption": "Third-party services have security vulnerabilities.",
                    "Role": "Third-Party Developer",
                    "Condition": "When third-party services are not regularly updated and patched."
                },
                {
                    "Assumption": "The application relies on third-party services for certain functionalities.",
                    "Role": "Developer",
                    "Condition": "When third-party services are integrated without additional security reviews."
                },
                {
                    "Assumption": "There are no isolation mechanisms between the main application and third-party services.",
                    "Role": "Developer",
                    "Condition": "When third-party services have direct access to main application data and functions."
                }
            ],
            "Potential Impact": "Escalation to higher privileges resulting in unauthorized actions within the main application.",
            "MITRE ATT&CK Keywords": [
                "third-party vulnerability",
                "privilege escalation",
                "service integration",
                "unauthorized actions"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "28",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake social media profile imitating a trusted person to gain access to sensitive conversations with other users.",
            "Assumptions": [
                {
                    "Assumption": "Users do not thoroughly verify the authenticity of profiles.",
                    "Role": "User",
                    "Condition": "Users overlook verification."
                },
                {
                    "Assumption": "Attackers have access to some identifying information of the target.",
                    "Role": "Attacker",
                    "Condition": "Publicly available or previously compromised data."
                },
                {
                    "Assumption": "The platform does not have robust mechanisms to detect and disable fake profiles quickly.",
                    "Role": "Application",
                    "Condition": "Ineffective automated or manual verification processes."
                }
            ],
            "Potential Impact": "Unauthorized access to sensitive information.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "social engineering",
                "identity deception",
                "profile creation"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage)\n\nFor operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. \n\nOnce a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--b1ccd744-3f78-4a0e-9bb2-2002057f7928",
                "technique_id": "T1585.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker gains control of a user's account by spoofing a third-party application linked to the social media profile.",
            "Assumptions": [
                {
                    "Assumption": "The third-party application is vulnerable to exploitation.",
                    "Role": "Attacker",
                    "Condition": "Existing vulnerabilities in third-party apps."
                },
                {
                    "Assumption": "Users grant extensive permissions to third-party applications without proper scrutiny.",
                    "Role": "User",
                    "Condition": "Users trust third-party applications without evaluation."
                },
                {
                    "Assumption": "No efficient monitoring or alerting mechanism in place to detect suspicious third-party access.",
                    "Role": "Application",
                    "Condition": "Lack of security monitoring."
                }
            ],
            "Potential Impact": "Unauthorized access to user profiles and data.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "third-party application",
                "account takeover",
                "unauthorized access"
            ],
            "mitre_technique": {
                "name": "Steal Application Access Token",
                "description": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019)  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.(Citation: Kubernetes Service Accounts)  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment.(Citation: Cider Security Top 10 CICD Security Risks) If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017) The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens(Citation: Auth0 Understanding Refresh Tokens), allowing them to obtain new access tokens without prompting the user.  \n\n",
                "id": "attack-pattern--890c9858-598c-401d-a4d5-c67ebcdd703a",
                "technique_id": "T1528"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attackers use phishing emails that appear to come from the social media platform to capture user login credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users use weak or reused passwords.",
                    "Role": "User",
                    "Condition": "Users do not follow strong password protocols."
                },
                {
                    "Assumption": "Email system does not consistently filter out phishing attempts.",
                    "Role": "Email Provider",
                    "Condition": "Ineffective spam and phishing detection."
                },
                {
                    "Assumption": "Users do not recognize the signs of phishing emails.",
                    "Role": "User",
                    "Condition": "Poor user awareness and training on phishing."
                }
            ],
            "Potential Impact": "Credential theft and potential account compromise.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "phishing",
                "credential theft",
                "email attack"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
                "id": "attack-pattern--20138b9d-1aac-4a26-8654-a36b6bbf2bba",
                "technique_id": "T1192"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker gains access to backend servers and manipulates user data, such as altering profile information or posts.",
            "Assumptions": [
                {
                    "Assumption": "Backend servers lack robust access control mechanisms.",
                    "Role": "Application",
                    "Condition": "Weak or improperly configured access controls."
                },
                {
                    "Assumption": "Attackers have knowledge of the system's architecture and vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Reconnaissance and prior information gathering."
                },
                {
                    "Assumption": "There is no reliable logging or monitoring of alterations to user data.",
                    "Role": "Application",
                    "Condition": "Lack of comprehensive logging and monitoring."
                }
            ],
            "Potential Impact": "Data integrity compromised.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "backend server",
                "data manipulation",
                "unauthorized changes"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Malicious code is injected into content shared on the platform, such as posts or messages, which can alter the content or lead to further compromises.",
            "Assumptions": [
                {
                    "Assumption": "The application does not properly sanitize user input.",
                    "Role": "Application",
                    "Condition": "Weak input validation."
                },
                {
                    "Assumption": "Attackers have the means to post or share content on the platform.",
                    "Role": "Attacker",
                    "Condition": "Authenticated or compromised accounts."
                },
                {
                    "Assumption": "Users access or interact with the malicious content.",
                    "Role": "User",
                    "Condition": "Users trust content from known sources."
                }
            ],
            "Potential Impact": "Data corruption and potential further compromise of user accounts.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "code injection",
                "content manipulation",
                "input validation"
            ],
            "mitre_technique": {
                "name": "Reflective Code Loading",
                "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
                "id": "attack-pattern--4933e63b-9b77-476e-ab29-761bc5b7d15a",
                "technique_id": "T1620"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Unauthorized modification of security and privacy settings, allowing broader access to user data than intended.",
            "Assumptions": [
                {
                    "Assumption": "The system does not implement multi-factor authentication effectively.",
                    "Role": "Application",
                    "Condition": "Weak authentication mechanisms."
                },
                {
                    "Assumption": "Users do not regularly monitor or review their privacy settings.",
                    "Role": "User",
                    "Condition": "Users neglect routine checks."
                },
                {
                    "Assumption": "Insufficient logging of changes to security settings.",
                    "Role": "Application",
                    "Condition": "Lack of detailed logging."
                }
            ],
            "Potential Impact": "Unauthorized data access and potential data breaches.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "privacy settings",
                "unauthorized modification",
                "access control"
            ],
            "mitre_technique": {
                "name": "Pass the Ticket",
                "description": "Adversaries may \u201cpass the ticket\u201d using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.\n\nWhen preforming PtT, valid Kerberos tickets for [Valid Accounts](https://attack.mitre.org/techniques/T1078) are captured by [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.(Citation: ADSecurity AD Kerberos Attacks)(Citation: GentilKiwi Pass the Ticket)\n\nA [Silver Ticket](https://attack.mitre.org/techniques/T1558/002) can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).(Citation: ADSecurity AD Kerberos Attacks)\n\nA [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.(Citation: Campbell 2014)\n\nAdversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e. [Pass the Hash](https://attack.mitre.org/techniques/T1550/002)) while also using the password hash to create a valid Kerberos ticket.(Citation: Stealthbits Overpass-the-Hash)",
                "id": "attack-pattern--7b211ac6-c815-4189-93a9-ab415deca926",
                "technique_id": "T1550.003"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having performed a specific action, such as posting defamatory content, due to lack of non-repudiation mechanisms.",
            "Assumptions": [
                {
                    "Assumption": "The system does not implement strong non-repudiation measures.",
                    "Role": "Application",
                    "Condition": "Lack of cryptographic signatures."
                },
                {
                    "Assumption": "Logs are not tamper-evident or are insufficiently detailed.",
                    "Role": "Application",
                    "Condition": "Incomplete or unprotected logging."
                },
                {
                    "Assumption": "Users are not aware of potential consequences for their actions.",
                    "Role": "User",
                    "Condition": "Poor user accountability awareness."
                }
            ],
            "Potential Impact": "Disputes and lack of accountability.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "non-repudiation failure",
                "action denial",
                "logging"
            ],
            "mitre_technique": {
                "name": "Clear Windows Event Logs",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
                "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
                "technique_id": "T1070.001"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Attackers delete logs of malicious activities to avoid detection and repudiation.",
            "Assumptions": [
                {
                    "Assumption": "Logs are not adequately protected against unauthorized access.",
                    "Role": "Application",
                    "Condition": "Weak log access controls."
                },
                {
                    "Assumption": "There are vulnerabilities that allow attackers to escalate privileges.",
                    "Role": "Attacker",
                    "Condition": "Exploitable vulnerabilities in the system."
                },
                {
                    "Assumption": "Monitoring tools do not detect log tampering.",
                    "Role": "Application",
                    "Condition": "Ineffective monitoring tools."
                }
            ],
            "Potential Impact": "Unnoticed malicious activities and reduced forensic capabilities.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log deletion",
                "tamper resistant logging",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Service Registry Permissions Weakness",
                "description": "Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, [PowerShell](https://attack.mitre.org/techniques/T1086), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through Access Control Lists and permissions. (Citation: MSDN Registry Key Security)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter Registry keys associated with service failure parameters (such as <code>FailureCommand</code>) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: TrustedSignal Service Failure)(Citation: Twitter Service Recovery Nov 2017)",
                "id": "attack-pattern--39a130e1-6ab7-434a-8bd2-418e7d9d6427",
                "technique_id": "T1058"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Third-party applications fail to log critical actions performed on the user's behalf, leading to ambiguity in user activity.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications have extensive permissions without oversight.",
                    "Role": "Application/Third-party",
                    "Condition": "Loose control on permissions."
                },
                {
                    "Assumption": "Users trust third-party applications without detailed scrutiny of their logging practices.",
                    "Role": "User",
                    "Condition": "Users allow excessive permissions."
                },
                {
                    "Assumption": "Inadequate integration of third-party logs with main application logging.",
                    "Role": "Application",
                    "Condition": "Poor logging integration."
                }
            ],
            "Potential Impact": "Unclear accountability for user actions.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "third-party applications",
                "log integration",
                "ambiguous activity"
            ],
            "mitre_technique": {
                "name": "Visual Basic",
                "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and the [Native API](https://attack.mitre.org/techniques/T1106) through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.(Citation: Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript](https://attack.mitre.org/techniques/T1059/007) on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) payloads (which may also involve [Mark-of-the-Web Bypass](https://attack.mitre.org/techniques/T1553/005) to enable execution).(Citation: Default VBS macros Blocking )",
                "id": "attack-pattern--dfd7cc1d-e1d8-4394-a198-97c4cab8aa67",
                "technique_id": "T1059.005"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data, such as private messages or personal information, is exposed due to a backend server breach.",
            "Assumptions": [
                {
                    "Assumption": "Backend servers have exploitable vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Unpatched or unknown vulnerabilities in servers."
                },
                {
                    "Assumption": "Sensitive data is not encrypted at rest or during transmission.",
                    "Role": "Application",
                    "Condition": "Weak encryption practices."
                },
                {
                    "Assumption": "Inadequate intrusion detection systems in place.",
                    "Role": "Application",
                    "Condition": "Lack of comprehensive monitoring."
                }
            ],
            "Potential Impact": "Unauthorized disclosure of sensitive user data.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "data breach",
                "backend server",
                "encryption"
            ],
            "mitre_technique": {
                "name": "Weaken Encryption",
                "description": "Adversaries may compromise a network device\u2019s encryption capability in order to bypass encryption that would otherwise protect data communications. (Citation: Cisco Synful Knock Evolution)\n\nEncryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.\n\nAdversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as [Modify System Image](https://attack.mitre.org/techniques/T1601), [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001), and [Disable Crypto Hardware](https://attack.mitre.org/techniques/T1600/002), an adversary can negatively effect and/or eliminate a device\u2019s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. (Citation: Cisco Blog Legacy Device Attacks)",
                "id": "attack-pattern--1f9012ef-1e10-4e48-915e-e03563435fe8",
                "technique_id": "T1600"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker intercepts unencrypted data between user devices and backend servers through a man-in-the-middle attack.",
            "Assumptions": [
                {
                    "Assumption": "User data is transmitted without proper encryption.",
                    "Role": "Application",
                    "Condition": "HTTP instead of HTTPS."
                },
                {
                    "Assumption": "Network channels are susceptible to interception.",
                    "Role": "Attacker",
                    "Condition": "Insecure network configuration."
                },
                {
                    "Assumption": "Users are unaware of potential risks of connecting through insecure networks.",
                    "Role": "User",
                    "Condition": "Lack of awareness on secure connections."
                }
            ],
            "Potential Impact": "Sensitive data interception.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "man-in-the-middle",
                "unencrypted transmission",
                "network attack"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Improper access controls expose user content and profiles to unauthorized users.",
            "Assumptions": [
                {
                    "Assumption": "Privacy settings are misconfigured or insufficient.",
                    "Role": "Application",
                    "Condition": "Weak default privacy settings."
                },
                {
                    "Assumption": "Users do not adequately configure their privacy settings.",
                    "Role": "User",
                    "Condition": "Users neglect privacy controls."
                },
                {
                    "Assumption": "Access controls are not enforced consistently across the platform.",
                    "Role": "Application",
                    "Condition": "Ineffective access control mechanisms."
                }
            ],
            "Potential Impact": "Unauthorized access to user profiles and content.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "access control",
                "privacy settings",
                "authorization"
            ],
            "mitre_technique": {
                "name": "Steal Application Access Token",
                "description": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019)  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.(Citation: Kubernetes Service Accounts)  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment.(Citation: Cider Security Top 10 CICD Security Risks) If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017) The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens(Citation: Auth0 Understanding Refresh Tokens), allowing them to obtain new access tokens without prompting the user.  \n\n",
                "id": "attack-pattern--890c9858-598c-401d-a4d5-c67ebcdd703a",
                "technique_id": "T1528"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed Denial of Service (DDoS) attack targeting the backend servers, causing downtime for the social media platform.",
            "Assumptions": [
                {
                    "Assumption": "Lack of robust DDoS protection mechanisms.",
                    "Role": "Application",
                    "Condition": "Unprotected network infrastructure."
                },
                {
                    "Assumption": "Attackers can coordinate a large number of compromised devices.",
                    "Role": "Attacker",
                    "Condition": "Access to botnet or similar resources."
                },
                {
                    "Assumption": "Application does not have effective rate limiting or traffic management strategies.",
                    "Role": "Application",
                    "Condition": "Poor traffic handling."
                }
            ],
            "Potential Impact": "Service disruption and downtime.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "service disruption",
                "network overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Resource exhaustion attack by continuously creating fake user accounts and generating traffic, overwhelming the system.",
            "Assumptions": [
                {
                    "Assumption": "Automated registration processes do not have effective CAPTCHA mechanisms.",
                    "Role": "Application",
                    "Condition": "Weak bot detection."
                },
                {
                    "Assumption": "Insufficient rate limiting on account creation and activity.",
                    "Role": "Application",
                    "Condition": "Poor rate limiting mechanisms."
                },
                {
                    "Assumption": "System cannot scale resources quickly to handle sudden load increases.",
                    "Role": "Application",
                    "Condition": "Inflexible resource management."
                }
            ],
            "Potential Impact": "System overload and decreased performance.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "fake account creation",
                "traffic generation"
            ],
            "mitre_technique": {
                "name": "Application Exhaustion Flood",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)",
                "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
                "technique_id": "T1499.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of application vulnerabilities to crash backend servers through malformed requests.",
            "Assumptions": [
                {
                    "Assumption": "Application has unpatched or unknown vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Existing or discovered vulnerabilities in application."
                },
                {
                    "Assumption": "Attackers have knowledge or tools to exploit these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Access to exploitation tools and techniques."
                },
                {
                    "Assumption": "No effective input validation or error handling mechanisms are in place.",
                    "Role": "Application",
                    "Condition": "Weak input validation and error handling."
                }
            ],
            "Potential Impact": "Backend server crashes and loss of availability.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "vulnerability exploitation",
                "server crash",
                "malformed requests"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attackers exploit vulnerabilities in the backend server to gain admin-level access and perform unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "Existence of exploitable vulnerabilities in the backend server.",
                    "Role": "Attacker",
                    "Condition": "Unpatched or unknown vulnerabilities."
                },
                {
                    "Assumption": "Attackers have the capability to execute or escalate privileges through these vulnerabilities.",
                    "Role": "Attacker",
                    "Condition": "Knowledge of exploitation techniques."
                },
                {
                    "Assumption": "Lack of effective privilege separation and access control measures.",
                    "Role": "Application",
                    "Condition": "Weak access controls and privilege separation."
                }
            ],
            "Potential Impact": "Full control over backend systems and data.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "backend server",
                "admin access",
                "exploitation"
            ],
            "mitre_technique": {
                "name": "Exploitation for Privilege Escalation",
                "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020) Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) or [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570).",
                "id": "attack-pattern--b21c3b2d-02e6-45b1-980b-e69051040839",
                "technique_id": "T1068"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Malware infects user devices and exploits vulnerabilities to escalate privileges and access sensitive data or systems.",
            "Assumptions": [
                {
                    "Assumption": "User devices are not consistently protected with updated antivirus software.",
                    "Role": "User",
                    "Condition": "Outdated or absent antivirus protection."
                },
                {
                    "Assumption": "Malware uses known or zero-day exploits to escalate privileges.",
                    "Role": "Attacker",
                    "Condition": "Access to malware with exploitation capabilities."
                },
                {
                    "Assumption": "Users may unknowingly download or execute malicious software.",
                    "Role": "User",
                    "Condition": "Lack of user awareness and training."
                }
            ],
            "Potential Impact": "Compromise of user devices and access to sensitive data.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "malware",
                "device infection",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Extra Window Memory Injection",
                "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \n\nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)\n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.\n\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--0042a9f5-f053-4769-b3ef-9ad018dfa298",
                "technique_id": "T1055.011"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Insider threat where a user with legitimate access escalates their privileges to carry out unauthorized actions.",
            "Assumptions": [
                {
                    "Assumption": "Insiders have the knowledge to modify their privileges.",
                    "Role": "Insider",
                    "Condition": "Access to privileged information."
                },
                {
                    "Assumption": "Weak monitoring and alerting for privileged account actions.",
                    "Role": "Application",
                    "Condition": "Insufficient monitoring."
                },
                {
                    "Assumption": "Lax enforcement of least privilege principle.",
                    "Role": "Application",
                    "Condition": "Overly broad access permissions."
                }
            ],
            "Potential Impact": "Unauthorized actions leading to data breach or system compromise.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "insider threat",
                "unauthorized actions",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Windows Service",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)",
                "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
                "technique_id": "T1543.003"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "29",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker creates a fake profile masquerading as a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the internet and the platform.",
                    "Role": "Attacker",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "The platform does not have stringent verification processes.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Users are likely to trust profiles without extensive background checks.",
                    "Role": "User",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Unauthorized access to personal information.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "social engineering",
                "reconnaissance",
                "identity theft"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
                "technique_id": "T1586.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "An attacker intercepts and alters network traffic to impersonate a user.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the same network segment as the target.",
                    "Role": "Attacker",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "SSL/TLS is not properly implemented or configured.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Users or systems do not validate identities properly.",
                    "Role": "User/Platform",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Compromise of user credentials and session hijacking.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "man-in-the-middle",
                "session hijacking",
                "network traffic manipulation"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Exploitation of third-party integrations to send malicious requests as a trusted service.",
            "Assumptions": [
                {
                    "Assumption": "Third-party integrations are trusted without strong validation.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "The attacker can inject malicious payloads.",
                    "Role": "Attacker",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Integration lacks strong identity verification.",
                    "Role": "Third-Party",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Unauthorized actions and data misuse through third-party services.",
            "MITRE ATT&CK Keywords": [
                "spoofing",
                "third-party exploitation",
                "malicious payload",
                "identity manipulation"
            ],
            "mitre_technique": {
                "name": "Embedded Payloads",
                "description": "Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to [Subvert Trust Controls](https://attack.mitre.org/techniques/T1553) by not impacting execution controls such as digital signatures and notarization tickets.(Citation: Sentinel Labs) \n\nAdversaries may embed payloads in various file formats to hide payloads.(Citation: Microsoft Learn) This is similar to [Steganography](https://attack.mitre.org/techniques/T1027/003), though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats.(Citation: GitHub PSImage) \n\nFor example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary.(Citation: Securelist Dtrack2) Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format.(Citation: SentinelLabs reversing run-only applescripts 2021) \n\nEmbedded content may also be used as [Process Injection](https://attack.mitre.org/techniques/T1055) payloads used to infect benign system processes.(Citation: Trend Micro) These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.(Citation: Malware Analysis Report ComRAT)",
                "id": "attack-pattern--0533ab23-3f7d-463f-9bd8-634d27e4dee1",
                "technique_id": "T1027.009"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies content shared by users, such as photos or messages.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to the backend servers.",
                    "Role": "Attacker",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Content is not cryptographically secured during transmission.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Users are not verifying content integrity.",
                    "Role": "User",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Corruption of user data and false information dissemination.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "data corruption",
                "content manipulation",
                "integrity attack"
            ],
            "mitre_technique": {
                "name": "Disable or Modify Tools",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
                "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
                "technique_id": "T1562.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker alters user profile information maliciously.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has obtained administrative access or elevated privileges.",
                    "Role": "Attacker",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "User profiles are not sufficiently protected.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Audit logs and change tracking are weak or non-existent.",
                    "Role": "Platform",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Integrity breach leading to misinformation and reputational damage.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "profile manipulation",
                "privilege escalation",
                "integrity breach"
            ],
            "mitre_technique": {
                "name": "Additional Cloud Roles",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)",
                "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
                "technique_id": "T1098.003"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and modifies API communications between the platform and third-party applications.",
            "Assumptions": [
                {
                    "Assumption": "APIs are not secured with strong encryption.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "The attacker can intercept the API traffic.",
                    "Role": "Attacker",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Third-party integration lacks proper integrity checks.",
                    "Role": "Third-Party",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Data corruption and unauthorized API actions.",
            "MITRE ATT&CK Keywords": [
                "tampering",
                "API manipulation",
                "third-party exploitation",
                "data interception"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.(Citation: Linux Kernel Programming)\u00a0\n\nWhen used maliciously, LKMs can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0).(Citation: Linux Kernel Module Programming Guide)\u00a0Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.(Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.(Citation: System and kernel extensions in macOS)\n\nSince macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces.(Citation: Apple Kernel Extension Deprecation)\n\nAdversaries can use LKMs and kexts to conduct [Persistence](https://attack.mitre.org/tactics/TA0003) and/or [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) on a system. Examples have been found in the wild, and there are some relevant open source projects as well.(Citation: Volatility Phalanx2)(Citation: CrowdStrike Linux Rootkit)(Citation: GitHub Reptile)(Citation: GitHub Diamorphine)(Citation: RSAC 2015 San Francisco Patrick Wardle)(Citation: Synack Secure Kernel Extension Broken)(Citation: Securelist Ventir)(Citation: Trend Micro Skidmap)",
                "id": "attack-pattern--a1b52199-c8c5-438a-9ded-656f1d0888c6",
                "technique_id": "T1547.006"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A user denies having performed certain actions, such as sending messages.",
            "Assumptions": [
                {
                    "Assumption": "Logging mechanisms are weak or not tamper-proof.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Authentication logs can be altered.",
                    "Role": "Attacker",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Users have plausible deniability due to log issues.",
                    "Role": "User",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Disputes and lack of accountability leading to trust issues.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log manipulation",
                "accountability issues",
                "deniability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An API lacks proper logging, making it difficult to track actions performed by users or administrators.",
            "Assumptions": [
                {
                    "Assumption": "API calls are not logged or are insufficiently logged.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "The platform relies heavily on third-party APIs.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Users or administrators can perform actions without trace.",
                    "Role": "User/Admin",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Loss of forensic data and difficulty in incident response.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "API logging",
                "forensic difficulties",
                "traceability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "An attacker deletes or tampers with server logs to cover tracks.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has access to logging infrastructure.",
                    "Role": "Attacker",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Logging mechanisms are not secured or isolated.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "There are no redundancy or backup logs.",
                    "Role": "Platform",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Loss of audit trail and inconclusive investigations.",
            "MITRE ATT&CK Keywords": [
                "repudiation",
                "log tampering",
                "audit trail deletion",
                "investigation hindrance"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data exposed through insufficient access controls or bugs in the platform.",
            "Assumptions": [
                {
                    "Assumption": "The platform has inadequate access control mechanisms.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Sensitive data is not properly encrypted.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Users have not configured privacy settings optimally.",
                    "Role": "User",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Unauthorized access to personal and sensitive information.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "access control failure",
                "data leak",
                "sensitive information"
            ],
            "mitre_technique": {
                "name": "Web Session Cookie",
                "description": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.(Citation: Pass The Cookie)\n\nAuthentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539), the adversary then imports the cookie into a browser they control and is able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.\n\nThere have been examples of malware targeting session cookies to bypass multi-factor authentication systems.(Citation: Unit 42 Mac Crypto Cookies January 2019) ",
                "id": "attack-pattern--c5e31fb5-fcbd-48a4-af8c-5a6ed5b932e5",
                "technique_id": "T1506"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Data breaches resulting from exploiting vulnerabilities in third-party integrations.",
            "Assumptions": [
                {
                    "Assumption": "Third-party integrations are vulnerable and not audited.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "The attacker can exploit a known vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Sensitive data is shared with third parties.",
                    "Role": "Platform",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Unauthorized data exposure and potential misuse.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "third-party breach",
                "vulnerability exploitation",
                "data leakage"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Phishing attacks to trick users into revealing personal information.",
            "Assumptions": [
                {
                    "Assumption": "Users can be targeted via email or internal messaging.",
                    "Role": "Attacker",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Users do not verify the authenticity of requests.",
                    "Role": "User",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "The platform does not have strong anti-phishing measures.",
                    "Role": "Platform",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Disclosure of personal information through social engineering.",
            "MITRE ATT&CK Keywords": [
                "information disclosure",
                "phishing",
                "social engineering",
                "credential theft"
            ],
            "mitre_technique": {
                "name": "Spearphishing Link",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.",
                "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
                "technique_id": "T1598.003"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Distributed Denial of Service (DDoS) attack overwhelms the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "The platform is internet-facing and accessible to the public.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "The attacker has access to botnets or significant resources.",
                    "Role": "Attacker",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "There are no effective DDoS mitigations in place.",
                    "Role": "Platform",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Disruption of service availability and degraded performance.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "DDoS",
                "service disruption",
                "availability attack"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Logic bombs or malicious code injected into the backend systems causing application crashes.",
            "Assumptions": [
                {
                    "Assumption": "The attacker has penetrated the backend system.",
                    "Role": "Attacker",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Code integrity and auditing mechanisms are weak.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "No code execution monitoring is present.",
                    "Role": "Platform",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Application crashes and prolonged service interruptions.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "logic bomb",
                "malicious code injection",
                "application crash"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Exploitation of known server vulnerabilities leading to resource exhaustion.",
            "Assumptions": [
                {
                    "Assumption": "The server software is not updated with latest security patches.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Known vulnerabilities are not mitigated.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "The attacker can target multiple instances.",
                    "Role": "Attacker",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Resource exhaustion leading to denial of service.",
            "MITRE ATT&CK Keywords": [
                "denial of service",
                "resource exhaustion",
                "vulnerability exploitation",
                "server crash"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability to gain administrative access.",
            "Assumptions": [
                {
                    "Assumption": "The platform has unpatched vulnerabilities.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "The attacker can successfully exploit the vulnerability.",
                    "Role": "Attacker",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Administrative roles have high-level access controls.",
                    "Role": "Platform",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Full control over the system and access to all data.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "vulnerability exploitation",
                "administrative access",
                "full system control"
            ],
            "mitre_technique": {
                "name": "Cloud Administration Command",
                "description": "Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. (Citation: AWS Systems Manager Run Command)(Citation: Microsoft Run Command)\n\nIf an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment\u2019s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a [Trusted Relationship](https://attack.mitre.org/techniques/T1199) to execute commands in connected virtual machines.(Citation: MSTIC Nobelium Oct 2021)",
                "id": "attack-pattern--d94b3ae9-8059-4989-8e9f-ea0f601f80a7",
                "technique_id": "T1651"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Attacker uses social engineering to obtain higher level credentials.",
            "Assumptions": [
                {
                    "Assumption": "Users or administrators can be socially engineered.",
                    "Role": "User/Admin",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "There are no multi-factor authentication mechanisms.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "High privilege access is not restricted by multiple safeguards.",
                    "Role": "Platform",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Unauthorized access and potential platform-wide changes.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "social engineering",
                "credential theft",
                "privilege escalation"
            ],
            "mitre_technique": {
                "name": "Malicious File",
                "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) \n\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).",
                "id": "attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e",
                "technique_id": "T1204.002"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A privileged user intentionally misuses administrative privileges.",
            "Assumptions": [
                {
                    "Assumption": "Privileged users have extensive administrative rights.",
                    "Role": "Admin",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "There are insufficient checks on admin activities.",
                    "Role": "Platform",
                    "Condition": "Valid"
                },
                {
                    "Assumption": "Privileged user activity is not monitored or logged effectively.",
                    "Role": "Platform",
                    "Condition": "Valid"
                }
            ],
            "Potential Impact": "Abuse of privileges leading to unauthorized system changes and data access.",
            "MITRE ATT&CK Keywords": [
                "elevation of privilege",
                "insider threat",
                "administrative misuse",
                "privilege abuse"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        }
    ]
},
{
    "case_number": "6",
    "batch_number": "30",
    "threats": [
        {
            "Threat Type": "Spoofing",
            "Scenario": "A malicious actor creates a fake profile to impersonate a legitimate user.",
            "Assumptions": [
                {
                    "Assumption": "The platform does not have robust verification mechanisms.",
                    "Role": "Platform Security Designer",
                    "Condition": "Verification mechanisms are weak or absent."
                },
                {
                    "Assumption": "Users are not cautious about checking profile authenticity.",
                    "Role": "Users",
                    "Condition": "Users trust profiles without due diligence."
                }
            ],
            "Potential Impact": "Potential unauthorized communication and phishing attacks.",
            "MITRE ATT&CK Keywords": [
                "Impersonation",
                "Phishing",
                "Social Engineering",
                "Account Manipulation"
            ],
            "mitre_technique": {
                "name": "Social Media Accounts",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).",
                "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
                "technique_id": "T1586.001"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "A third-party application spoofs credentials to access user data.",
            "Assumptions": [
                {
                    "Assumption": "Authentication tokens can be intercepted or forged.",
                    "Role": "Third-Party Security",
                    "Condition": "Weak or improperly secured tokens."
                },
                {
                    "Assumption": "The platform does not enforce strict token validation.",
                    "Role": "Platform Security",
                    "Condition": "Lenient token validation rules."
                }
            ],
            "Potential Impact": "Potential data leaks and unauthorized data access.",
            "MITRE ATT&CK Keywords": [
                "Token Hijacking",
                "Credential Access",
                "Session Hijacking",
                "API Exploitation"
            ],
            "mitre_technique": {
                "name": "Use Alternate Authentication Material",
                "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.\n",
                "id": "attack-pattern--51a14c76-dd3b-440b-9c20-2bf91d25a814",
                "technique_id": "T1550"
            }
        },
        {
            "Threat Type": "Spoofing",
            "Scenario": "Attackers spoof IP addresses to bypass IP-based access control.",
            "Assumptions": [
                {
                    "Assumption": "The platform relies on IP-based access control.",
                    "Role": "Platform Security Designer",
                    "Condition": "Access control rules are based on IP addresses."
                },
                {
                    "Assumption": "IP spoofing techniques are available to attackers.",
                    "Role": "Attackers",
                    "Condition": "Attackers have knowledge of and tools for IP spoofing."
                }
            ],
            "Potential Impact": "Potential unauthorized access to restricted areas of the network.",
            "MITRE ATT&CK Keywords": [
                "IP Spoofing",
                "Network Bypass",
                "Access Control Evasion",
                "Session Hijacking"
            ],
            "mitre_technique": {
                "name": "Browser Session Hijacking",
                "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)",
                "id": "attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47",
                "technique_id": "T1185"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker modifies the content of user profiles to spread misinformation.",
            "Assumptions": [
                {
                    "Assumption": "Platform does not validate the integrity of profile data.",
                    "Role": "Platform Security",
                    "Condition": "Weak or no data integrity checks."
                },
                {
                    "Assumption": "Attackers can gain write access to profiles.",
                    "Role": "Attackers",
                    "Condition": "Vulnerabilities exist allowing write access."
                }
            ],
            "Potential Impact": "Potential spread of false information and loss of data integrity.",
            "MITRE ATT&CK Keywords": [
                "Data Manipulation",
                "Profile Hijacking",
                "Content Tampering",
                "Social Engineering"
            ],
            "mitre_technique": {
                "name": "Stored Data Manipulation",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "id": "attack-pattern--0bf78622-e8d2-41da-a857-731472d61a92",
                "technique_id": "T1492"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "Attacker modifies the backend server code to introduce vulnerabilities.",
            "Assumptions": [
                {
                    "Assumption": "Attackers can access the backend server code.",
                    "Role": "Attackers",
                    "Condition": "Insufficient protection of server code repositories."
                },
                {
                    "Assumption": "Code changes are not reviewed or validated properly.",
                    "Role": "Developer Team",
                    "Condition": "Weak code review practices."
                }
            ],
            "Potential Impact": "Potential introduction of backdoors and exploits.",
            "MITRE ATT&CK Keywords": [
                "Code Injection",
                "Supply Chain Attack",
                "Server Exploitation",
                "Backdoor Introduction"
            ],
            "mitre_technique": {
                "name": "Dynamic-link Library Injection",
                "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                "id": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945",
                "technique_id": "T1055.001"
            }
        },
        {
            "Threat Type": "Tampering",
            "Scenario": "An attacker intercepts and alters data in transit between users and the backend servers.",
            "Assumptions": [
                {
                    "Assumption": "Data transmission is not encrypted.",
                    "Role": "Network Security Team",
                    "Condition": "No encryption protocols in place."
                },
                {
                    "Assumption": "Attackers have access to the communication channels.",
                    "Role": "Attackers",
                    "Condition": "Access to network communication lines."
                }
            ],
            "Potential Impact": "Potential manipulation and corruption of data during transmission.",
            "MITRE ATT&CK Keywords": [
                "Man-in-the-Middle",
                "Data Interception",
                "Communication Manipulation",
                "SSL/TLS Bypass"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Users deny having sent objectionable messages or shared sensitive content.",
            "Assumptions": [
                {
                    "Assumption": "The platform lacks non-repudiation mechanisms.",
                    "Role": "Platform Security",
                    "Condition": "No digital signatures or logging mechanisms."
                },
                {
                    "Assumption": "Attackers exploit these weak/nonexistent repudiation mechanisms.",
                    "Role": "Attackers",
                    "Condition": "Awareness of NVD CVEs related to non-repudiation."
                }
            ],
            "Potential Impact": "Potential legal issues and trust reduction among users.",
            "MITRE ATT&CK Keywords": [
                "Log Tampering",
                "Non-Repudiation Failure",
                "Message Forgery",
                "Activity Denial"
            ],
            "mitre_technique": {
                "name": "Kernel Modules and Extensions",
                "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
                "id": "attack-pattern--6be14413-578e-46c1-8304-310762b3ecd5",
                "technique_id": "T1215"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "A third-party service denies actions or transactions performed via integration.",
            "Assumptions": [
                {
                    "Assumption": "The platform trusts third-party logs without verification.",
                    "Role": "Platform Security",
                    "Condition": "Reliance on third-party logs for audit trails."
                },
                {
                    "Assumption": "Third-party services have insufficient logging mechanisms.",
                    "Role": "Third-Party Developers",
                    "Condition": "Weak or absent logging capabilities."
                }
            ],
            "Potential Impact": "Potential disputes over responsibilities and transaction anomalies.",
            "MITRE ATT&CK Keywords": [
                "Third-Party Exploitation",
                "Integration Failure",
                "Audit Trail Tampering",
                "Transaction Denial"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Repudiation",
            "Scenario": "Administrators deny changes made to privacy settings or access controls.",
            "Assumptions": [
                {
                    "Assumption": "No auditing or change logging for administrative actions.",
                    "Role": "Platform Security",
                    "Condition": "Absence of administrative action logs."
                },
                {
                    "Assumption": "Administrators have high-level access without accountability.",
                    "Role": "Administrators",
                    "Condition": "No segregation of duties or logging for admin actions."
                }
            ],
            "Potential Impact": "Potential unchecked administrative abuses and data exposure.",
            "MITRE ATT&CK Keywords": [
                "Admin Abuse",
                "Change Log Tampering",
                "Privilege Misuse",
                "Access Control Manipulation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data leaked through exposed APIs.",
            "Assumptions": [
                {
                    "Assumption": "APIs do not enforce strict authentication and authorization.",
                    "Role": "API Security",
                    "Condition": "Weak or absent access controls on APIs."
                },
                {
                    "Assumption": "Sensitive data is accessible through unprotected API endpoints.",
                    "Role": "Developers",
                    "Condition": "Improper protection of data endpoints."
                }
            ],
            "Potential Impact": "Potential unauthorized access to users' sensitive information.",
            "MITRE ATT&CK Keywords": [
                "API Exploitation",
                "Data Exposure",
                "Sensitive Information Disclosure",
                "Endpoint Vulnerability"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "An attacker gains unauthorized access to backend databases containing user data.",
            "Assumptions": [
                {
                    "Assumption": "Backend databases are not properly secured.",
                    "Role": "Database Security",
                    "Condition": "Weak or no database security measures."
                },
                {
                    "Assumption": "Attackers can discover and exploit the database vulnerabilities.",
                    "Role": "Attackers",
                    "Condition": "Awareness of NVD CVEs related to database vulnerabilities."
                }
            ],
            "Potential Impact": "Potential exposure and theft of large amounts of sensitive user data.",
            "MITRE ATT&CK Keywords": [
                "Database Exploitation",
                "Data Breach",
                "Unauthorized Access",
                "Sensitive Data Theft"
            ],
            "mitre_technique": {
                "name": "Exploitation of Remote Services",
                "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
                "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
                "technique_id": "T1210"
            }
        },
        {
            "Threat Type": "Information Disclosure",
            "Scenario": "Sensitive user data intercepted during transmission due to lack of encryption.",
            "Assumptions": [
                {
                    "Assumption": "User data is transmitted in plain text.",
                    "Role": "Network Security",
                    "Condition": "Lack of encryption protocols such as TLS/SSL."
                },
                {
                    "Assumption": "Attackers can intercept the communication channels.",
                    "Role": "Attackers",
                    "Condition": "Access to network communication lines."
                }
            ],
            "Potential Impact": "Potential interception and exposure of sensitive user information.",
            "MITRE ATT&CK Keywords": [
                "Man-in-the-Middle",
                "Data Interception",
                "Unencrypted Communication",
                "Sensitive Information Exposure"
            ],
            "mitre_technique": {
                "name": "Install Root Certificate",
                "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
                "id": "attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
                "technique_id": "T1130"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "A DDoS attack overwhelms the backend servers, making the platform unavailable.",
            "Assumptions": [
                {
                    "Assumption": "Backend servers cannot handle sudden traffic spikes.",
                    "Role": "Platform Infrastructure Team",
                    "Condition": "Lack of mitigation strategies against traffic spikes."
                },
                {
                    "Assumption": "Attackers have access to botnets for launching the DDoS attack.",
                    "Role": "Attackers",
                    "Condition": "Control over a large number of compromised devices."
                }
            ],
            "Potential Impact": "Potential service interruption and downtime affecting all users.",
            "MITRE ATT&CK Keywords": [
                "DDoS",
                "Service Disruption",
                "Traffic Flood",
                "Backend Server Overload"
            ],
            "mitre_technique": {
                "name": "Direct Network Flood",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
                "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
                "technique_id": "T1498.001"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "An attacker exploits a vulnerability in the application's code to repeatedly crash the service.",
            "Assumptions": [
                {
                    "Assumption": "The application has exploitable vulnerabilities in its code.",
                    "Role": "Developers",
                    "Condition": "Awareness of NVD CVEs related to the application's technologies."
                },
                {
                    "Assumption": "Attacker can trigger the vulnerability repeatedly.",
                    "Role": "Attackers",
                    "Condition": "Ability to send crafted malicious requests."
                }
            ],
            "Potential Impact": "Potential repeated service disruptions and operational instability.",
            "MITRE ATT&CK Keywords": [
                "Exploit",
                "Service Crash",
                "Code Vulnerability",
                "Application Downtime"
            ],
            "mitre_technique": {
                "name": "Application or System Exploitation",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. ",
                "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
                "technique_id": "T1499.004"
            }
        },
        {
            "Threat Type": "Denial of Service",
            "Scenario": "Malicious third-party integrations send excessive API requests causing slowdowns or crashes.",
            "Assumptions": [
                {
                    "Assumption": "API rate limits are not properly enforced.",
                    "Role": "API Security",
                    "Condition": "Absence of proper rate-limiting measures."
                },
                {
                    "Assumption": "Third-party integrations have access to critical APIs.",
                    "Role": "Platform Integrations Team",
                    "Condition": "Allowed extensive API access rights."
                }
            ],
            "Potential Impact": "Potential service degradation and eventual downtime.",
            "MITRE ATT&CK Keywords": [
                "API Abuse",
                "Rate Limit Exceedance",
                "Service Slowdown",
                "Third-Party Integration Exploitation"
            ],
            "mitre_technique": {
                "name": "Unknown",
                "description": "No description available",
                "id": "attack-pattern--00000000-0000-0000-0000-000000000000",
                "technique_id": "N/A"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "An attacker exploits a vulnerability to gain administrative access to the system.",
            "Assumptions": [
                {
                    "Assumption": "The system contains exploitable privilege escalation vulnerabilities.",
                    "Role": "System Security",
                    "Condition": "Awareness of NVD CVEs related to privilege escalation."
                },
                {
                    "Assumption": "Attackers can identify and exploit these vulnerabilities.",
                    "Role": "Attackers",
                    "Condition": "Technical expertise and tools for exploiting vulnerabilities."
                }
            ],
            "Potential Impact": "Potential unauthorized administrative control and access to all user data.",
            "MITRE ATT&CK Keywords": [
                "Privilege Escalation",
                "Admin Access",
                "Exploitation",
                "Full System Control"
            ],
            "mitre_technique": {
                "name": "Exploit Public-Facing Application",
                "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
                "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
                "technique_id": "T1190"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "A malicious user exploits a bug in the platform to modify other users' data.",
            "Assumptions": [
                {
                    "Assumption": "There is a bug in the application that allows privilege escalation.",
                    "Role": "Developers",
                    "Condition": "Unpatched vulnerabilities in application code."
                },
                {
                    "Assumption": "Attackers or malicious users are aware of this bug.",
                    "Role": "Attackers",
                    "Condition": "Knowledge of and ability to exploit the bug."
                }
            ],
            "Potential Impact": "Potential unauthorized data modification and loss of data integrity.",
            "MITRE ATT&CK Keywords": [
                "Bug Exploitation",
                "Privileged Access",
                "Unauthorized Data Modification",
                "Integrity Compromise"
            ],
            "mitre_technique": {
                "name": "Hybrid Identity",
                "description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.  \n\nMany organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Azure AD includes three options for synchronizing identities between Active Directory and Azure AD(Citation: Azure AD Hybrid Identity):\n\n* Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Azure AD, allowing authentication to Azure AD to take place entirely in the cloud \n* Pass Through Authentication (PTA), in which Azure AD authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active Directory \n* Active Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Azure AD \n\nAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users\u2019 identity and privileges. \n\nBy modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the `AzureADConnectAuthenticationAgentService` process that authorizes all attempts to authenticate to Azure AD, as well as records user credentials.(Citation: Azure AD Connect for Read Teamers)(Citation: AADInternals Azure AD On-Prem to Cloud) In environments using AD FS, an adversary may edit the `Microsoft.IdentityServer.Servicehost` configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.(Citation: MagicWeb)\n\nIn some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Azure AD tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Azure AD environment as any user.(Citation: Mandiant Azure AD Backdoors)",
                "id": "attack-pattern--54ca26f3-c172-4231-93e5-ccebcac2161f",
                "technique_id": "T1556.007"
            }
        },
        {
            "Threat Type": "Elevation of Privilege",
            "Scenario": "Third-party applications are exploited to execute code with elevated privileges on the platform.",
            "Assumptions": [
                {
                    "Assumption": "Third-party applications have sufficient privileges to perform critical actions.",
                    "Role": "Platform Integrations",
                    "Condition": "Integration permissions are overly permissive."
                },
                {
                    "Assumption": "Third-party applications contain vulnerabilities that can be exploited.",
                    "Role": "Third-Party Developers",
                    "Condition": "Awareness of NVD CVEs related to third-party applications."
                }
            ],
            "Potential Impact": "Potential full control over the platform and unauthorized actions.",
            "MITRE ATT&CK Keywords": [
                "Third-Party Abuse",
                "Code Execution",
                "Privilege Misuse",
                "Platform Manipulation"
            ],
            "mitre_technique": {
                "name": "Software Deployment Tools",
                "description": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  \n\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nSaaS-based configuration management services may allow for broad [Cloud Administration Command](https://attack.mitre.org/techniques/T1651) on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Azure AD.(Citation: SpecterOps Lateral Movement from Azure to On-Prem AD 2020) Such services may also utilize [Web Protocols](https://attack.mitre.org/techniques/T1071/001) to communicate back to adversary owned infrastructure.(Citation: Mitiga Security Advisory: SSM Agent as Remote Access Trojan)\n\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
                "id": "attack-pattern--92a78814-b191-47ca-909c-1ccfe3777414",
                "technique_id": "T1072"
            }
        }
    ]
}
]